

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Tue Oct 04 14:23:33 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	idataBANK3,global,class=CODE,delta=2
     8                           	psect	strings,global,class=STRING,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	clrtext,global,class=CODE,delta=2
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	intentry,global,class=CODE,delta=2
    45                           	dabs	1,0x7E,2
    46  0000                     	;# 
    47  0001                     	;# 
    48  0002                     	;# 
    49  0003                     	;# 
    50  0004                     	;# 
    51  0005                     	;# 
    52  0006                     	;# 
    53  0007                     	;# 
    54  0008                     	;# 
    55  0009                     	;# 
    56  000A                     	;# 
    57  000B                     	;# 
    58  000C                     	;# 
    59  000D                     	;# 
    60  000E                     	;# 
    61  000E                     	;# 
    62  000F                     	;# 
    63  0010                     	;# 
    64  0011                     	;# 
    65  0012                     	;# 
    66  0013                     	;# 
    67  0014                     	;# 
    68  0015                     	;# 
    69  0015                     	;# 
    70  0016                     	;# 
    71  0017                     	;# 
    72  0018                     	;# 
    73  0019                     	;# 
    74  001A                     	;# 
    75  001B                     	;# 
    76  001B                     	;# 
    77  001C                     	;# 
    78  001D                     	;# 
    79  001E                     	;# 
    80  001F                     	;# 
    81  0081                     	;# 
    82  0085                     	;# 
    83  0086                     	;# 
    84  0087                     	;# 
    85  0088                     	;# 
    86  0089                     	;# 
    87  008C                     	;# 
    88  008D                     	;# 
    89  008E                     	;# 
    90  0091                     	;# 
    91  0092                     	;# 
    92  0093                     	;# 
    93  0094                     	;# 
    94  0098                     	;# 
    95  0099                     	;# 
    96  009C                     	;# 
    97  009D                     	;# 
    98  009E                     	;# 
    99  009F                     	;# 
   100  010C                     	;# 
   101  010D                     	;# 
   102  010E                     	;# 
   103  010F                     	;# 
   104  018C                     	;# 
   105  018D                     	;# 
   106  0000                     	;# 
   107  0001                     	;# 
   108  0002                     	;# 
   109  0003                     	;# 
   110  0004                     	;# 
   111  0005                     	;# 
   112  0006                     	;# 
   113  0007                     	;# 
   114  0008                     	;# 
   115  0009                     	;# 
   116  000A                     	;# 
   117  000B                     	;# 
   118  000C                     	;# 
   119  000D                     	;# 
   120  000E                     	;# 
   121  000E                     	;# 
   122  000F                     	;# 
   123  0010                     	;# 
   124  0011                     	;# 
   125  0012                     	;# 
   126  0013                     	;# 
   127  0014                     	;# 
   128  0015                     	;# 
   129  0015                     	;# 
   130  0016                     	;# 
   131  0017                     	;# 
   132  0018                     	;# 
   133  0019                     	;# 
   134  001A                     	;# 
   135  001B                     	;# 
   136  001B                     	;# 
   137  001C                     	;# 
   138  001D                     	;# 
   139  001E                     	;# 
   140  001F                     	;# 
   141  0081                     	;# 
   142  0085                     	;# 
   143  0086                     	;# 
   144  0087                     	;# 
   145  0088                     	;# 
   146  0089                     	;# 
   147  008C                     	;# 
   148  008D                     	;# 
   149  008E                     	;# 
   150  0091                     	;# 
   151  0092                     	;# 
   152  0093                     	;# 
   153  0094                     	;# 
   154  0098                     	;# 
   155  0099                     	;# 
   156  009C                     	;# 
   157  009D                     	;# 
   158  009E                     	;# 
   159  009F                     	;# 
   160  010C                     	;# 
   161  010D                     	;# 
   162  010E                     	;# 
   163  010F                     	;# 
   164  018C                     	;# 
   165  018D                     	;# 
   166  0000                     	;# 
   167  0001                     	;# 
   168  0002                     	;# 
   169  0003                     	;# 
   170  0004                     	;# 
   171  0005                     	;# 
   172  0006                     	;# 
   173  0007                     	;# 
   174  0008                     	;# 
   175  0009                     	;# 
   176  000A                     	;# 
   177  000B                     	;# 
   178  000C                     	;# 
   179  000D                     	;# 
   180  000E                     	;# 
   181  000E                     	;# 
   182  000F                     	;# 
   183  0010                     	;# 
   184  0011                     	;# 
   185  0012                     	;# 
   186  0013                     	;# 
   187  0014                     	;# 
   188  0015                     	;# 
   189  0015                     	;# 
   190  0016                     	;# 
   191  0017                     	;# 
   192  0018                     	;# 
   193  0019                     	;# 
   194  001A                     	;# 
   195  001B                     	;# 
   196  001B                     	;# 
   197  001C                     	;# 
   198  001D                     	;# 
   199  001E                     	;# 
   200  001F                     	;# 
   201  0081                     	;# 
   202  0085                     	;# 
   203  0086                     	;# 
   204  0087                     	;# 
   205  0088                     	;# 
   206  0089                     	;# 
   207  008C                     	;# 
   208  008D                     	;# 
   209  008E                     	;# 
   210  0091                     	;# 
   211  0092                     	;# 
   212  0093                     	;# 
   213  0094                     	;# 
   214  0098                     	;# 
   215  0099                     	;# 
   216  009C                     	;# 
   217  009D                     	;# 
   218  009E                     	;# 
   219  009F                     	;# 
   220  010C                     	;# 
   221  010D                     	;# 
   222  010E                     	;# 
   223  010F                     	;# 
   224  018C                     	;# 
   225  018D                     	;# 
   226  0000                     	;# 
   227  0001                     	;# 
   228  0002                     	;# 
   229  0003                     	;# 
   230  0004                     	;# 
   231  0005                     	;# 
   232  0006                     	;# 
   233  0007                     	;# 
   234  0008                     	;# 
   235  0009                     	;# 
   236  000A                     	;# 
   237  000B                     	;# 
   238  000C                     	;# 
   239  000D                     	;# 
   240  000E                     	;# 
   241  000E                     	;# 
   242  000F                     	;# 
   243  0010                     	;# 
   244  0011                     	;# 
   245  0012                     	;# 
   246  0013                     	;# 
   247  0014                     	;# 
   248  0015                     	;# 
   249  0015                     	;# 
   250  0016                     	;# 
   251  0017                     	;# 
   252  0018                     	;# 
   253  0019                     	;# 
   254  001A                     	;# 
   255  001B                     	;# 
   256  001B                     	;# 
   257  001C                     	;# 
   258  001D                     	;# 
   259  001E                     	;# 
   260  001F                     	;# 
   261  0081                     	;# 
   262  0085                     	;# 
   263  0086                     	;# 
   264  0087                     	;# 
   265  0088                     	;# 
   266  0089                     	;# 
   267  008C                     	;# 
   268  008D                     	;# 
   269  008E                     	;# 
   270  0091                     	;# 
   271  0092                     	;# 
   272  0093                     	;# 
   273  0094                     	;# 
   274  0098                     	;# 
   275  0099                     	;# 
   276  009C                     	;# 
   277  009D                     	;# 
   278  009E                     	;# 
   279  009F                     	;# 
   280  010C                     	;# 
   281  010D                     	;# 
   282  010E                     	;# 
   283  010F                     	;# 
   284  018C                     	;# 
   285  018D                     	;# 
   286  0000                     	;# 
   287  0001                     	;# 
   288  0002                     	;# 
   289  0003                     	;# 
   290  0004                     	;# 
   291  0005                     	;# 
   292  0006                     	;# 
   293  0007                     	;# 
   294  0008                     	;# 
   295  0009                     	;# 
   296  000A                     	;# 
   297  000B                     	;# 
   298  000C                     	;# 
   299  000D                     	;# 
   300  000E                     	;# 
   301  000E                     	;# 
   302  000F                     	;# 
   303  0010                     	;# 
   304  0011                     	;# 
   305  0012                     	;# 
   306  0013                     	;# 
   307  0014                     	;# 
   308  0015                     	;# 
   309  0015                     	;# 
   310  0016                     	;# 
   311  0017                     	;# 
   312  0018                     	;# 
   313  0019                     	;# 
   314  001A                     	;# 
   315  001B                     	;# 
   316  001B                     	;# 
   317  001C                     	;# 
   318  001D                     	;# 
   319  001E                     	;# 
   320  001F                     	;# 
   321  0081                     	;# 
   322  0085                     	;# 
   323  0086                     	;# 
   324  0087                     	;# 
   325  0088                     	;# 
   326  0089                     	;# 
   327  008C                     	;# 
   328  008D                     	;# 
   329  008E                     	;# 
   330  0091                     	;# 
   331  0092                     	;# 
   332  0093                     	;# 
   333  0094                     	;# 
   334  0098                     	;# 
   335  0099                     	;# 
   336  009C                     	;# 
   337  009D                     	;# 
   338  009E                     	;# 
   339  009F                     	;# 
   340  010C                     	;# 
   341  010D                     	;# 
   342  010E                     	;# 
   343  010F                     	;# 
   344  018C                     	;# 
   345  018D                     	;# 
   346  0000                     	;# 
   347  0001                     	;# 
   348  0002                     	;# 
   349  0003                     	;# 
   350  0004                     	;# 
   351  0005                     	;# 
   352  0006                     	;# 
   353  0007                     	;# 
   354  0008                     	;# 
   355  0009                     	;# 
   356  000A                     	;# 
   357  000B                     	;# 
   358  000C                     	;# 
   359  000D                     	;# 
   360  000E                     	;# 
   361  000E                     	;# 
   362  000F                     	;# 
   363  0010                     	;# 
   364  0011                     	;# 
   365  0012                     	;# 
   366  0013                     	;# 
   367  0014                     	;# 
   368  0015                     	;# 
   369  0015                     	;# 
   370  0016                     	;# 
   371  0017                     	;# 
   372  0018                     	;# 
   373  0019                     	;# 
   374  001A                     	;# 
   375  001B                     	;# 
   376  001B                     	;# 
   377  001C                     	;# 
   378  001D                     	;# 
   379  001E                     	;# 
   380  001F                     	;# 
   381  0081                     	;# 
   382  0085                     	;# 
   383  0086                     	;# 
   384  0087                     	;# 
   385  0088                     	;# 
   386  0089                     	;# 
   387  008C                     	;# 
   388  008D                     	;# 
   389  008E                     	;# 
   390  0091                     	;# 
   391  0092                     	;# 
   392  0093                     	;# 
   393  0094                     	;# 
   394  0098                     	;# 
   395  0099                     	;# 
   396  009C                     	;# 
   397  009D                     	;# 
   398  009E                     	;# 
   399  009F                     	;# 
   400  010C                     	;# 
   401  010D                     	;# 
   402  010E                     	;# 
   403  010F                     	;# 
   404  018C                     	;# 
   405  018D                     	;# 
   406                           
   407                           	psect	idataCOMMON
   408  07FA                     __pidataCOMMON:	
   409                           
   410                           ;initializer for _orientation
   411  07FA  3403               	retlw	3
   412                           
   413                           	psect	idataBANK0
   414  0F8F                     __pidataBANK0:	
   415                           
   416                           ;initializer for _mazeGrid
   417  0F8F  340C               	retlw	12
   418  0F90  3407               	retlw	7
   419  0F91  340E               	retlw	14
   420  0F92  340D               	retlw	13
   421  0F93  3406               	retlw	6
   422  0F94  3409               	retlw	9
   423  0F95  3405               	retlw	5
   424  0F96  3400               	retlw	0
   425  0F97  3405               	retlw	5
   426  0F98  3402               	retlw	2
   427  0F99  340C               	retlw	12
   428  0F9A  3406               	retlw	6
   429  0F9B  340A               	retlw	10
   430  0F9C  340E               	retlw	14
   431  0F9D  340A               	retlw	10
   432  0F9E  340B               	retlw	11
   433  0F9F  3409               	retlw	9
   434  0FA0  3401               	retlw	1
   435  0FA1  3401               	retlw	1
   436  0FA2  3403               	retlw	3
   437                           
   438                           ;initializer for _pathCountShortest
   439  0FA3  3414               	retlw	20
   440                           
   441                           ;initializer for _x
   442  0FA4  3401               	retlw	1
   443                           
   444                           	psect	idataBANK1
   445  0F65                     __pidataBANK1:	
   446                           
   447                           ;initializer for _mazeGridDefault
   448  0F65  340C               	retlw	12
   449  0F66  3407               	retlw	7
   450  0F67  340E               	retlw	14
   451  0F68  340D               	retlw	13
   452  0F69  3406               	retlw	6
   453  0F6A  3409               	retlw	9
   454  0F6B  3405               	retlw	5
   455  0F6C  3400               	retlw	0
   456  0F6D  3405               	retlw	5
   457  0F6E  3402               	retlw	2
   458  0F6F  340C               	retlw	12
   459  0F70  3406               	retlw	6
   460  0F71  340A               	retlw	10
   461  0F72  340E               	retlw	14
   462  0F73  340A               	retlw	10
   463  0F74  340B               	retlw	11
   464  0F75  3409               	retlw	9
   465  0F76  3401               	retlw	1
   466  0F77  3401               	retlw	1
   467  0F78  3403               	retlw	3
   468                           
   469                           	psect	idataBANK3
   470  072B                     __pidataBANK3:	
   471                           
   472                           ;initializer for _gridWalls
   473  072B  3400               	retlw	0
   474  072C  3400               	retlw	0
   475  072D  3400               	retlw	0
   476  072E  3400               	retlw	0
   477  072F  3400               	retlw	0
   478  0730  3400               	retlw	0
   479  0731  3400               	retlw	0
   480  0732  3400               	retlw	0
   481  0733  3401               	retlw	1
   482  0734  3401               	retlw	1
   483  0735  3401               	retlw	1
   484  0736  3401               	retlw	1
   485  0737  3401               	retlw	1
   486  0738  3401               	retlw	1
   487  0739  3401               	retlw	1
   488  073A  3401               	retlw	1
   489  073B  3400               	retlw	0
   490  073C  3400               	retlw	0
   491  073D  3400               	retlw	0
   492  073E  3400               	retlw	0
   493  073F  3401               	retlw	1
   494  0740  3401               	retlw	1
   495  0741  3401               	retlw	1
   496  0742  3401               	retlw	1
   497  0743  3400               	retlw	0
   498  0744  3400               	retlw	0
   499  0745  3400               	retlw	0
   500  0746  3400               	retlw	0
   501  0747  3401               	retlw	1
   502  0748  3401               	retlw	1
   503  0749  3401               	retlw	1
   504  074A  3401               	retlw	1
   505  074B  3400               	retlw	0
   506  074C  3400               	retlw	0
   507  074D  3401               	retlw	1
   508  074E  3401               	retlw	1
   509  074F  3400               	retlw	0
   510  0750  3400               	retlw	0
   511  0751  3401               	retlw	1
   512  0752  3401               	retlw	1
   513  0753  3400               	retlw	0
   514  0754  3400               	retlw	0
   515  0755  3401               	retlw	1
   516  0756  3401               	retlw	1
   517  0757  3400               	retlw	0
   518  0758  3400               	retlw	0
   519  0759  3401               	retlw	1
   520  075A  3401               	retlw	1
   521  075B  3400               	retlw	0
   522  075C  3401               	retlw	1
   523  075D  3400               	retlw	0
   524  075E  3401               	retlw	1
   525  075F  3400               	retlw	0
   526  0760  3401               	retlw	1
   527  0761  3400               	retlw	0
   528  0762  3401               	retlw	1
   529  0763  3400               	retlw	0
   530  0764  3401               	retlw	1
   531  0765  3400               	retlw	0
   532  0766  3401               	retlw	1
   533  0767  3400               	retlw	0
   534  0768  3401               	retlw	1
   535  0769  3400               	retlw	0
   536  076A  3401               	retlw	1
   537  001F                     _ADCON0	set	31
   538  0005                     _PORTA	set	5
   539  0006                     _PORTB	set	6
   540  0007                     _PORTC	set	7
   541  0008                     _PORTD	set	8
   542  0009                     _PORTE	set	9
   543  001A                     _RCREG	set	26
   544  0018                     _RCSTA	set	24
   545  0013                     _SSPBUF	set	19
   546  0014                     _SSPCON	set	20
   547  0001                     _TMR0	set	1
   548  0019                     _TXREG	set	25
   549  001E                     _ADRESH	set	30
   550  005F                     _GIE	set	95
   551  00FA                     _GO	set	250
   552  005E                     _PEIE	set	94
   553  0030                     _RB0	set	48
   554  0031                     _RB1	set	49
   555  0034                     _RB4	set	52
   556  0065                     _RCIF	set	101
   557  0048                     _RE0	set	72
   558  0049                     _RE1	set	73
   559  004A                     _RE2	set	74
   560  0063                     _SSPIF	set	99
   561  005D                     _TMR0IE	set	93
   562  005A                     _TMR0IF	set	90
   563  009F                     _ADCON1	set	159
   564  009E                     _ADRESL	set	158
   565  0081                     _OPTION_REG	set	129
   566  0099                     _SPBRG	set	153
   567  0094                     _SSPSTAT	set	148
   568  0085                     _TRISA	set	133
   569  0086                     _TRISB	set	134
   570  0087                     _TRISC	set	135
   571  0088                     _TRISD	set	136
   572  0089                     _TRISE	set	137
   573  0098                     _TXSTA	set	152
   574  04C1                     _TRMT	set	1217
   575                           
   576                           	psect	strings
   577  0800                     __pstrings:	
   578  0800                     stringtab:	
   579  0800                     __stringtab:	
   580  0800                     stringcode:	
   581                           ;	String table - string pointers are 1 byte each
   582                           
   583  0800                     stringdir:	
   584  0800  3008               	movlw	high stringdir
   585  0801  008A               	movwf	10
   586  0802  0804               	movf	4,w
   587  0803  0A84               	incf	4,f
   588  0804  0782               	addwf	2,f
   589  0805                     __stringbase:	
   590  0805  3400               	retlw	0
   591  0806                     __end_of__stringtab:	
   592  0806                     STR_1:	
   593  0806  3457               	retlw	87	;'W'
   594  0807  346F               	retlw	111	;'o'
   595  0808  3472               	retlw	114	;'r'
   596  0809  346B               	retlw	107	;'k'
   597  080A  3469               	retlw	105	;'i'
   598  080B  346E               	retlw	110	;'n'
   599  080C  3467               	retlw	103	;'g'
   600  080D  342E               	retlw	46	;'.'
   601  080E  342E               	retlw	46	;'.'
   602  080F  342E               	retlw	46	;'.'
   603  0810  3400               	retlw	0
   604                           
   605                           ; #config settings
   606  0000                     
   607                           	psect	cinit
   608  0015                     start_initialization:	
   609  0015                     __initialization:	
   610                           
   611                           ; Initialize objects allocated to BANK3
   612  0015  1783               	bsf	3,7	;select IRP bank2
   613  0016  30D0               	movlw	low (__pdataBANK3+64)
   614  0017  00FD               	movwf	btemp+-1
   615  0018  3007               	movlw	high __pidataBANK3
   616  0019  00FE               	movwf	btemp
   617  001A  302B               	movlw	low __pidataBANK3
   618  001B  00FF               	movwf	btemp+1
   619  001C  3090               	movlw	low __pdataBANK3
   620  001D  0084               	movwf	4
   621  001E  120A  158A  271E  120A  118A  	fcall	init_ram0
   622                           
   623                           ; Initialize objects allocated to BANK1
   624  0023  1383               	bcf	3,7	;select IRP bank0
   625  0024  30D4               	movlw	low (__pdataBANK1+20)
   626  0025  00FD               	movwf	btemp+-1
   627  0026  300F               	movlw	high __pidataBANK1
   628  0027  00FE               	movwf	btemp
   629  0028  3065               	movlw	low __pidataBANK1
   630  0029  00FF               	movwf	btemp+1
   631  002A  30C0               	movlw	low __pdataBANK1
   632  002B  0084               	movwf	4
   633  002C  120A  158A  271E  120A  118A  	fcall	init_ram0
   634                           
   635                           ; Initialize objects allocated to BANK0
   636  0031  3057               	movlw	low (__pdataBANK0+22)
   637  0032  00FD               	movwf	btemp+-1
   638  0033  300F               	movlw	high __pidataBANK0
   639  0034  00FE               	movwf	btemp
   640  0035  308F               	movlw	low __pidataBANK0
   641  0036  00FF               	movwf	btemp+1
   642  0037  3041               	movlw	low __pdataBANK0
   643  0038  0084               	movwf	4
   644  0039  120A  158A  271E  120A  118A  	fcall	init_ram0
   645                           
   646                           ; Initialize objects allocated to COMMON
   647  003E  120A  118A  27FA  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   648  0043  00F9               	movwf	__pdataCOMMON& (0+127)
   649                           
   650                           ; Clear objects allocated to BANK3
   651  0044  1783               	bsf	3,7	;select IRP bank2
   652  0045  30D0               	movlw	low __pbssBANK3
   653  0046  0084               	movwf	4
   654  0047  30F0               	movlw	low (__pbssBANK3+32)
   655  0048  120A  158A  26D5  120A  118A  	fcall	clear_ram0
   656                           
   657                           ; Clear objects allocated to BANK1
   658  004D  1383               	bcf	3,7	;select IRP bank0
   659  004E  30A0               	movlw	low __pbssBANK1
   660  004F  0084               	movwf	4
   661  0050  30C0               	movlw	low (__pbssBANK1+32)
   662  0051  120A  158A  26D5  120A  118A  	fcall	clear_ram0
   663                           
   664                           ; Clear objects allocated to BANK0
   665  0056  3020               	movlw	low __pbssBANK0
   666  0057  0084               	movwf	4
   667  0058  3041               	movlw	low (__pbssBANK0+33)
   668  0059  120A  158A  26D5   	fcall	clear_ram0
   669                           
   670                           ; Clear objects allocated to COMMON
   671  005C  01F6               	clrf	__pbssCOMMON& (0+127)
   672  005D  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   673  005E  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   674                           
   675                           ; Clear objects allocated to BITCOMMON
   676  005F  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   677  0060                     end_of_initialization:	
   678                           ;End of C runtime variable initialization code
   679                           
   680  0060                     __end_of__initialization:	
   681  0060  0183               	clrf	3
   682  0061  120A  118A  2D9A   	ljmp	_main	;jump to C main() function
   683                           
   684                           	psect	bitbssCOMMON
   685  0380                     __pbitbssCOMMON:	
   686  0380                     _IR_Wall:	
   687  0380                     	ds	1
   688  0381                     _down:	
   689  0381                     	ds	1
   690  0382                     _left:	
   691  0382                     	ds	1
   692  0383                     _reset_flag:	
   693  0383                     	ds	1
   694  0384                     _right:	
   695  0384                     	ds	1
   696  0385                     _up:	
   697  0385                     	ds	1
   698                           
   699                           	psect	bssCOMMON
   700  0076                     __pbssCOMMON:	
   701  0076                     _adcRAW:	
   702  0076                     	ds	2
   703  0078                     _highByte:	
   704  0078                     	ds	1
   705                           
   706                           	psect	dataCOMMON
   707  0079                     __pdataCOMMON:	
   708  0079                     _orientation:	
   709  0079                     	ds	1
   710                           
   711                           	psect	bssBANK0
   712  0020                     __pbssBANK0:	
   713  0020                     _VelocityLeft:	
   714  0020                     	ds	2
   715  0022                     _VelocityRight:	
   716  0022                     	ds	2
   717  0024                     _angle:	
   718  0024                     	ds	2
   719  0026                     _distance:	
   720  0026                     	ds	2
   721  0028                     _time_count:	
   722  0028                     	ds	2
   723  002A                     _LeftSpeedH:	
   724  002A                     	ds	1
   725  002B                     _LeftSpeedL:	
   726  002B                     	ds	1
   727  002C                     _PB7Counter:	
   728  002C                     	ds	1
   729  002D                     _PB8Counter:	
   730  002D                     	ds	1
   731  002E                     _RightSpeedH:	
   732  002E                     	ds	1
   733  002F                     _RightSpeedL:	
   734  002F                     	ds	1
   735  0030                     _c:	
   736  0030                     	ds	1
   737  0031                     _intersection_orientation:	
   738  0031                     	ds	1
   739  0032                     _lowByte:	
   740  0032                     	ds	1
   741  0033                     _orientation_path:	
   742  0033                     	ds	1
   743  0034                     _pathCount:	
   744  0034                     	ds	1
   745  0035                     _r:	
   746  0035                     	ds	1
   747  0036                     _radH:	
   748  0036                     	ds	1
   749  0037                     _radL:	
   750  0037                     	ds	1
   751  0038                     _speedH:	
   752  0038                     	ds	1
   753  0039                     _speedL:	
   754  0039                     	ds	1
   755  003A                     _x_int:	
   756  003A                     	ds	1
   757  003B                     _x_path:	
   758  003B                     	ds	1
   759  003C                     _x_target:	
   760  003C                     	ds	1
   761  003D                     _y:	
   762  003D                     	ds	1
   763  003E                     _y_int:	
   764  003E                     	ds	1
   765  003F                     _y_path:	
   766  003F                     	ds	1
   767  0040                     _y_target:	
   768  0040                     	ds	1
   769                           
   770                           	psect	dataBANK0
   771  0041                     __pdataBANK0:	
   772  0041                     _mazeGrid:	
   773  0041                     	ds	20
   774  0055                     _pathCountShortest:	
   775  0055                     	ds	1
   776  0056                     _x:	
   777  0056                     	ds	1
   778                           
   779                           	psect	bssBANK1
   780  00A0                     __pbssBANK1:	
   781  00A0                     _path:	
   782  00A0                     	ds	32
   783                           
   784                           	psect	dataBANK1
   785  00C0                     __pdataBANK1:	
   786  00C0                     _mazeGridDefault:	
   787  00C0                     	ds	20
   788                           
   789                           	psect	bssBANK3
   790  01D0                     __pbssBANK3:	
   791  01D0                     _pathShortest:	
   792  01D0                     	ds	32
   793                           
   794                           	psect	dataBANK3
   795  0190                     __pdataBANK3:	
   796  0190                     _gridWalls:	
   797  0190                     	ds	64
   798                           
   799                           	psect	inittext
   800  0F1A                     init_fetch0:	
   801                           ;	Called with low address in FSR and high address in W
   802                           
   803  0F1A  087E               	movf	126,w
   804  0F1B  008A               	movwf	10
   805  0F1C  087F               	movf	127,w
   806  0F1D  0082               	movwf	2
   807  0F1E                     init_ram0:	
   808                           ;Called with:
   809                           ;	high address of idata address in btemp 
   810                           ;	low address of idata address in btemp+1 
   811                           ;	low address of data in FSR
   812                           ;	high address + 1 of data in btemp-1
   813                           
   814  0F1E  271A  120A  158A   	fcall	init_fetch0
   815  0F21  0080               	movwf	0
   816  0F22  0A84               	incf	4,f
   817  0F23  0804               	movf	4,w
   818  0F24  067D               	xorwf	125,w
   819  0F25  1903               	btfsc	3,2
   820  0F26  3400               	retlw	0
   821  0F27  0AFF               	incf	127,f
   822  0F28  1903               	btfsc	3,2
   823  0F29  0AFE               	incf	126,f
   824  0F2A  2F1E               	goto	init_ram0
   825                           
   826                           	psect	clrtext
   827  0ED5                     clear_ram0:	
   828                           ;	Called with FSR containing the base address, and
   829                           ;	W with the last address+1
   830                           
   831  0ED5  0064               	clrwdt	;clear the watchdog before getting into this loop
   832  0ED6                     clrloop0:	
   833  0ED6  0180               	clrf	0	;clear RAM location pointed to by FSR
   834  0ED7  0A84               	incf	4,f	;increment pointer
   835  0ED8  0604               	xorwf	4,w	;XOR with final address
   836  0ED9  1903               	btfsc	3,2	;have we reached the end yet?
   837  0EDA  3400               	retlw	0	;all done for this memory range, return
   838  0EDB  0604               	xorwf	4,w	;XOR again to restore value
   839  0EDC  2ED6               	goto	clrloop0	;do the next byte
   840                           
   841                           	psect	cstackCOMMON
   842  0071                     __pcstackCOMMON:	
   843  0071                     ?_lcdSetCursor:	
   844  0071                     ?_lcdWriteString:	
   845                           ; 1 bytes @ 0x0
   846                           
   847  0071                     ?_ser_init:	
   848                           ; 1 bytes @ 0x0
   849                           
   850  0071                     ?_setupSPI:	
   851                           ; 1 bytes @ 0x0
   852                           
   853  0071                     ?_setupLCD:	
   854                           ; 1 bytes @ 0x0
   855                           
   856  0071                     ?_setupADC:	
   857                           ; 1 bytes @ 0x0
   858                           
   859  0071                     ?_spi_transfer:	
   860                           ; 1 bytes @ 0x0
   861                           
   862  0071                     ?_ser_putch:	
   863                           ; 1 bytes @ 0x0
   864                           
   865  0071                     ?_Drive1m:	
   866                           ; 1 bytes @ 0x0
   867                           
   868  0071                     ?_Turn90:	
   869                           ; 1 bytes @ 0x0
   870                           
   871  0071                     ?_TravelPath:	
   872                           ; 1 bytes @ 0x0
   873                           
   874  0071                     ?_isr:	
   875                           ; 1 bytes @ 0x0
   876                           
   877  0071                     ??_isr:	
   878                           ; 1 bytes @ 0x0
   879                           
   880  0071                     ?_main:	
   881                           ; 1 bytes @ 0x0
   882                           
   883  0071                     ?_lcdWriteControl:	
   884                           ; 1 bytes @ 0x0
   885                           
   886  0071                     ?_lcdWriteData:	
   887                           ; 1 bytes @ 0x0
   888                           
   889  0071                     ?_ser_getch:	
   890                           ; 1 bytes @ 0x0
   891                           
   892                           
   893                           ; 1 bytes @ 0x0
   894  0071                     	ds	5
   895                           
   896                           	psect	cstackBANK0
   897  0057                     __pcstackBANK0:	
   898  0057                     ??_ser_init:	
   899  0057                     ??_setupSPI:	
   900                           ; 1 bytes @ 0x0
   901                           
   902  0057                     ??_setupADC:	
   903                           ; 1 bytes @ 0x0
   904                           
   905  0057                     ??_spi_transfer:	
   906                           ; 1 bytes @ 0x0
   907                           
   908  0057                     ??_ser_putch:	
   909                           ; 1 bytes @ 0x0
   910                           
   911  0057                     ??_lcdWriteControl:	
   912                           ; 1 bytes @ 0x0
   913                           
   914  0057                     ??_lcdWriteData:	
   915                           ; 1 bytes @ 0x0
   916                           
   917  0057                     ??_ser_getch:	
   918                           ; 1 bytes @ 0x0
   919                           
   920  0057                     ?___bmul:	
   921                           ; 1 bytes @ 0x0
   922                           
   923  0057                     ser_putch@c:	
   924                           ; 1 bytes @ 0x0
   925                           
   926  0057                     ___bmul@multiplicand:	
   927                           ; 1 bytes @ 0x0
   928                           
   929                           
   930                           ; 1 bytes @ 0x0
   931  0057                     	ds	1
   932  0058                     ?_DriveDirect:	
   933  0058                     ?_Drive:	
   934                           ; 1 bytes @ 0x1
   935                           
   936  0058                     ??___bmul:	
   937                           ; 1 bytes @ 0x1
   938                           
   939  0058                     ser_getch@rxbyte:	
   940                           ; 1 bytes @ 0x1
   941                           
   942  0058                     Drive@speedL:	
   943                           ; 1 bytes @ 0x1
   944                           
   945  0058                     spi_transfer@temp:	
   946                           ; 1 bytes @ 0x1
   947                           
   948  0058                     DriveDirect@VelocityRight:	
   949                           ; 1 bytes @ 0x1
   950                           
   951                           
   952                           ; 2 bytes @ 0x1
   953  0058                     	ds	1
   954  0059                     ?_getSensorData:	
   955  0059                     lcdWriteControl@databyte:	
   956                           ; 2 bytes @ 0x2
   957                           
   958  0059                     lcdWriteData@databyte:	
   959                           ; 1 bytes @ 0x2
   960                           
   961  0059                     Drive@radH:	
   962                           ; 1 bytes @ 0x2
   963                           
   964  0059                     getSensorData@bytes:	
   965                           ; 1 bytes @ 0x2
   966                           
   967  0059                     spi_transfer@data:	
   968                           ; 1 bytes @ 0x2
   969                           
   970  0059                     ___bmul@product:	
   971                           ; 1 bytes @ 0x2
   972                           
   973                           
   974                           ; 1 bytes @ 0x2
   975  0059                     	ds	1
   976  005A                     ??_lcdSetCursor:	
   977  005A                     ??_lcdWriteString:	
   978                           ; 1 bytes @ 0x3
   979                           
   980  005A                     ??_setupLCD:	
   981                           ; 1 bytes @ 0x3
   982                           
   983  005A                     lcdSetCursor@address:	
   984                           ; 1 bytes @ 0x3
   985                           
   986  005A                     Drive@radL:	
   987                           ; 1 bytes @ 0x3
   988                           
   989  005A                     ___bmul@multiplier:	
   990                           ; 1 bytes @ 0x3
   991                           
   992  005A                     DriveDirect@VelocityLeft:	
   993                           ; 1 bytes @ 0x3
   994                           
   995                           
   996                           ; 2 bytes @ 0x3
   997  005A                     	ds	1
   998  005B                     ??_getSensorData:	
   999  005B                     ??_Drive:	
  1000                           ; 1 bytes @ 0x4
  1001                           
  1002  005B                     lcdWriteString@s:	
  1003                           ; 1 bytes @ 0x4
  1004                           
  1005  005B                     Drive@speedH:	
  1006                           ; 1 bytes @ 0x4
  1007                           
  1008                           
  1009                           ; 1 bytes @ 0x4
  1010  005B                     	ds	1
  1011  005C                     ??_DriveDirect:	
  1012  005C                     ?_PathTo:	
  1013                           ; 1 bytes @ 0x5
  1014                           
  1015  005C                     PathTo@y_target:	
  1016                           ; 1 bytes @ 0x5
  1017                           
  1018                           
  1019                           ; 1 bytes @ 0x5
  1020  005C                     	ds	1
  1021  005D                     ??_PathTo:	
  1022  005D                     getSensorData@packetID:	
  1023                           ; 1 bytes @ 0x6
  1024                           
  1025  005D                     DriveDirect@data:	
  1026                           ; 1 bytes @ 0x6
  1027                           
  1028                           
  1029                           ; 2 bytes @ 0x6
  1030  005D                     	ds	1
  1031  005E                     getSensorData@sensor:	
  1032                           
  1033                           ; 2 bytes @ 0x7
  1034  005E                     	ds	1
  1035  005F                     DriveDirect@data_388:	
  1036                           
  1037                           ; 2 bytes @ 0x8
  1038  005F                     	ds	2
  1039  0061                     ??_Drive1m:	
  1040  0061                     ??_Turn90:	
  1041                           ; 1 bytes @ 0xA
  1042                           
  1043                           
  1044                           ; 1 bytes @ 0xA
  1045  0061                     	ds	3
  1046  0064                     Turn90@direction:	
  1047  0064                     PathTo@x_target:	
  1048                           ; 1 bytes @ 0xD
  1049                           
  1050                           
  1051                           ; 1 bytes @ 0xD
  1052  0064                     	ds	1
  1053  0065                     ??_TravelPath:	
  1054  0065                     PathTo@sum:	
  1055                           ; 1 bytes @ 0xE
  1056                           
  1057                           
  1058                           ; 1 bytes @ 0xE
  1059  0065                     	ds	1
  1060  0066                     PathTo@loop:	
  1061                           
  1062                           ; 2 bytes @ 0xF
  1063  0066                     	ds	1
  1064  0067                     TravelPath@n:	
  1065                           
  1066                           ; 1 bytes @ 0x10
  1067  0067                     	ds	1
  1068  0068                     ??_main:	
  1069                           
  1070                           ; 1 bytes @ 0x11
  1071  0068                     	ds	3
  1072  006B                     main@controlByte:	
  1073                           
  1074                           ; 1 bytes @ 0x14
  1075  006B                     	ds	1
  1076                           
  1077                           	psect	maintext
  1078  059A                     __pmaintext:	
  1079 ;;
  1080 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1081 ;;
  1082 ;; *************** function _main *****************
  1083 ;; Defined at:
  1084 ;;		line 363 in file "main.c"
  1085 ;; Parameters:    Size  Location     Type
  1086 ;;		None
  1087 ;; Auto vars:     Size  Location     Type
  1088 ;;  controlByte     1   20[BANK0 ] unsigned char 
  1089 ;; Return value:  Size  Location     Type
  1090 ;;                  1    wreg      void 
  1091 ;; Registers used:
  1092 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1093 ;; Tracked objects:
  1094 ;;		On entry : B00/0
  1095 ;;		On exit  : 0/0
  1096 ;;		Unchanged: 0/0
  1097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1098 ;;      Params:         0       0       0       0       0
  1099 ;;      Locals:         0       1       0       0       0
  1100 ;;      Temps:          0       3       0       0       0
  1101 ;;      Totals:         0       4       0       0       0
  1102 ;;Total ram usage:        4 bytes
  1103 ;; Hardware stack levels required when called:    5
  1104 ;; This function calls:
  1105 ;;		_PathTo
  1106 ;;		_TravelPath
  1107 ;;		_ser_init
  1108 ;;		_ser_putch
  1109 ;;		_setupADC
  1110 ;;		_setupLCD
  1111 ;;		_setupSPI
  1112 ;;		_spi_transfer
  1113 ;; This function is called by:
  1114 ;;		Startup code after reset
  1115 ;; This function uses a non-reentrant model
  1116 ;;
  1117                           
  1118                           
  1119                           ;psect for function _main
  1120  059A                     _main:	
  1121                           
  1122                           ;main.c: 365: _delay((unsigned long)((5000)*(20000000/4000.0)));
  1123                           
  1124                           ;incstack = 0
  1125                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1126  059A  307F               	movlw	127
  1127  059B  1283               	bcf	3,5	;RP0=0, select bank0
  1128  059C  1303               	bcf	3,6	;RP1=0, select bank0
  1129  059D  00EA               	movwf	??_main+2
  1130  059E  30D4               	movlw	212
  1131  059F  00E9               	movwf	??_main+1
  1132  05A0  30AE               	movlw	174
  1133  05A1  00E8               	movwf	??_main
  1134  05A2                     u2367:	
  1135  05A2  0BE8               	decfsz	??_main,f
  1136  05A3  2DA2               	goto	u2367
  1137  05A4  0BE9               	decfsz	??_main+1,f
  1138  05A5  2DA2               	goto	u2367
  1139  05A6  0BEA               	decfsz	??_main+2,f
  1140  05A7  2DA2               	goto	u2367
  1141  05A8  2DA9               	nop2
  1142                           
  1143                           ;main.c: 367: ser_init();
  1144  05A9  120A  158A  26FC  120A  118A  	fcall	_ser_init
  1145                           
  1146                           ;main.c: 368: setupSPI();
  1147  05AE  120A  158A  27A5  120A  118A  	fcall	_setupSPI
  1148                           
  1149                           ;main.c: 369: setupLCD();
  1150  05B3  120A  118A  27A9  120A  118A  	fcall	_setupLCD
  1151                           
  1152                           ;main.c: 370: setupADC();
  1153  05B8  120A  158A  2779  120A  118A  	fcall	_setupADC
  1154                           
  1155                           ;main.c: 372: TRISB = 0b00000011;
  1156  05BD  3003               	movlw	3
  1157  05BE  1683               	bsf	3,5	;RP0=1, select bank1
  1158  05BF  1303               	bcf	3,6	;RP1=0, select bank1
  1159  05C0  0086               	movwf	6	;volatile
  1160                           
  1161                           ;main.c: 373: PORTB = 0;
  1162  05C1  1283               	bcf	3,5	;RP0=0, select bank0
  1163  05C2  1303               	bcf	3,6	;RP1=0, select bank0
  1164  05C3  0186               	clrf	6	;volatile
  1165                           
  1166                           ;main.c: 375: unsigned char controlByte = 0b00001101;
  1167  05C4  300D               	movlw	13
  1168  05C5  00E8               	movwf	??_main
  1169  05C6  0868               	movf	??_main,w
  1170  05C7  00EB               	movwf	main@controlByte
  1171                           
  1172                           ;main.c: 376: spi_transfer(controlByte);
  1173  05C8  086B               	movf	main@controlByte,w
  1174  05C9  120A  158A  270B  120A  118A  	fcall	_spi_transfer
  1175                           
  1176                           ;main.c: 378: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1177  05CE  301A               	movlw	26
  1178  05CF  1283               	bcf	3,5	;RP0=0, select bank0
  1179  05D0  1303               	bcf	3,6	;RP1=0, select bank0
  1180  05D1  00EA               	movwf	??_main+2
  1181  05D2  305E               	movlw	94
  1182  05D3  00E9               	movwf	??_main+1
  1183  05D4  3086               	movlw	134
  1184  05D5  00E8               	movwf	??_main
  1185  05D6                     u2377:	
  1186  05D6  0BE8               	decfsz	??_main,f
  1187  05D7  2DD6               	goto	u2377
  1188  05D8  0BE9               	decfsz	??_main+1,f
  1189  05D9  2DD6               	goto	u2377
  1190  05DA  0BEA               	decfsz	??_main+2,f
  1191  05DB  2DD6               	goto	u2377
  1192  05DC  0000               	nop
  1193                           
  1194                           ;main.c: 379: ser_putch(128);
  1195  05DD  3080               	movlw	128
  1196  05DE  120A  158A  26F0  120A  118A  	fcall	_ser_putch
  1197                           
  1198                           ;main.c: 380: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1199  05E3  301A               	movlw	26
  1200  05E4  1283               	bcf	3,5	;RP0=0, select bank0
  1201  05E5  1303               	bcf	3,6	;RP1=0, select bank0
  1202  05E6  00EA               	movwf	??_main+2
  1203  05E7  305E               	movlw	94
  1204  05E8  00E9               	movwf	??_main+1
  1205  05E9  3086               	movlw	134
  1206  05EA  00E8               	movwf	??_main
  1207  05EB                     u2387:	
  1208  05EB  0BE8               	decfsz	??_main,f
  1209  05EC  2DEB               	goto	u2387
  1210  05ED  0BE9               	decfsz	??_main+1,f
  1211  05EE  2DEB               	goto	u2387
  1212  05EF  0BEA               	decfsz	??_main+2,f
  1213  05F0  2DEB               	goto	u2387
  1214  05F1  0000               	nop
  1215                           
  1216                           ;main.c: 381: ser_putch(132);
  1217  05F2  3084               	movlw	132
  1218  05F3  120A  158A  26F0  120A  118A  	fcall	_ser_putch
  1219                           
  1220                           ;main.c: 382: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1221  05F8  301A               	movlw	26
  1222  05F9  1283               	bcf	3,5	;RP0=0, select bank0
  1223  05FA  1303               	bcf	3,6	;RP1=0, select bank0
  1224  05FB  00EA               	movwf	??_main+2
  1225  05FC  305E               	movlw	94
  1226  05FD  00E9               	movwf	??_main+1
  1227  05FE  3086               	movlw	134
  1228  05FF  00E8               	movwf	??_main
  1229  0600                     u2397:	
  1230  0600  0BE8               	decfsz	??_main,f
  1231  0601  2E00               	goto	u2397
  1232  0602  0BE9               	decfsz	??_main+1,f
  1233  0603  2E00               	goto	u2397
  1234  0604  0BEA               	decfsz	??_main+2,f
  1235  0605  2E00               	goto	u2397
  1236  0606  0000               	nop
  1237                           
  1238                           ;main.c: 385: x = 1;
  1239  0607  1283               	bcf	3,5	;RP0=0, select bank0
  1240  0608  1303               	bcf	3,6	;RP1=0, select bank0
  1241  0609  01D6               	clrf	_x
  1242  060A  0AD6               	incf	_x,f
  1243                           
  1244                           ;main.c: 386: y = 0;
  1245  060B  01BD               	clrf	_y
  1246                           
  1247                           ;main.c: 387: orientation = 3;
  1248  060C  3003               	movlw	3
  1249  060D  00E8               	movwf	??_main
  1250  060E  0868               	movf	??_main,w
  1251  060F  00F9               	movwf	_orientation
  1252  0610                     l3123:	
  1253                           ;main.c: 390: while(1){
  1254                           
  1255                           
  1256                           ;main.c: 392: if(PB8Counter >= 10 && !RB0 == 0){
  1257  0610  300A               	movlw	10
  1258  0611  022D               	subwf	_PB8Counter,w
  1259  0612  1803               	btfsc	3,0
  1260  0613  1C06               	btfss	6,0	;volatile
  1261  0614  2E10               	goto	l3123
  1262                           
  1263                           ;main.c: 395: RB4 = 1;
  1264  0615  1606               	bsf	6,4	;volatile
  1265                           
  1266                           ;main.c: 396: PathTo(2,1);
  1267  0616  01DC               	clrf	PathTo@y_target
  1268  0617  0ADC               	incf	PathTo@y_target,f
  1269  0618  3002               	movlw	2
  1270  0619  120A  118A  2064  120A  118A  	fcall	_PathTo
  1271                           
  1272                           ;main.c: 397: _delay((unsigned long)((5000)*(20000000/4000.0)));
  1273  061E  307F               	movlw	127
  1274  061F  1283               	bcf	3,5	;RP0=0, select bank0
  1275  0620  1303               	bcf	3,6	;RP1=0, select bank0
  1276  0621  00EA               	movwf	??_main+2
  1277  0622  30D4               	movlw	212
  1278  0623  00E9               	movwf	??_main+1
  1279  0624  30AE               	movlw	174
  1280  0625  00E8               	movwf	??_main
  1281  0626                     u2407:	
  1282  0626  0BE8               	decfsz	??_main,f
  1283  0627  2E26               	goto	u2407
  1284  0628  0BE9               	decfsz	??_main+1,f
  1285  0629  2E26               	goto	u2407
  1286  062A  0BEA               	decfsz	??_main+2,f
  1287  062B  2E26               	goto	u2407
  1288  062C  2E2D               	nop2
  1289                           
  1290                           ;main.c: 398: TravelPath();
  1291  062D  120A  118A  23EF  120A  118A  	fcall	_TravelPath
  1292                           
  1293                           ;main.c: 399: RB4 = 0;
  1294  0632  1283               	bcf	3,5	;RP0=0, select bank0
  1295  0633  1303               	bcf	3,6	;RP1=0, select bank0
  1296  0634  1206               	bcf	6,4	;volatile
  1297  0635  2E10               	goto	l3123
  1298  0636                     __end_of_main:	
  1299                           
  1300                           	psect	text1
  1301  0F0B                     __ptext1:	
  1302 ;; *************** function _spi_transfer *****************
  1303 ;; Defined at:
  1304 ;;		line 22 in file "SPI.c"
  1305 ;; Parameters:    Size  Location     Type
  1306 ;;  data            1    wreg     unsigned char 
  1307 ;; Auto vars:     Size  Location     Type
  1308 ;;  data            1    2[BANK0 ] unsigned char 
  1309 ;;  temp            1    1[BANK0 ] unsigned char 
  1310 ;; Return value:  Size  Location     Type
  1311 ;;                  1    wreg      unsigned char 
  1312 ;; Registers used:
  1313 ;;		wreg, status,2
  1314 ;; Tracked objects:
  1315 ;;		On entry : 0/0
  1316 ;;		On exit  : 0/0
  1317 ;;		Unchanged: 0/0
  1318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1319 ;;      Params:         0       0       0       0       0
  1320 ;;      Locals:         0       2       0       0       0
  1321 ;;      Temps:          0       1       0       0       0
  1322 ;;      Totals:         0       3       0       0       0
  1323 ;;Total ram usage:        3 bytes
  1324 ;; Hardware stack levels used:    1
  1325 ;; Hardware stack levels required when called:    1
  1326 ;; This function calls:
  1327 ;;		Nothing
  1328 ;; This function is called by:
  1329 ;;		_main
  1330 ;; This function uses a non-reentrant model
  1331 ;;
  1332                           
  1333                           
  1334                           ;psect for function _spi_transfer
  1335  0F0B                     _spi_transfer:	
  1336                           
  1337                           ;incstack = 0
  1338                           ; Regs used in _spi_transfer: [wreg+status,2]
  1339                           ;spi_transfer@data stored from wreg
  1340  0F0B  1283               	bcf	3,5	;RP0=0, select bank0
  1341  0F0C  1303               	bcf	3,6	;RP1=0, select bank0
  1342  0F0D  00D9               	movwf	spi_transfer@data
  1343                           
  1344                           ;SPI.c: 23: unsigned char temp = 0;
  1345  0F0E  01D8               	clrf	spi_transfer@temp
  1346                           
  1347                           ;SPI.c: 25: SSPIF = 0;
  1348  0F0F  118C               	bcf	12,3	;volatile
  1349                           
  1350                           ;SPI.c: 26: SSPBUF = data;
  1351  0F10  0859               	movf	spi_transfer@data,w
  1352  0F11  0093               	movwf	19	;volatile
  1353  0F12                     l776:	
  1354                           ;SPI.c: 28: while (SSPIF == 0);
  1355                           
  1356  0F12  1D8C               	btfss	12,3	;volatile
  1357  0F13  2F12               	goto	l776
  1358                           
  1359                           ;SPI.c: 29: temp = SSPBUF;
  1360  0F14  0813               	movf	19,w	;volatile
  1361  0F15  00D7               	movwf	??_spi_transfer
  1362  0F16  0857               	movf	??_spi_transfer,w
  1363  0F17  00D8               	movwf	spi_transfer@temp
  1364                           
  1365                           ;SPI.c: 30: SSPIF = 0;
  1366  0F18  118C               	bcf	12,3	;volatile
  1367  0F19  0008               	return
  1368  0F1A                     __end_of_spi_transfer:	
  1369                           ;SPI.c: 32: return temp;
  1370                           ;	Return value of _spi_transfer is never used
  1371                           
  1372                           
  1373                           	psect	text2
  1374  0FA5                     __ptext2:	
  1375 ;; *************** function _setupSPI *****************
  1376 ;; Defined at:
  1377 ;;		line 4 in file "SPI.c"
  1378 ;; Parameters:    Size  Location     Type
  1379 ;;		None
  1380 ;; Auto vars:     Size  Location     Type
  1381 ;;		None
  1382 ;; Return value:  Size  Location     Type
  1383 ;;                  1    wreg      void 
  1384 ;; Registers used:
  1385 ;;		wreg
  1386 ;; Tracked objects:
  1387 ;;		On entry : 0/0
  1388 ;;		On exit  : 0/0
  1389 ;;		Unchanged: 0/0
  1390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1391 ;;      Params:         0       0       0       0       0
  1392 ;;      Locals:         0       0       0       0       0
  1393 ;;      Temps:          0       0       0       0       0
  1394 ;;      Totals:         0       0       0       0       0
  1395 ;;Total ram usage:        0 bytes
  1396 ;; Hardware stack levels used:    1
  1397 ;; Hardware stack levels required when called:    1
  1398 ;; This function calls:
  1399 ;;		Nothing
  1400 ;; This function is called by:
  1401 ;;		_main
  1402 ;; This function uses a non-reentrant model
  1403 ;;
  1404                           
  1405                           
  1406                           ;psect for function _setupSPI
  1407  0FA5                     _setupSPI:	
  1408                           
  1409                           ;SPI.c: 6: TRISB = 0b00000011;
  1410                           
  1411                           ;incstack = 0
  1412                           ; Regs used in _setupSPI: [wreg]
  1413  0FA5  3003               	movlw	3
  1414  0FA6  1683               	bsf	3,5	;RP0=1, select bank1
  1415  0FA7  1303               	bcf	3,6	;RP1=0, select bank1
  1416  0FA8  0086               	movwf	6	;volatile
  1417                           
  1418                           ;SPI.c: 8: SSPSTAT = 0b01000000;
  1419  0FA9  3040               	movlw	64
  1420  0FAA  0094               	movwf	20	;volatile
  1421                           
  1422                           ;SPI.c: 9: SSPCON = 0b00100000;
  1423  0FAB  3020               	movlw	32
  1424  0FAC  1283               	bcf	3,5	;RP0=0, select bank0
  1425  0FAD  1303               	bcf	3,6	;RP1=0, select bank0
  1426  0FAE  0094               	movwf	20	;volatile
  1427                           
  1428                           ;SPI.c: 10: TRISC = 0b10000000;
  1429  0FAF  3080               	movlw	128
  1430  0FB0  1683               	bsf	3,5	;RP0=1, select bank1
  1431  0FB1  1303               	bcf	3,6	;RP1=0, select bank1
  1432  0FB2  0087               	movwf	7	;volatile
  1433                           
  1434                           ;SPI.c: 11: PORTC = 0b00000011;
  1435  0FB3  3003               	movlw	3
  1436  0FB4  1283               	bcf	3,5	;RP0=0, select bank0
  1437  0FB5  1303               	bcf	3,6	;RP1=0, select bank0
  1438  0FB6  0087               	movwf	7	;volatile
  1439                           
  1440                           ;SPI.c: 14: OPTION_REG = 0b00000100;
  1441  0FB7  3004               	movlw	4
  1442  0FB8  1683               	bsf	3,5	;RP0=1, select bank1
  1443  0FB9  1303               	bcf	3,6	;RP1=0, select bank1
  1444  0FBA  0081               	movwf	1	;volatile
  1445                           
  1446                           ;SPI.c: 16: TMR0IE = 1;
  1447  0FBB  168B               	bsf	11,5	;volatile
  1448                           
  1449                           ;SPI.c: 18: (GIE = 1);
  1450  0FBC  178B               	bsf	11,7	;volatile
  1451  0FBD  0008               	return
  1452  0FBE                     __end_of_setupSPI:	
  1453                           
  1454                           	psect	text3
  1455  07A9                     __ptext3:	
  1456 ;; *************** function _setupLCD *****************
  1457 ;; Defined at:
  1458 ;;		line 86 in file "LCD.c"
  1459 ;; Parameters:    Size  Location     Type
  1460 ;;		None
  1461 ;; Auto vars:     Size  Location     Type
  1462 ;;		None
  1463 ;; Return value:  Size  Location     Type
  1464 ;;                  1    wreg      void 
  1465 ;; Registers used:
  1466 ;;		wreg, status,2, status,0, pclath, cstack
  1467 ;; Tracked objects:
  1468 ;;		On entry : 0/0
  1469 ;;		On exit  : 0/0
  1470 ;;		Unchanged: 0/0
  1471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1472 ;;      Params:         0       0       0       0       0
  1473 ;;      Locals:         0       0       0       0       0
  1474 ;;      Temps:          0       0       0       0       0
  1475 ;;      Totals:         0       0       0       0       0
  1476 ;;Total ram usage:        0 bytes
  1477 ;; Hardware stack levels used:    1
  1478 ;; Hardware stack levels required when called:    2
  1479 ;; This function calls:
  1480 ;;		_lcdWriteControl
  1481 ;; This function is called by:
  1482 ;;		_main
  1483 ;; This function uses a non-reentrant model
  1484 ;;
  1485                           
  1486                           
  1487                           ;psect for function _setupLCD
  1488  07A9                     _setupLCD:	
  1489                           
  1490                           ;LCD.c: 88: ADCON1 = 0b00000010;
  1491                           
  1492                           ;incstack = 0
  1493                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  1494  07A9  3002               	movlw	2
  1495  07AA  1683               	bsf	3,5	;RP0=1, select bank1
  1496  07AB  1303               	bcf	3,6	;RP1=0, select bank1
  1497  07AC  009F               	movwf	31	;volatile
  1498                           
  1499                           ;LCD.c: 90: PORTD = 0;
  1500  07AD  1283               	bcf	3,5	;RP0=0, select bank0
  1501  07AE  1303               	bcf	3,6	;RP1=0, select bank0
  1502  07AF  0188               	clrf	8	;volatile
  1503                           
  1504                           ;LCD.c: 91: PORTE = 0;
  1505  07B0  0189               	clrf	9	;volatile
  1506                           
  1507                           ;LCD.c: 93: TRISD = 0b00000000;
  1508  07B1  1683               	bsf	3,5	;RP0=1, select bank1
  1509  07B2  1303               	bcf	3,6	;RP1=0, select bank1
  1510  07B3  0188               	clrf	8	;volatile
  1511                           
  1512                           ;LCD.c: 94: TRISE = 0b00000000;
  1513  07B4  0189               	clrf	9	;volatile
  1514                           
  1515                           ;LCD.c: 97: lcdWriteControl(0b00000001);
  1516  07B5  3001               	movlw	1
  1517  07B6  120A  158A  2751  120A  118A  	fcall	_lcdWriteControl
  1518                           
  1519                           ;LCD.c: 98: lcdWriteControl(0b00111000);
  1520  07BB  3038               	movlw	56
  1521  07BC  120A  158A  2751  120A  118A  	fcall	_lcdWriteControl
  1522                           
  1523                           ;LCD.c: 99: lcdWriteControl(0b00001100);
  1524  07C1  300C               	movlw	12
  1525  07C2  120A  158A  2751  120A  118A  	fcall	_lcdWriteControl
  1526                           
  1527                           ;LCD.c: 100: lcdWriteControl(0b00000110);
  1528  07C7  3006               	movlw	6
  1529  07C8  120A  158A  2751  120A  118A  	fcall	_lcdWriteControl
  1530                           
  1531                           ;LCD.c: 101: lcdWriteControl(0b00000010);
  1532  07CD  3002               	movlw	2
  1533  07CE  120A  158A  2751   	fcall	_lcdWriteControl
  1534  07D1  0008               	return
  1535  07D2                     __end_of_setupLCD:	
  1536                           
  1537                           	psect	text4
  1538  0F79                     __ptext4:	
  1539 ;; *************** function _setupADC *****************
  1540 ;; Defined at:
  1541 ;;		line 5 in file "ADC.c"
  1542 ;; Parameters:    Size  Location     Type
  1543 ;;		None
  1544 ;; Auto vars:     Size  Location     Type
  1545 ;;		None
  1546 ;; Return value:  Size  Location     Type
  1547 ;;                  1    wreg      void 
  1548 ;; Registers used:
  1549 ;;		wreg, status,2
  1550 ;; Tracked objects:
  1551 ;;		On entry : 0/0
  1552 ;;		On exit  : 0/0
  1553 ;;		Unchanged: 0/0
  1554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1555 ;;      Params:         0       0       0       0       0
  1556 ;;      Locals:         0       0       0       0       0
  1557 ;;      Temps:          0       1       0       0       0
  1558 ;;      Totals:         0       1       0       0       0
  1559 ;;Total ram usage:        1 bytes
  1560 ;; Hardware stack levels used:    1
  1561 ;; Hardware stack levels required when called:    1
  1562 ;; This function calls:
  1563 ;;		Nothing
  1564 ;; This function is called by:
  1565 ;;		_main
  1566 ;; This function uses a non-reentrant model
  1567 ;;
  1568                           
  1569                           
  1570                           ;psect for function _setupADC
  1571  0F79                     _setupADC:	
  1572                           
  1573                           ;ADC.c: 6: PORTA = 0;
  1574                           
  1575                           ;incstack = 0
  1576                           ; Regs used in _setupADC: [wreg+status,2]
  1577  0F79  1283               	bcf	3,5	;RP0=0, select bank0
  1578  0F7A  1303               	bcf	3,6	;RP1=0, select bank0
  1579  0F7B  0185               	clrf	5	;volatile
  1580                           
  1581                           ;ADC.c: 7: TRISA = 0b11111111;
  1582  0F7C  30FF               	movlw	255
  1583  0F7D  1683               	bsf	3,5	;RP0=1, select bank1
  1584  0F7E  1303               	bcf	3,6	;RP1=0, select bank1
  1585  0F7F  0085               	movwf	5	;volatile
  1586                           
  1587                           ;ADC.c: 10: ADCON0 = 0b10001001;
  1588  0F80  3089               	movlw	137
  1589  0F81  1283               	bcf	3,5	;RP0=0, select bank0
  1590  0F82  1303               	bcf	3,6	;RP1=0, select bank0
  1591  0F83  009F               	movwf	31	;volatile
  1592                           
  1593                           ;ADC.c: 11: ADCON1 = 0b00000010;
  1594  0F84  3002               	movlw	2
  1595  0F85  1683               	bsf	3,5	;RP0=1, select bank1
  1596  0F86  1303               	bcf	3,6	;RP1=0, select bank1
  1597  0F87  009F               	movwf	31	;volatile
  1598                           
  1599                           ;ADC.c: 13: _delay((unsigned long)((50)*(20000000/4000000.0)));
  1600  0F88  3053               	movlw	83
  1601  0F89  1283               	bcf	3,5	;RP0=0, select bank0
  1602  0F8A  1303               	bcf	3,6	;RP1=0, select bank0
  1603  0F8B  00D7               	movwf	??_setupADC
  1604  0F8C                     u2417:	
  1605  0F8C  0BD7               	decfsz	??_setupADC,f
  1606  0F8D  2F8C               	goto	u2417
  1607  0F8E  0008               	return
  1608  0F8F                     __end_of_setupADC:	
  1609                           
  1610                           	psect	text5
  1611  0EFC                     __ptext5:	
  1612 ;; *************** function _ser_init *****************
  1613 ;; Defined at:
  1614 ;;		line 5 in file "ser.c"
  1615 ;; Parameters:    Size  Location     Type
  1616 ;;		None
  1617 ;; Auto vars:     Size  Location     Type
  1618 ;;		None
  1619 ;; Return value:  Size  Location     Type
  1620 ;;                  1    wreg      void 
  1621 ;; Registers used:
  1622 ;;		wreg
  1623 ;; Tracked objects:
  1624 ;;		On entry : 0/0
  1625 ;;		On exit  : 0/0
  1626 ;;		Unchanged: 0/0
  1627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1628 ;;      Params:         0       0       0       0       0
  1629 ;;      Locals:         0       0       0       0       0
  1630 ;;      Temps:          0       0       0       0       0
  1631 ;;      Totals:         0       0       0       0       0
  1632 ;;Total ram usage:        0 bytes
  1633 ;; Hardware stack levels used:    1
  1634 ;; Hardware stack levels required when called:    1
  1635 ;; This function calls:
  1636 ;;		Nothing
  1637 ;; This function is called by:
  1638 ;;		_main
  1639 ;; This function uses a non-reentrant model
  1640 ;;
  1641                           
  1642                           
  1643                           ;psect for function _ser_init
  1644  0EFC                     _ser_init:	
  1645                           
  1646                           ;ser.c: 7: TXSTA = 0b00100100;
  1647                           
  1648                           ;incstack = 0
  1649                           ; Regs used in _ser_init: [wreg]
  1650  0EFC  3024               	movlw	36
  1651  0EFD  1683               	bsf	3,5	;RP0=1, select bank1
  1652  0EFE  1303               	bcf	3,6	;RP1=0, select bank1
  1653  0EFF  0098               	movwf	24	;volatile
  1654                           
  1655                           ;ser.c: 8: RCSTA = 0b10011000;
  1656  0F00  3098               	movlw	152
  1657  0F01  1283               	bcf	3,5	;RP0=0, select bank0
  1658  0F02  1303               	bcf	3,6	;RP1=0, select bank0
  1659  0F03  0098               	movwf	24	;volatile
  1660                           
  1661                           ;ser.c: 24: SPBRG = 20;
  1662  0F04  3014               	movlw	20
  1663  0F05  1683               	bsf	3,5	;RP0=1, select bank1
  1664  0F06  1303               	bcf	3,6	;RP1=0, select bank1
  1665  0F07  0099               	movwf	25	;volatile
  1666                           
  1667                           ;ser.c: 26: PEIE = 1;
  1668  0F08  170B               	bsf	11,6	;volatile
  1669                           
  1670                           ;ser.c: 27: (GIE = 1);
  1671  0F09  178B               	bsf	11,7	;volatile
  1672  0F0A  0008               	return
  1673  0F0B                     __end_of_ser_init:	
  1674                           
  1675                           	psect	text6
  1676  03EF                     __ptext6:	
  1677 ;; *************** function _TravelPath *****************
  1678 ;; Defined at:
  1679 ;;		line 265 in file "main.c"
  1680 ;; Parameters:    Size  Location     Type
  1681 ;;		None
  1682 ;; Auto vars:     Size  Location     Type
  1683 ;;  n               1   16[BANK0 ] unsigned char 
  1684 ;; Return value:  Size  Location     Type
  1685 ;;                  1    wreg      void 
  1686 ;; Registers used:
  1687 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1688 ;; Tracked objects:
  1689 ;;		On entry : 0/0
  1690 ;;		On exit  : 0/0
  1691 ;;		Unchanged: 0/0
  1692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1693 ;;      Params:         0       0       0       0       0
  1694 ;;      Locals:         0       1       0       0       0
  1695 ;;      Temps:          0       2       0       0       0
  1696 ;;      Totals:         0       3       0       0       0
  1697 ;;Total ram usage:        3 bytes
  1698 ;; Hardware stack levels used:    1
  1699 ;; Hardware stack levels required when called:    4
  1700 ;; This function calls:
  1701 ;;		_Drive1m
  1702 ;;		_Turn90
  1703 ;; This function is called by:
  1704 ;;		_main
  1705 ;; This function uses a non-reentrant model
  1706 ;;
  1707                           
  1708                           
  1709                           ;psect for function _TravelPath
  1710  03EF                     _TravelPath:	
  1711                           
  1712                           ;main.c: 267: for (char n = 1; n <= pathCountShortest; n++){
  1713                           
  1714                           ;incstack = 0
  1715                           ; Regs used in _TravelPath: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1716  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  1717  03F0  1303               	bcf	3,6	;RP1=0, select bank0
  1718  03F1  01E7               	clrf	TravelPath@n
  1719  03F2  0AE7               	incf	TravelPath@n,f
  1720  03F3                     l2989:	
  1721  03F3  0867               	movf	TravelPath@n,w
  1722  03F4  0255               	subwf	_pathCountShortest,w
  1723  03F5  1C03               	btfss	3,0
  1724  03F6  0008               	return
  1725                           
  1726                           ;main.c: 269: if (pathShortest[0][n] > x){
  1727  03F7  0867               	movf	TravelPath@n,w
  1728  03F8  3ED0               	addlw	(low (_pathShortest| (0+256)))& (0+255)
  1729  03F9  0084               	movwf	4
  1730  03FA  1783               	bsf	3,7	;select IRP bank3
  1731  03FB  0800               	movf	0,w
  1732  03FC  0256               	subwf	_x,w
  1733  03FD  1C03               	btfss	3,0
  1734  03FE  2C26               	goto	l2927
  1735  03FF  2C37               	goto	l2931
  1736  0400                     l2915:	
  1737                           ;main.c: 272: case 0: Turn90(0);
  1738                           
  1739                           ;main.c: 270: switch (orientation){
  1740                           
  1741  0400  3000               	movlw	0
  1742  0401  120A  118A  24F9  120A  118A  	fcall	_Turn90
  1743                           
  1744                           ;main.c: 273: break;
  1745  0406  2C31               	goto	l2929
  1746  0407                     l2917:	
  1747                           ;main.c: 275: case 2: Turn90(1);
  1748                           
  1749  0407  3001               	movlw	1
  1750  0408  120A  118A  24F9  120A  118A  	fcall	_Turn90
  1751                           
  1752                           ;main.c: 276: break;
  1753  040D  2C31               	goto	l2929
  1754  040E                     l2919:	
  1755                           ;main.c: 278: case 3: Turn90(1);
  1756                           
  1757  040E  3001               	movlw	1
  1758  040F  120A  118A  24F9  120A  118A  	fcall	_Turn90
  1759                           
  1760                           ;main.c: 279: _delay((unsigned long)((5)*(20000000/4000.0)));
  1761  0414  3021               	movlw	33
  1762  0415  1283               	bcf	3,5	;RP0=0, select bank0
  1763  0416  1303               	bcf	3,6	;RP1=0, select bank0
  1764  0417  00E6               	movwf	??_TravelPath+1
  1765  0418  3076               	movlw	118
  1766  0419  00E5               	movwf	??_TravelPath
  1767  041A                     u2427:	
  1768  041A  0BE5               	decfsz	??_TravelPath,f
  1769  041B  2C1A               	goto	u2427
  1770  041C  0BE6               	decfsz	??_TravelPath+1,f
  1771  041D  2C1A               	goto	u2427
  1772  041E  0000               	nop
  1773                           
  1774                           ;main.c: 280: Turn90(1);
  1775  041F  3001               	movlw	1
  1776  0420  120A  118A  24F9  120A  118A  	fcall	_Turn90
  1777                           
  1778                           ;main.c: 282: }
  1779                           
  1780                           ;main.c: 281: break;
  1781  0425  2C31               	goto	l2929
  1782  0426                     l2927:	
  1783  0426  0879               	movf	_orientation,w
  1784                           
  1785                           ; Switch size 1, requested type "space"
  1786                           ; Number of cases is 3, Range of values is 0 to 3
  1787                           ; switch strategies available:
  1788                           ; Name         Instructions Cycles
  1789                           ; simple_byte           10     6 (average)
  1790                           ; direct_byte           20     8 (fixed)
  1791                           ; jumptable            260     6 (fixed)
  1792                           ;	Chosen strategy is simple_byte
  1793  0427  3A00               	xorlw	0	; case 0
  1794  0428  1903               	skipnz
  1795  0429  2C00               	goto	l2915
  1796  042A  3A02               	xorlw	2	; case 2
  1797  042B  1903               	skipnz
  1798  042C  2C07               	goto	l2917
  1799  042D  3A01               	xorlw	1	; case 3
  1800  042E  1903               	skipnz
  1801  042F  2C0E               	goto	l2919
  1802  0430  2C31               	goto	l2929
  1803  0431                     l2929:	
  1804                           
  1805                           ;main.c: 283: Drive1m();
  1806  0431  120A  118A  26C3  120A  118A  	fcall	_Drive1m
  1807                           
  1808                           ;main.c: 284: }
  1809  0436  2CF2               	goto	l2987
  1810  0437                     l2931:	
  1811                           
  1812                           ;main.c: 287: else if (pathShortest[0][n] < x){
  1813  0437  1283               	bcf	3,5	;RP0=0, select bank0
  1814  0438  1303               	bcf	3,6	;RP1=0, select bank0
  1815  0439  0867               	movf	TravelPath@n,w
  1816  043A  3ED0               	addlw	(low (_pathShortest| (0+256)))& (0+255)
  1817  043B  0084               	movwf	4
  1818  043C  0856               	movf	_x,w
  1819  043D  1783               	bsf	3,7	;select IRP bank3
  1820  043E  0200               	subwf	0,w
  1821  043F  1C03               	btfss	3,0
  1822  0440  2C68               	goto	l2947
  1823  0441  2C79               	goto	l2951
  1824  0442                     l2935:	
  1825                           ;main.c: 290: case 0: Turn90(1);
  1826                           
  1827                           ;main.c: 288: switch (orientation){
  1828                           
  1829  0442  3001               	movlw	1
  1830  0443  120A  118A  24F9  120A  118A  	fcall	_Turn90
  1831                           
  1832                           ;main.c: 291: break;
  1833  0448  2C73               	goto	l2949
  1834  0449                     l2937:	
  1835                           ;main.c: 293: case 2: Turn90(0);
  1836                           
  1837  0449  3000               	movlw	0
  1838  044A  120A  118A  24F9  120A  118A  	fcall	_Turn90
  1839                           
  1840                           ;main.c: 294: break;
  1841  044F  2C73               	goto	l2949
  1842  0450                     l2939:	
  1843                           ;main.c: 296: case 1: Turn90(1);
  1844                           
  1845  0450  3001               	movlw	1
  1846  0451  120A  118A  24F9  120A  118A  	fcall	_Turn90
  1847                           
  1848                           ;main.c: 297: _delay((unsigned long)((5)*(20000000/4000.0)));
  1849  0456  3021               	movlw	33
  1850  0457  1283               	bcf	3,5	;RP0=0, select bank0
  1851  0458  1303               	bcf	3,6	;RP1=0, select bank0
  1852  0459  00E6               	movwf	??_TravelPath+1
  1853  045A  3076               	movlw	118
  1854  045B  00E5               	movwf	??_TravelPath
  1855  045C                     u2437:	
  1856  045C  0BE5               	decfsz	??_TravelPath,f
  1857  045D  2C5C               	goto	u2437
  1858  045E  0BE6               	decfsz	??_TravelPath+1,f
  1859  045F  2C5C               	goto	u2437
  1860  0460  0000               	nop
  1861                           
  1862                           ;main.c: 298: Turn90(1);
  1863  0461  3001               	movlw	1
  1864  0462  120A  118A  24F9  120A  118A  	fcall	_Turn90
  1865                           
  1866                           ;main.c: 300: }
  1867                           
  1868                           ;main.c: 299: break;
  1869  0467  2C73               	goto	l2949
  1870  0468                     l2947:	
  1871  0468  0879               	movf	_orientation,w
  1872                           
  1873                           ; Switch size 1, requested type "space"
  1874                           ; Number of cases is 3, Range of values is 0 to 2
  1875                           ; switch strategies available:
  1876                           ; Name         Instructions Cycles
  1877                           ; simple_byte           10     6 (average)
  1878                           ; direct_byte           17     8 (fixed)
  1879                           ; jumptable            260     6 (fixed)
  1880                           ;	Chosen strategy is simple_byte
  1881  0469  3A00               	xorlw	0	; case 0
  1882  046A  1903               	skipnz
  1883  046B  2C42               	goto	l2935
  1884  046C  3A01               	xorlw	1	; case 1
  1885  046D  1903               	skipnz
  1886  046E  2C50               	goto	l2939
  1887  046F  3A03               	xorlw	3	; case 2
  1888  0470  1903               	skipnz
  1889  0471  2C49               	goto	l2937
  1890  0472  2C73               	goto	l2949
  1891  0473                     l2949:	
  1892                           
  1893                           ;main.c: 301: Drive1m();
  1894  0473  120A  118A  26C3  120A  118A  	fcall	_Drive1m
  1895                           
  1896                           ;main.c: 302: }
  1897  0478  2CF2               	goto	l2987
  1898  0479                     l2951:	
  1899                           
  1900                           ;main.c: 304: else if(pathShortest[1][n] > y){
  1901  0479  1283               	bcf	3,5	;RP0=0, select bank0
  1902  047A  1303               	bcf	3,6	;RP1=0, select bank0
  1903  047B  0867               	movf	TravelPath@n,w
  1904  047C  3EE0               	addlw	(low ((_pathShortest| (0+256)+16)))& (0+255)
  1905  047D  0084               	movwf	4
  1906  047E  1783               	bsf	3,7	;select IRP bank3
  1907  047F  0800               	movf	0,w
  1908  0480  023D               	subwf	_y,w
  1909  0481  1C03               	btfss	3,0
  1910  0482  2CAA               	goto	l2967
  1911  0483  2CB6               	goto	l2969
  1912  0484                     l2955:	
  1913                           ;main.c: 307: case 1: Turn90(0);
  1914                           
  1915                           ;main.c: 305: switch(orientation){
  1916                           
  1917  0484  3000               	movlw	0
  1918  0485  120A  118A  24F9  120A  118A  	fcall	_Turn90
  1919                           
  1920                           ;main.c: 308: break;
  1921  048A  2CF2               	goto	l2987
  1922  048B                     l2957:	
  1923                           ;main.c: 310: case 3: Turn90(1);
  1924                           
  1925  048B  3001               	movlw	1
  1926  048C  120A  118A  24F9  120A  118A  	fcall	_Turn90
  1927                           
  1928                           ;main.c: 311: break;
  1929  0491  2CF2               	goto	l2987
  1930  0492                     l2959:	
  1931                           ;main.c: 313: case 0: Turn90(1);
  1932                           
  1933  0492  3001               	movlw	1
  1934  0493  120A  118A  24F9  120A  118A  	fcall	_Turn90
  1935                           
  1936                           ;main.c: 314: _delay((unsigned long)((5)*(20000000/4000.0)));
  1937  0498  3021               	movlw	33
  1938  0499  1283               	bcf	3,5	;RP0=0, select bank0
  1939  049A  1303               	bcf	3,6	;RP1=0, select bank0
  1940  049B  00E6               	movwf	??_TravelPath+1
  1941  049C  3076               	movlw	118
  1942  049D  00E5               	movwf	??_TravelPath
  1943  049E                     u2447:	
  1944  049E  0BE5               	decfsz	??_TravelPath,f
  1945  049F  2C9E               	goto	u2447
  1946  04A0  0BE6               	decfsz	??_TravelPath+1,f
  1947  04A1  2C9E               	goto	u2447
  1948  04A2  0000               	nop
  1949                           
  1950                           ;main.c: 315: Turn90(1);
  1951  04A3  3001               	movlw	1
  1952  04A4  120A  118A  24F9  120A  118A  	fcall	_Turn90
  1953                           
  1954                           ;main.c: 317: }
  1955                           
  1956                           ;main.c: 316: break;
  1957  04A9  2CF2               	goto	l2987
  1958  04AA                     l2967:	
  1959  04AA  0879               	movf	_orientation,w
  1960                           
  1961                           ; Switch size 1, requested type "space"
  1962                           ; Number of cases is 3, Range of values is 0 to 3
  1963                           ; switch strategies available:
  1964                           ; Name         Instructions Cycles
  1965                           ; simple_byte           10     6 (average)
  1966                           ; direct_byte           20     8 (fixed)
  1967                           ; jumptable            260     6 (fixed)
  1968                           ;	Chosen strategy is simple_byte
  1969  04AB  3A00               	xorlw	0	; case 0
  1970  04AC  1903               	skipnz
  1971  04AD  2C92               	goto	l2959
  1972  04AE  3A01               	xorlw	1	; case 1
  1973  04AF  1903               	skipnz
  1974  04B0  2C84               	goto	l2955
  1975  04B1  3A02               	xorlw	2	; case 3
  1976  04B2  1903               	skipnz
  1977  04B3  2C8B               	goto	l2957
  1978  04B4  2CF2               	goto	l2987
  1979                           
  1980                           ;main.c: 319: }
  1981  04B5  2CF2               	goto	l2987
  1982  04B6                     l2969:	
  1983                           
  1984                           ;main.c: 322: else if (path[1][n] < y){
  1985  04B6  1283               	bcf	3,5	;RP0=0, select bank0
  1986  04B7  1303               	bcf	3,6	;RP1=0, select bank0
  1987  04B8  0867               	movf	TravelPath@n,w
  1988  04B9  3EB0               	addlw	(low ((_path| 0+16)))& (0+255)
  1989  04BA  0084               	movwf	4
  1990  04BB  083D               	movf	_y,w
  1991  04BC  1383               	bcf	3,7	;select IRP bank1
  1992  04BD  0200               	subwf	0,w
  1993  04BE  1C03               	btfss	3,0
  1994  04BF  2CE7               	goto	l2985
  1995  04C0  2CF2               	goto	l2987
  1996  04C1                     l2973:	
  1997                           ;main.c: 325: case 1: Turn90(1);
  1998                           
  1999                           ;main.c: 323: switch (orientation){
  2000                           
  2001  04C1  3001               	movlw	1
  2002  04C2  120A  118A  24F9  120A  118A  	fcall	_Turn90
  2003                           
  2004                           ;main.c: 326: break;
  2005  04C7  2CF2               	goto	l2987
  2006  04C8                     l2975:	
  2007                           ;main.c: 328: case 3: Turn90(0);
  2008                           
  2009  04C8  3000               	movlw	0
  2010  04C9  120A  118A  24F9  120A  118A  	fcall	_Turn90
  2011                           
  2012                           ;main.c: 329: break;
  2013  04CE  2CF2               	goto	l2987
  2014  04CF                     l2977:	
  2015                           ;main.c: 331: case 2: Turn90(1);
  2016                           
  2017  04CF  3001               	movlw	1
  2018  04D0  120A  118A  24F9  120A  118A  	fcall	_Turn90
  2019                           
  2020                           ;main.c: 332: _delay((unsigned long)((5)*(20000000/4000.0)));
  2021  04D5  3021               	movlw	33
  2022  04D6  1283               	bcf	3,5	;RP0=0, select bank0
  2023  04D7  1303               	bcf	3,6	;RP1=0, select bank0
  2024  04D8  00E6               	movwf	??_TravelPath+1
  2025  04D9  3076               	movlw	118
  2026  04DA  00E5               	movwf	??_TravelPath
  2027  04DB                     u2457:	
  2028  04DB  0BE5               	decfsz	??_TravelPath,f
  2029  04DC  2CDB               	goto	u2457
  2030  04DD  0BE6               	decfsz	??_TravelPath+1,f
  2031  04DE  2CDB               	goto	u2457
  2032  04DF  0000               	nop
  2033                           
  2034                           ;main.c: 333: Turn90(1);
  2035  04E0  3001               	movlw	1
  2036  04E1  120A  118A  24F9  120A  118A  	fcall	_Turn90
  2037                           
  2038                           ;main.c: 335: }
  2039                           
  2040                           ;main.c: 334: break;
  2041  04E6  2CF2               	goto	l2987
  2042  04E7                     l2985:	
  2043  04E7  0879               	movf	_orientation,w
  2044                           
  2045                           ; Switch size 1, requested type "space"
  2046                           ; Number of cases is 3, Range of values is 1 to 3
  2047                           ; switch strategies available:
  2048                           ; Name         Instructions Cycles
  2049                           ; simple_byte           10     6 (average)
  2050                           ; direct_byte           20    11 (fixed)
  2051                           ; jumptable            263     9 (fixed)
  2052                           ;	Chosen strategy is simple_byte
  2053  04E8  3A01               	xorlw	1	; case 1
  2054  04E9  1903               	skipnz
  2055  04EA  2CC1               	goto	l2973
  2056  04EB  3A03               	xorlw	3	; case 2
  2057  04EC  1903               	skipnz
  2058  04ED  2CCF               	goto	l2977
  2059  04EE  3A01               	xorlw	1	; case 3
  2060  04EF  1903               	skipnz
  2061  04F0  2CC8               	goto	l2975
  2062  04F1  2CF2               	goto	l2987
  2063  04F2                     l2987:	
  2064  04F2  3001               	movlw	1
  2065  04F3  1283               	bcf	3,5	;RP0=0, select bank0
  2066  04F4  1303               	bcf	3,6	;RP1=0, select bank0
  2067  04F5  00E5               	movwf	??_TravelPath
  2068  04F6  0865               	movf	??_TravelPath,w
  2069  04F7  07E7               	addwf	TravelPath@n,f
  2070  04F8  2BF3               	goto	l2989
  2071  04F9                     __end_of_TravelPath:	
  2072                           
  2073                           	psect	text7
  2074  04F9                     __ptext7:	
  2075 ;; *************** function _Turn90 *****************
  2076 ;; Defined at:
  2077 ;;		line 39 in file "main.c"
  2078 ;; Parameters:    Size  Location     Type
  2079 ;;  direction       1    wreg     unsigned char 
  2080 ;; Auto vars:     Size  Location     Type
  2081 ;;  direction       1   13[BANK0 ] unsigned char 
  2082 ;; Return value:  Size  Location     Type
  2083 ;;                  1    wreg      void 
  2084 ;; Registers used:
  2085 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2086 ;; Tracked objects:
  2087 ;;		On entry : 0/0
  2088 ;;		On exit  : 0/0
  2089 ;;		Unchanged: 0/0
  2090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2091 ;;      Params:         0       0       0       0       0
  2092 ;;      Locals:         0       1       0       0       0
  2093 ;;      Temps:          0       3       0       0       0
  2094 ;;      Totals:         0       4       0       0       0
  2095 ;;Total ram usage:        4 bytes
  2096 ;; Hardware stack levels used:    1
  2097 ;; Hardware stack levels required when called:    3
  2098 ;; This function calls:
  2099 ;;		_Drive
  2100 ;;		_DriveDirect
  2101 ;;		_getSensorData
  2102 ;; This function is called by:
  2103 ;;		_TravelPath
  2104 ;; This function uses a non-reentrant model
  2105 ;;
  2106                           
  2107                           
  2108                           ;psect for function _Turn90
  2109  04F9                     _Turn90:	
  2110                           
  2111                           ;incstack = 0
  2112                           ; Regs used in _Turn90: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2113                           ;Turn90@direction stored from wreg
  2114  04F9  1283               	bcf	3,5	;RP0=0, select bank0
  2115  04FA  1303               	bcf	3,6	;RP1=0, select bank0
  2116  04FB  00E4               	movwf	Turn90@direction
  2117                           
  2118                           ;main.c: 40: angle = 0;
  2119  04FC  01A4               	clrf	_angle
  2120  04FD  01A5               	clrf	_angle+1
  2121                           
  2122                           ;main.c: 41: if (direction == 1){
  2123  04FE  0364               	decf	Turn90@direction,w
  2124  04FF  1D03               	btfss	3,2
  2125  0500  2D49               	goto	l2653
  2126                           
  2127                           ;main.c: 43: if (orientation == 0)
  2128  0501  0879               	movf	_orientation,w
  2129  0502  1D03               	btfss	3,2
  2130  0503  2D09               	goto	l2643
  2131                           
  2132                           ;main.c: 44: orientation = 3;
  2133  0504  3003               	movlw	3
  2134  0505  00E1               	movwf	??_Turn90
  2135  0506  0861               	movf	??_Turn90,w
  2136  0507  00F9               	movwf	_orientation
  2137  0508  2D0B               	goto	l2645
  2138  0509                     l2643:	
  2139                           
  2140                           ;main.c: 45: else orientation--;
  2141  0509  3001               	movlw	1
  2142  050A  02F9               	subwf	_orientation,f
  2143  050B                     l2645:	
  2144                           
  2145                           ;main.c: 47: Drive(0,150,0x00,0x01);
  2146  050B  3096               	movlw	150
  2147  050C  00E1               	movwf	??_Turn90
  2148  050D  0861               	movf	??_Turn90,w
  2149  050E  00D8               	movwf	Drive@speedL
  2150  050F  01D9               	clrf	Drive@radH
  2151  0510  01DA               	clrf	Drive@radL
  2152  0511  0ADA               	incf	Drive@radL,f
  2153  0512  3000               	movlw	0
  2154  0513  120A  118A  27D2  120A  118A  	fcall	_Drive
  2155  0518                     l2649:	
  2156                           ;main.c: 48: while (angle < 90){
  2157                           
  2158  0518  1283               	bcf	3,5	;RP0=0, select bank0
  2159  0519  1303               	bcf	3,6	;RP1=0, select bank0
  2160  051A  0825               	movf	_angle+1,w
  2161  051B  3A80               	xorlw	128
  2162  051C  00FF               	movwf	127
  2163  051D  3080               	movlw	128
  2164  051E  027F               	subwf	127,w
  2165  051F  1D03               	skipz
  2166  0520  2D23               	goto	u1725
  2167  0521  305A               	movlw	90
  2168  0522  0224               	subwf	_angle,w
  2169  0523                     u1725:	
  2170  0523  1803               	btfsc	3,0
  2171  0524  2D3C               	goto	l2651
  2172                           
  2173                           ;main.c: 49: angle = angle + getSensorData(20,2);
  2174  0525  3002               	movlw	2
  2175  0526  1283               	bcf	3,5	;RP0=0, select bank0
  2176  0527  1303               	bcf	3,6	;RP1=0, select bank0
  2177  0528  00E1               	movwf	??_Turn90
  2178  0529  0861               	movf	??_Turn90,w
  2179  052A  00D9               	movwf	getSensorData@bytes
  2180  052B  3014               	movlw	20
  2181  052C  120A  118A  276B  120A  118A  	fcall	_getSensorData
  2182  0531  1283               	bcf	3,5	;RP0=0, select bank0
  2183  0532  1303               	bcf	3,6	;RP1=0, select bank0
  2184  0533  0824               	movf	_angle,w
  2185  0534  0759               	addwf	?_getSensorData,w
  2186  0535  00A4               	movwf	_angle
  2187  0536  0825               	movf	_angle+1,w
  2188  0537  1803               	skipnc
  2189  0538  0A25               	incf	_angle+1,w
  2190  0539  075A               	addwf	?_getSensorData+1,w
  2191  053A  00A5               	movwf	_angle+1
  2192  053B  2D18               	goto	l2649
  2193  053C                     l2651:	
  2194                           
  2195                           ;main.c: 50: }
  2196                           ;main.c: 51: DriveDirect(0,0);
  2197  053C  3000               	movlw	0
  2198  053D  1283               	bcf	3,5	;RP0=0, select bank0
  2199  053E  1303               	bcf	3,6	;RP1=0, select bank0
  2200  053F  00D8               	movwf	DriveDirect@VelocityRight
  2201  0540  00D9               	movwf	DriveDirect@VelocityRight+1
  2202  0541  3000               	movlw	0
  2203  0542  00DA               	movwf	DriveDirect@VelocityLeft
  2204  0543  00DB               	movwf	DriveDirect@VelocityLeft+1
  2205  0544  120A  118A  2636  120A  118A  	fcall	_DriveDirect
  2206  0549                     l2653:	
  2207                           
  2208                           ;main.c: 52: }
  2209                           ;main.c: 54: if (direction == 0){
  2210  0549  1283               	bcf	3,5	;RP0=0, select bank0
  2211  054A  1303               	bcf	3,6	;RP1=0, select bank0
  2212  054B  0864               	movf	Turn90@direction,w
  2213  054C  1D03               	btfss	3,2
  2214  054D  0008               	return
  2215                           
  2216                           ;main.c: 56: if (orientation == 3)
  2217  054E  3003               	movlw	3
  2218  054F  0679               	xorwf	_orientation,w
  2219  0550  1D03               	btfss	3,2
  2220  0551  2D54               	goto	l2659
  2221                           
  2222                           ;main.c: 57: orientation = 0;
  2223  0552  01F9               	clrf	_orientation
  2224  0553  2D58               	goto	l2661
  2225  0554                     l2659:	
  2226                           
  2227                           ;main.c: 58: else orientation++;
  2228  0554  3001               	movlw	1
  2229  0555  00E1               	movwf	??_Turn90
  2230  0556  0861               	movf	??_Turn90,w
  2231  0557  07F9               	addwf	_orientation,f
  2232  0558                     l2661:	
  2233                           
  2234                           ;main.c: 60: Drive(0,150,0xFF,0xFF);
  2235  0558  3096               	movlw	150
  2236  0559  00E1               	movwf	??_Turn90
  2237  055A  0861               	movf	??_Turn90,w
  2238  055B  00D8               	movwf	Drive@speedL
  2239  055C  30FF               	movlw	255
  2240  055D  00E2               	movwf	??_Turn90+1
  2241  055E  0862               	movf	??_Turn90+1,w
  2242  055F  00D9               	movwf	Drive@radH
  2243  0560  30FF               	movlw	255
  2244  0561  00E3               	movwf	??_Turn90+2
  2245  0562  0863               	movf	??_Turn90+2,w
  2246  0563  00DA               	movwf	Drive@radL
  2247  0564  3000               	movlw	0
  2248  0565  120A  118A  27D2  120A  118A  	fcall	_Drive
  2249  056A                     l2665:	
  2250                           ;main.c: 61: while (angle > -90){
  2251                           
  2252  056A  1283               	bcf	3,5	;RP0=0, select bank0
  2253  056B  1303               	bcf	3,6	;RP1=0, select bank0
  2254  056C  0825               	movf	_angle+1,w
  2255  056D  3A80               	xorlw	128
  2256  056E  00FF               	movwf	127
  2257  056F  307F               	movlw	127
  2258  0570  027F               	subwf	127,w
  2259  0571  1D03               	skipz
  2260  0572  2D75               	goto	u1755
  2261  0573  30A7               	movlw	167
  2262  0574  0224               	subwf	_angle,w
  2263  0575                     u1755:	
  2264  0575  1C03               	btfss	3,0
  2265  0576  2D8E               	goto	l2667
  2266                           
  2267                           ;main.c: 62: angle = angle + getSensorData(20,2);
  2268  0577  3002               	movlw	2
  2269  0578  1283               	bcf	3,5	;RP0=0, select bank0
  2270  0579  1303               	bcf	3,6	;RP1=0, select bank0
  2271  057A  00E1               	movwf	??_Turn90
  2272  057B  0861               	movf	??_Turn90,w
  2273  057C  00D9               	movwf	getSensorData@bytes
  2274  057D  3014               	movlw	20
  2275  057E  120A  118A  276B  120A  118A  	fcall	_getSensorData
  2276  0583  1283               	bcf	3,5	;RP0=0, select bank0
  2277  0584  1303               	bcf	3,6	;RP1=0, select bank0
  2278  0585  0824               	movf	_angle,w
  2279  0586  0759               	addwf	?_getSensorData,w
  2280  0587  00A4               	movwf	_angle
  2281  0588  0825               	movf	_angle+1,w
  2282  0589  1803               	skipnc
  2283  058A  0A25               	incf	_angle+1,w
  2284  058B  075A               	addwf	?_getSensorData+1,w
  2285  058C  00A5               	movwf	_angle+1
  2286  058D  2D6A               	goto	l2665
  2287  058E                     l2667:	
  2288                           
  2289                           ;main.c: 63: }
  2290                           ;main.c: 64: DriveDirect(0,0);
  2291  058E  3000               	movlw	0
  2292  058F  1283               	bcf	3,5	;RP0=0, select bank0
  2293  0590  1303               	bcf	3,6	;RP1=0, select bank0
  2294  0591  00D8               	movwf	DriveDirect@VelocityRight
  2295  0592  00D9               	movwf	DriveDirect@VelocityRight+1
  2296  0593  3000               	movlw	0
  2297  0594  00DA               	movwf	DriveDirect@VelocityLeft
  2298  0595  00DB               	movwf	DriveDirect@VelocityLeft+1
  2299  0596  120A  118A  2636   	fcall	_DriveDirect
  2300  0599  0008               	return
  2301  059A                     __end_of_Turn90:	
  2302                           
  2303                           	psect	text8
  2304  07D2                     __ptext8:	
  2305 ;; *************** function _Drive *****************
  2306 ;; Defined at:
  2307 ;;		line 45 in file "ser.c"
  2308 ;; Parameters:    Size  Location     Type
  2309 ;;  speedH          1    wreg     unsigned char 
  2310 ;;  speedL          1    1[BANK0 ] unsigned char 
  2311 ;;  radH            1    2[BANK0 ] unsigned char 
  2312 ;;  radL            1    3[BANK0 ] unsigned char 
  2313 ;; Auto vars:     Size  Location     Type
  2314 ;;  speedH          1    4[BANK0 ] unsigned char 
  2315 ;; Return value:  Size  Location     Type
  2316 ;;                  1    wreg      void 
  2317 ;; Registers used:
  2318 ;;		wreg, status,2, status,0, pclath, cstack
  2319 ;; Tracked objects:
  2320 ;;		On entry : 0/0
  2321 ;;		On exit  : 0/0
  2322 ;;		Unchanged: 0/0
  2323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2324 ;;      Params:         0       3       0       0       0
  2325 ;;      Locals:         0       1       0       0       0
  2326 ;;      Temps:          0       0       0       0       0
  2327 ;;      Totals:         0       4       0       0       0
  2328 ;;Total ram usage:        4 bytes
  2329 ;; Hardware stack levels used:    1
  2330 ;; Hardware stack levels required when called:    2
  2331 ;; This function calls:
  2332 ;;		_ser_putch
  2333 ;; This function is called by:
  2334 ;;		_Turn90
  2335 ;; This function uses a non-reentrant model
  2336 ;;
  2337                           
  2338                           
  2339                           ;psect for function _Drive
  2340  07D2                     _Drive:	
  2341                           
  2342                           ;incstack = 0
  2343                           ; Regs used in _Drive: [wreg+status,2+status,0+pclath+cstack]
  2344                           ;Drive@speedH stored from wreg
  2345  07D2  1283               	bcf	3,5	;RP0=0, select bank0
  2346  07D3  1303               	bcf	3,6	;RP1=0, select bank0
  2347  07D4  00DB               	movwf	Drive@speedH
  2348                           
  2349                           ;ser.c: 46: ser_putch(137);
  2350  07D5  3089               	movlw	137
  2351  07D6  120A  158A  26F0  120A  118A  	fcall	_ser_putch
  2352                           
  2353                           ;ser.c: 47: ser_putch(speedH);
  2354  07DB  1283               	bcf	3,5	;RP0=0, select bank0
  2355  07DC  1303               	bcf	3,6	;RP1=0, select bank0
  2356  07DD  085B               	movf	Drive@speedH,w
  2357  07DE  120A  158A  26F0  120A  118A  	fcall	_ser_putch
  2358                           
  2359                           ;ser.c: 48: ser_putch(speedL);
  2360  07E3  1283               	bcf	3,5	;RP0=0, select bank0
  2361  07E4  1303               	bcf	3,6	;RP1=0, select bank0
  2362  07E5  0858               	movf	Drive@speedL,w
  2363  07E6  120A  158A  26F0  120A  118A  	fcall	_ser_putch
  2364                           
  2365                           ;ser.c: 49: ser_putch(radH);
  2366  07EB  1283               	bcf	3,5	;RP0=0, select bank0
  2367  07EC  1303               	bcf	3,6	;RP1=0, select bank0
  2368  07ED  0859               	movf	Drive@radH,w
  2369  07EE  120A  158A  26F0  120A  118A  	fcall	_ser_putch
  2370                           
  2371                           ;ser.c: 50: ser_putch(radL);
  2372  07F3  1283               	bcf	3,5	;RP0=0, select bank0
  2373  07F4  1303               	bcf	3,6	;RP1=0, select bank0
  2374  07F5  085A               	movf	Drive@radL,w
  2375  07F6  120A  158A  26F0   	fcall	_ser_putch
  2376  07F9  0008               	return
  2377  07FA                     __end_of_Drive:	
  2378                           
  2379                           	psect	text9
  2380  06C3                     __ptext9:	
  2381 ;; *************** function _Drive1m *****************
  2382 ;; Defined at:
  2383 ;;		line 15 in file "main.c"
  2384 ;; Parameters:    Size  Location     Type
  2385 ;;		None
  2386 ;; Auto vars:     Size  Location     Type
  2387 ;;		None
  2388 ;; Return value:  Size  Location     Type
  2389 ;;                  1    wreg      void 
  2390 ;; Registers used:
  2391 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2392 ;; Tracked objects:
  2393 ;;		On entry : 0/0
  2394 ;;		On exit  : 0/0
  2395 ;;		Unchanged: 0/0
  2396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2397 ;;      Params:         0       0       0       0       0
  2398 ;;      Locals:         0       0       0       0       0
  2399 ;;      Temps:          0       1       0       0       0
  2400 ;;      Totals:         0       1       0       0       0
  2401 ;;Total ram usage:        1 bytes
  2402 ;; Hardware stack levels used:    1
  2403 ;; Hardware stack levels required when called:    3
  2404 ;; This function calls:
  2405 ;;		_DriveDirect
  2406 ;;		_getSensorData
  2407 ;; This function is called by:
  2408 ;;		_TravelPath
  2409 ;; This function uses a non-reentrant model
  2410 ;;
  2411                           
  2412                           
  2413                           ;psect for function _Drive1m
  2414  06C3                     _Drive1m:	
  2415                           
  2416                           ;main.c: 19: switch(orientation){
  2417                           
  2418                           ;incstack = 0
  2419                           ; Regs used in _Drive1m: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2420  06C3  2EDC               	goto	l2623
  2421  06C4                     l2613:	
  2422                           ;main.c: 20: case 0: y--;
  2423                           
  2424  06C4  3001               	movlw	1
  2425  06C5  1283               	bcf	3,5	;RP0=0, select bank0
  2426  06C6  1303               	bcf	3,6	;RP1=0, select bank0
  2427  06C7  02BD               	subwf	_y,f
  2428                           
  2429                           ;main.c: 21: break;
  2430  06C8  2EEA               	goto	l2625
  2431  06C9                     l2615:	
  2432                           ;main.c: 22: case 1: x++;
  2433                           
  2434  06C9  3001               	movlw	1
  2435  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  2436  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  2437  06CC  00E1               	movwf	??_Drive1m
  2438  06CD  0861               	movf	??_Drive1m,w
  2439  06CE  07D6               	addwf	_x,f
  2440                           
  2441                           ;main.c: 23: break;
  2442  06CF  2EEA               	goto	l2625
  2443  06D0                     l2617:	
  2444                           ;main.c: 24: case 2: y++;
  2445                           
  2446  06D0  3001               	movlw	1
  2447  06D1  1283               	bcf	3,5	;RP0=0, select bank0
  2448  06D2  1303               	bcf	3,6	;RP1=0, select bank0
  2449  06D3  00E1               	movwf	??_Drive1m
  2450  06D4  0861               	movf	??_Drive1m,w
  2451  06D5  07BD               	addwf	_y,f
  2452                           
  2453                           ;main.c: 25: break;
  2454  06D6  2EEA               	goto	l2625
  2455  06D7                     l2619:	
  2456                           ;main.c: 26: case 3: x--;
  2457                           
  2458  06D7  3001               	movlw	1
  2459  06D8  1283               	bcf	3,5	;RP0=0, select bank0
  2460  06D9  1303               	bcf	3,6	;RP1=0, select bank0
  2461  06DA  02D6               	subwf	_x,f
  2462                           
  2463                           ;main.c: 28: }
  2464                           
  2465                           ;main.c: 27: break;
  2466  06DB  2EEA               	goto	l2625
  2467  06DC                     l2623:	
  2468  06DC  0879               	movf	_orientation,w
  2469                           
  2470                           ; Switch size 1, requested type "space"
  2471                           ; Number of cases is 4, Range of values is 0 to 3
  2472                           ; switch strategies available:
  2473                           ; Name         Instructions Cycles
  2474                           ; simple_byte           13     7 (average)
  2475                           ; direct_byte           20     8 (fixed)
  2476                           ; jumptable            260     6 (fixed)
  2477                           ;	Chosen strategy is simple_byte
  2478  06DD  3A00               	xorlw	0	; case 0
  2479  06DE  1903               	skipnz
  2480  06DF  2EC4               	goto	l2613
  2481  06E0  3A01               	xorlw	1	; case 1
  2482  06E1  1903               	skipnz
  2483  06E2  2EC9               	goto	l2615
  2484  06E3  3A03               	xorlw	3	; case 2
  2485  06E4  1903               	skipnz
  2486  06E5  2ED0               	goto	l2617
  2487  06E6  3A01               	xorlw	1	; case 3
  2488  06E7  1903               	skipnz
  2489  06E8  2ED7               	goto	l2619
  2490  06E9  2EEA               	goto	l2625
  2491  06EA                     l2625:	
  2492                           
  2493                           ;main.c: 30: distance = 0;
  2494  06EA  1283               	bcf	3,5	;RP0=0, select bank0
  2495  06EB  1303               	bcf	3,6	;RP1=0, select bank0
  2496  06EC  01A6               	clrf	_distance
  2497  06ED  01A7               	clrf	_distance+1
  2498                           
  2499                           ;main.c: 31: DriveDirect(250,250);
  2500  06EE  30FA               	movlw	250
  2501  06EF  00D8               	movwf	DriveDirect@VelocityRight
  2502  06F0  3000               	movlw	0
  2503  06F1  00D9               	movwf	DriveDirect@VelocityRight+1
  2504  06F2  30FA               	movlw	250
  2505  06F3  00DA               	movwf	DriveDirect@VelocityLeft
  2506  06F4  3000               	movlw	0
  2507  06F5  00DB               	movwf	DriveDirect@VelocityLeft+1
  2508  06F6  120A  118A  2636  120A  118A  	fcall	_DriveDirect
  2509  06FB                     l2631:	
  2510                           ;main.c: 32: while (distance < 1000){
  2511                           
  2512  06FB  1283               	bcf	3,5	;RP0=0, select bank0
  2513  06FC  1303               	bcf	3,6	;RP1=0, select bank0
  2514  06FD  0827               	movf	_distance+1,w
  2515  06FE  3A80               	xorlw	128
  2516  06FF  00FF               	movwf	127
  2517  0700  3083               	movlw	131
  2518  0701  027F               	subwf	127,w
  2519  0702  1D03               	skipz
  2520  0703  2F06               	goto	u1695
  2521  0704  30E8               	movlw	232
  2522  0705  0226               	subwf	_distance,w
  2523  0706                     u1695:	
  2524  0706  1803               	btfsc	3,0
  2525  0707  2F1F               	goto	l2633
  2526                           
  2527                           ;main.c: 33: distance = distance + getSensorData(19,2);
  2528  0708  3002               	movlw	2
  2529  0709  1283               	bcf	3,5	;RP0=0, select bank0
  2530  070A  1303               	bcf	3,6	;RP1=0, select bank0
  2531  070B  00E1               	movwf	??_Drive1m
  2532  070C  0861               	movf	??_Drive1m,w
  2533  070D  00D9               	movwf	getSensorData@bytes
  2534  070E  3013               	movlw	19
  2535  070F  120A  118A  276B  120A  118A  	fcall	_getSensorData
  2536  0714  1283               	bcf	3,5	;RP0=0, select bank0
  2537  0715  1303               	bcf	3,6	;RP1=0, select bank0
  2538  0716  0826               	movf	_distance,w
  2539  0717  0759               	addwf	?_getSensorData,w
  2540  0718  00A6               	movwf	_distance
  2541  0719  0827               	movf	_distance+1,w
  2542  071A  1803               	skipnc
  2543  071B  0A27               	incf	_distance+1,w
  2544  071C  075A               	addwf	?_getSensorData+1,w
  2545  071D  00A7               	movwf	_distance+1
  2546  071E  2EFB               	goto	l2631
  2547  071F                     l2633:	
  2548                           
  2549                           ;main.c: 34: }
  2550                           ;main.c: 35: DriveDirect(0,0);
  2551  071F  3000               	movlw	0
  2552  0720  1283               	bcf	3,5	;RP0=0, select bank0
  2553  0721  1303               	bcf	3,6	;RP1=0, select bank0
  2554  0722  00D8               	movwf	DriveDirect@VelocityRight
  2555  0723  00D9               	movwf	DriveDirect@VelocityRight+1
  2556  0724  3000               	movlw	0
  2557  0725  00DA               	movwf	DriveDirect@VelocityLeft
  2558  0726  00DB               	movwf	DriveDirect@VelocityLeft+1
  2559  0727  120A  118A  2636   	fcall	_DriveDirect
  2560  072A  0008               	return
  2561  072B                     __end_of_Drive1m:	
  2562                           
  2563                           	psect	text10
  2564  076B                     __ptext10:	
  2565 ;; *************** function _getSensorData *****************
  2566 ;; Defined at:
  2567 ;;		line 85 in file "ser.c"
  2568 ;; Parameters:    Size  Location     Type
  2569 ;;  packetID        1    wreg     unsigned char 
  2570 ;;  bytes           1    2[BANK0 ] unsigned char 
  2571 ;; Auto vars:     Size  Location     Type
  2572 ;;  packetID        1    6[BANK0 ] unsigned char 
  2573 ;;  sensor          2    7[BANK0 ] int 
  2574 ;; Return value:  Size  Location     Type
  2575 ;;                  2    2[BANK0 ] int 
  2576 ;; Registers used:
  2577 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2578 ;; Tracked objects:
  2579 ;;		On entry : 0/0
  2580 ;;		On exit  : 0/0
  2581 ;;		Unchanged: 0/0
  2582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2583 ;;      Params:         0       2       0       0       0
  2584 ;;      Locals:         0       3       0       0       0
  2585 ;;      Temps:          0       2       0       0       0
  2586 ;;      Totals:         0       7       0       0       0
  2587 ;;Total ram usage:        7 bytes
  2588 ;; Hardware stack levels used:    1
  2589 ;; Hardware stack levels required when called:    2
  2590 ;; This function calls:
  2591 ;;		_ser_getch
  2592 ;;		_ser_putch
  2593 ;; This function is called by:
  2594 ;;		_Drive1m
  2595 ;;		_Turn90
  2596 ;; This function uses a non-reentrant model
  2597 ;;
  2598                           
  2599                           
  2600                           ;psect for function _getSensorData
  2601  076B                     _getSensorData:	
  2602                           
  2603                           ;incstack = 0
  2604                           ; Regs used in _getSensorData: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2605                           ;getSensorData@packetID stored from wreg
  2606  076B  1283               	bcf	3,5	;RP0=0, select bank0
  2607  076C  1303               	bcf	3,6	;RP1=0, select bank0
  2608  076D  00DD               	movwf	getSensorData@packetID
  2609                           
  2610                           ;ser.c: 86: ser_putch(142);
  2611  076E  308E               	movlw	142
  2612  076F  120A  158A  26F0  120A  118A  	fcall	_ser_putch
  2613                           
  2614                           ;ser.c: 87: ser_putch(packetID);
  2615  0774  1283               	bcf	3,5	;RP0=0, select bank0
  2616  0775  1303               	bcf	3,6	;RP1=0, select bank0
  2617  0776  085D               	movf	getSensorData@packetID,w
  2618  0777  120A  158A  26F0  120A  118A  	fcall	_ser_putch
  2619                           
  2620                           ;ser.c: 89: if (bytes == 2)
  2621  077C  3002               	movlw	2
  2622  077D  1283               	bcf	3,5	;RP0=0, select bank0
  2623  077E  1303               	bcf	3,6	;RP1=0, select bank0
  2624  077F  0659               	xorwf	getSensorData@bytes,w
  2625  0780  1D03               	btfss	3,2
  2626  0781  2F8D               	goto	l2583
  2627                           
  2628                           ;ser.c: 90: highByte = ser_getch();
  2629  0782  120A  158A  26E6  120A  118A  	fcall	_ser_getch
  2630  0787  1283               	bcf	3,5	;RP0=0, select bank0
  2631  0788  1303               	bcf	3,6	;RP1=0, select bank0
  2632  0789  00DB               	movwf	??_getSensorData
  2633  078A  085B               	movf	??_getSensorData,w
  2634  078B  00F8               	movwf	_highByte
  2635  078C  2F8E               	goto	l2585
  2636  078D                     l2583:	
  2637                           
  2638                           ;ser.c: 91: else
  2639                           ;ser.c: 92: highByte = 0;
  2640  078D  01F8               	clrf	_highByte
  2641  078E                     l2585:	
  2642                           
  2643                           ;ser.c: 94: lowByte = ser_getch();
  2644  078E  120A  158A  26E6   	fcall	_ser_getch
  2645  0791  1283               	bcf	3,5	;RP0=0, select bank0
  2646  0792  1303               	bcf	3,6	;RP1=0, select bank0
  2647  0793  00DB               	movwf	??_getSensorData
  2648  0794  085B               	movf	??_getSensorData,w
  2649  0795  00B2               	movwf	_lowByte
  2650                           
  2651                           ;ser.c: 96: signed int sensor = (256*highByte + lowByte);
  2652  0796  0878               	movf	_highByte,w
  2653  0797  00DB               	movwf	??_getSensorData
  2654  0798  01DC               	clrf	??_getSensorData+1
  2655  0799  085B               	movf	??_getSensorData,w
  2656  079A  00DC               	movwf	??_getSensorData+1
  2657  079B  01DB               	clrf	??_getSensorData
  2658  079C  0832               	movf	_lowByte,w
  2659  079D  075B               	addwf	??_getSensorData,w
  2660  079E  00DE               	movwf	getSensorData@sensor
  2661  079F  3000               	movlw	0
  2662  07A0  1803               	skipnc
  2663  07A1  3001               	movlw	1
  2664  07A2  075C               	addwf	??_getSensorData+1,w
  2665  07A3  00DF               	movwf	getSensorData@sensor+1
  2666                           
  2667                           ;ser.c: 98: return sensor;
  2668  07A4  085F               	movf	getSensorData@sensor+1,w
  2669  07A5  00DA               	movwf	?_getSensorData+1
  2670  07A6  085E               	movf	getSensorData@sensor,w
  2671  07A7  00D9               	movwf	?_getSensorData
  2672  07A8  0008               	return
  2673  07A9                     __end_of_getSensorData:	
  2674                           
  2675                           	psect	text11
  2676  0EE6                     __ptext11:	
  2677 ;; *************** function _ser_getch *****************
  2678 ;; Defined at:
  2679 ;;		line 35 in file "ser.c"
  2680 ;; Parameters:    Size  Location     Type
  2681 ;;		None
  2682 ;; Auto vars:     Size  Location     Type
  2683 ;;  rxbyte          1    1[BANK0 ] unsigned char 
  2684 ;; Return value:  Size  Location     Type
  2685 ;;                  1    wreg      unsigned char 
  2686 ;; Registers used:
  2687 ;;		wreg
  2688 ;; Tracked objects:
  2689 ;;		On entry : 0/0
  2690 ;;		On exit  : 0/0
  2691 ;;		Unchanged: 0/0
  2692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2693 ;;      Params:         0       0       0       0       0
  2694 ;;      Locals:         0       1       0       0       0
  2695 ;;      Temps:          0       1       0       0       0
  2696 ;;      Totals:         0       2       0       0       0
  2697 ;;Total ram usage:        2 bytes
  2698 ;; Hardware stack levels used:    1
  2699 ;; Hardware stack levels required when called:    1
  2700 ;; This function calls:
  2701 ;;		Nothing
  2702 ;; This function is called by:
  2703 ;;		_getSensorData
  2704 ;; This function uses a non-reentrant model
  2705 ;;
  2706                           
  2707                           
  2708                           ;psect for function _ser_getch
  2709  0EE6                     _ser_getch:	
  2710  0EE6                     l668:	
  2711                           ;ser.c: 36: while(!RCIF);
  2712                           
  2713                           ;incstack = 0
  2714                           ; Regs used in _ser_getch: [wreg]
  2715                           
  2716  0EE6  1283               	bcf	3,5	;RP0=0, select bank0
  2717  0EE7  1303               	bcf	3,6	;RP1=0, select bank0
  2718  0EE8  1E8C               	btfss	12,5	;volatile
  2719  0EE9  2EE6               	goto	l668
  2720                           
  2721                           ;ser.c: 37: unsigned char rxbyte = RCREG;
  2722  0EEA  081A               	movf	26,w	;volatile
  2723  0EEB  00D7               	movwf	??_ser_getch
  2724  0EEC  0857               	movf	??_ser_getch,w
  2725  0EED  00D8               	movwf	ser_getch@rxbyte
  2726                           
  2727                           ;ser.c: 38: return rxbyte;
  2728  0EEE  0858               	movf	ser_getch@rxbyte,w
  2729  0EEF  0008               	return
  2730  0EF0                     __end_of_ser_getch:	
  2731                           
  2732                           	psect	text12
  2733  0636                     __ptext12:	
  2734 ;; *************** function _DriveDirect *****************
  2735 ;; Defined at:
  2736 ;;		line 54 in file "ser.c"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;  VelocityRigh    2    1[BANK0 ] int 
  2739 ;;  VelocityLeft    2    3[BANK0 ] int 
  2740 ;; Auto vars:     Size  Location     Type
  2741 ;;  data            2    8[BANK0 ] unsigned int 
  2742 ;;  data            2    6[BANK0 ] unsigned int 
  2743 ;; Return value:  Size  Location     Type
  2744 ;;                  1    wreg      void 
  2745 ;; Registers used:
  2746 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2747 ;; Tracked objects:
  2748 ;;		On entry : 0/0
  2749 ;;		On exit  : 0/0
  2750 ;;		Unchanged: 0/0
  2751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2752 ;;      Params:         0       4       0       0       0
  2753 ;;      Locals:         0       4       0       0       0
  2754 ;;      Temps:          0       1       0       0       0
  2755 ;;      Totals:         0       9       0       0       0
  2756 ;;Total ram usage:        9 bytes
  2757 ;; Hardware stack levels used:    1
  2758 ;; Hardware stack levels required when called:    2
  2759 ;; This function calls:
  2760 ;;		_ser_putch
  2761 ;; This function is called by:
  2762 ;;		_Drive1m
  2763 ;;		_Turn90
  2764 ;; This function uses a non-reentrant model
  2765 ;;
  2766                           
  2767                           
  2768                           ;psect for function _DriveDirect
  2769  0636                     _DriveDirect:	
  2770                           
  2771                           ;ser.c: 55: RightSpeedH = 0;
  2772                           
  2773                           ;incstack = 0
  2774                           ; Regs used in _DriveDirect: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2775  0636  1283               	bcf	3,5	;RP0=0, select bank0
  2776  0637  1303               	bcf	3,6	;RP1=0, select bank0
  2777  0638  01AE               	clrf	_RightSpeedH
  2778                           
  2779                           ;ser.c: 56: LeftSpeedH = 0;
  2780  0639  01AA               	clrf	_LeftSpeedH
  2781                           
  2782                           ;ser.c: 58: if(VelocityRight > 255){
  2783  063A  0859               	movf	DriveDirect@VelocityRight+1,w
  2784  063B  3A80               	xorlw	128
  2785  063C  00FF               	movwf	127
  2786  063D  3081               	movlw	129
  2787  063E  027F               	subwf	127,w
  2788  063F  1D03               	skipz
  2789  0640  2E43               	goto	u1625
  2790  0641  3000               	movlw	0
  2791  0642  0258               	subwf	DriveDirect@VelocityRight,w
  2792  0643                     u1625:	
  2793  0643  1C03               	skipc
  2794  0644  2E66               	goto	l2549
  2795                           
  2796                           ;ser.c: 59: unsigned int data = VelocityRight;
  2797  0645  1283               	bcf	3,5	;RP0=0, select bank0
  2798  0646  1303               	bcf	3,6	;RP1=0, select bank0
  2799  0647  0859               	movf	DriveDirect@VelocityRight+1,w
  2800  0648  00DE               	movwf	DriveDirect@data+1
  2801  0649  0858               	movf	DriveDirect@VelocityRight,w
  2802  064A  00DD               	movwf	DriveDirect@data
  2803                           
  2804                           ;ser.c: 60: for (RightSpeedH = 0; data > 255; RightSpeedH++){
  2805  064B  01AE               	clrf	_RightSpeedH
  2806  064C  3001               	movlw	1
  2807  064D  025E               	subwf	DriveDirect@data+1,w
  2808  064E  3000               	movlw	0
  2809  064F  1903               	skipnz
  2810  0650  025D               	subwf	DriveDirect@data,w
  2811  0651  1C03               	btfss	3,0
  2812  0652  2E66               	goto	l2549
  2813  0653                     l2545:	
  2814                           
  2815                           ;ser.c: 61: data = data - 256;
  2816  0653  085D               	movf	DriveDirect@data,w
  2817  0654  3E00               	addlw	0
  2818  0655  00DD               	movwf	DriveDirect@data
  2819  0656  085E               	movf	DriveDirect@data+1,w
  2820  0657  1803               	skipnc
  2821  0658  3E01               	addlw	1
  2822  0659  3EFF               	addlw	255
  2823  065A  00DE               	movwf	DriveDirect@data+1
  2824  065B  3001               	movlw	1
  2825  065C  00DC               	movwf	??_DriveDirect
  2826  065D  085C               	movf	??_DriveDirect,w
  2827  065E  07AE               	addwf	_RightSpeedH,f
  2828  065F  3001               	movlw	1
  2829  0660  025E               	subwf	DriveDirect@data+1,w
  2830  0661  3000               	movlw	0
  2831  0662  1903               	skipnz
  2832  0663  025D               	subwf	DriveDirect@data,w
  2833  0664  1803               	skipnc
  2834  0665  2E53               	goto	l2545
  2835  0666                     l2549:	
  2836                           
  2837                           ;ser.c: 62: }
  2838                           ;ser.c: 63: }
  2839                           ;ser.c: 64: RightSpeedL = VelocityRight;
  2840  0666  1283               	bcf	3,5	;RP0=0, select bank0
  2841  0667  1303               	bcf	3,6	;RP1=0, select bank0
  2842  0668  0858               	movf	DriveDirect@VelocityRight,w
  2843  0669  00DC               	movwf	??_DriveDirect
  2844  066A  085C               	movf	??_DriveDirect,w
  2845  066B  00AF               	movwf	_RightSpeedL
  2846                           
  2847                           ;ser.c: 67: if(VelocityLeft > 255){
  2848  066C  085B               	movf	DriveDirect@VelocityLeft+1,w
  2849  066D  3A80               	xorlw	128
  2850  066E  00FF               	movwf	127
  2851  066F  3081               	movlw	129
  2852  0670  027F               	subwf	127,w
  2853  0671  1D03               	skipz
  2854  0672  2E75               	goto	u1655
  2855  0673  3000               	movlw	0
  2856  0674  025A               	subwf	DriveDirect@VelocityLeft,w
  2857  0675                     u1655:	
  2858  0675  1C03               	skipc
  2859  0676  2E98               	goto	l2565
  2860                           
  2861                           ;ser.c: 68: unsigned int data = VelocityLeft;
  2862  0677  1283               	bcf	3,5	;RP0=0, select bank0
  2863  0678  1303               	bcf	3,6	;RP1=0, select bank0
  2864  0679  085B               	movf	DriveDirect@VelocityLeft+1,w
  2865  067A  00E0               	movwf	DriveDirect@data_388+1
  2866  067B  085A               	movf	DriveDirect@VelocityLeft,w
  2867  067C  00DF               	movwf	DriveDirect@data_388
  2868                           
  2869                           ;ser.c: 69: for (LeftSpeedH = 0; data > 255; LeftSpeedH++){
  2870  067D  01AA               	clrf	_LeftSpeedH
  2871  067E  3001               	movlw	1
  2872  067F  0260               	subwf	DriveDirect@data_388+1,w
  2873  0680  3000               	movlw	0
  2874  0681  1903               	skipnz
  2875  0682  025F               	subwf	DriveDirect@data_388,w
  2876  0683  1C03               	btfss	3,0
  2877  0684  2E98               	goto	l2565
  2878  0685                     l2561:	
  2879                           
  2880                           ;ser.c: 70: data = data - 256;
  2881  0685  085F               	movf	DriveDirect@data_388,w
  2882  0686  3E00               	addlw	0
  2883  0687  00DF               	movwf	DriveDirect@data_388
  2884  0688  0860               	movf	DriveDirect@data_388+1,w
  2885  0689  1803               	skipnc
  2886  068A  3E01               	addlw	1
  2887  068B  3EFF               	addlw	255
  2888  068C  00E0               	movwf	DriveDirect@data_388+1
  2889  068D  3001               	movlw	1
  2890  068E  00DC               	movwf	??_DriveDirect
  2891  068F  085C               	movf	??_DriveDirect,w
  2892  0690  07AA               	addwf	_LeftSpeedH,f
  2893  0691  3001               	movlw	1
  2894  0692  0260               	subwf	DriveDirect@data_388+1,w
  2895  0693  3000               	movlw	0
  2896  0694  1903               	skipnz
  2897  0695  025F               	subwf	DriveDirect@data_388,w
  2898  0696  1803               	skipnc
  2899  0697  2E85               	goto	l2561
  2900  0698                     l2565:	
  2901                           
  2902                           ;ser.c: 71: }
  2903                           ;ser.c: 72: }
  2904                           ;ser.c: 73: LeftSpeedL = VelocityLeft;
  2905  0698  1283               	bcf	3,5	;RP0=0, select bank0
  2906  0699  1303               	bcf	3,6	;RP1=0, select bank0
  2907  069A  085A               	movf	DriveDirect@VelocityLeft,w
  2908  069B  00DC               	movwf	??_DriveDirect
  2909  069C  085C               	movf	??_DriveDirect,w
  2910  069D  00AB               	movwf	_LeftSpeedL
  2911                           
  2912                           ;ser.c: 76: ser_putch(145);
  2913  069E  3091               	movlw	145
  2914  069F  120A  158A  26F0  120A  118A  	fcall	_ser_putch
  2915                           
  2916                           ;ser.c: 77: ser_putch(RightSpeedH);
  2917  06A4  1283               	bcf	3,5	;RP0=0, select bank0
  2918  06A5  1303               	bcf	3,6	;RP1=0, select bank0
  2919  06A6  082E               	movf	_RightSpeedH,w
  2920  06A7  120A  158A  26F0  120A  118A  	fcall	_ser_putch
  2921                           
  2922                           ;ser.c: 78: ser_putch(RightSpeedL);
  2923  06AC  1283               	bcf	3,5	;RP0=0, select bank0
  2924  06AD  1303               	bcf	3,6	;RP1=0, select bank0
  2925  06AE  082F               	movf	_RightSpeedL,w
  2926  06AF  120A  158A  26F0  120A  118A  	fcall	_ser_putch
  2927                           
  2928                           ;ser.c: 79: ser_putch(LeftSpeedH);
  2929  06B4  1283               	bcf	3,5	;RP0=0, select bank0
  2930  06B5  1303               	bcf	3,6	;RP1=0, select bank0
  2931  06B6  082A               	movf	_LeftSpeedH,w
  2932  06B7  120A  158A  26F0  120A  118A  	fcall	_ser_putch
  2933                           
  2934                           ;ser.c: 80: ser_putch(LeftSpeedL);
  2935  06BC  1283               	bcf	3,5	;RP0=0, select bank0
  2936  06BD  1303               	bcf	3,6	;RP1=0, select bank0
  2937  06BE  082B               	movf	_LeftSpeedL,w
  2938  06BF  120A  158A  26F0   	fcall	_ser_putch
  2939  06C2  0008               	return
  2940  06C3                     __end_of_DriveDirect:	
  2941                           
  2942                           	psect	text13
  2943  0EF0                     __ptext13:	
  2944 ;; *************** function _ser_putch *****************
  2945 ;; Defined at:
  2946 ;;		line 30 in file "ser.c"
  2947 ;; Parameters:    Size  Location     Type
  2948 ;;  c               1    wreg     unsigned char 
  2949 ;; Auto vars:     Size  Location     Type
  2950 ;;  c               1    0[BANK0 ] unsigned char 
  2951 ;; Return value:  Size  Location     Type
  2952 ;;                  1    wreg      void 
  2953 ;; Registers used:
  2954 ;;		wreg
  2955 ;; Tracked objects:
  2956 ;;		On entry : 0/0
  2957 ;;		On exit  : 0/0
  2958 ;;		Unchanged: 0/0
  2959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2960 ;;      Params:         0       0       0       0       0
  2961 ;;      Locals:         0       1       0       0       0
  2962 ;;      Temps:          0       0       0       0       0
  2963 ;;      Totals:         0       1       0       0       0
  2964 ;;Total ram usage:        1 bytes
  2965 ;; Hardware stack levels used:    1
  2966 ;; Hardware stack levels required when called:    1
  2967 ;; This function calls:
  2968 ;;		Nothing
  2969 ;; This function is called by:
  2970 ;;		_main
  2971 ;;		_Drive
  2972 ;;		_DriveDirect
  2973 ;;		_getSensorData
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977                           
  2978                           ;psect for function _ser_putch
  2979  0EF0                     _ser_putch:	
  2980                           
  2981                           ;incstack = 0
  2982                           ; Regs used in _ser_putch: [wreg]
  2983                           ;ser_putch@c stored from wreg
  2984  0EF0  1283               	bcf	3,5	;RP0=0, select bank0
  2985  0EF1  1303               	bcf	3,6	;RP1=0, select bank0
  2986  0EF2  00D7               	movwf	ser_putch@c
  2987  0EF3                     l662:	
  2988                           ;ser.c: 31: while(!TRMT);
  2989                           
  2990  0EF3  1683               	bsf	3,5	;RP0=1, select bank1
  2991  0EF4  1303               	bcf	3,6	;RP1=0, select bank1
  2992  0EF5  1C98               	btfss	24,1	;volatile
  2993  0EF6  2EF3               	goto	l662
  2994                           
  2995                           ;ser.c: 32: TXREG=c;
  2996  0EF7  1283               	bcf	3,5	;RP0=0, select bank0
  2997  0EF8  1303               	bcf	3,6	;RP1=0, select bank0
  2998  0EF9  0857               	movf	ser_putch@c,w
  2999  0EFA  0099               	movwf	25	;volatile
  3000  0EFB  0008               	return
  3001  0EFC                     __end_of_ser_putch:	
  3002                           
  3003                           	psect	text14
  3004  0064                     __ptext14:	
  3005 ;; *************** function _PathTo *****************
  3006 ;; Defined at:
  3007 ;;		line 68 in file "main.c"
  3008 ;; Parameters:    Size  Location     Type
  3009 ;;  x_target        1    wreg     unsigned char 
  3010 ;;  y_target        1    5[BANK0 ] unsigned char 
  3011 ;; Auto vars:     Size  Location     Type
  3012 ;;  x_target        1   13[BANK0 ] unsigned char 
  3013 ;;  sum             1   14[BANK0 ] unsigned char 
  3014 ;;  loop            2   15[BANK0 ] int 
  3015 ;; Return value:  Size  Location     Type
  3016 ;;                  1    wreg      void 
  3017 ;; Registers used:
  3018 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3019 ;; Tracked objects:
  3020 ;;		On entry : 0/0
  3021 ;;		On exit  : 0/0
  3022 ;;		Unchanged: 0/0
  3023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3024 ;;      Params:         0       1       0       0       0
  3025 ;;      Locals:         0       4       0       0       0
  3026 ;;      Temps:          0       7       0       0       0
  3027 ;;      Totals:         0      12       0       0       0
  3028 ;;Total ram usage:       12 bytes
  3029 ;; Hardware stack levels used:    1
  3030 ;; Hardware stack levels required when called:    3
  3031 ;; This function calls:
  3032 ;;		___bmul
  3033 ;;		_lcdSetCursor
  3034 ;;		_lcdWriteString
  3035 ;; This function is called by:
  3036 ;;		_main
  3037 ;; This function uses a non-reentrant model
  3038 ;;
  3039                           
  3040                           
  3041                           ;psect for function _PathTo
  3042  0064                     _PathTo:	
  3043                           
  3044                           ;incstack = 0
  3045                           ; Regs used in _PathTo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3046                           ;PathTo@x_target stored from wreg
  3047  0064  1283               	bcf	3,5	;RP0=0, select bank0
  3048  0065  1303               	bcf	3,6	;RP1=0, select bank0
  3049  0066  00E4               	movwf	PathTo@x_target
  3050                           
  3051                           ;main.c: 72: for (r = 0; r <= 3; r++){
  3052  0067  01B5               	clrf	_r
  3053  0068  3004               	movlw	4
  3054  0069  0235               	subwf	_r,w
  3055  006A  1803               	btfsc	3,0
  3056  006B  28A9               	goto	l2717
  3057  006C                     l2701:	
  3058                           
  3059                           ;main.c: 73: for (c = 0; c <= 4; c++){
  3060  006C  01B0               	clrf	_c
  3061  006D  3005               	movlw	5
  3062  006E  0230               	subwf	_c,w
  3063  006F  1803               	btfsc	3,0
  3064  0070  28A1               	goto	l2713
  3065  0071                     l2707:	
  3066                           
  3067                           ;main.c: 74: mazeGrid[r][c] = mazeGridDefault[r][c];
  3068  0071  3005               	movlw	5
  3069  0072  00DD               	movwf	??_PathTo
  3070  0073  085D               	movf	??_PathTo,w
  3071  0074  00D7               	movwf	___bmul@multiplicand
  3072  0075  0835               	movf	_r,w
  3073  0076  120A  158A  272B  120A  118A  	fcall	___bmul
  3074  007B  3EC0               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  3075  007C  1283               	bcf	3,5	;RP0=0, select bank0
  3076  007D  1303               	bcf	3,6	;RP1=0, select bank0
  3077  007E  0730               	addwf	_c,w
  3078  007F  00DE               	movwf	??_PathTo+1
  3079  0080  085E               	movf	??_PathTo+1,w
  3080  0081  0084               	movwf	4
  3081  0082  1383               	bcf	3,7	;select IRP bank1
  3082  0083  0800               	movf	0,w
  3083  0084  00DF               	movwf	??_PathTo+2
  3084  0085  3005               	movlw	5
  3085  0086  00E0               	movwf	??_PathTo+3
  3086  0087  0860               	movf	??_PathTo+3,w
  3087  0088  00D7               	movwf	___bmul@multiplicand
  3088  0089  0835               	movf	_r,w
  3089  008A  120A  158A  272B  120A  118A  	fcall	___bmul
  3090  008F  3E41               	addlw	(low (_mazeGrid| 0))& (0+255)
  3091  0090  1283               	bcf	3,5	;RP0=0, select bank0
  3092  0091  1303               	bcf	3,6	;RP1=0, select bank0
  3093  0092  0730               	addwf	_c,w
  3094  0093  00E1               	movwf	??_PathTo+4
  3095  0094  0861               	movf	??_PathTo+4,w
  3096  0095  0084               	movwf	4
  3097  0096  085F               	movf	??_PathTo+2,w
  3098  0097  1383               	bcf	3,7	;select IRP bank0
  3099  0098  0080               	movwf	0
  3100  0099  3001               	movlw	1
  3101  009A  00DD               	movwf	??_PathTo
  3102  009B  085D               	movf	??_PathTo,w
  3103  009C  07B0               	addwf	_c,f
  3104  009D  3005               	movlw	5
  3105  009E  0230               	subwf	_c,w
  3106  009F  1C03               	skipc
  3107  00A0  2871               	goto	l2707
  3108  00A1                     l2713:	
  3109  00A1  3001               	movlw	1
  3110  00A2  00DD               	movwf	??_PathTo
  3111  00A3  085D               	movf	??_PathTo,w
  3112  00A4  07B5               	addwf	_r,f
  3113  00A5  3004               	movlw	4
  3114  00A6  0235               	subwf	_r,w
  3115  00A7  1C03               	skipc
  3116  00A8  286C               	goto	l2701
  3117  00A9                     l2717:	
  3118                           
  3119                           ;main.c: 75: }
  3120                           ;main.c: 76: }
  3121                           ;main.c: 80: x_path = x;
  3122  00A9  0856               	movf	_x,w
  3123  00AA  00DD               	movwf	??_PathTo
  3124  00AB  085D               	movf	??_PathTo,w
  3125  00AC  00BB               	movwf	_x_path
  3126                           
  3127                           ;main.c: 81: y_path = y;
  3128  00AD  083D               	movf	_y,w
  3129  00AE  00DD               	movwf	??_PathTo
  3130  00AF  085D               	movf	??_PathTo,w
  3131  00B0  00BF               	movwf	_y_path
  3132                           
  3133                           ;main.c: 82: orientation_path = orientation;
  3134  00B1  0879               	movf	_orientation,w
  3135  00B2  00DD               	movwf	??_PathTo
  3136  00B3  085D               	movf	??_PathTo,w
  3137  00B4  00B3               	movwf	_orientation_path
  3138                           
  3139                           ;main.c: 83: pathCount = 0;
  3140  00B5  01B4               	clrf	_pathCount
  3141                           
  3142                           ;main.c: 85: if(IR_Wall == 1){
  3143  00B6  1870               	btfsc	_IR_Wall/(0+8),_IR_Wall& (0+7)
  3144  00B7  2922               	goto	l2735
  3145  00B8  2930               	goto	l2737
  3146  00B9                     l2725:	
  3147                           ;main.c: 87: case 0: (mazeGrid[y][x]) = ((mazeGrid[y][x]) + 4);
  3148                           
  3149                           ;main.c: 86: switch (orientation){
  3150                           
  3151  00B9  3005               	movlw	5
  3152  00BA  00DD               	movwf	??_PathTo
  3153  00BB  085D               	movf	??_PathTo,w
  3154  00BC  00D7               	movwf	___bmul@multiplicand
  3155  00BD  083D               	movf	_y,w
  3156  00BE  120A  158A  272B  120A  118A  	fcall	___bmul
  3157  00C3  3E41               	addlw	(low (_mazeGrid| 0))& (0+255)
  3158  00C4  1283               	bcf	3,5	;RP0=0, select bank0
  3159  00C5  1303               	bcf	3,6	;RP1=0, select bank0
  3160  00C6  0756               	addwf	_x,w
  3161  00C7  00DE               	movwf	??_PathTo+1
  3162  00C8  085E               	movf	??_PathTo+1,w
  3163  00C9  0084               	movwf	4
  3164  00CA  1383               	bcf	3,7	;select IRP bank0
  3165  00CB  0800               	movf	0,w
  3166  00CC  3E04               	addlw	4
  3167  00CD  290C               	goto	L13
  3168  00CE                     l2727:	
  3169                           ;main.c: 89: case 1: (mazeGrid[y][x]) = ((mazeGrid[y][x]) + 2);
  3170                           
  3171                           ;main.c: 88: break;
  3172                           
  3173  00CE  3005               	movlw	5
  3174  00CF  00DD               	movwf	??_PathTo
  3175  00D0  085D               	movf	??_PathTo,w
  3176  00D1  00D7               	movwf	___bmul@multiplicand
  3177  00D2  083D               	movf	_y,w
  3178  00D3  120A  158A  272B  120A  118A  	fcall	___bmul
  3179  00D8  3E41               	addlw	(low (_mazeGrid| 0))& (0+255)
  3180  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  3181  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  3182  00DB  0756               	addwf	_x,w
  3183  00DC  00DE               	movwf	??_PathTo+1
  3184  00DD  085E               	movf	??_PathTo+1,w
  3185  00DE  0084               	movwf	4
  3186  00DF  1383               	bcf	3,7	;select IRP bank0
  3187  00E0  0800               	movf	0,w
  3188  00E1  3E02               	addlw	2
  3189  00E2  290C               	goto	L13
  3190  00E3                     l2729:	
  3191                           ;main.c: 91: case 2: (mazeGrid[y][x]) = ((mazeGrid[y][x]) + 1);
  3192                           
  3193                           ;main.c: 90: break;
  3194                           
  3195  00E3  3005               	movlw	5
  3196  00E4  00DD               	movwf	??_PathTo
  3197  00E5  085D               	movf	??_PathTo,w
  3198  00E6  00D7               	movwf	___bmul@multiplicand
  3199  00E7  083D               	movf	_y,w
  3200  00E8  120A  158A  272B  120A  118A  	fcall	___bmul
  3201  00ED  3E41               	addlw	(low (_mazeGrid| 0))& (0+255)
  3202  00EE  1283               	bcf	3,5	;RP0=0, select bank0
  3203  00EF  1303               	bcf	3,6	;RP1=0, select bank0
  3204  00F0  0756               	addwf	_x,w
  3205  00F1  00DE               	movwf	??_PathTo+1
  3206  00F2  085E               	movf	??_PathTo+1,w
  3207  00F3  0084               	movwf	4
  3208  00F4  1383               	bcf	3,7	;select IRP bank0
  3209  00F5  0800               	movf	0,w
  3210  00F6  3E01               	addlw	1
  3211  00F7  290C               	goto	L13
  3212  00F8                     l2731:	
  3213                           ;main.c: 93: case 3: (mazeGrid[y][x]) = ((mazeGrid[y][x]) + 8);
  3214                           
  3215                           ;main.c: 92: break;
  3216                           
  3217  00F8  3005               	movlw	5
  3218  00F9  00DD               	movwf	??_PathTo
  3219  00FA  085D               	movf	??_PathTo,w
  3220  00FB  00D7               	movwf	___bmul@multiplicand
  3221  00FC  083D               	movf	_y,w
  3222  00FD  120A  158A  272B  120A  118A  	fcall	___bmul
  3223  0102  3E41               	addlw	(low (_mazeGrid| 0))& (0+255)
  3224  0103  1283               	bcf	3,5	;RP0=0, select bank0
  3225  0104  1303               	bcf	3,6	;RP1=0, select bank0
  3226  0105  0756               	addwf	_x,w
  3227  0106  00DE               	movwf	??_PathTo+1
  3228  0107  085E               	movf	??_PathTo+1,w
  3229  0108  0084               	movwf	4
  3230  0109  1383               	bcf	3,7	;select IRP bank0
  3231  010A  0800               	movf	0,w
  3232  010B  3E08               	addlw	8
  3233  010C                     L13:	
  3234  010C  00DF               	movwf	??_PathTo+2
  3235  010D  3005               	movlw	5
  3236  010E  00E0               	movwf	??_PathTo+3
  3237  010F  0860               	movf	??_PathTo+3,w
  3238  0110  00D7               	movwf	___bmul@multiplicand
  3239  0111  083D               	movf	_y,w
  3240  0112  120A  158A  272B  120A  118A  	fcall	___bmul
  3241  0117  3E41               	addlw	(low (_mazeGrid| 0))& (0+255)
  3242  0118  1283               	bcf	3,5	;RP0=0, select bank0
  3243  0119  1303               	bcf	3,6	;RP1=0, select bank0
  3244  011A  0756               	addwf	_x,w
  3245  011B  00E1               	movwf	??_PathTo+4
  3246  011C  0861               	movf	??_PathTo+4,w
  3247  011D  0084               	movwf	4
  3248  011E  085F               	movf	??_PathTo+2,w
  3249  011F  1383               	bcf	3,7	;select IRP bank0
  3250  0120  0080               	movwf	0
  3251                           
  3252                           ;main.c: 95: }
  3253                           
  3254                           ;main.c: 94: break;
  3255  0121  2930               	goto	l2737
  3256  0122                     l2735:	
  3257  0122  0879               	movf	_orientation,w
  3258                           
  3259                           ; Switch size 1, requested type "space"
  3260                           ; Number of cases is 4, Range of values is 0 to 3
  3261                           ; switch strategies available:
  3262                           ; Name         Instructions Cycles
  3263                           ; simple_byte           13     7 (average)
  3264                           ; direct_byte           20     8 (fixed)
  3265                           ; jumptable            260     6 (fixed)
  3266                           ;	Chosen strategy is simple_byte
  3267  0123  3A00               	xorlw	0	; case 0
  3268  0124  1903               	skipnz
  3269  0125  28B9               	goto	l2725
  3270  0126  3A01               	xorlw	1	; case 1
  3271  0127  1903               	skipnz
  3272  0128  28CE               	goto	l2727
  3273  0129  3A03               	xorlw	3	; case 2
  3274  012A  1903               	skipnz
  3275  012B  28E3               	goto	l2729
  3276  012C  3A01               	xorlw	1	; case 3
  3277  012D  1903               	skipnz
  3278  012E  28F8               	goto	l2731
  3279  012F  2930               	goto	l2737
  3280  0130                     l2737:	
  3281                           
  3282                           ;main.c: 96: }
  3283                           ;main.c: 98: lcdSetCursor(0b10000000);
  3284  0130  3080               	movlw	128
  3285  0131  120A  158A  26DD  120A  118A  	fcall	_lcdSetCursor
  3286                           
  3287                           ;main.c: 99: lcdWriteString("Working...");
  3288  0136  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3289  0137  120A  158A  27BE  120A  118A  	fcall	_lcdWriteString
  3290                           
  3291                           ;main.c: 101: for (int loop = 0; loop <= 1000; loop++){
  3292  013C  1283               	bcf	3,5	;RP0=0, select bank0
  3293  013D  1303               	bcf	3,6	;RP1=0, select bank0
  3294  013E  01E6               	clrf	PathTo@loop
  3295  013F  01E7               	clrf	PathTo@loop+1
  3296  0140                     L16:	
  3297  0140  0867               	movf	PathTo@loop+1,w
  3298  0141  3A80               	xorlw	128
  3299  0142  00FF               	movwf	127
  3300  0143  3083               	movlw	131
  3301  0144  027F               	subwf	127,w
  3302  0145  1D03               	skipz
  3303  0146  2949               	goto	u1845
  3304  0147  30E9               	movlw	233
  3305  0148  0266               	subwf	PathTo@loop,w
  3306  0149                     u1845:	
  3307  0149  1803               	btfsc	3,0
  3308  014A  0008               	return
  3309                           
  3310                           ;main.c: 103: reset_flag = 0;
  3311  014B  11F0               	bcf	_reset_flag/(0+8),_reset_flag& (0+7)
  3312                           
  3313                           ;main.c: 105: path[0][pathCount] = x_path;
  3314  014C  1283               	bcf	3,5	;RP0=0, select bank0
  3315  014D  1303               	bcf	3,6	;RP1=0, select bank0
  3316  014E  083B               	movf	_x_path,w
  3317  014F  00DD               	movwf	??_PathTo
  3318  0150  0834               	movf	_pathCount,w
  3319  0151  3EA0               	addlw	(low (_path| 0))& (0+255)
  3320  0152  0084               	movwf	4
  3321  0153  085D               	movf	??_PathTo,w
  3322  0154  1383               	bcf	3,7	;select IRP bank1
  3323  0155  0080               	movwf	0
  3324                           
  3325                           ;main.c: 106: path[1][pathCount] = y_path;
  3326  0156  083F               	movf	_y_path,w
  3327  0157  00DD               	movwf	??_PathTo
  3328  0158  0834               	movf	_pathCount,w
  3329  0159  3EB0               	addlw	(low ((_path| 0+16)))& (0+255)
  3330  015A  0084               	movwf	4
  3331  015B  085D               	movf	??_PathTo,w
  3332  015C  0080               	movwf	0
  3333                           
  3334                           ;main.c: 111: left = gridWalls[0][(mazeGrid[y_path][x_path])];
  3335  015D  3005               	movlw	5
  3336  015E  00DD               	movwf	??_PathTo
  3337  015F  085D               	movf	??_PathTo,w
  3338  0160  00D7               	movwf	___bmul@multiplicand
  3339  0161  083F               	movf	_y_path,w
  3340  0162  120A  158A  272B  120A  118A  	fcall	___bmul
  3341  0167  3E41               	addlw	(low (_mazeGrid| 0))& (0+255)
  3342  0168  1283               	bcf	3,5	;RP0=0, select bank0
  3343  0169  1303               	bcf	3,6	;RP1=0, select bank0
  3344  016A  073B               	addwf	_x_path,w
  3345  016B  00DE               	movwf	??_PathTo+1
  3346  016C  085E               	movf	??_PathTo+1,w
  3347  016D  0084               	movwf	4
  3348  016E  1383               	bcf	3,7	;select IRP bank0
  3349  016F  0800               	movf	0,w
  3350  0170  3E90               	addlw	(low (_gridWalls| (0+256)))& (0+255)
  3351  0171  0084               	movwf	4
  3352  0172  1170               	bcf	_left/(0+8),_left& (0+7)
  3353  0173  1783               	bsf	3,7	;select IRP bank3
  3354  0174  1800               	btfsc	0,0
  3355  0175  1570               	bsf	_left/(0+8),_left& (0+7)
  3356                           
  3357                           ;main.c: 112: up = gridWalls[1][(mazeGrid[y_path][x_path])];
  3358  0176  3005               	movlw	5
  3359  0177  1283               	bcf	3,5	;RP0=0, select bank0
  3360  0178  1303               	bcf	3,6	;RP1=0, select bank0
  3361  0179  00DD               	movwf	??_PathTo
  3362  017A  085D               	movf	??_PathTo,w
  3363  017B  00D7               	movwf	___bmul@multiplicand
  3364  017C  083F               	movf	_y_path,w
  3365  017D  120A  158A  272B  120A  118A  	fcall	___bmul
  3366  0182  3E41               	addlw	(low (_mazeGrid| 0))& (0+255)
  3367  0183  1283               	bcf	3,5	;RP0=0, select bank0
  3368  0184  1303               	bcf	3,6	;RP1=0, select bank0
  3369  0185  073B               	addwf	_x_path,w
  3370  0186  00DE               	movwf	??_PathTo+1
  3371  0187  085E               	movf	??_PathTo+1,w
  3372  0188  0084               	movwf	4
  3373  0189  1383               	bcf	3,7	;select IRP bank0
  3374  018A  0800               	movf	0,w
  3375  018B  3EA0               	addlw	(low ((_gridWalls| (0+256)+16)))& (0+255)
  3376  018C  0084               	movwf	4
  3377  018D  12F0               	bcf	_up/(0+8),_up& (0+7)
  3378  018E  1783               	bsf	3,7	;select IRP bank3
  3379  018F  1800               	btfsc	0,0
  3380  0190  16F0               	bsf	_up/(0+8),_up& (0+7)
  3381                           
  3382                           ;main.c: 113: right = gridWalls[2][(mazeGrid[y_path][x_path])];
  3383  0191  3005               	movlw	5
  3384  0192  1283               	bcf	3,5	;RP0=0, select bank0
  3385  0193  1303               	bcf	3,6	;RP1=0, select bank0
  3386  0194  00DD               	movwf	??_PathTo
  3387  0195  085D               	movf	??_PathTo,w
  3388  0196  00D7               	movwf	___bmul@multiplicand
  3389  0197  083F               	movf	_y_path,w
  3390  0198  120A  158A  272B  120A  118A  	fcall	___bmul
  3391  019D  3E41               	addlw	(low (_mazeGrid| 0))& (0+255)
  3392  019E  1283               	bcf	3,5	;RP0=0, select bank0
  3393  019F  1303               	bcf	3,6	;RP1=0, select bank0
  3394  01A0  073B               	addwf	_x_path,w
  3395  01A1  00DE               	movwf	??_PathTo+1
  3396  01A2  085E               	movf	??_PathTo+1,w
  3397  01A3  0084               	movwf	4
  3398  01A4  1383               	bcf	3,7	;select IRP bank0
  3399  01A5  0800               	movf	0,w
  3400  01A6  3EB0               	addlw	(low ((_gridWalls| (0+256)+32)))& (0+255)
  3401  01A7  0084               	movwf	4
  3402  01A8  1270               	bcf	_right/(0+8),_right& (0+7)
  3403  01A9  1783               	bsf	3,7	;select IRP bank3
  3404  01AA  1800               	btfsc	0,0
  3405  01AB  1670               	bsf	_right/(0+8),_right& (0+7)
  3406                           
  3407                           ;main.c: 114: down = gridWalls[3][(mazeGrid[y_path][x_path])];
  3408  01AC  3005               	movlw	5
  3409  01AD  1283               	bcf	3,5	;RP0=0, select bank0
  3410  01AE  1303               	bcf	3,6	;RP1=0, select bank0
  3411  01AF  00DD               	movwf	??_PathTo
  3412  01B0  085D               	movf	??_PathTo,w
  3413  01B1  00D7               	movwf	___bmul@multiplicand
  3414  01B2  083F               	movf	_y_path,w
  3415  01B3  120A  158A  272B  120A  118A  	fcall	___bmul
  3416  01B8  3E41               	addlw	(low (_mazeGrid| 0))& (0+255)
  3417  01B9  1283               	bcf	3,5	;RP0=0, select bank0
  3418  01BA  1303               	bcf	3,6	;RP1=0, select bank0
  3419  01BB  073B               	addwf	_x_path,w
  3420  01BC  00DE               	movwf	??_PathTo+1
  3421  01BD  085E               	movf	??_PathTo+1,w
  3422  01BE  0084               	movwf	4
  3423  01BF  1383               	bcf	3,7	;select IRP bank0
  3424  01C0  0800               	movf	0,w
  3425  01C1  3EC0               	addlw	(low ((_gridWalls| (0+256)+48)))& (0+255)
  3426  01C2  0084               	movwf	4
  3427  01C3  10F0               	bcf	_down/(0+8),_down& (0+7)
  3428  01C4  1783               	bsf	3,7	;select IRP bank3
  3429  01C5  1800               	btfsc	0,0
  3430  01C6  14F0               	bsf	_down/(0+8),_down& (0+7)
  3431                           
  3432                           ;main.c: 118: switch(orientation_path){
  3433  01C7  29D0               	goto	l2759
  3434  01C8                     l170:	
  3435                           ;main.c: 119: case 0: down = 1;
  3436                           
  3437  01C8  14F0               	bsf	_down/(0+8),_down& (0+7)
  3438                           
  3439                           ;main.c: 120: break;
  3440  01C9  29E0               	goto	l2761
  3441  01CA                     l172:	
  3442                           ;main.c: 121: case 1: left = 1;
  3443                           
  3444  01CA  1570               	bsf	_left/(0+8),_left& (0+7)
  3445                           
  3446                           ;main.c: 122: break;
  3447  01CB  29E0               	goto	l2761
  3448  01CC                     l173:	
  3449                           ;main.c: 123: case 2: up = 1;
  3450                           
  3451  01CC  16F0               	bsf	_up/(0+8),_up& (0+7)
  3452                           
  3453                           ;main.c: 124: break;
  3454  01CD  29E0               	goto	l2761
  3455  01CE                     l174:	
  3456                           ;main.c: 125: case 3: right = 1;
  3457                           
  3458  01CE  1670               	bsf	_right/(0+8),_right& (0+7)
  3459                           
  3460                           ;main.c: 127: }
  3461                           
  3462                           ;main.c: 126: break;
  3463  01CF  29E0               	goto	l2761
  3464  01D0                     l2759:	
  3465  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  3466  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  3467  01D2  0833               	movf	_orientation_path,w
  3468                           
  3469                           ; Switch size 1, requested type "space"
  3470                           ; Number of cases is 4, Range of values is 0 to 3
  3471                           ; switch strategies available:
  3472                           ; Name         Instructions Cycles
  3473                           ; simple_byte           13     7 (average)
  3474                           ; direct_byte           20     8 (fixed)
  3475                           ; jumptable            260     6 (fixed)
  3476                           ;	Chosen strategy is simple_byte
  3477  01D3  3A00               	xorlw	0	; case 0
  3478  01D4  1903               	skipnz
  3479  01D5  29C8               	goto	l170
  3480  01D6  3A01               	xorlw	1	; case 1
  3481  01D7  1903               	skipnz
  3482  01D8  29CA               	goto	l172
  3483  01D9  3A03               	xorlw	3	; case 2
  3484  01DA  1903               	skipnz
  3485  01DB  29CC               	goto	l173
  3486  01DC  3A01               	xorlw	1	; case 3
  3487  01DD  1903               	skipnz
  3488  01DE  29CE               	goto	l174
  3489  01DF  29E0               	goto	l2761
  3490  01E0                     l2761:	
  3491                           
  3492                           ;main.c: 131: char sum = (left + up + down + right);
  3493  01E0  3000               	movlw	0
  3494  01E1  1970               	btfsc	_left/(0+8),_left& (0+7)
  3495  01E2  3001               	movlw	1
  3496  01E3  1AF0               	btfsc	_up/(0+8),_up& (0+7)
  3497  01E4  3E01               	addlw	1
  3498  01E5  18F0               	btfsc	_down/(0+8),_down& (0+7)
  3499  01E6  3E01               	addlw	1
  3500  01E7  1A70               	btfsc	_right/(0+8),_right& (0+7)
  3501  01E8  3E01               	addlw	1
  3502  01E9  00DD               	movwf	??_PathTo
  3503  01EA  085D               	movf	??_PathTo,w
  3504  01EB  00E5               	movwf	PathTo@sum
  3505                           
  3506                           ;main.c: 132: if(sum <= 2){
  3507  01EC  3003               	movlw	3
  3508  01ED  0265               	subwf	PathTo@sum,w
  3509  01EE  1803               	skipnc
  3510  01EF  2A0B               	goto	l175
  3511                           
  3512                           ;main.c: 133: x_int = x_path;
  3513  01F0  083B               	movf	_x_path,w
  3514  01F1  00DD               	movwf	??_PathTo
  3515  01F2  085D               	movf	??_PathTo,w
  3516  01F3  00BA               	movwf	_x_int
  3517                           
  3518                           ;main.c: 134: y_int = y_path;
  3519  01F4  083F               	movf	_y_path,w
  3520  01F5  00DD               	movwf	??_PathTo
  3521  01F6  085D               	movf	??_PathTo,w
  3522  01F7  00BE               	movwf	_y_int
  3523                           
  3524                           ;main.c: 140: if (left == 0)
  3525  01F8  1970               	btfsc	_left/(0+8),_left& (0+7)
  3526  01F9  29FC               	goto	l176
  3527                           
  3528                           ;main.c: 141: intersection_orientation = 3;
  3529  01FA  3003               	movlw	3
  3530  01FB  2A08               	goto	L4
  3531  01FC                     l176:	
  3532                           
  3533                           ;main.c: 142: else if (up == 0)
  3534  01FC  1AF0               	btfsc	_up/(0+8),_up& (0+7)
  3535  01FD  2A00               	goto	l178
  3536                           
  3537                           ;main.c: 143: intersection_orientation = 0;
  3538  01FE  01B1               	clrf	_intersection_orientation
  3539  01FF  2A0B               	goto	l175
  3540  0200                     l178:	
  3541                           
  3542                           ;main.c: 144: else if (right == 0)
  3543  0200  1A70               	btfsc	_right/(0+8),_right& (0+7)
  3544  0201  2A05               	goto	l180
  3545                           
  3546                           ;main.c: 145: intersection_orientation = 1;
  3547  0202  01B1               	clrf	_intersection_orientation
  3548  0203  0AB1               	incf	_intersection_orientation,f
  3549  0204  2A0B               	goto	l175
  3550  0205                     l180:	
  3551                           
  3552                           ;main.c: 146: else if (down == 0)
  3553  0205  18F0               	btfsc	_down/(0+8),_down& (0+7)
  3554  0206  2A0B               	goto	l175
  3555                           
  3556                           ;main.c: 147: intersection_orientation = 2;
  3557  0207  3002               	movlw	2
  3558  0208                     L4:	
  3559  0208  00DD               	movwf	??_PathTo
  3560  0209  085D               	movf	??_PathTo,w
  3561  020A  00B1               	movwf	_intersection_orientation
  3562  020B                     l175:	
  3563                           
  3564                           ;main.c: 148: }
  3565                           ;main.c: 155: if ((x_path == x_target) && (y_path == y_target)){
  3566  020B  083B               	movf	_x_path,w
  3567  020C  0664               	xorwf	PathTo@x_target,w
  3568  020D  1D03               	skipz
  3569  020E  2B09               	goto	l2841
  3570  020F  083F               	movf	_y_path,w
  3571  0210  065C               	xorwf	PathTo@y_target,w
  3572  0211  1D03               	skipz
  3573  0212  2B09               	goto	l2841
  3574                           
  3575                           ;main.c: 160: if(pathCount < pathCountShortest){
  3576  0213  0855               	movf	_pathCountShortest,w
  3577  0214  0234               	subwf	_pathCount,w
  3578  0215  1803               	skipnc
  3579  0216  2AC1               	goto	l2813
  3580                           
  3581                           ;main.c: 161: pathCountShortest = pathCount;
  3582  0217  0834               	movf	_pathCount,w
  3583  0218  00DD               	movwf	??_PathTo
  3584  0219  085D               	movf	??_PathTo,w
  3585  021A  00D5               	movwf	_pathCountShortest
  3586                           
  3587                           ;main.c: 162: for (r = 0; r <= 1; r++){
  3588  021B  01B5               	clrf	_r
  3589  021C                     L12:	
  3590  021C  3002               	movlw	2
  3591  021D  0235               	subwf	_r,w
  3592  021E  1803               	btfsc	3,0
  3593  021F  2AC1               	goto	l2813
  3594                           
  3595                           ;main.c: 163: for (c = 0; c <= 15; c++){
  3596  0220  01B0               	clrf	_c
  3597  0221  3010               	movlw	16
  3598  0222  0230               	subwf	_c,w
  3599  0223  1803               	btfsc	3,0
  3600  0224  2A53               	goto	l2799
  3601  0225                     l2793:	
  3602                           
  3603                           ;main.c: 164: pathShortest[r][c] = path[r][c];
  3604  0225  0835               	movf	_r,w
  3605  0226  00DD               	movwf	??_PathTo
  3606  0227  3004               	movlw	4
  3607  0228                     u1995:	
  3608  0228  1003               	clrc
  3609  0229  0DDD               	rlf	??_PathTo,f
  3610  022A  3EFF               	addlw	-1
  3611  022B  1D03               	skipz
  3612  022C  2A28               	goto	u1995
  3613  022D  30A0               	movlw	(low (_path| 0))& (0+255)
  3614  022E  075D               	addwf	??_PathTo,w
  3615  022F  00DE               	movwf	??_PathTo+1
  3616  0230  0830               	movf	_c,w
  3617  0231  075E               	addwf	??_PathTo+1,w
  3618  0232  00DF               	movwf	??_PathTo+2
  3619  0233  085F               	movf	??_PathTo+2,w
  3620  0234  0084               	movwf	4
  3621  0235  1383               	bcf	3,7	;select IRP bank1
  3622  0236  0800               	movf	0,w
  3623  0237  00E0               	movwf	??_PathTo+3
  3624  0238  0835               	movf	_r,w
  3625  0239  00E1               	movwf	??_PathTo+4
  3626  023A  3004               	movlw	4
  3627  023B                     u2005:	
  3628  023B  1003               	clrc
  3629  023C  0DE1               	rlf	??_PathTo+4,f
  3630  023D  3EFF               	addlw	-1
  3631  023E  1D03               	skipz
  3632  023F  2A3B               	goto	u2005
  3633  0240  30D0               	movlw	(low (_pathShortest| (0+256)))& (0+255)
  3634  0241  0761               	addwf	??_PathTo+4,w
  3635  0242  00E2               	movwf	??_PathTo+5
  3636  0243  0830               	movf	_c,w
  3637  0244  0762               	addwf	??_PathTo+5,w
  3638  0245  00E3               	movwf	??_PathTo+6
  3639  0246  0863               	movf	??_PathTo+6,w
  3640  0247  0084               	movwf	4
  3641  0248  0860               	movf	??_PathTo+3,w
  3642  0249  1783               	bsf	3,7	;select IRP bank3
  3643  024A  0080               	movwf	0
  3644  024B  3001               	movlw	1
  3645  024C  00DD               	movwf	??_PathTo
  3646  024D  085D               	movf	??_PathTo,w
  3647  024E  07B0               	addwf	_c,f
  3648  024F  3010               	movlw	16
  3649  0250  0230               	subwf	_c,w
  3650  0251  1C03               	skipc
  3651  0252  2A25               	goto	l2793
  3652  0253                     l2799:	
  3653  0253  3001               	movlw	1
  3654  0254  00DD               	movwf	??_PathTo
  3655  0255  085D               	movf	??_PathTo,w
  3656  0256  07B5               	addwf	_r,f
  3657  0257  2A1C               	goto	L12
  3658  0258                     l2803:	
  3659                           ;main.c: 174: case 0: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 4);
  3660                           
  3661                           ;main.c: 165: }
  3662                           ;main.c: 166: }
  3663                           ;main.c: 167: }
  3664                           ;main.c: 173: switch(intersection_orientation){
  3665                           
  3666  0258  3005               	movlw	5
  3667  0259  00DD               	movwf	??_PathTo
  3668  025A  085D               	movf	??_PathTo,w
  3669  025B  00D7               	movwf	___bmul@multiplicand
  3670  025C  083E               	movf	_y_int,w
  3671  025D  120A  158A  272B  120A  118A  	fcall	___bmul
  3672  0262  3E41               	addlw	(low (_mazeGrid| 0))& (0+255)
  3673  0263  1283               	bcf	3,5	;RP0=0, select bank0
  3674  0264  1303               	bcf	3,6	;RP1=0, select bank0
  3675  0265  073A               	addwf	_x_int,w
  3676  0266  00DE               	movwf	??_PathTo+1
  3677  0267  085E               	movf	??_PathTo+1,w
  3678  0268  0084               	movwf	4
  3679  0269  1383               	bcf	3,7	;select IRP bank0
  3680  026A  0800               	movf	0,w
  3681  026B  3E04               	addlw	4
  3682  026C  2AAB               	goto	L14
  3683  026D                     l2805:	
  3684                           ;main.c: 176: case 1: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 2);
  3685                           
  3686                           ;main.c: 175: break;
  3687                           
  3688  026D  3005               	movlw	5
  3689  026E  00DD               	movwf	??_PathTo
  3690  026F  085D               	movf	??_PathTo,w
  3691  0270  00D7               	movwf	___bmul@multiplicand
  3692  0271  083E               	movf	_y_int,w
  3693  0272  120A  158A  272B  120A  118A  	fcall	___bmul
  3694  0277  3E41               	addlw	(low (_mazeGrid| 0))& (0+255)
  3695  0278  1283               	bcf	3,5	;RP0=0, select bank0
  3696  0279  1303               	bcf	3,6	;RP1=0, select bank0
  3697  027A  073A               	addwf	_x_int,w
  3698  027B  00DE               	movwf	??_PathTo+1
  3699  027C  085E               	movf	??_PathTo+1,w
  3700  027D  0084               	movwf	4
  3701  027E  1383               	bcf	3,7	;select IRP bank0
  3702  027F  0800               	movf	0,w
  3703  0280  3E02               	addlw	2
  3704  0281  2AAB               	goto	L14
  3705  0282                     l2807:	
  3706                           ;main.c: 178: case 2: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 1);
  3707                           
  3708                           ;main.c: 177: break;
  3709                           
  3710  0282  3005               	movlw	5
  3711  0283  00DD               	movwf	??_PathTo
  3712  0284  085D               	movf	??_PathTo,w
  3713  0285  00D7               	movwf	___bmul@multiplicand
  3714  0286  083E               	movf	_y_int,w
  3715  0287  120A  158A  272B  120A  118A  	fcall	___bmul
  3716  028C  3E41               	addlw	(low (_mazeGrid| 0))& (0+255)
  3717  028D  1283               	bcf	3,5	;RP0=0, select bank0
  3718  028E  1303               	bcf	3,6	;RP1=0, select bank0
  3719  028F  073A               	addwf	_x_int,w
  3720  0290  00DE               	movwf	??_PathTo+1
  3721  0291  085E               	movf	??_PathTo+1,w
  3722  0292  0084               	movwf	4
  3723  0293  1383               	bcf	3,7	;select IRP bank0
  3724  0294  0800               	movf	0,w
  3725  0295  3E01               	addlw	1
  3726  0296  2AAB               	goto	L14
  3727  0297                     l2809:	
  3728                           ;main.c: 180: case 3: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 8);
  3729                           
  3730                           ;main.c: 179: break;
  3731                           
  3732  0297  3005               	movlw	5
  3733  0298  00DD               	movwf	??_PathTo
  3734  0299  085D               	movf	??_PathTo,w
  3735  029A  00D7               	movwf	___bmul@multiplicand
  3736  029B  083E               	movf	_y_int,w
  3737  029C  120A  158A  272B  120A  118A  	fcall	___bmul
  3738  02A1  3E41               	addlw	(low (_mazeGrid| 0))& (0+255)
  3739  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  3740  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  3741  02A4  073A               	addwf	_x_int,w
  3742  02A5  00DE               	movwf	??_PathTo+1
  3743  02A6  085E               	movf	??_PathTo+1,w
  3744  02A7  0084               	movwf	4
  3745  02A8  1383               	bcf	3,7	;select IRP bank0
  3746  02A9  0800               	movf	0,w
  3747  02AA  3E08               	addlw	8
  3748  02AB                     L14:	
  3749  02AB  00DF               	movwf	??_PathTo+2
  3750  02AC  3005               	movlw	5
  3751  02AD  00E0               	movwf	??_PathTo+3
  3752  02AE  0860               	movf	??_PathTo+3,w
  3753  02AF  00D7               	movwf	___bmul@multiplicand
  3754  02B0  083E               	movf	_y_int,w
  3755  02B1  120A  158A  272B  120A  118A  	fcall	___bmul
  3756  02B6  3E41               	addlw	(low (_mazeGrid| 0))& (0+255)
  3757  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  3758  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  3759  02B9  073A               	addwf	_x_int,w
  3760  02BA  00E1               	movwf	??_PathTo+4
  3761  02BB  0861               	movf	??_PathTo+4,w
  3762  02BC  0084               	movwf	4
  3763  02BD  085F               	movf	??_PathTo+2,w
  3764  02BE  1383               	bcf	3,7	;select IRP bank0
  3765  02BF  0080               	movwf	0
  3766                           
  3767                           ;main.c: 182: }
  3768                           
  3769                           ;main.c: 181: break;
  3770  02C0  2ACF               	goto	l2815
  3771  02C1                     l2813:	
  3772  02C1  0831               	movf	_intersection_orientation,w
  3773                           
  3774                           ; Switch size 1, requested type "space"
  3775                           ; Number of cases is 4, Range of values is 0 to 3
  3776                           ; switch strategies available:
  3777                           ; Name         Instructions Cycles
  3778                           ; simple_byte           13     7 (average)
  3779                           ; direct_byte           20     8 (fixed)
  3780                           ; jumptable            260     6 (fixed)
  3781                           ;	Chosen strategy is simple_byte
  3782  02C2  3A00               	xorlw	0	; case 0
  3783  02C3  1903               	skipnz
  3784  02C4  2A58               	goto	l2803
  3785  02C5  3A01               	xorlw	1	; case 1
  3786  02C6  1903               	skipnz
  3787  02C7  2A6D               	goto	l2805
  3788  02C8  3A03               	xorlw	3	; case 2
  3789  02C9  1903               	skipnz
  3790  02CA  2A82               	goto	l2807
  3791  02CB  3A01               	xorlw	1	; case 3
  3792  02CC  1903               	skipnz
  3793  02CD  2A97               	goto	l2809
  3794  02CE  2ACF               	goto	l2815
  3795  02CF                     l2815:	
  3796                           
  3797                           ;main.c: 185: x_path = x;
  3798  02CF  0856               	movf	_x,w
  3799  02D0  00DD               	movwf	??_PathTo
  3800  02D1  085D               	movf	??_PathTo,w
  3801  02D2  00BB               	movwf	_x_path
  3802                           
  3803                           ;main.c: 186: y_path = y;
  3804  02D3  083D               	movf	_y,w
  3805  02D4  00DD               	movwf	??_PathTo
  3806  02D5  085D               	movf	??_PathTo,w
  3807  02D6  00BF               	movwf	_y_path
  3808                           
  3809                           ;main.c: 187: orientation_path = orientation;
  3810  02D7  0879               	movf	_orientation,w
  3811  02D8  00DD               	movwf	??_PathTo
  3812  02D9  085D               	movf	??_PathTo,w
  3813  02DA  00B3               	movwf	_orientation_path
  3814                           
  3815                           ;main.c: 188: pathCount = 0;
  3816  02DB  01B4               	clrf	_pathCount
  3817                           
  3818                           ;main.c: 189: reset_flag = 1;
  3819  02DC  15F0               	bsf	_reset_flag/(0+8),_reset_flag& (0+7)
  3820                           
  3821                           ;main.c: 192: for (r = 0; r <= 1; r++){
  3822  02DD  01B5               	clrf	_r
  3823  02DE  3002               	movlw	2
  3824  02DF  0235               	subwf	_r,w
  3825  02E0  1803               	btfsc	3,0
  3826  02E1  2B09               	goto	l2841
  3827  02E2                     l2825:	
  3828                           
  3829                           ;main.c: 193: for (c = 0; c <= 15; c++){
  3830  02E2  01B0               	clrf	_c
  3831  02E3  3010               	movlw	16
  3832  02E4  0230               	subwf	_c,w
  3833  02E5  1803               	btfsc	3,0
  3834  02E6  2B01               	goto	l2837
  3835  02E7                     l2831:	
  3836                           
  3837                           ;main.c: 194: path[r][c] = 0;
  3838  02E7  0835               	movf	_r,w
  3839  02E8  00DD               	movwf	??_PathTo
  3840  02E9  3004               	movlw	4
  3841  02EA                     u2055:	
  3842  02EA  1003               	clrc
  3843  02EB  0DDD               	rlf	??_PathTo,f
  3844  02EC  3EFF               	addlw	-1
  3845  02ED  1D03               	skipz
  3846  02EE  2AEA               	goto	u2055
  3847  02EF  30A0               	movlw	(low (_path| 0))& (0+255)
  3848  02F0  075D               	addwf	??_PathTo,w
  3849  02F1  00DE               	movwf	??_PathTo+1
  3850  02F2  0830               	movf	_c,w
  3851  02F3  075E               	addwf	??_PathTo+1,w
  3852  02F4  00DF               	movwf	??_PathTo+2
  3853  02F5  085F               	movf	??_PathTo+2,w
  3854  02F6  0084               	movwf	4
  3855  02F7  1383               	bcf	3,7	;select IRP bank1
  3856  02F8  0180               	clrf	0
  3857  02F9  3001               	movlw	1
  3858  02FA  00DD               	movwf	??_PathTo
  3859  02FB  085D               	movf	??_PathTo,w
  3860  02FC  07B0               	addwf	_c,f
  3861  02FD  3010               	movlw	16
  3862  02FE  0230               	subwf	_c,w
  3863  02FF  1C03               	skipc
  3864  0300  2AE7               	goto	l2831
  3865  0301                     l2837:	
  3866  0301  3001               	movlw	1
  3867  0302  00DD               	movwf	??_PathTo
  3868  0303  085D               	movf	??_PathTo,w
  3869  0304  07B5               	addwf	_r,f
  3870  0305  3002               	movlw	2
  3871  0306  0235               	subwf	_r,w
  3872  0307  1C03               	skipc
  3873  0308  2AE2               	goto	l2825
  3874  0309                     l2841:	
  3875                           
  3876                           ;main.c: 195: }
  3877                           ;main.c: 196: }
  3878                           ;main.c: 197: }
  3879                           ;main.c: 203: if((sum == 4) || (pathCount >= 15)){
  3880  0309  3004               	movlw	4
  3881  030A  0665               	xorwf	PathTo@sum,w
  3882  030B  1903               	btfsc	3,2
  3883  030C  2B7B               	goto	l2855
  3884  030D  300F               	movlw	15
  3885  030E  0234               	subwf	_pathCount,w
  3886  030F  1803               	btfsc	3,0
  3887  0310  2B7B               	goto	l2855
  3888  0311  2BC3               	goto	l199
  3889  0312                     l2845:	
  3890                           ;main.c: 207: case 0: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 4);
  3891                           
  3892                           ;main.c: 206: switch(intersection_orientation){
  3893                           
  3894  0312  3005               	movlw	5
  3895  0313  00DD               	movwf	??_PathTo
  3896  0314  085D               	movf	??_PathTo,w
  3897  0315  00D7               	movwf	___bmul@multiplicand
  3898  0316  083E               	movf	_y_int,w
  3899  0317  120A  158A  272B  120A  118A  	fcall	___bmul
  3900  031C  3E41               	addlw	(low (_mazeGrid| 0))& (0+255)
  3901  031D  1283               	bcf	3,5	;RP0=0, select bank0
  3902  031E  1303               	bcf	3,6	;RP1=0, select bank0
  3903  031F  073A               	addwf	_x_int,w
  3904  0320  00DE               	movwf	??_PathTo+1
  3905  0321  085E               	movf	??_PathTo+1,w
  3906  0322  0084               	movwf	4
  3907  0323  1383               	bcf	3,7	;select IRP bank0
  3908  0324  0800               	movf	0,w
  3909  0325  3E04               	addlw	4
  3910  0326  2B65               	goto	L15
  3911  0327                     l2847:	
  3912                           ;main.c: 209: case 1: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 2);
  3913                           
  3914                           ;main.c: 208: break;
  3915                           
  3916  0327  3005               	movlw	5
  3917  0328  00DD               	movwf	??_PathTo
  3918  0329  085D               	movf	??_PathTo,w
  3919  032A  00D7               	movwf	___bmul@multiplicand
  3920  032B  083E               	movf	_y_int,w
  3921  032C  120A  158A  272B  120A  118A  	fcall	___bmul
  3922  0331  3E41               	addlw	(low (_mazeGrid| 0))& (0+255)
  3923  0332  1283               	bcf	3,5	;RP0=0, select bank0
  3924  0333  1303               	bcf	3,6	;RP1=0, select bank0
  3925  0334  073A               	addwf	_x_int,w
  3926  0335  00DE               	movwf	??_PathTo+1
  3927  0336  085E               	movf	??_PathTo+1,w
  3928  0337  0084               	movwf	4
  3929  0338  1383               	bcf	3,7	;select IRP bank0
  3930  0339  0800               	movf	0,w
  3931  033A  3E02               	addlw	2
  3932  033B  2B65               	goto	L15
  3933  033C                     l2849:	
  3934                           ;main.c: 211: case 2: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 1);
  3935                           
  3936                           ;main.c: 210: break;
  3937                           
  3938  033C  3005               	movlw	5
  3939  033D  00DD               	movwf	??_PathTo
  3940  033E  085D               	movf	??_PathTo,w
  3941  033F  00D7               	movwf	___bmul@multiplicand
  3942  0340  083E               	movf	_y_int,w
  3943  0341  120A  158A  272B  120A  118A  	fcall	___bmul
  3944  0346  3E41               	addlw	(low (_mazeGrid| 0))& (0+255)
  3945  0347  1283               	bcf	3,5	;RP0=0, select bank0
  3946  0348  1303               	bcf	3,6	;RP1=0, select bank0
  3947  0349  073A               	addwf	_x_int,w
  3948  034A  00DE               	movwf	??_PathTo+1
  3949  034B  085E               	movf	??_PathTo+1,w
  3950  034C  0084               	movwf	4
  3951  034D  1383               	bcf	3,7	;select IRP bank0
  3952  034E  0800               	movf	0,w
  3953  034F  3E01               	addlw	1
  3954  0350  2B65               	goto	L15
  3955  0351                     l2851:	
  3956                           ;main.c: 213: case 3: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 8);
  3957                           
  3958                           ;main.c: 212: break;
  3959                           
  3960  0351  3005               	movlw	5
  3961  0352  00DD               	movwf	??_PathTo
  3962  0353  085D               	movf	??_PathTo,w
  3963  0354  00D7               	movwf	___bmul@multiplicand
  3964  0355  083E               	movf	_y_int,w
  3965  0356  120A  158A  272B  120A  118A  	fcall	___bmul
  3966  035B  3E41               	addlw	(low (_mazeGrid| 0))& (0+255)
  3967  035C  1283               	bcf	3,5	;RP0=0, select bank0
  3968  035D  1303               	bcf	3,6	;RP1=0, select bank0
  3969  035E  073A               	addwf	_x_int,w
  3970  035F  00DE               	movwf	??_PathTo+1
  3971  0360  085E               	movf	??_PathTo+1,w
  3972  0361  0084               	movwf	4
  3973  0362  1383               	bcf	3,7	;select IRP bank0
  3974  0363  0800               	movf	0,w
  3975  0364  3E08               	addlw	8
  3976  0365                     L15:	
  3977  0365  00DF               	movwf	??_PathTo+2
  3978  0366  3005               	movlw	5
  3979  0367  00E0               	movwf	??_PathTo+3
  3980  0368  0860               	movf	??_PathTo+3,w
  3981  0369  00D7               	movwf	___bmul@multiplicand
  3982  036A  083E               	movf	_y_int,w
  3983  036B  120A  158A  272B  120A  118A  	fcall	___bmul
  3984  0370  3E41               	addlw	(low (_mazeGrid| 0))& (0+255)
  3985  0371  1283               	bcf	3,5	;RP0=0, select bank0
  3986  0372  1303               	bcf	3,6	;RP1=0, select bank0
  3987  0373  073A               	addwf	_x_int,w
  3988  0374  00E1               	movwf	??_PathTo+4
  3989  0375  0861               	movf	??_PathTo+4,w
  3990  0376  0084               	movwf	4
  3991  0377  085F               	movf	??_PathTo+2,w
  3992  0378  1383               	bcf	3,7	;select IRP bank0
  3993  0379  0080               	movwf	0
  3994                           
  3995                           ;main.c: 215: }
  3996                           
  3997                           ;main.c: 214: break;
  3998  037A  2B89               	goto	l2857
  3999  037B                     l2855:	
  4000  037B  0831               	movf	_intersection_orientation,w
  4001                           
  4002                           ; Switch size 1, requested type "space"
  4003                           ; Number of cases is 4, Range of values is 0 to 3
  4004                           ; switch strategies available:
  4005                           ; Name         Instructions Cycles
  4006                           ; simple_byte           13     7 (average)
  4007                           ; direct_byte           20     8 (fixed)
  4008                           ; jumptable            260     6 (fixed)
  4009                           ;	Chosen strategy is simple_byte
  4010  037C  3A00               	xorlw	0	; case 0
  4011  037D  1903               	skipnz
  4012  037E  2B12               	goto	l2845
  4013  037F  3A01               	xorlw	1	; case 1
  4014  0380  1903               	skipnz
  4015  0381  2B27               	goto	l2847
  4016  0382  3A03               	xorlw	3	; case 2
  4017  0383  1903               	skipnz
  4018  0384  2B3C               	goto	l2849
  4019  0385  3A01               	xorlw	1	; case 3
  4020  0386  1903               	skipnz
  4021  0387  2B51               	goto	l2851
  4022  0388  2B89               	goto	l2857
  4023  0389                     l2857:	
  4024                           
  4025                           ;main.c: 218: x_path = x;
  4026  0389  0856               	movf	_x,w
  4027  038A  00DD               	movwf	??_PathTo
  4028  038B  085D               	movf	??_PathTo,w
  4029  038C  00BB               	movwf	_x_path
  4030                           
  4031                           ;main.c: 219: y_path = y;
  4032  038D  083D               	movf	_y,w
  4033  038E  00DD               	movwf	??_PathTo
  4034  038F  085D               	movf	??_PathTo,w
  4035  0390  00BF               	movwf	_y_path
  4036                           
  4037                           ;main.c: 220: orientation_path = orientation;
  4038  0391  0879               	movf	_orientation,w
  4039  0392  00DD               	movwf	??_PathTo
  4040  0393  085D               	movf	??_PathTo,w
  4041  0394  00B3               	movwf	_orientation_path
  4042                           
  4043                           ;main.c: 221: pathCount = 0;
  4044  0395  01B4               	clrf	_pathCount
  4045                           
  4046                           ;main.c: 222: reset_flag = 1;
  4047  0396  15F0               	bsf	_reset_flag/(0+8),_reset_flag& (0+7)
  4048                           
  4049                           ;main.c: 224: for (r = 0; r <= 1; r++){
  4050  0397  01B5               	clrf	_r
  4051  0398  3002               	movlw	2
  4052  0399  0235               	subwf	_r,w
  4053  039A  1803               	btfsc	3,0
  4054  039B  2BC3               	goto	l199
  4055  039C                     l2867:	
  4056                           
  4057                           ;main.c: 225: for (c = 0; c <= 15; c++){
  4058  039C  01B0               	clrf	_c
  4059  039D  3010               	movlw	16
  4060  039E  0230               	subwf	_c,w
  4061  039F  1803               	btfsc	3,0
  4062  03A0  2BBB               	goto	l2879
  4063  03A1                     l2873:	
  4064                           
  4065                           ;main.c: 226: path[r][c] = 0;
  4066  03A1  0835               	movf	_r,w
  4067  03A2  00DD               	movwf	??_PathTo
  4068  03A3  3004               	movlw	4
  4069  03A4                     u2125:	
  4070  03A4  1003               	clrc
  4071  03A5  0DDD               	rlf	??_PathTo,f
  4072  03A6  3EFF               	addlw	-1
  4073  03A7  1D03               	skipz
  4074  03A8  2BA4               	goto	u2125
  4075  03A9  30A0               	movlw	(low (_path| 0))& (0+255)
  4076  03AA  075D               	addwf	??_PathTo,w
  4077  03AB  00DE               	movwf	??_PathTo+1
  4078  03AC  0830               	movf	_c,w
  4079  03AD  075E               	addwf	??_PathTo+1,w
  4080  03AE  00DF               	movwf	??_PathTo+2
  4081  03AF  085F               	movf	??_PathTo+2,w
  4082  03B0  0084               	movwf	4
  4083  03B1  1383               	bcf	3,7	;select IRP bank1
  4084  03B2  0180               	clrf	0
  4085  03B3  3001               	movlw	1
  4086  03B4  00DD               	movwf	??_PathTo
  4087  03B5  085D               	movf	??_PathTo,w
  4088  03B6  07B0               	addwf	_c,f
  4089  03B7  3010               	movlw	16
  4090  03B8  0230               	subwf	_c,w
  4091  03B9  1C03               	skipc
  4092  03BA  2BA1               	goto	l2873
  4093  03BB                     l2879:	
  4094  03BB  3001               	movlw	1
  4095  03BC  00DD               	movwf	??_PathTo
  4096  03BD  085D               	movf	??_PathTo,w
  4097  03BE  07B5               	addwf	_r,f
  4098  03BF  3002               	movlw	2
  4099  03C0  0235               	subwf	_r,w
  4100  03C1  1C03               	skipc
  4101  03C2  2B9C               	goto	l2867
  4102  03C3                     l199:	
  4103                           
  4104                           ;main.c: 227: }
  4105                           ;main.c: 228: }
  4106                           ;main.c: 229: }
  4107                           ;main.c: 238: if (reset_flag != 1){
  4108  03C3  19F0               	btfsc	_reset_flag/(0+8),_reset_flag& (0+7)
  4109  03C4  2BE8               	goto	l212
  4110                           
  4111                           ;main.c: 241: if(left == 0){
  4112  03C5  1970               	btfsc	_left/(0+8),_left& (0+7)
  4113  03C6  2BCB               	goto	l213
  4114                           
  4115                           ;main.c: 242: x_path--;
  4116  03C7  3001               	movlw	1
  4117  03C8  02BB               	subwf	_x_path,f
  4118                           
  4119                           ;main.c: 243: orientation_path = 3;
  4120  03C9  3003               	movlw	3
  4121  03CA  2BE1               	goto	L17
  4122  03CB                     l213:	
  4123                           ;main.c: 245: }
  4124                           
  4125                           ;main.c: 244: pathCount++;
  4126                           
  4127                           
  4128                           ;main.c: 246: else if(up == 0){
  4129  03CB  1AF0               	btfsc	_up/(0+8),_up& (0+7)
  4130  03CC  2BD1               	goto	l215
  4131                           
  4132                           ;main.c: 247: y_path--;
  4133  03CD  3001               	movlw	1
  4134  03CE  02BF               	subwf	_y_path,f
  4135                           
  4136                           ;main.c: 248: orientation_path = 0;
  4137  03CF  01B3               	clrf	_orientation_path
  4138  03D0  2BE4               	goto	l2905
  4139  03D1                     l215:	
  4140                           ;main.c: 250: }
  4141                           
  4142                           ;main.c: 249: pathCount++;
  4143                           
  4144                           
  4145                           ;main.c: 251: else if(right == 0){
  4146  03D1  1A70               	btfsc	_right/(0+8),_right& (0+7)
  4147  03D2  2BDA               	goto	l217
  4148                           
  4149                           ;main.c: 252: x_path++;
  4150  03D3  3001               	movlw	1
  4151  03D4  00DD               	movwf	??_PathTo
  4152  03D5  085D               	movf	??_PathTo,w
  4153  03D6  07BB               	addwf	_x_path,f
  4154                           
  4155                           ;main.c: 253: orientation_path = 1;
  4156  03D7  01B3               	clrf	_orientation_path
  4157  03D8  0AB3               	incf	_orientation_path,f
  4158  03D9  2BE4               	goto	l2905
  4159  03DA                     l217:	
  4160                           ;main.c: 255: }
  4161                           
  4162                           ;main.c: 254: pathCount++;
  4163                           
  4164                           
  4165                           ;main.c: 256: else if(down == 0){
  4166  03DA  18F0               	btfsc	_down/(0+8),_down& (0+7)
  4167  03DB  2BE8               	goto	l212
  4168                           
  4169                           ;main.c: 257: y_path++;
  4170  03DC  3001               	movlw	1
  4171  03DD  00DD               	movwf	??_PathTo
  4172  03DE  085D               	movf	??_PathTo,w
  4173  03DF  07BF               	addwf	_y_path,f
  4174                           
  4175                           ;main.c: 258: orientation_path = 2;
  4176  03E0  3002               	movlw	2
  4177  03E1                     L17:	
  4178  03E1  00DD               	movwf	??_PathTo
  4179  03E2  085D               	movf	??_PathTo,w
  4180  03E3  00B3               	movwf	_orientation_path
  4181  03E4                     l2905:	
  4182                           
  4183                           ;main.c: 259: pathCount++;
  4184  03E4  3001               	movlw	1
  4185  03E5  00DD               	movwf	??_PathTo
  4186  03E6  085D               	movf	??_PathTo,w
  4187  03E7  07B4               	addwf	_pathCount,f
  4188  03E8                     l212:	
  4189  03E8  3001               	movlw	1
  4190  03E9  07E6               	addwf	PathTo@loop,f
  4191  03EA  1803               	skipnc
  4192  03EB  0AE7               	incf	PathTo@loop+1,f
  4193  03EC  3000               	movlw	0
  4194  03ED  07E7               	addwf	PathTo@loop+1,f
  4195  03EE  2940               	goto	L16
  4196  03EF                     __end_of_PathTo:	
  4197                           
  4198                           	psect	text15
  4199  0FBE                     __ptext15:	
  4200 ;; *************** function _lcdWriteString *****************
  4201 ;; Defined at:
  4202 ;;		line 32 in file "LCD.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;  s               1    wreg     PTR unsigned char 
  4205 ;;		 -> STR_1(11), 
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;  s               1    4[BANK0 ] PTR unsigned char 
  4208 ;;		 -> STR_1(11), 
  4209 ;; Return value:  Size  Location     Type
  4210 ;;                  1    wreg      void 
  4211 ;; Registers used:
  4212 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4213 ;; Tracked objects:
  4214 ;;		On entry : 0/0
  4215 ;;		On exit  : 0/0
  4216 ;;		Unchanged: 0/0
  4217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4218 ;;      Params:         0       0       0       0       0
  4219 ;;      Locals:         0       1       0       0       0
  4220 ;;      Temps:          0       1       0       0       0
  4221 ;;      Totals:         0       2       0       0       0
  4222 ;;Total ram usage:        2 bytes
  4223 ;; Hardware stack levels used:    1
  4224 ;; Hardware stack levels required when called:    2
  4225 ;; This function calls:
  4226 ;;		_lcdWriteData
  4227 ;; This function is called by:
  4228 ;;		_PathTo
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           
  4233                           ;psect for function _lcdWriteString
  4234  0FBE                     _lcdWriteString:	
  4235                           
  4236                           ;incstack = 0
  4237                           ; Regs used in _lcdWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4238                           ;lcdWriteString@s stored from wreg
  4239  0FBE  1283               	bcf	3,5	;RP0=0, select bank0
  4240  0FBF  1303               	bcf	3,6	;RP1=0, select bank0
  4241  0FC0  00DB               	movwf	lcdWriteString@s
  4242  0FC1                     l2679:	
  4243                           ;LCD.c: 34: while(*s) lcdWriteData(*s++);
  4244                           
  4245  0FC1  085B               	movf	lcdWriteString@s,w
  4246  0FC2  0084               	movwf	4
  4247  0FC3  120A  158A  2000  120A  158A  	fcall	stringdir
  4248  0FC8  3A00               	xorlw	0
  4249  0FC9  1903               	btfsc	3,2
  4250  0FCA  0008               	return
  4251  0FCB  085B               	movf	lcdWriteString@s,w
  4252  0FCC  0084               	movwf	4
  4253  0FCD  120A  158A  2000  120A  158A  	fcall	stringdir
  4254  0FD2  120A  158A  273E  120A  158A  	fcall	_lcdWriteData
  4255  0FD7  3001               	movlw	1
  4256  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  4257  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  4258  0FDA  00DA               	movwf	??_lcdWriteString
  4259  0FDB  085A               	movf	??_lcdWriteString,w
  4260  0FDC  07DB               	addwf	lcdWriteString@s,f
  4261  0FDD  2FC1               	goto	l2679
  4262  0FDE                     __end_of_lcdWriteString:	
  4263                           
  4264                           	psect	text16
  4265  0F3E                     __ptext16:	
  4266 ;; *************** function _lcdWriteData *****************
  4267 ;; Defined at:
  4268 ;;		line 16 in file "LCD.c"
  4269 ;; Parameters:    Size  Location     Type
  4270 ;;  databyte        1    wreg     unsigned char 
  4271 ;; Auto vars:     Size  Location     Type
  4272 ;;  databyte        1    2[BANK0 ] unsigned char 
  4273 ;; Return value:  Size  Location     Type
  4274 ;;                  1    wreg      void 
  4275 ;; Registers used:
  4276 ;;		wreg
  4277 ;; Tracked objects:
  4278 ;;		On entry : 0/0
  4279 ;;		On exit  : 0/0
  4280 ;;		Unchanged: 0/0
  4281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4282 ;;      Params:         0       0       0       0       0
  4283 ;;      Locals:         0       1       0       0       0
  4284 ;;      Temps:          0       2       0       0       0
  4285 ;;      Totals:         0       3       0       0       0
  4286 ;;Total ram usage:        3 bytes
  4287 ;; Hardware stack levels used:    1
  4288 ;; Hardware stack levels required when called:    1
  4289 ;; This function calls:
  4290 ;;		Nothing
  4291 ;; This function is called by:
  4292 ;;		_lcdWriteString
  4293 ;;		_lcdWriteToDigitBCD
  4294 ;; This function uses a non-reentrant model
  4295 ;;
  4296                           
  4297                           
  4298                           ;psect for function _lcdWriteData
  4299  0F3E                     _lcdWriteData:	
  4300                           
  4301                           ;incstack = 0
  4302                           ; Regs used in _lcdWriteData: [wreg]
  4303                           ;lcdWriteData@databyte stored from wreg
  4304  0F3E  1283               	bcf	3,5	;RP0=0, select bank0
  4305  0F3F  1303               	bcf	3,6	;RP1=0, select bank0
  4306  0F40  00D9               	movwf	lcdWriteData@databyte
  4307                           
  4308                           ;LCD.c: 17: RE2 = 0;
  4309  0F41  1109               	bcf	9,2	;volatile
  4310                           
  4311                           ;LCD.c: 18: RE1 = 0;
  4312  0F42  1089               	bcf	9,1	;volatile
  4313                           
  4314                           ;LCD.c: 19: RE0 = 1;
  4315  0F43  1409               	bsf	9,0	;volatile
  4316                           
  4317                           ;LCD.c: 20: PORTD = databyte;
  4318  0F44  0859               	movf	lcdWriteData@databyte,w
  4319  0F45  0088               	movwf	8	;volatile
  4320                           
  4321                           ;LCD.c: 21: RE2 = 1;
  4322  0F46  1509               	bsf	9,2	;volatile
  4323                           
  4324                           ;LCD.c: 22: RE2 = 0;
  4325  0F47  1109               	bcf	9,2	;volatile
  4326                           
  4327                           ;LCD.c: 23: _delay((unsigned long)((1)*(20000000/4000.0)));
  4328  0F48  3007               	movlw	7
  4329  0F49  00D8               	movwf	??_lcdWriteData+1
  4330  0F4A  307D               	movlw	125
  4331  0F4B  00D7               	movwf	??_lcdWriteData
  4332  0F4C                     u2467:	
  4333  0F4C  0BD7               	decfsz	??_lcdWriteData,f
  4334  0F4D  2F4C               	goto	u2467
  4335  0F4E  0BD8               	decfsz	??_lcdWriteData+1,f
  4336  0F4F  2F4C               	goto	u2467
  4337  0F50  0008               	return
  4338  0F51                     __end_of_lcdWriteData:	
  4339                           
  4340                           	psect	text17
  4341  0EDD                     __ptext17:	
  4342 ;; *************** function _lcdSetCursor *****************
  4343 ;; Defined at:
  4344 ;;		line 27 in file "LCD.c"
  4345 ;; Parameters:    Size  Location     Type
  4346 ;;  address         1    wreg     unsigned char 
  4347 ;; Auto vars:     Size  Location     Type
  4348 ;;  address         1    3[BANK0 ] unsigned char 
  4349 ;; Return value:  Size  Location     Type
  4350 ;;                  1    wreg      void 
  4351 ;; Registers used:
  4352 ;;		wreg, status,2, status,0, pclath, cstack
  4353 ;; Tracked objects:
  4354 ;;		On entry : 0/0
  4355 ;;		On exit  : 0/0
  4356 ;;		Unchanged: 0/0
  4357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4358 ;;      Params:         0       0       0       0       0
  4359 ;;      Locals:         0       1       0       0       0
  4360 ;;      Temps:          0       0       0       0       0
  4361 ;;      Totals:         0       1       0       0       0
  4362 ;;Total ram usage:        1 bytes
  4363 ;; Hardware stack levels used:    1
  4364 ;; Hardware stack levels required when called:    2
  4365 ;; This function calls:
  4366 ;;		_lcdWriteControl
  4367 ;; This function is called by:
  4368 ;;		_PathTo
  4369 ;;		_ADCMain
  4370 ;; This function uses a non-reentrant model
  4371 ;;
  4372                           
  4373                           
  4374                           ;psect for function _lcdSetCursor
  4375  0EDD                     _lcdSetCursor:	
  4376                           
  4377                           ;incstack = 0
  4378                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  4379                           ;lcdSetCursor@address stored from wreg
  4380  0EDD  1283               	bcf	3,5	;RP0=0, select bank0
  4381  0EDE  1303               	bcf	3,6	;RP1=0, select bank0
  4382  0EDF  00DA               	movwf	lcdSetCursor@address
  4383                           
  4384                           ;LCD.c: 28: address |= 0b10000000;
  4385  0EE0  17DA               	bsf	lcdSetCursor@address,7
  4386                           
  4387                           ;LCD.c: 29: lcdWriteControl(address);
  4388  0EE1  085A               	movf	lcdSetCursor@address,w
  4389  0EE2  120A  158A  2751   	fcall	_lcdWriteControl
  4390  0EE5  0008               	return
  4391  0EE6                     __end_of_lcdSetCursor:	
  4392                           
  4393                           	psect	text18
  4394  0F51                     __ptext18:	
  4395 ;; *************** function _lcdWriteControl *****************
  4396 ;; Defined at:
  4397 ;;		line 5 in file "LCD.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;  databyte        1    wreg     unsigned char 
  4400 ;; Auto vars:     Size  Location     Type
  4401 ;;  databyte        1    2[BANK0 ] unsigned char 
  4402 ;; Return value:  Size  Location     Type
  4403 ;;                  1    wreg      void 
  4404 ;; Registers used:
  4405 ;;		wreg
  4406 ;; Tracked objects:
  4407 ;;		On entry : 0/0
  4408 ;;		On exit  : 0/0
  4409 ;;		Unchanged: 0/0
  4410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4411 ;;      Params:         0       0       0       0       0
  4412 ;;      Locals:         0       1       0       0       0
  4413 ;;      Temps:          0       2       0       0       0
  4414 ;;      Totals:         0       3       0       0       0
  4415 ;;Total ram usage:        3 bytes
  4416 ;; Hardware stack levels used:    1
  4417 ;; Hardware stack levels required when called:    1
  4418 ;; This function calls:
  4419 ;;		Nothing
  4420 ;; This function is called by:
  4421 ;;		_lcdSetCursor
  4422 ;;		_setupLCD
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           
  4427                           ;psect for function _lcdWriteControl
  4428  0F51                     _lcdWriteControl:	
  4429                           
  4430                           ;incstack = 0
  4431                           ; Regs used in _lcdWriteControl: [wreg]
  4432                           ;lcdWriteControl@databyte stored from wreg
  4433  0F51  1283               	bcf	3,5	;RP0=0, select bank0
  4434  0F52  1303               	bcf	3,6	;RP1=0, select bank0
  4435  0F53  00D9               	movwf	lcdWriteControl@databyte
  4436                           
  4437                           ;LCD.c: 6: RE2 = 0;
  4438  0F54  1109               	bcf	9,2	;volatile
  4439                           
  4440                           ;LCD.c: 7: RE1 = 0;
  4441  0F55  1089               	bcf	9,1	;volatile
  4442                           
  4443                           ;LCD.c: 8: RE0 = 0;
  4444  0F56  1009               	bcf	9,0	;volatile
  4445                           
  4446                           ;LCD.c: 9: PORTD = databyte;
  4447  0F57  0859               	movf	lcdWriteControl@databyte,w
  4448  0F58  0088               	movwf	8	;volatile
  4449                           
  4450                           ;LCD.c: 10: RE2 = 1;
  4451  0F59  1509               	bsf	9,2	;volatile
  4452                           
  4453                           ;LCD.c: 11: RE2 = 0;
  4454  0F5A  1109               	bcf	9,2	;volatile
  4455                           
  4456                           ;LCD.c: 12: _delay((unsigned long)((2)*(20000000/4000.0)));
  4457  0F5B  300D               	movlw	13
  4458  0F5C  00D8               	movwf	??_lcdWriteControl+1
  4459  0F5D  30FB               	movlw	251
  4460  0F5E  00D7               	movwf	??_lcdWriteControl
  4461  0F5F                     u2477:	
  4462  0F5F  0BD7               	decfsz	??_lcdWriteControl,f
  4463  0F60  2F5F               	goto	u2477
  4464  0F61  0BD8               	decfsz	??_lcdWriteControl+1,f
  4465  0F62  2F5F               	goto	u2477
  4466  0F63  2F64               	nop2
  4467  0F64  0008               	return
  4468  0F65                     __end_of_lcdWriteControl:	
  4469                           
  4470                           	psect	text19
  4471  0F2B                     __ptext19:	
  4472 ;; *************** function ___bmul *****************
  4473 ;; Defined at:
  4474 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;  multiplier      1    wreg     unsigned char 
  4477 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  4478 ;; Auto vars:     Size  Location     Type
  4479 ;;  multiplier      1    3[BANK0 ] unsigned char 
  4480 ;;  product         1    2[BANK0 ] unsigned char 
  4481 ;; Return value:  Size  Location     Type
  4482 ;;                  1    wreg      unsigned char 
  4483 ;; Registers used:
  4484 ;;		wreg, status,2, status,0
  4485 ;; Tracked objects:
  4486 ;;		On entry : 0/0
  4487 ;;		On exit  : 0/0
  4488 ;;		Unchanged: 0/0
  4489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4490 ;;      Params:         0       1       0       0       0
  4491 ;;      Locals:         0       2       0       0       0
  4492 ;;      Temps:          0       1       0       0       0
  4493 ;;      Totals:         0       4       0       0       0
  4494 ;;Total ram usage:        4 bytes
  4495 ;; Hardware stack levels used:    1
  4496 ;; Hardware stack levels required when called:    1
  4497 ;; This function calls:
  4498 ;;		Nothing
  4499 ;; This function is called by:
  4500 ;;		_PathTo
  4501 ;; This function uses a non-reentrant model
  4502 ;;
  4503                           
  4504                           
  4505                           ;psect for function ___bmul
  4506  0F2B                     ___bmul:	
  4507                           
  4508                           ;incstack = 0
  4509                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4510                           ;___bmul@multiplier stored from wreg
  4511  0F2B  1283               	bcf	3,5	;RP0=0, select bank0
  4512  0F2C  1303               	bcf	3,6	;RP1=0, select bank0
  4513  0F2D  00DA               	movwf	___bmul@multiplier
  4514  0F2E  01D9               	clrf	___bmul@product
  4515  0F2F                     l2683:	
  4516  0F2F  1C5A               	btfss	___bmul@multiplier,0
  4517  0F30  2F35               	goto	l2687
  4518  0F31  0857               	movf	___bmul@multiplicand,w
  4519  0F32  00D8               	movwf	??___bmul
  4520  0F33  0858               	movf	??___bmul,w
  4521  0F34  07D9               	addwf	___bmul@product,f
  4522  0F35                     l2687:	
  4523  0F35  1003               	clrc
  4524  0F36  0DD7               	rlf	___bmul@multiplicand,f
  4525  0F37  1003               	clrc
  4526  0F38  0CDA               	rrf	___bmul@multiplier,f
  4527  0F39  085A               	movf	___bmul@multiplier,w
  4528  0F3A  1D03               	btfss	3,2
  4529  0F3B  2F2F               	goto	l2683
  4530  0F3C  0859               	movf	___bmul@product,w
  4531  0F3D  0008               	return
  4532  0F3E                     __end_of___bmul:	
  4533                           
  4534                           	psect	text20
  4535  0FDE                     __ptext20:	
  4536 ;; *************** function _isr *****************
  4537 ;; Defined at:
  4538 ;;		line 345 in file "main.c"
  4539 ;; Parameters:    Size  Location     Type
  4540 ;;		None
  4541 ;; Auto vars:     Size  Location     Type
  4542 ;;		None
  4543 ;; Return value:  Size  Location     Type
  4544 ;;                  1    wreg      void 
  4545 ;; Registers used:
  4546 ;;		wreg, status,2, status,0
  4547 ;; Tracked objects:
  4548 ;;		On entry : 0/0
  4549 ;;		On exit  : 0/0
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4552 ;;      Params:         0       0       0       0       0
  4553 ;;      Locals:         0       0       0       0       0
  4554 ;;      Temps:          5       0       0       0       0
  4555 ;;      Totals:         5       0       0       0       0
  4556 ;;Total ram usage:        5 bytes
  4557 ;; Hardware stack levels used:    1
  4558 ;; This function calls:
  4559 ;;		Nothing
  4560 ;; This function is called by:
  4561 ;;		Interrupt level 1
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565                           
  4566                           ;psect for function _isr
  4567  0FDE                     _isr:	
  4568                           
  4569                           ;main.c: 346: if(TMR0IF){
  4570  0FDE  1D0B               	btfss	11,2	;volatile
  4571  0FDF  2FF5               	goto	i1l259
  4572                           
  4573                           ;main.c: 347: TMR0IF = 0;
  4574  0FE0  110B               	bcf	11,2	;volatile
  4575                           
  4576                           ;main.c: 348: TMR0 = 100;
  4577  0FE1  3064               	movlw	100
  4578  0FE2  0081               	movwf	1	;volatile
  4579                           
  4580                           ;main.c: 349: time_count++;
  4581  0FE3  3001               	movlw	1
  4582  0FE4  07A8               	addwf	_time_count,f	;volatile
  4583  0FE5  1803               	skipnc
  4584  0FE6  0AA9               	incf	_time_count+1,f	;volatile
  4585  0FE7  3000               	movlw	0
  4586  0FE8  07A9               	addwf	_time_count+1,f	;volatile
  4587                           
  4588                           ;main.c: 351: if(!RB0)
  4589  0FE9  1806               	btfsc	6,0	;volatile
  4590  0FEA  2FEF               	goto	i1l2465
  4591                           
  4592                           ;main.c: 352: PB8Counter++;
  4593  0FEB  3001               	movlw	1
  4594  0FEC  00F1               	movwf	??_isr
  4595  0FED  0871               	movf	??_isr,w
  4596  0FEE  07AD               	addwf	_PB8Counter,f
  4597  0FEF                     i1l2465:	
  4598                           
  4599                           ;main.c: 353: if(!RB1)
  4600  0FEF  1886               	btfsc	6,1	;volatile
  4601  0FF0  2FF5               	goto	i1l259
  4602                           
  4603                           ;main.c: 354: PB7Counter++;
  4604  0FF1  3001               	movlw	1
  4605  0FF2  00F1               	movwf	??_isr
  4606  0FF3  0871               	movf	??_isr,w
  4607  0FF4  07AC               	addwf	_PB7Counter,f
  4608  0FF5                     i1l259:	
  4609  0FF5  0875               	movf	??_isr+4,w
  4610  0FF6  00FF               	movwf	127
  4611  0FF7  0874               	movf	??_isr+3,w
  4612  0FF8  008A               	movwf	10
  4613  0FF9  0873               	movf	??_isr+2,w
  4614  0FFA  0084               	movwf	4
  4615  0FFB  0E72               	swapf	(??_isr+1)^(0+-128),w
  4616  0FFC  0083               	movwf	3
  4617  0FFD  0EFE               	swapf	126,f
  4618  0FFE  0E7E               	swapf	126,w
  4619  0FFF  0009               	retfie
  4620  1000                     __end_of_isr:	
  4621  007E                     btemp	set	126	;btemp
  4622  007E                     wtemp	set	126
  4623  007E                     wtemp0	set	126
  4624  0080                     wtemp1	set	128
  4625  0082                     wtemp2	set	130
  4626  0084                     wtemp3	set	132
  4627  0086                     wtemp4	set	134
  4628  0088                     wtemp5	set	136
  4629  007F                     wtemp6	set	127
  4630  007E                     ttemp	set	126
  4631  007E                     ttemp0	set	126
  4632  0081                     ttemp1	set	129
  4633  0084                     ttemp2	set	132
  4634  0087                     ttemp3	set	135
  4635  007F                     ttemp4	set	127
  4636  007E                     ltemp	set	126
  4637  007E                     ltemp0	set	126
  4638  0082                     ltemp1	set	130
  4639  0086                     ltemp2	set	134
  4640  0080                     ltemp3	set	128
  4641                           
  4642                           	psect	intentry
  4643  0004                     __pintentry:	
  4644                           ;incstack = 0
  4645                           ; Regs used in _isr: [wreg+status,2+status,0]
  4646                           
  4647  0004                     interrupt_function:	
  4648  007E                     saved_w	set	btemp
  4649  0004  00FE               	movwf	btemp
  4650  0005  0E03               	swapf	3,w
  4651  0006  00F2               	movwf	??_isr+1
  4652  0007  0804               	movf	4,w
  4653  0008  00F3               	movwf	??_isr+2
  4654  0009  080A               	movf	10,w
  4655  000A  00F4               	movwf	??_isr+3
  4656  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4657  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4658  000D  087F               	movf	btemp+1,w
  4659  000E  00F5               	movwf	??_isr+4
  4660  000F  120A  158A  2FDE   	ljmp	_isr


Data Sizes:
    Strings     11
    Constant    0
    Data        107
    BSS         100
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     21      76
    BANK1            80      0      52
    BANK3            96      0      96
    BANK2            96      0       0

Pointer List with Targets:

    lcdWriteString@s	PTR unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_PathTo
    _main->_TravelPath
    _setupLCD->_lcdWriteControl
    _TravelPath->_Turn90
    _Turn90->_DriveDirect
    _Drive->_ser_putch
    _Drive1m->_DriveDirect
    _getSensorData->_ser_getch
    _DriveDirect->_ser_putch
    _PathTo->_lcdWriteString
    _lcdWriteString->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    5127
                                             17 BANK0      4     4      0
                             _PathTo
                         _TravelPath
                           _ser_init
                          _ser_putch
                           _setupADC
                           _setupLCD
                           _setupSPI
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _spi_transfer                                         3     3      0      44
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      31
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TravelPath                                           3     3      0    3350
                                             14 BANK0      3     3      0
                            _Drive1m
                             _Turn90
 ---------------------------------------------------------------------------------
 (2) _Turn90                                               4     4      0    1898
                                             10 BANK0      4     4      0
                              _Drive
                        _DriveDirect
                      _getSensorData
 ---------------------------------------------------------------------------------
 (3) _Drive                                                4     1      3     545
                                              1 BANK0      4     1      3
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _Drive1m                                              1     1      0    1291
                                             10 BANK0      1     1      0
                        _DriveDirect
                      _getSensorData
 ---------------------------------------------------------------------------------
 (3) _getSensorData                                        7     5      2     356
                                              2 BANK0      7     5      2
                          _ser_getch
                          _ser_putch
 ---------------------------------------------------------------------------------
 (4) _ser_getch                                            2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _DriveDirect                                          9     5      4     935
                                              1 BANK0      9     5      4
                          _ser_putch
 ---------------------------------------------------------------------------------
 (1) _ser_putch                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PathTo                                              12    11      1    1637
                                              5 BANK0     12    11      1
                             ___bmul
                       _lcdSetCursor
                     _lcdWriteString
 ---------------------------------------------------------------------------------
 (2) _lcdWriteString                                       2     2      0     126
                                              3 BANK0      2     2      0
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (3) _lcdWriteData                                         3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _lcdSetCursor                                         1     1      0      65
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1    1186
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PathTo
     ___bmul
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteString
       _lcdWriteData
   _TravelPath
     _Drive1m
       _DriveDirect
         _ser_putch
       _getSensorData
         _ser_getch
         _ser_putch
     _Turn90
       _Drive
         _ser_putch
       _DriveDirect
         _ser_putch
       _getSensorData
         _ser_getch
         _ser_putch
   _ser_init
   _ser_putch
   _setupADC
   _setupLCD
     _lcdWriteControl
   _setupSPI
   _spi_transfer

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      60       9      100.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      34       7       65.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     15      4C       5       95.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      EA      12        0.0%
ABS                  0      0      EA       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Tue Oct 04 14:23:33 2016

                       _c 0030                         _r 0035                         _x 0056  
         ??_getSensorData 005B                         _y 003D                         pc 0002  
          ___bmul@product 0059               __CFG_CP$OFF 0000                        _GO 00FA  
                      _up 0385                        fsr 0004               Drive@speedH 005B  
             Drive@speedL 0058                       l212 03E8                       l213 03CB  
                     l215 03D1                       l217 03DA                       l170 01C8  
                     l180 0205                       l172 01CA                       l173 01CC  
                     l174 01CE                       l175 020B                       l176 01FC  
                     l178 0200                       l199 03C3                       l662 0EF3  
                     l668 0EE6                       l776 0F12                       _GIE 005F  
                     _RB0 0030                       _RB1 0031             ??_DriveDirect 005C  
                     _RB4 0034                       _RE0 0048                       _RE1 0049  
                     _RE2 004A              __CFG_CPD$OFF 0000                       _isr 0FDE  
                     fsr0 0004                       indf 0000              __CFG_FOSC$HS 0000  
          ??_lcdWriteData 0057              __CFG_LVP$OFF 0000                      l3123 0610  
                    l2701 006C                      l2613 06C4                      l2631 06FB  
                    l2615 06C9                      l2623 06DC                      l2713 00A1  
                    l2561 0685                      l2545 0653                      l2633 071F  
                    l2617 06D0                      l2625 06EA                      l2803 0258  
                    l2731 00F8                      l2707 0071                      l2619 06D7  
                    l2651 053C                      l2643 0509                      l2805 026D  
                    l2813 02C1                      l2725 00B9                      l2717 00A9  
                    l2565 0698                      l2549 0666                      l2661 0558  
                    l2645 050B                      l2653 0549                      l2831 02E7  
                    l2807 0282                      l2815 02CF                      l2727 00CE  
                    l2735 0122                      l2583 078D                      l2905 03E4  
                    l2825 02E2                      l2809 0297                      l2841 0309  
                    l2761 01E0                      l2729 00E3                      l2737 0130  
                    l2585 078E                      l2665 056A                      l2649 0518  
                    l2683 0F2F                      l2851 0351                      l2667 058E  
                    l2659 0554                      l2915 0400                      l2931 0437  
                    l2845 0312                      l2837 0301                      l2917 0407  
                    l2687 0F35                      l2679 0FC1                      l2847 0327  
                    l2855 037B                      l2759 01D0                      l2935 0442  
                    l2951 0479                      l2919 040E                      l2927 0426  
                    l2873 03A1                      l2849 033C                      l2857 0389  
                    l2793 0225                      l2937 0449                      l2929 0431  
                    l2867 039C                      l2955 0484                      l2939 0450  
                    l2947 0468                      l2973 04C1                      l2957 048B  
                    l2949 0473                      l2879 03BB                      l2799 0253  
                    l2975 04C8                      l2959 0492                      l2967 04AA  
                    l2977 04CF                      l2985 04E7                      l2969 04B6  
                    l2987 04F2                      l2989 03F3                      ?_isr 0071  
                    STR_1 0806                      u2005 023B                      u2125 03A4  
                    u2055 02EA                      u2407 0626                      u1625 0643  
                    u2417 0F8C                      u2427 041A                      u1725 0523  
                    u2437 045C                      u1655 0675                      u2447 049E  
                    u2367 05A2                      u2457 04DB                      u2377 05D6  
                    u2467 0F4C                      u1755 0575                      u2387 05EB  
                    u2477 0F5F                      u1845 0149                      u2397 0600  
                    u1695 0706                      _PEIE 005E                      u1995 0228  
                    _RCIF 0065                      _TMR0 0001                      _TRMT 04C1  
            __CFG_WRT$OFF 0000                      _radH 0036                      _radL 0037  
                    _main 059A                      _left 0382                      _down 0381  
                    _path 00A0                      btemp 007E                      ltemp 007E  
                    start 0012                      ttemp 007E                      wtemp 007E  
       ___bmul@multiplier 005A           __end_of_Drive1m 072B                     ??_isr 0071  
              PathTo@loop 0066                     ?_main 0071             __CFG_WDTE$OFF 0000  
                   i1l259 0FF5                     _RCREG 001A                     _RCSTA 0018  
                   _SPBRG 0099                     _PORTA 0005                     _PORTB 0006  
                   _PORTC 0007                     _PORTD 0008                     _PORTE 0009  
                   _TRISA 0085                     _TRISB 0086                     _TRISC 0087  
                   _TRISD 0088                     _TRISE 0089                     _SSPIF 0063  
                   _TXREG 0019                     _TXSTA 0098  _intersection_orientation 0031  
                   _Drive 07D2                     _angle 0024       __end_of_DriveDirect 06C3  
                   _right 0384                     _x_int 003A                     _y_int 003E  
          __pbitbssCOMMON 0380            __CFG_BOREN$OFF 0000                     pclath 000A  
                   ltemp0 007E                     ltemp1 0082                     ltemp2 0086  
                   ltemp3 0080                _LeftSpeedH 002A                _LeftSpeedL 002B  
                   ttemp0 007E                     ttemp1 0081                     ttemp2 0084  
                   ttemp3 0087                     ttemp4 007F                     status 0003  
                   wtemp0 007E                     wtemp1 0080                     wtemp2 0082  
                   wtemp3 0084                     wtemp4 0086                     wtemp5 0088  
                   wtemp6 007F           __initialization 0015              __end_of_main 0636  
__size_of_lcdWriteControl 0014                    ??_main 0068      __end_of_lcdSetCursor 0EE6  
        ??_lcdWriteString 005A                    ?_Drive 0058                    _ADCON0 001F  
                  _ADCON1 009F                    _ADRESH 001E                    _ADRESL 009E  
                  i1l2465 0FEF                    _TMR0IE 005D                    _TMR0IF 005A  
                  _SSPCON 0014                    _SSPBUF 0013                 ??_Drive1m 0061  
          __CFG_PWRTE$OFF 0000                    _PathTo 0064                    _adcRAW 0076  
                  _Turn90 04F9                    ___bmul 0F2B      __end_of_lcdWriteData 0F51  
         lcdWriteString@s 005B                    _speedH 0038                    _speedL 0039  
                  _x_path 003B                    _y_path 003F               _DriveDirect 0636  
        __end_of_ser_init 0F0B              __pdataCOMMON 0079          __end_of_setupADC 0F8F  
        __end_of_setupLCD 07D2          __end_of_setupSPI 0FBE                    saved_w 007E  
         Turn90@direction 0064                _TravelPath 03EF   __end_of__initialization 0060  
     ___bmul@multiplicand 0057             __end_of_Drive 07FA            __pcstackCOMMON 0071  
            __pidataBANK0 0F8F              __pidataBANK1 0F65              __pidataBANK3 072B  
          PathTo@x_target 0064            PathTo@y_target 005C           DriveDirect@data 005D  
                 ??_Drive 005B         ??_lcdWriteControl 0057                __pbssBANK0 0020  
              __pbssBANK1 00A0                __pbssBANK3 01D0         _pathCountShortest 0055  
     lcdSetCursor@address 005A                   ?_PathTo 005C                __pmaintext 059A  
                 ?_Turn90 0071                   ?___bmul 0057                __pintentry 0004  
   __size_of_lcdSetCursor 0009     __end_of_getSensorData 07A9        __size_of_ser_getch 000A  
      __size_of_ser_putch 000C               ?_TravelPath 0071               _RightSpeedH 002E  
             _RightSpeedL 002F                   _IR_Wall 0380                   _SSPSTAT 0094  
              __stringtab 0800                   _Drive1m 06C3   DriveDirect@VelocityLeft 005A  
   __size_of_lcdWriteData 0013              _lcdSetCursor 0EDD                 ?_ser_init 0071  
         __size_of_PathTo 038B                 ?_setupADC 0071                 ?_setupLCD 0071  
               ?_setupSPI 0071           __size_of_Turn90 00A1           __size_of___bmul 0013  
                 __ptext1 0F0B                   __ptext2 0FA5                   __ptext3 07A9  
                 __ptext4 0F79                   __ptext5 0EFC                   __ptext6 03EF  
                 __ptext7 04F9                   __ptext8 07D2                   __ptext9 06C3  
            __size_of_isr 0022                   _lowByte 0032          _orientation_path 0033  
                 clrloop0 0ED6              _lcdWriteData 0F3E      end_of_initialization 0060  
       __end_of_ser_getch 0EF0         __end_of_ser_putch 0EFC                _reset_flag 0383  
              ??_ser_init 0057                ??_setupADC 0057                ??_setupLCD 005A  
              ??_setupSPI 0057       __size_of_TravelPath 010A                _time_count 0028  
            ?_DriveDirect 0058                 Drive@radH 0059                 Drive@radL 005A  
             TravelPath@n 0067             ?_spi_transfer 0071           ser_getch@rxbyte 0058  
          __end_of_PathTo 03EF                 PathTo@sum 0065            __end_of_Turn90 059A  
          __end_of___bmul 0F3E       DriveDirect@data_388 005F           _lcdWriteControl 0F51  
           __pidataCOMMON 07FA       start_initialization 0015               __end_of_isr 1000  
          ??_spi_transfer 0057   __size_of_lcdWriteString 0020                  ??_PathTo 005D  
                ??_Turn90 0061                  ??___bmul 0058                init_fetch0 0F1A  
             __pdataBANK0 0041               __pdataBANK1 00C0               __pdataBANK3 0190  
             __pbssCOMMON 0076                 ___latbits 0002             __pcstackBANK0 0057  
            ??_TravelPath 0065                  ?_Drive1m 0071   __end_of_lcdWriteControl 0F65  
       __size_of_ser_init 000F         __size_of_setupADC 0016         __size_of_setupLCD 0029  
      __end_of_TravelPath 04F9         __size_of_setupSPI 0019                 __pstrings 0800  
            _pathShortest 01D0                 _gridWalls 0190            __size_of_Drive 0028  
    __size_of_DriveDirect 008D           main@controlByte 006B                 _pathCount 0034  
 lcdWriteControl@databyte 0059         interrupt_function 0004    __size_of_getSensorData 003E  
              ser_putch@c 0057     getSensorData@packetID 005D                 clear_ram0 0ED5  
               _ser_getch 0EE6                 _ser_putch 0EF0             _VelocityRight 0022  
    __end_of_spi_transfer 0F1A               __stringbase 0805          spi_transfer@data 0059  
        spi_transfer@temp 0058      lcdWriteData@databyte 0059            _lcdWriteString 0FBE  
DriveDirect@VelocityRight 0058          __size_of_Drive1m 0068                ?_ser_getch 0071  
        ?_lcdWriteControl 0071           _mazeGridDefault 00C0                ?_ser_putch 0071  
           _getSensorData 076B        __end_of__stringtab 0806                  __ptext10 076B  
                __ptext11 0EE6                  __ptext20 0FDE                  __ptext12 0636  
                __ptext13 0EF0                  __ptext14 0064                  __ptext15 0FBE  
                __ptext16 0F3E                  __ptext17 0EDD                  __ptext18 0F51  
                __ptext19 0F2B                  _highByte 0078    __end_of_lcdWriteString 0FDE  
                _distance 0026                  _mazeGrid 0041             __size_of_main 009C  
                _ser_init 0EFC                  _setupADC 0F79                  _setupLCD 07A9  
                _setupSPI 0FA5                _PB7Counter 002C                  _x_target 003C  
              _PB8Counter 002D                  _y_target 0040              _VelocityLeft 0020  
          ?_getSensorData 0059                  init_ram0 0F1E           ?_lcdWriteString 0071  
                intlevel1 0000             ?_lcdSetCursor 0071                 stringcode 0800  
             ??_ser_getch 0057               ??_ser_putch 0057       getSensorData@sensor 005E  
   __size_of_spi_transfer 000F               _orientation 0079                _OPTION_REG 0081  
                stringdir 0800                  stringtab 0800        getSensorData@bytes 0059  
           ?_lcdWriteData 0071              _spi_transfer 0F0B            ??_lcdSetCursor 005A  
