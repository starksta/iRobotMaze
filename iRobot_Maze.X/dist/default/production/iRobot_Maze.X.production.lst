

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Thu Oct 06 18:40:48 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	intentry,global,class=CODE,delta=2
    45                           	dabs	1,0x7E,2
    46  0000                     	;# 
    47  0001                     	;# 
    48  0002                     	;# 
    49  0003                     	;# 
    50  0004                     	;# 
    51  0005                     	;# 
    52  0006                     	;# 
    53  0007                     	;# 
    54  0008                     	;# 
    55  0009                     	;# 
    56  000A                     	;# 
    57  000B                     	;# 
    58  000C                     	;# 
    59  000D                     	;# 
    60  000E                     	;# 
    61  000E                     	;# 
    62  000F                     	;# 
    63  0010                     	;# 
    64  0011                     	;# 
    65  0012                     	;# 
    66  0013                     	;# 
    67  0014                     	;# 
    68  0015                     	;# 
    69  0015                     	;# 
    70  0016                     	;# 
    71  0017                     	;# 
    72  0018                     	;# 
    73  0019                     	;# 
    74  001A                     	;# 
    75  001B                     	;# 
    76  001B                     	;# 
    77  001C                     	;# 
    78  001D                     	;# 
    79  001E                     	;# 
    80  001F                     	;# 
    81  0081                     	;# 
    82  0085                     	;# 
    83  0086                     	;# 
    84  0087                     	;# 
    85  0088                     	;# 
    86  0089                     	;# 
    87  008C                     	;# 
    88  008D                     	;# 
    89  008E                     	;# 
    90  0091                     	;# 
    91  0092                     	;# 
    92  0093                     	;# 
    93  0094                     	;# 
    94  0098                     	;# 
    95  0099                     	;# 
    96  009C                     	;# 
    97  009D                     	;# 
    98  009E                     	;# 
    99  009F                     	;# 
   100  010C                     	;# 
   101  010D                     	;# 
   102  010E                     	;# 
   103  010F                     	;# 
   104  018C                     	;# 
   105  018D                     	;# 
   106  0000                     	;# 
   107  0001                     	;# 
   108  0002                     	;# 
   109  0003                     	;# 
   110  0004                     	;# 
   111  0005                     	;# 
   112  0006                     	;# 
   113  0007                     	;# 
   114  0008                     	;# 
   115  0009                     	;# 
   116  000A                     	;# 
   117  000B                     	;# 
   118  000C                     	;# 
   119  000D                     	;# 
   120  000E                     	;# 
   121  000E                     	;# 
   122  000F                     	;# 
   123  0010                     	;# 
   124  0011                     	;# 
   125  0012                     	;# 
   126  0013                     	;# 
   127  0014                     	;# 
   128  0015                     	;# 
   129  0015                     	;# 
   130  0016                     	;# 
   131  0017                     	;# 
   132  0018                     	;# 
   133  0019                     	;# 
   134  001A                     	;# 
   135  001B                     	;# 
   136  001B                     	;# 
   137  001C                     	;# 
   138  001D                     	;# 
   139  001E                     	;# 
   140  001F                     	;# 
   141  0081                     	;# 
   142  0085                     	;# 
   143  0086                     	;# 
   144  0087                     	;# 
   145  0088                     	;# 
   146  0089                     	;# 
   147  008C                     	;# 
   148  008D                     	;# 
   149  008E                     	;# 
   150  0091                     	;# 
   151  0092                     	;# 
   152  0093                     	;# 
   153  0094                     	;# 
   154  0098                     	;# 
   155  0099                     	;# 
   156  009C                     	;# 
   157  009D                     	;# 
   158  009E                     	;# 
   159  009F                     	;# 
   160  010C                     	;# 
   161  010D                     	;# 
   162  010E                     	;# 
   163  010F                     	;# 
   164  018C                     	;# 
   165  018D                     	;# 
   166  0000                     	;# 
   167  0001                     	;# 
   168  0002                     	;# 
   169  0003                     	;# 
   170  0004                     	;# 
   171  0005                     	;# 
   172  0006                     	;# 
   173  0007                     	;# 
   174  0008                     	;# 
   175  0009                     	;# 
   176  000A                     	;# 
   177  000B                     	;# 
   178  000C                     	;# 
   179  000D                     	;# 
   180  000E                     	;# 
   181  000E                     	;# 
   182  000F                     	;# 
   183  0010                     	;# 
   184  0011                     	;# 
   185  0012                     	;# 
   186  0013                     	;# 
   187  0014                     	;# 
   188  0015                     	;# 
   189  0015                     	;# 
   190  0016                     	;# 
   191  0017                     	;# 
   192  0018                     	;# 
   193  0019                     	;# 
   194  001A                     	;# 
   195  001B                     	;# 
   196  001B                     	;# 
   197  001C                     	;# 
   198  001D                     	;# 
   199  001E                     	;# 
   200  001F                     	;# 
   201  0081                     	;# 
   202  0085                     	;# 
   203  0086                     	;# 
   204  0087                     	;# 
   205  0088                     	;# 
   206  0089                     	;# 
   207  008C                     	;# 
   208  008D                     	;# 
   209  008E                     	;# 
   210  0091                     	;# 
   211  0092                     	;# 
   212  0093                     	;# 
   213  0094                     	;# 
   214  0098                     	;# 
   215  0099                     	;# 
   216  009C                     	;# 
   217  009D                     	;# 
   218  009E                     	;# 
   219  009F                     	;# 
   220  010C                     	;# 
   221  010D                     	;# 
   222  010E                     	;# 
   223  010F                     	;# 
   224  018C                     	;# 
   225  018D                     	;# 
   226  0000                     	;# 
   227  0001                     	;# 
   228  0002                     	;# 
   229  0003                     	;# 
   230  0004                     	;# 
   231  0005                     	;# 
   232  0006                     	;# 
   233  0007                     	;# 
   234  0008                     	;# 
   235  0009                     	;# 
   236  000A                     	;# 
   237  000B                     	;# 
   238  000C                     	;# 
   239  000D                     	;# 
   240  000E                     	;# 
   241  000E                     	;# 
   242  000F                     	;# 
   243  0010                     	;# 
   244  0011                     	;# 
   245  0012                     	;# 
   246  0013                     	;# 
   247  0014                     	;# 
   248  0015                     	;# 
   249  0015                     	;# 
   250  0016                     	;# 
   251  0017                     	;# 
   252  0018                     	;# 
   253  0019                     	;# 
   254  001A                     	;# 
   255  001B                     	;# 
   256  001B                     	;# 
   257  001C                     	;# 
   258  001D                     	;# 
   259  001E                     	;# 
   260  001F                     	;# 
   261  0081                     	;# 
   262  0085                     	;# 
   263  0086                     	;# 
   264  0087                     	;# 
   265  0088                     	;# 
   266  0089                     	;# 
   267  008C                     	;# 
   268  008D                     	;# 
   269  008E                     	;# 
   270  0091                     	;# 
   271  0092                     	;# 
   272  0093                     	;# 
   273  0094                     	;# 
   274  0098                     	;# 
   275  0099                     	;# 
   276  009C                     	;# 
   277  009D                     	;# 
   278  009E                     	;# 
   279  009F                     	;# 
   280  010C                     	;# 
   281  010D                     	;# 
   282  010E                     	;# 
   283  010F                     	;# 
   284  018C                     	;# 
   285  018D                     	;# 
   286  0000                     	;# 
   287  0001                     	;# 
   288  0002                     	;# 
   289  0003                     	;# 
   290  0004                     	;# 
   291  0005                     	;# 
   292  0006                     	;# 
   293  0007                     	;# 
   294  0008                     	;# 
   295  0009                     	;# 
   296  000A                     	;# 
   297  000B                     	;# 
   298  000C                     	;# 
   299  000D                     	;# 
   300  000E                     	;# 
   301  000E                     	;# 
   302  000F                     	;# 
   303  0010                     	;# 
   304  0011                     	;# 
   305  0012                     	;# 
   306  0013                     	;# 
   307  0014                     	;# 
   308  0015                     	;# 
   309  0015                     	;# 
   310  0016                     	;# 
   311  0017                     	;# 
   312  0018                     	;# 
   313  0019                     	;# 
   314  001A                     	;# 
   315  001B                     	;# 
   316  001B                     	;# 
   317  001C                     	;# 
   318  001D                     	;# 
   319  001E                     	;# 
   320  001F                     	;# 
   321  0081                     	;# 
   322  0085                     	;# 
   323  0086                     	;# 
   324  0087                     	;# 
   325  0088                     	;# 
   326  0089                     	;# 
   327  008C                     	;# 
   328  008D                     	;# 
   329  008E                     	;# 
   330  0091                     	;# 
   331  0092                     	;# 
   332  0093                     	;# 
   333  0094                     	;# 
   334  0098                     	;# 
   335  0099                     	;# 
   336  009C                     	;# 
   337  009D                     	;# 
   338  009E                     	;# 
   339  009F                     	;# 
   340  010C                     	;# 
   341  010D                     	;# 
   342  010E                     	;# 
   343  010F                     	;# 
   344  018C                     	;# 
   345  018D                     	;# 
   346  0000                     	;# 
   347  0001                     	;# 
   348  0002                     	;# 
   349  0003                     	;# 
   350  0004                     	;# 
   351  0005                     	;# 
   352  0006                     	;# 
   353  0007                     	;# 
   354  0008                     	;# 
   355  0009                     	;# 
   356  000A                     	;# 
   357  000B                     	;# 
   358  000C                     	;# 
   359  000D                     	;# 
   360  000E                     	;# 
   361  000E                     	;# 
   362  000F                     	;# 
   363  0010                     	;# 
   364  0011                     	;# 
   365  0012                     	;# 
   366  0013                     	;# 
   367  0014                     	;# 
   368  0015                     	;# 
   369  0015                     	;# 
   370  0016                     	;# 
   371  0017                     	;# 
   372  0018                     	;# 
   373  0019                     	;# 
   374  001A                     	;# 
   375  001B                     	;# 
   376  001B                     	;# 
   377  001C                     	;# 
   378  001D                     	;# 
   379  001E                     	;# 
   380  001F                     	;# 
   381  0081                     	;# 
   382  0085                     	;# 
   383  0086                     	;# 
   384  0087                     	;# 
   385  0088                     	;# 
   386  0089                     	;# 
   387  008C                     	;# 
   388  008D                     	;# 
   389  008E                     	;# 
   390  0091                     	;# 
   391  0092                     	;# 
   392  0093                     	;# 
   393  0094                     	;# 
   394  0098                     	;# 
   395  0099                     	;# 
   396  009C                     	;# 
   397  009D                     	;# 
   398  009E                     	;# 
   399  009F                     	;# 
   400  010C                     	;# 
   401  010D                     	;# 
   402  010E                     	;# 
   403  010F                     	;# 
   404  018C                     	;# 
   405  018D                     	;# 
   406                           
   407                           	psect	idataBANK0
   408  0997                     __pidataBANK0:	
   409                           
   410                           ;initializer for _CURRENT_SPEED_L
   411  0997  3496               	retlw	150
   412  0998  3400               	retlw	0
   413                           
   414                           ;initializer for _CURRENT_SPEED_R
   415  0999  3496               	retlw	150
   416  099A  3400               	retlw	0
   417                           
   418                           ;initializer for _orientation
   419  099B  3403               	retlw	3
   420                           
   421                           ;initializer for _pathCountShortest
   422  099C  3414               	retlw	20
   423                           
   424                           ;initializer for _x
   425  099D  3401               	retlw	1
   426                           
   427                           	psect	idataBANK1
   428  0AB3                     __pidataBANK1:	
   429                           
   430                           ;initializer for _mazeGrid
   431  0AB3  340C               	retlw	12
   432  0AB4  3407               	retlw	7
   433  0AB5  340E               	retlw	14
   434  0AB6  340D               	retlw	13
   435  0AB7  3406               	retlw	6
   436  0AB8  3409               	retlw	9
   437  0AB9  3405               	retlw	5
   438  0ABA  3400               	retlw	0
   439  0ABB  3405               	retlw	5
   440  0ABC  3402               	retlw	2
   441  0ABD  340C               	retlw	12
   442  0ABE  3406               	retlw	6
   443  0ABF  340A               	retlw	10
   444  0AC0  340E               	retlw	14
   445  0AC1  340A               	retlw	10
   446  0AC2  340B               	retlw	11
   447  0AC3  3409               	retlw	9
   448  0AC4  3401               	retlw	1
   449  0AC5  3401               	retlw	1
   450  0AC6  3403               	retlw	3
   451                           
   452                           ;initializer for _mazeGridDefault
   453  0AC7  340C               	retlw	12
   454  0AC8  3407               	retlw	7
   455  0AC9  340E               	retlw	14
   456  0ACA  340D               	retlw	13
   457  0ACB  3406               	retlw	6
   458  0ACC  3409               	retlw	9
   459  0ACD  3405               	retlw	5
   460  0ACE  3400               	retlw	0
   461  0ACF  3405               	retlw	5
   462  0AD0  3402               	retlw	2
   463  0AD1  340C               	retlw	12
   464  0AD2  3406               	retlw	6
   465  0AD3  340A               	retlw	10
   466  0AD4  340E               	retlw	14
   467  0AD5  340A               	retlw	10
   468  0AD6  340B               	retlw	11
   469  0AD7  3409               	retlw	9
   470  0AD8  3401               	retlw	1
   471  0AD9  3401               	retlw	1
   472  0ADA  3403               	retlw	3
   473                           
   474                           	psect	idataBANK3
   475  0B42                     __pidataBANK3:	
   476                           
   477                           ;initializer for _gridWalls
   478  0B42  3400               	retlw	0
   479  0B43  3400               	retlw	0
   480  0B44  3400               	retlw	0
   481  0B45  3400               	retlw	0
   482  0B46  3400               	retlw	0
   483  0B47  3400               	retlw	0
   484  0B48  3400               	retlw	0
   485  0B49  3400               	retlw	0
   486  0B4A  3401               	retlw	1
   487  0B4B  3401               	retlw	1
   488  0B4C  3401               	retlw	1
   489  0B4D  3401               	retlw	1
   490  0B4E  3401               	retlw	1
   491  0B4F  3401               	retlw	1
   492  0B50  3401               	retlw	1
   493  0B51  3401               	retlw	1
   494  0B52  3400               	retlw	0
   495  0B53  3400               	retlw	0
   496  0B54  3400               	retlw	0
   497  0B55  3400               	retlw	0
   498  0B56  3401               	retlw	1
   499  0B57  3401               	retlw	1
   500  0B58  3401               	retlw	1
   501  0B59  3401               	retlw	1
   502  0B5A  3400               	retlw	0
   503  0B5B  3400               	retlw	0
   504  0B5C  3400               	retlw	0
   505  0B5D  3400               	retlw	0
   506  0B5E  3401               	retlw	1
   507  0B5F  3401               	retlw	1
   508  0B60  3401               	retlw	1
   509  0B61  3401               	retlw	1
   510  0B62  3400               	retlw	0
   511  0B63  3400               	retlw	0
   512  0B64  3401               	retlw	1
   513  0B65  3401               	retlw	1
   514  0B66  3400               	retlw	0
   515  0B67  3400               	retlw	0
   516  0B68  3401               	retlw	1
   517  0B69  3401               	retlw	1
   518  0B6A  3400               	retlw	0
   519  0B6B  3400               	retlw	0
   520  0B6C  3401               	retlw	1
   521  0B6D  3401               	retlw	1
   522  0B6E  3400               	retlw	0
   523  0B6F  3400               	retlw	0
   524  0B70  3401               	retlw	1
   525  0B71  3401               	retlw	1
   526  0B72  3400               	retlw	0
   527  0B73  3401               	retlw	1
   528  0B74  3400               	retlw	0
   529  0B75  3401               	retlw	1
   530  0B76  3400               	retlw	0
   531  0B77  3401               	retlw	1
   532  0B78  3400               	retlw	0
   533  0B79  3401               	retlw	1
   534  0B7A  3400               	retlw	0
   535  0B7B  3401               	retlw	1
   536  0B7C  3400               	retlw	0
   537  0B7D  3401               	retlw	1
   538  0B7E  3400               	retlw	0
   539  0B7F  3401               	retlw	1
   540  0B80  3400               	retlw	0
   541  0B81  3401               	retlw	1
   542  001F                     _ADCON0	set	31
   543  0005                     _PORTA	set	5
   544  0006                     _PORTB	set	6
   545  0007                     _PORTC	set	7
   546  0008                     _PORTD	set	8
   547  0009                     _PORTE	set	9
   548  001A                     _RCREG	set	26
   549  0018                     _RCSTA	set	24
   550  0013                     _SSPBUF	set	19
   551  0014                     _SSPCON	set	20
   552  0001                     _TMR0	set	1
   553  0019                     _TXREG	set	25
   554  001E                     _ADRESH	set	30
   555  005F                     _GIE	set	95
   556  00FA                     _GO	set	250
   557  005E                     _PEIE	set	94
   558  0030                     _RB0	set	48
   559  0031                     _RB1	set	49
   560  0032                     _RB2	set	50
   561  0033                     _RB3	set	51
   562  003A                     _RC2	set	58
   563  0065                     _RCIF	set	101
   564  0048                     _RE0	set	72
   565  0049                     _RE1	set	73
   566  004A                     _RE2	set	74
   567  0063                     _SSPIF	set	99
   568  005D                     _TMR0IE	set	93
   569  005A                     _TMR0IF	set	90
   570  009F                     _ADCON1	set	159
   571  009E                     _ADRESL	set	158
   572  0081                     _OPTION_REG	set	129
   573  0099                     _SPBRG	set	153
   574  0094                     _SSPSTAT	set	148
   575  0085                     _TRISA	set	133
   576  0086                     _TRISB	set	134
   577  0087                     _TRISC	set	135
   578  0088                     _TRISD	set	136
   579  0089                     _TRISE	set	137
   580  0098                     _TXSTA	set	152
   581  04C1                     _TRMT	set	1217
   582                           
   583                           	psect	strings
   584  0800                     __pstrings:	
   585  0800                     stringtab:	
   586  0800                     __stringtab:	
   587  0800                     stringcode:	
   588                           ;	String table - string pointers are 1 byte each
   589                           
   590  0800                     stringdir:	
   591  0800  3008               	movlw	high stringdir
   592  0801  008A               	movwf	10
   593  0802  0804               	movf	4,w
   594  0803  0A84               	incf	4,f
   595  0804  0782               	addwf	2,f
   596  0805                     __stringbase:	
   597  0805  3400               	retlw	0
   598  0806                     __end_of__stringtab:	
   599  0806                     STR_1:	
   600  0806  3457               	retlw	87	;'W'
   601  0807  346F               	retlw	111	;'o'
   602  0808  3472               	retlw	114	;'r'
   603  0809  346B               	retlw	107	;'k'
   604  080A  3469               	retlw	105	;'i'
   605  080B  346E               	retlw	110	;'n'
   606  080C  3467               	retlw	103	;'g'
   607  080D  342E               	retlw	46	;'.'
   608  080E  342E               	retlw	46	;'.'
   609  080F  342E               	retlw	46	;'.'
   610  0810  3400               	retlw	0
   611                           
   612                           ; #config settings
   613  0000                     
   614                           	psect	cinit
   615  0015                     start_initialization:	
   616  0015                     __initialization:	
   617                           
   618                           ; Initialize objects allocated to BANK3
   619  0015  1783               	bsf	3,7	;select IRP bank2
   620  0016  30D0               	movlw	low (__pdataBANK3+64)
   621  0017  00FD               	movwf	btemp+-1
   622  0018  300B               	movlw	high __pidataBANK3
   623  0019  00FE               	movwf	btemp
   624  001A  3042               	movlw	low __pidataBANK3
   625  001B  00FF               	movwf	btemp+1
   626  001C  3090               	movlw	low __pdataBANK3
   627  001D  0084               	movwf	4
   628  001E  120A  158A  21E7  120A  118A  	fcall	init_ram0
   629                           
   630                           ; Initialize objects allocated to BANK1
   631  0023  1383               	bcf	3,7	;select IRP bank0
   632  0024  30C8               	movlw	low (__pdataBANK1+40)
   633  0025  00FD               	movwf	btemp+-1
   634  0026  300A               	movlw	high __pidataBANK1
   635  0027  00FE               	movwf	btemp
   636  0028  30B3               	movlw	low __pidataBANK1
   637  0029  00FF               	movwf	btemp+1
   638  002A  30A0               	movlw	low __pdataBANK1
   639  002B  0084               	movwf	4
   640  002C  120A  158A  21E7  120A  118A  	fcall	init_ram0
   641                           
   642                           ; Initialize objects allocated to BANK0
   643  0031  306C               	movlw	low (__pdataBANK0+7)
   644  0032  00FD               	movwf	btemp+-1
   645  0033  3009               	movlw	high __pidataBANK0
   646  0034  00FE               	movwf	btemp
   647  0035  3097               	movlw	low __pidataBANK0
   648  0036  00FF               	movwf	btemp+1
   649  0037  3065               	movlw	low __pdataBANK0
   650  0038  0084               	movwf	4
   651  0039  120A  158A  21E7  120A  118A  	fcall	init_ram0
   652                           
   653                           ; Clear objects allocated to BANK3
   654  003E  1783               	bsf	3,7	;select IRP bank2
   655  003F  30D0               	movlw	low __pbssBANK3
   656  0040  0084               	movwf	4
   657  0041  30F0               	movlw	low (__pbssBANK3+32)
   658  0042  120A  158A  219E  120A  118A  	fcall	clear_ram0
   659                           
   660                           ; Clear objects allocated to BANK1
   661  0047  1383               	bcf	3,7	;select IRP bank0
   662  0048  30C8               	movlw	low __pbssBANK1
   663  0049  0084               	movwf	4
   664  004A  30EC               	movlw	low (__pbssBANK1+36)
   665  004B  120A  158A  219E  120A  118A  	fcall	clear_ram0
   666                           
   667                           ; Clear objects allocated to BANK0
   668  0050  3020               	movlw	low __pbssBANK0
   669  0051  0084               	movwf	4
   670  0052  304B               	movlw	low (__pbssBANK0+43)
   671  0053  120A  158A  219E   	fcall	clear_ram0
   672                           
   673                           ; Clear objects allocated to COMMON
   674  0056  01F6               	clrf	__pbssCOMMON& (0+127)
   675  0057  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   676  0058  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   677  0059  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   678                           
   679                           ; Clear objects allocated to BITCOMMON
   680  005A  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   681  005B                     end_of_initialization:	
   682                           ;End of C runtime variable initialization code
   683                           
   684  005B                     __end_of__initialization:	
   685  005B  0183               	clrf	3
   686  005C  120A  118A  285F   	ljmp	_main	;jump to C main() function
   687                           
   688                           	psect	bitbssCOMMON
   689  0380                     __pbitbssCOMMON:	
   690  0380                     _IR_Wall:	
   691  0380                     	ds	1
   692  0381                     _down:	
   693  0381                     	ds	1
   694  0382                     _left:	
   695  0382                     	ds	1
   696  0383                     _reset_flag:	
   697  0383                     	ds	1
   698  0384                     _right:	
   699  0384                     	ds	1
   700  0385                     _targets_found:	
   701  0385                     	ds	1
   702  0386                     _up:	
   703  0386                     	ds	1
   704                           
   705                           	psect	bssCOMMON
   706  0076                     __pbssCOMMON:	
   707  0076                     _adcRAW:	
   708  0076                     	ds	2
   709  0078                     _ADC_ADJUST:	
   710  0078                     	ds	2
   711                           
   712                           	psect	bssBANK0
   713  0020                     __pbssBANK0:	
   714  0020                     _ADJUSTED_SPEED_L:	
   715  0020                     	ds	2
   716  0022                     _ADJUSTED_SPEED_R:	
   717  0022                     	ds	2
   718  0024                     _Distance:	
   719  0024                     	ds	2
   720  0026                     _angle:	
   721  0026                     	ds	2
   722  0028                     _distance:	
   723  0028                     	ds	2
   724  002A                     _loop:	
   725  002A                     	ds	2
   726  002C                     _time_count:	
   727  002C                     	ds	2
   728  002E                     _timerLoop:	
   729  002E                     	ds	2
   730  0030                     _LeftSpeedH:	
   731  0030                     	ds	1
   732  0031                     _LeftSpeedL:	
   733  0031                     	ds	1
   734  0032                     _PB7Counter:	
   735  0032                     	ds	1
   736  0033                     _PB8Counter:	
   737  0033                     	ds	1
   738  0034                     _RightSpeedH:	
   739  0034                     	ds	1
   740  0035                     _RightSpeedL:	
   741  0035                     	ds	1
   742  0036                     _c:	
   743  0036                     	ds	1
   744  0037                     _intersection_orientation:	
   745  0037                     	ds	1
   746  0038                     _lowByte:	
   747  0038                     	ds	1
   748  0039                     _orientation_path:	
   749  0039                     	ds	1
   750  003A                     _pathCount:	
   751  003A                     	ds	1
   752  003B                     _r:	
   753  003B                     	ds	1
   754  003C                     _radH:	
   755  003C                     	ds	1
   756  003D                     _radL:	
   757  003D                     	ds	1
   758  003E                     _speedH:	
   759  003E                     	ds	1
   760  003F                     _speedL:	
   761  003F                     	ds	1
   762  0040                     _targets:	
   763  0040                     	ds	1
   764  0041                     _x_goto:	
   765  0041                     	ds	1
   766  0042                     _x_int:	
   767  0042                     	ds	1
   768  0043                     _x_path:	
   769  0043                     	ds	1
   770  0044                     _x_target:	
   771  0044                     	ds	1
   772  0045                     _y:	
   773  0045                     	ds	1
   774  0046                     _y_goto:	
   775  0046                     	ds	1
   776  0047                     _y_int:	
   777  0047                     	ds	1
   778  0048                     _y_path:	
   779  0048                     	ds	1
   780  0049                     _y_target:	
   781  0049                     	ds	1
   782  004A                     _highByte:	
   783  004A                     	ds	1
   784                           
   785                           	psect	dataBANK0
   786  0065                     __pdataBANK0:	
   787  0065                     _CURRENT_SPEED_L:	
   788  0065                     	ds	2
   789  0067                     _CURRENT_SPEED_R:	
   790  0067                     	ds	2
   791  0069                     _orientation:	
   792  0069                     	ds	1
   793  006A                     _pathCountShortest:	
   794  006A                     	ds	1
   795  006B                     _x:	
   796  006B                     	ds	1
   797                           
   798                           	psect	bssBANK1
   799  00C8                     __pbssBANK1:	
   800  00C8                     _pathShortest:	
   801  00C8                     	ds	32
   802  00E8                     _VelocityLeft:	
   803  00E8                     	ds	2
   804  00EA                     _VelocityRight:	
   805  00EA                     	ds	2
   806                           
   807                           	psect	dataBANK1
   808  00A0                     __pdataBANK1:	
   809  00A0                     _mazeGrid:	
   810  00A0                     	ds	20
   811  00B4                     _mazeGridDefault:	
   812  00B4                     	ds	20
   813                           
   814                           	psect	bssBANK3
   815  01D0                     __pbssBANK3:	
   816  01D0                     _path:	
   817  01D0                     	ds	32
   818                           
   819                           	psect	dataBANK3
   820  0190                     __pdataBANK3:	
   821  0190                     _gridWalls:	
   822  0190                     	ds	64
   823                           
   824                           	psect	inittext
   825  09E3                     init_fetch0:	
   826                           ;	Called with low address in FSR and high address in W
   827                           
   828  09E3  087E               	movf	126,w
   829  09E4  008A               	movwf	10
   830  09E5  087F               	movf	127,w
   831  09E6  0082               	movwf	2
   832  09E7                     init_ram0:	
   833                           ;Called with:
   834                           ;	high address of idata address in btemp 
   835                           ;	low address of idata address in btemp+1 
   836                           ;	low address of data in FSR
   837                           ;	high address + 1 of data in btemp-1
   838                           
   839  09E7  21E3  120A  158A   	fcall	init_fetch0
   840  09EA  0080               	movwf	0
   841  09EB  0A84               	incf	4,f
   842  09EC  0804               	movf	4,w
   843  09ED  067D               	xorwf	125,w
   844  09EE  1903               	btfsc	3,2
   845  09EF  3400               	retlw	0
   846  09F0  0AFF               	incf	127,f
   847  09F1  1903               	btfsc	3,2
   848  09F2  0AFE               	incf	126,f
   849  09F3  29E7               	goto	init_ram0
   850                           
   851                           	psect	clrtext
   852  099E                     clear_ram0:	
   853                           ;	Called with FSR containing the base address, and
   854                           ;	W with the last address+1
   855                           
   856  099E  0064               	clrwdt	;clear the watchdog before getting into this loop
   857  099F                     clrloop0:	
   858  099F  0180               	clrf	0	;clear RAM location pointed to by FSR
   859  09A0  0A84               	incf	4,f	;increment pointer
   860  09A1  0604               	xorwf	4,w	;XOR with final address
   861  09A2  1903               	btfsc	3,2	;have we reached the end yet?
   862  09A3  3400               	retlw	0	;all done for this memory range, return
   863  09A4  0604               	xorwf	4,w	;XOR again to restore value
   864  09A5  299F               	goto	clrloop0	;do the next byte
   865                           
   866                           	psect	cstackBANK2
   867  0110                     __pcstackBANK2:	
   868  0110                     main@controlByte:	
   869                           
   870                           ; 1 bytes @ 0x0
   871  0110                     	ds	1
   872  0111                     main@first:	
   873                           
   874                           ; 1 bytes @ 0x1
   875  0111                     	ds	1
   876  0112                     main@second:	
   877                           
   878                           ; 1 bytes @ 0x2
   879  0112                     	ds	1
   880  0113                     main@third:	
   881                           
   882                           ; 1 bytes @ 0x3
   883  0113                     	ds	1
   884  0114                     main@fourth:	
   885                           
   886                           ; 1 bytes @ 0x4
   887  0114                     	ds	1
   888  0115                     main@fifth:	
   889                           
   890                           ; 1 bytes @ 0x5
   891  0115                     	ds	1
   892                           
   893                           	psect	cstackCOMMON
   894  0071                     __pcstackCOMMON:	
   895  0071                     ?_lcdSetCursor:	
   896  0071                     ?_lcdWriteString:	
   897                           ; 1 bytes @ 0x0
   898                           
   899  0071                     ?_ser_putch:	
   900                           ; 1 bytes @ 0x0
   901                           
   902  0071                     ?_ser_init:	
   903                           ; 1 bytes @ 0x0
   904                           
   905  0071                     ?_setupSPI:	
   906                           ; 1 bytes @ 0x0
   907                           
   908  0071                     ?_setupLCD:	
   909                           ; 1 bytes @ 0x0
   910                           
   911  0071                     ?_setupADC:	
   912                           ; 1 bytes @ 0x0
   913                           
   914  0071                     ?_spi_transfer:	
   915                           ; 1 bytes @ 0x0
   916                           
   917  0071                     ?_Drive1m:	
   918                           ; 1 bytes @ 0x0
   919                           
   920  0071                     ?_Turn90:	
   921                           ; 1 bytes @ 0x0
   922                           
   923  0071                     ?_TravelPath:	
   924                           ; 1 bytes @ 0x0
   925                           
   926  0071                     ?_re_route:	
   927                           ; 1 bytes @ 0x0
   928                           
   929  0071                     ?_isr:	
   930                           ; 1 bytes @ 0x0
   931                           
   932  0071                     ??_isr:	
   933                           ; 1 bytes @ 0x0
   934                           
   935  0071                     ?_main:	
   936                           ; 1 bytes @ 0x0
   937                           
   938  0071                     ?_lcdWriteControl:	
   939                           ; 1 bytes @ 0x0
   940                           
   941  0071                     ?_lcdWriteData:	
   942                           ; 1 bytes @ 0x0
   943                           
   944  0071                     ?_ser_getch:	
   945                           ; 1 bytes @ 0x0
   946                           
   947                           
   948                           ; 1 bytes @ 0x0
   949  0071                     	ds	5
   950                           
   951                           	psect	cstackBANK0
   952  004B                     __pcstackBANK0:	
   953  004B                     ??_ser_putch:	
   954  004B                     ??_ser_init:	
   955                           ; 1 bytes @ 0x0
   956                           
   957  004B                     ??_setupSPI:	
   958                           ; 1 bytes @ 0x0
   959                           
   960  004B                     ??_setupADC:	
   961                           ; 1 bytes @ 0x0
   962                           
   963  004B                     ??_spi_transfer:	
   964                           ; 1 bytes @ 0x0
   965                           
   966  004B                     ??_lcdWriteControl:	
   967                           ; 1 bytes @ 0x0
   968                           
   969  004B                     ??_lcdWriteData:	
   970                           ; 1 bytes @ 0x0
   971                           
   972  004B                     ??_ser_getch:	
   973                           ; 1 bytes @ 0x0
   974                           
   975  004B                     ?___bmul:	
   976                           ; 1 bytes @ 0x0
   977                           
   978  004B                     ser_putch@c:	
   979                           ; 1 bytes @ 0x0
   980                           
   981  004B                     ___bmul@multiplicand:	
   982                           ; 1 bytes @ 0x0
   983                           
   984                           
   985                           ; 1 bytes @ 0x0
   986  004B                     	ds	1
   987  004C                     ?_DriveDirect:	
   988  004C                     ?_Drive:	
   989                           ; 1 bytes @ 0x1
   990                           
   991  004C                     ??___bmul:	
   992                           ; 1 bytes @ 0x1
   993                           
   994  004C                     ser_getch@rxbyte:	
   995                           ; 1 bytes @ 0x1
   996                           
   997  004C                     Drive@speedL:	
   998                           ; 1 bytes @ 0x1
   999                           
  1000  004C                     spi_transfer@temp:	
  1001                           ; 1 bytes @ 0x1
  1002                           
  1003  004C                     DriveDirect@VelocityRight:	
  1004                           ; 1 bytes @ 0x1
  1005                           
  1006                           
  1007                           ; 2 bytes @ 0x1
  1008  004C                     	ds	1
  1009  004D                     ?_getSensorData:	
  1010  004D                     lcdWriteControl@databyte:	
  1011                           ; 2 bytes @ 0x2
  1012                           
  1013  004D                     lcdWriteData@databyte:	
  1014                           ; 1 bytes @ 0x2
  1015                           
  1016  004D                     Drive@radH:	
  1017                           ; 1 bytes @ 0x2
  1018                           
  1019  004D                     getSensorData@bytes:	
  1020                           ; 1 bytes @ 0x2
  1021                           
  1022  004D                     spi_transfer@data:	
  1023                           ; 1 bytes @ 0x2
  1024                           
  1025  004D                     ___bmul@product:	
  1026                           ; 1 bytes @ 0x2
  1027                           
  1028                           
  1029                           ; 1 bytes @ 0x2
  1030  004D                     	ds	1
  1031  004E                     ??_lcdSetCursor:	
  1032  004E                     ??_lcdWriteString:	
  1033                           ; 1 bytes @ 0x3
  1034                           
  1035  004E                     ??_setupLCD:	
  1036                           ; 1 bytes @ 0x3
  1037                           
  1038  004E                     lcdSetCursor@address:	
  1039                           ; 1 bytes @ 0x3
  1040                           
  1041  004E                     Drive@radL:	
  1042                           ; 1 bytes @ 0x3
  1043                           
  1044  004E                     ___bmul@multiplier:	
  1045                           ; 1 bytes @ 0x3
  1046                           
  1047  004E                     DriveDirect@VelocityLeft:	
  1048                           ; 1 bytes @ 0x3
  1049                           
  1050                           
  1051                           ; 2 bytes @ 0x3
  1052  004E                     	ds	1
  1053  004F                     ??_getSensorData:	
  1054  004F                     ??_Drive:	
  1055                           ; 1 bytes @ 0x4
  1056                           
  1057  004F                     lcdWriteString@s:	
  1058                           ; 1 bytes @ 0x4
  1059                           
  1060  004F                     Drive@speedH:	
  1061                           ; 1 bytes @ 0x4
  1062                           
  1063                           
  1064                           ; 1 bytes @ 0x4
  1065  004F                     	ds	1
  1066  0050                     ??_DriveDirect:	
  1067  0050                     ?_PathTo:	
  1068                           ; 1 bytes @ 0x5
  1069                           
  1070  0050                     PathTo@y_target:	
  1071                           ; 1 bytes @ 0x5
  1072                           
  1073                           
  1074                           ; 1 bytes @ 0x5
  1075  0050                     	ds	1
  1076  0051                     ??_PathTo:	
  1077  0051                     getSensorData@packetID:	
  1078                           ; 1 bytes @ 0x6
  1079                           
  1080  0051                     DriveDirect@data:	
  1081                           ; 1 bytes @ 0x6
  1082                           
  1083                           
  1084                           ; 2 bytes @ 0x6
  1085  0051                     	ds	1
  1086  0052                     getSensorData@sensor:	
  1087                           
  1088                           ; 2 bytes @ 0x7
  1089  0052                     	ds	1
  1090  0053                     DriveDirect@data_463:	
  1091                           
  1092                           ; 2 bytes @ 0x8
  1093  0053                     	ds	2
  1094  0055                     ??_Drive1m:	
  1095  0055                     ??_Turn90:	
  1096                           ; 1 bytes @ 0xA
  1097                           
  1098                           
  1099                           ; 1 bytes @ 0xA
  1100  0055                     	ds	3
  1101  0058                     PathTo@x_target:	
  1102  0058                     Drive1m@n:	
  1103                           ; 1 bytes @ 0xD
  1104                           
  1105  0058                     Turn90@direction:	
  1106                           ; 1 bytes @ 0xD
  1107                           
  1108                           
  1109                           ; 1 bytes @ 0xD
  1110  0058                     	ds	1
  1111  0059                     PathTo@sum:	
  1112  0059                     Drive1m@omni_IR:	
  1113                           ; 1 bytes @ 0xE
  1114                           
  1115                           
  1116                           ; 1 bytes @ 0xE
  1117  0059                     	ds	1
  1118  005A                     ??_TravelPath:	
  1119  005A                     PathTo@loop:	
  1120                           ; 1 bytes @ 0xF
  1121                           
  1122                           
  1123                           ; 2 bytes @ 0xF
  1124  005A                     	ds	2
  1125  005C                     TravelPath@n:	
  1126                           
  1127                           ; 1 bytes @ 0x11
  1128  005C                     	ds	1
  1129  005D                     ??_re_route:	
  1130                           
  1131                           ; 1 bytes @ 0x12
  1132  005D                     	ds	5
  1133  0062                     ??_main:	
  1134                           
  1135                           ; 1 bytes @ 0x17
  1136  0062                     	ds	3
  1137                           
  1138                           	psect	maintext
  1139  005F                     __pmaintext:	
  1140 ;;
  1141 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1142 ;;
  1143 ;; *************** function _main *****************
  1144 ;; Defined at:
  1145 ;;		line 463 in file "main.c"
  1146 ;; Parameters:    Size  Location     Type
  1147 ;;		None
  1148 ;; Auto vars:     Size  Location     Type
  1149 ;;  fifth           1    5[BANK2 ] unsigned char 
  1150 ;;  fourth          1    4[BANK2 ] unsigned char 
  1151 ;;  third           1    3[BANK2 ] unsigned char 
  1152 ;;  second          1    2[BANK2 ] unsigned char 
  1153 ;;  first           1    1[BANK2 ] unsigned char 
  1154 ;;  controlByte     1    0[BANK2 ] unsigned char 
  1155 ;; Return value:  Size  Location     Type
  1156 ;;                  1    wreg      void 
  1157 ;; Registers used:
  1158 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1159 ;; Tracked objects:
  1160 ;;		On entry : B00/0
  1161 ;;		On exit  : 0/0
  1162 ;;		Unchanged: 0/0
  1163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1164 ;;      Params:         0       0       0       0       0
  1165 ;;      Locals:         0       0       0       0       6
  1166 ;;      Temps:          0       3       0       0       0
  1167 ;;      Totals:         0       3       0       0       6
  1168 ;;Total ram usage:        9 bytes
  1169 ;; Hardware stack levels required when called:    6
  1170 ;; This function calls:
  1171 ;;		_PathTo
  1172 ;;		_TravelPath
  1173 ;;		_re_route
  1174 ;;		_ser_init
  1175 ;;		_ser_putch
  1176 ;;		_setupADC
  1177 ;;		_setupLCD
  1178 ;;		_setupSPI
  1179 ;;		_spi_transfer
  1180 ;; This function is called by:
  1181 ;;		Startup code after reset
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185                           
  1186                           ;psect for function _main
  1187  005F                     _main:	
  1188                           
  1189                           ;main.c: 465: _delay((unsigned long)((5000)*(20000000/4000.0)));
  1190                           
  1191                           ;incstack = 0
  1192                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1193  005F  307F               	movlw	127
  1194  0060  1283               	bcf	3,5	;RP0=0, select bank0
  1195  0061  1303               	bcf	3,6	;RP1=0, select bank0
  1196  0062  00E4               	movwf	??_main+2
  1197  0063  30D4               	movlw	212
  1198  0064  00E3               	movwf	??_main+1
  1199  0065  30AE               	movlw	174
  1200  0066  00E2               	movwf	??_main
  1201  0067                     u3447:	
  1202  0067  0BE2               	decfsz	??_main,f
  1203  0068  2867               	goto	u3447
  1204  0069  0BE3               	decfsz	??_main+1,f
  1205  006A  2867               	goto	u3447
  1206  006B  0BE4               	decfsz	??_main+2,f
  1207  006C  2867               	goto	u3447
  1208  006D  286E               	nop2
  1209                           
  1210                           ;main.c: 467: ser_init();
  1211  006E  120A  158A  21C5  120A  118A  	fcall	_ser_init
  1212                           
  1213                           ;main.c: 468: setupSPI();
  1214  0073  120A  158A  2230  120A  118A  	fcall	_setupSPI
  1215                           
  1216                           ;main.c: 469: setupLCD();
  1217  0078  120A  158A  22DB  120A  118A  	fcall	_setupLCD
  1218                           
  1219                           ;main.c: 470: setupADC();
  1220  007D  120A  158A  221A  120A  118A  	fcall	_setupADC
  1221                           
  1222                           ;main.c: 472: TRISB = 0b00000011;
  1223  0082  3003               	movlw	3
  1224  0083  1683               	bsf	3,5	;RP0=1, select bank1
  1225  0084  1303               	bcf	3,6	;RP1=0, select bank1
  1226  0085  0086               	movwf	6	;volatile
  1227                           
  1228                           ;main.c: 473: PORTB = 0b11111100;
  1229  0086  30FC               	movlw	252
  1230  0087  1283               	bcf	3,5	;RP0=0, select bank0
  1231  0088  1303               	bcf	3,6	;RP1=0, select bank0
  1232  0089  0086               	movwf	6	;volatile
  1233                           
  1234                           ;main.c: 475: unsigned char controlByte = 0b00001101;
  1235  008A  300D               	movlw	13
  1236  008B  00E2               	movwf	??_main
  1237  008C  0862               	movf	??_main,w
  1238  008D  1283               	bcf	3,5	;RP0=0, select bank2
  1239  008E  1703               	bsf	3,6	;RP1=1, select bank2
  1240  008F  0090               	movwf	main@controlByte^(0+256)
  1241                           
  1242                           ;main.c: 476: spi_transfer(controlByte);
  1243  0090  0810               	movf	main@controlByte^(0+256),w
  1244  0091  120A  158A  21D4  120A  118A  	fcall	_spi_transfer
  1245                           
  1246                           ;main.c: 478: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1247  0096  301A               	movlw	26
  1248  0097  1283               	bcf	3,5	;RP0=0, select bank0
  1249  0098  1303               	bcf	3,6	;RP1=0, select bank0
  1250  0099  00E4               	movwf	??_main+2
  1251  009A  305E               	movlw	94
  1252  009B  00E3               	movwf	??_main+1
  1253  009C  3086               	movlw	134
  1254  009D  00E2               	movwf	??_main
  1255  009E                     u3457:	
  1256  009E  0BE2               	decfsz	??_main,f
  1257  009F  289E               	goto	u3457
  1258  00A0  0BE3               	decfsz	??_main+1,f
  1259  00A1  289E               	goto	u3457
  1260  00A2  0BE4               	decfsz	??_main+2,f
  1261  00A3  289E               	goto	u3457
  1262  00A4  0000               	nop
  1263                           
  1264                           ;main.c: 479: ser_putch(128);
  1265  00A5  3080               	movlw	128
  1266  00A6  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1267                           
  1268                           ;main.c: 480: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1269  00AB  301A               	movlw	26
  1270  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  1271  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  1272  00AE  00E4               	movwf	??_main+2
  1273  00AF  305E               	movlw	94
  1274  00B0  00E3               	movwf	??_main+1
  1275  00B1  3086               	movlw	134
  1276  00B2  00E2               	movwf	??_main
  1277  00B3                     u3467:	
  1278  00B3  0BE2               	decfsz	??_main,f
  1279  00B4  28B3               	goto	u3467
  1280  00B5  0BE3               	decfsz	??_main+1,f
  1281  00B6  28B3               	goto	u3467
  1282  00B7  0BE4               	decfsz	??_main+2,f
  1283  00B8  28B3               	goto	u3467
  1284  00B9  0000               	nop
  1285                           
  1286                           ;main.c: 481: ser_putch(132);
  1287  00BA  3084               	movlw	132
  1288  00BB  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1289                           
  1290                           ;main.c: 482: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1291  00C0  301A               	movlw	26
  1292  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  1293  00C2  1303               	bcf	3,6	;RP1=0, select bank0
  1294  00C3  00E4               	movwf	??_main+2
  1295  00C4  305E               	movlw	94
  1296  00C5  00E3               	movwf	??_main+1
  1297  00C6  3086               	movlw	134
  1298  00C7  00E2               	movwf	??_main
  1299  00C8                     u3477:	
  1300  00C8  0BE2               	decfsz	??_main,f
  1301  00C9  28C8               	goto	u3477
  1302  00CA  0BE3               	decfsz	??_main+1,f
  1303  00CB  28C8               	goto	u3477
  1304  00CC  0BE4               	decfsz	??_main+2,f
  1305  00CD  28C8               	goto	u3477
  1306  00CE  0000               	nop
  1307                           
  1308                           ;main.c: 485: x = 1;
  1309  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  1310  00D0  1303               	bcf	3,6	;RP1=0, select bank0
  1311  00D1  01EB               	clrf	_x
  1312  00D2  0AEB               	incf	_x,f
  1313                           
  1314                           ;main.c: 486: y = 0;
  1315  00D3  01C5               	clrf	_y
  1316                           
  1317                           ;main.c: 487: orientation = 3;
  1318  00D4  3003               	movlw	3
  1319  00D5  00E2               	movwf	??_main
  1320  00D6  0862               	movf	??_main,w
  1321  00D7  00E9               	movwf	_orientation
  1322                           
  1323                           ;main.c: 491: ser_putch(140);
  1324  00D8  308C               	movlw	140
  1325  00D9  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1326                           
  1327                           ;main.c: 492: ser_putch(2);
  1328  00DE  3002               	movlw	2
  1329  00DF  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1330                           
  1331                           ;main.c: 493: ser_putch(10);
  1332  00E4  300A               	movlw	10
  1333  00E5  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1334                           
  1335                           ;main.c: 494: ser_putch(67);
  1336  00EA  3043               	movlw	67
  1337  00EB  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1338                           
  1339                           ;main.c: 495: ser_putch(32);
  1340  00F0  3020               	movlw	32
  1341  00F1  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1342                           
  1343                           ;main.c: 496: ser_putch(77);
  1344  00F6  304D               	movlw	77
  1345  00F7  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1346                           
  1347                           ;main.c: 497: ser_putch(16);
  1348  00FC  3010               	movlw	16
  1349  00FD  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1350                           
  1351                           ;main.c: 498: ser_putch(77);
  1352  0102  304D               	movlw	77
  1353  0103  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1354                           
  1355                           ;main.c: 499: ser_putch(16);
  1356  0108  3010               	movlw	16
  1357  0109  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1358                           
  1359                           ;main.c: 500: ser_putch(77);
  1360  010E  304D               	movlw	77
  1361  010F  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1362                           
  1363                           ;main.c: 501: ser_putch(16);
  1364  0114  3010               	movlw	16
  1365  0115  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1366                           
  1367                           ;main.c: 502: ser_putch(77);
  1368  011A  304D               	movlw	77
  1369  011B  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1370                           
  1371                           ;main.c: 503: ser_putch(16);
  1372  0120  3010               	movlw	16
  1373  0121  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1374                           
  1375                           ;main.c: 504: ser_putch(76);
  1376  0126  304C               	movlw	76
  1377  0127  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1378                           
  1379                           ;main.c: 505: ser_putch(16);
  1380  012C  3010               	movlw	16
  1381  012D  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1382                           
  1383                           ;main.c: 506: ser_putch(74);
  1384  0132  304A               	movlw	74
  1385  0133  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1386                           
  1387                           ;main.c: 507: ser_putch(16);
  1388  0138  3010               	movlw	16
  1389  0139  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1390                           
  1391                           ;main.c: 508: ser_putch(72);
  1392  013E  3048               	movlw	72
  1393  013F  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1394                           
  1395                           ;main.c: 509: ser_putch(32);
  1396  0144  3020               	movlw	32
  1397  0145  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1398                           
  1399                           ;main.c: 510: ser_putch(79);
  1400  014A  304F               	movlw	79
  1401  014B  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1402                           
  1403                           ;main.c: 511: ser_putch(16);
  1404  0150  3010               	movlw	16
  1405  0151  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1406                           
  1407                           ;main.c: 512: ser_putch(84);
  1408  0156  3054               	movlw	84
  1409  0157  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1410                           
  1411                           ;main.c: 513: ser_putch(48);
  1412  015C  3030               	movlw	48
  1413  015D  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1414                           
  1415                           ;main.c: 516: char first = 16;
  1416  0162  3010               	movlw	16
  1417  0163  1283               	bcf	3,5	;RP0=0, select bank0
  1418  0164  1303               	bcf	3,6	;RP1=0, select bank0
  1419  0165  00E2               	movwf	??_main
  1420  0166  0862               	movf	??_main,w
  1421  0167  1283               	bcf	3,5	;RP0=0, select bank2
  1422  0168  1703               	bsf	3,6	;RP1=1, select bank2
  1423  0169  0091               	movwf	main@first^(0+256)
  1424                           
  1425                           ;main.c: 517: char second = 8;
  1426  016A  3008               	movlw	8
  1427  016B  1283               	bcf	3,5	;RP0=0, select bank0
  1428  016C  1303               	bcf	3,6	;RP1=0, select bank0
  1429  016D  00E2               	movwf	??_main
  1430  016E  0862               	movf	??_main,w
  1431  016F  1283               	bcf	3,5	;RP0=0, select bank2
  1432  0170  1703               	bsf	3,6	;RP1=1, select bank2
  1433  0171  0092               	movwf	main@second^(0+256)
  1434                           
  1435                           ;main.c: 518: char third = 12;
  1436  0172  300C               	movlw	12
  1437  0173  1283               	bcf	3,5	;RP0=0, select bank0
  1438  0174  1303               	bcf	3,6	;RP1=0, select bank0
  1439  0175  00E2               	movwf	??_main
  1440  0176  0862               	movf	??_main,w
  1441  0177  1283               	bcf	3,5	;RP0=0, select bank2
  1442  0178  1703               	bsf	3,6	;RP1=1, select bank2
  1443  0179  0093               	movwf	main@third^(0+256)
  1444                           
  1445                           ;main.c: 519: char fourth = 36;
  1446  017A  3024               	movlw	36
  1447  017B  1283               	bcf	3,5	;RP0=0, select bank0
  1448  017C  1303               	bcf	3,6	;RP1=0, select bank0
  1449  017D  00E2               	movwf	??_main
  1450  017E  0862               	movf	??_main,w
  1451  017F  1283               	bcf	3,5	;RP0=0, select bank2
  1452  0180  1703               	bsf	3,6	;RP1=1, select bank2
  1453  0181  0094               	movwf	main@fourth^(0+256)
  1454                           
  1455                           ;main.c: 520: char fifth = 32;
  1456  0182  3020               	movlw	32
  1457  0183  1283               	bcf	3,5	;RP0=0, select bank0
  1458  0184  1303               	bcf	3,6	;RP1=0, select bank0
  1459  0185  00E2               	movwf	??_main
  1460  0186  0862               	movf	??_main,w
  1461  0187  1283               	bcf	3,5	;RP0=0, select bank2
  1462  0188  1703               	bsf	3,6	;RP1=1, select bank2
  1463  0189  0095               	movwf	main@fifth^(0+256)
  1464                           
  1465                           ;main.c: 524: ser_putch(140);
  1466  018A  308C               	movlw	140
  1467  018B  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1468                           
  1469                           ;main.c: 525: ser_putch(3);
  1470  0190  3003               	movlw	3
  1471  0191  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1472                           
  1473                           ;main.c: 526: ser_putch(16);
  1474  0196  3010               	movlw	16
  1475  0197  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1476                           
  1477                           ;main.c: 527: ser_putch(62);
  1478  019C  303E               	movlw	62
  1479  019D  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1480                           
  1481                           ;main.c: 528: ser_putch(first);
  1482  01A2  1283               	bcf	3,5	;RP0=0, select bank2
  1483  01A3  1703               	bsf	3,6	;RP1=1, select bank2
  1484  01A4  0811               	movf	main@first^(0+256),w
  1485  01A5  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1486                           
  1487                           ;main.c: 529: ser_putch(69);
  1488  01AA  3045               	movlw	69
  1489  01AB  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1490                           
  1491                           ;main.c: 530: ser_putch(second);
  1492  01B0  1283               	bcf	3,5	;RP0=0, select bank2
  1493  01B1  1703               	bsf	3,6	;RP1=1, select bank2
  1494  01B2  0812               	movf	main@second^(0+256),w
  1495  01B3  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1496                           
  1497                           ;main.c: 531: ser_putch(62);
  1498  01B8  303E               	movlw	62
  1499  01B9  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1500                           
  1501                           ;main.c: 532: ser_putch(third);
  1502  01BE  1283               	bcf	3,5	;RP0=0, select bank2
  1503  01BF  1703               	bsf	3,6	;RP1=1, select bank2
  1504  01C0  0813               	movf	main@third^(0+256),w
  1505  01C1  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1506                           
  1507                           ;main.c: 533: ser_putch(65);
  1508  01C6  3041               	movlw	65
  1509  01C7  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1510                           
  1511                           ;main.c: 534: ser_putch(fourth);
  1512  01CC  1283               	bcf	3,5	;RP0=0, select bank2
  1513  01CD  1703               	bsf	3,6	;RP1=1, select bank2
  1514  01CE  0814               	movf	main@fourth^(0+256),w
  1515  01CF  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1516                           
  1517                           ;main.c: 535: ser_putch(62);
  1518  01D4  303E               	movlw	62
  1519  01D5  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1520                           
  1521                           ;main.c: 536: ser_putch(fifth);
  1522  01DA  1283               	bcf	3,5	;RP0=0, select bank2
  1523  01DB  1703               	bsf	3,6	;RP1=1, select bank2
  1524  01DC  0815               	movf	main@fifth^(0+256),w
  1525  01DD  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1526                           
  1527                           ;main.c: 538: ser_putch(65);
  1528  01E2  3041               	movlw	65
  1529  01E3  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1530                           
  1531                           ;main.c: 539: ser_putch(first);
  1532  01E8  1283               	bcf	3,5	;RP0=0, select bank2
  1533  01E9  1703               	bsf	3,6	;RP1=1, select bank2
  1534  01EA  0811               	movf	main@first^(0+256),w
  1535  01EB  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1536                           
  1537                           ;main.c: 540: ser_putch(62);
  1538  01F0  303E               	movlw	62
  1539  01F1  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1540                           
  1541                           ;main.c: 541: ser_putch(second);
  1542  01F6  1283               	bcf	3,5	;RP0=0, select bank2
  1543  01F7  1703               	bsf	3,6	;RP1=1, select bank2
  1544  01F8  0812               	movf	main@second^(0+256),w
  1545  01F9  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1546                           
  1547                           ;main.c: 542: ser_putch(65);
  1548  01FE  3041               	movlw	65
  1549  01FF  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1550                           
  1551                           ;main.c: 543: ser_putch(third);
  1552  0204  1283               	bcf	3,5	;RP0=0, select bank2
  1553  0205  1703               	bsf	3,6	;RP1=1, select bank2
  1554  0206  0813               	movf	main@third^(0+256),w
  1555  0207  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1556                           
  1557                           ;main.c: 544: ser_putch(69);
  1558  020C  3045               	movlw	69
  1559  020D  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1560                           
  1561                           ;main.c: 545: ser_putch(fourth);
  1562  0212  1283               	bcf	3,5	;RP0=0, select bank2
  1563  0213  1703               	bsf	3,6	;RP1=1, select bank2
  1564  0214  0814               	movf	main@fourth^(0+256),w
  1565  0215  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1566                           
  1567                           ;main.c: 546: ser_putch(65);
  1568  021A  3041               	movlw	65
  1569  021B  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1570                           
  1571                           ;main.c: 547: ser_putch(fifth);
  1572  0220  1283               	bcf	3,5	;RP0=0, select bank2
  1573  0221  1703               	bsf	3,6	;RP1=1, select bank2
  1574  0222  0815               	movf	main@fifth^(0+256),w
  1575  0223  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1576                           
  1577                           ;main.c: 549: ser_putch(69);
  1578  0228  3045               	movlw	69
  1579  0229  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1580                           
  1581                           ;main.c: 550: ser_putch(first);
  1582  022E  1283               	bcf	3,5	;RP0=0, select bank2
  1583  022F  1703               	bsf	3,6	;RP1=1, select bank2
  1584  0230  0811               	movf	main@first^(0+256),w
  1585  0231  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1586                           
  1587                           ;main.c: 551: ser_putch(65);
  1588  0236  3041               	movlw	65
  1589  0237  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1590                           
  1591                           ;main.c: 552: ser_putch(second);
  1592  023C  1283               	bcf	3,5	;RP0=0, select bank2
  1593  023D  1703               	bsf	3,6	;RP1=1, select bank2
  1594  023E  0812               	movf	main@second^(0+256),w
  1595  023F  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1596                           
  1597                           ;main.c: 553: ser_putch(69);
  1598  0244  3045               	movlw	69
  1599  0245  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1600                           
  1601                           ;main.c: 554: ser_putch(third);
  1602  024A  1283               	bcf	3,5	;RP0=0, select bank2
  1603  024B  1703               	bsf	3,6	;RP1=1, select bank2
  1604  024C  0813               	movf	main@third^(0+256),w
  1605  024D  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1606                           
  1607                           ;main.c: 555: ser_putch(60);
  1608  0252  303C               	movlw	60
  1609  0253  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1610                           
  1611                           ;main.c: 556: ser_putch(fourth);
  1612  0258  1283               	bcf	3,5	;RP0=0, select bank2
  1613  0259  1703               	bsf	3,6	;RP1=1, select bank2
  1614  025A  0814               	movf	main@fourth^(0+256),w
  1615  025B  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1616                           
  1617                           ;main.c: 557: ser_putch(48);
  1618  0260  3030               	movlw	48
  1619  0261  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1620                           
  1621                           ;main.c: 558: ser_putch(fifth);
  1622  0266  1283               	bcf	3,5	;RP0=0, select bank2
  1623  0267  1703               	bsf	3,6	;RP1=1, select bank2
  1624  0268  0815               	movf	main@fifth^(0+256),w
  1625  0269  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1626                           
  1627                           ;main.c: 560: ser_putch(65);
  1628  026E  3041               	movlw	65
  1629  026F  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1630                           
  1631                           ;main.c: 561: ser_putch(16);
  1632  0274  3010               	movlw	16
  1633  0275  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1634                           
  1635                           ;main.c: 564: ser_putch(140);
  1636  027A  308C               	movlw	140
  1637  027B  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1638                           
  1639                           ;main.c: 565: ser_putch(4);
  1640  0280  3004               	movlw	4
  1641  0281  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1642                           
  1643                           ;main.c: 566: ser_putch(3);
  1644  0286  3003               	movlw	3
  1645  0287  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1646                           
  1647                           ;main.c: 567: ser_putch(60);
  1648  028C  303C               	movlw	60
  1649  028D  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1650                           
  1651                           ;main.c: 568: ser_putch(12);
  1652  0292  300C               	movlw	12
  1653  0293  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1654                           
  1655                           ;main.c: 569: ser_putch(65);
  1656  0298  3041               	movlw	65
  1657  0299  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1658                           
  1659                           ;main.c: 570: ser_putch(12);
  1660  029E  300C               	movlw	12
  1661  029F  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1662                           
  1663                           ;main.c: 571: ser_putch(69);
  1664  02A4  3045               	movlw	69
  1665  02A5  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1666                           
  1667                           ;main.c: 572: ser_putch(96);
  1668  02AA  3060               	movlw	96
  1669  02AB  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1670                           
  1671                           ;main.c: 576: ser_putch(140);
  1672  02B0  308C               	movlw	140
  1673  02B1  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1674                           
  1675                           ;main.c: 577: ser_putch(5);
  1676  02B6  3005               	movlw	5
  1677  02B7  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1678                           
  1679                           ;main.c: 578: ser_putch(11);
  1680  02BC  300B               	movlw	11
  1681  02BD  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1682                           
  1683                           ;main.c: 579: ser_putch(70);
  1684  02C2  3046               	movlw	70
  1685  02C3  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1686                           
  1687                           ;main.c: 580: ser_putch(12);
  1688  02C8  300C               	movlw	12
  1689  02C9  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1690                           
  1691                           ;main.c: 581: ser_putch(67);
  1692  02CE  3043               	movlw	67
  1693  02CF  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1694                           
  1695                           ;main.c: 582: ser_putch(12);
  1696  02D4  300C               	movlw	12
  1697  02D5  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1698                           
  1699                           ;main.c: 583: ser_putch(62);
  1700  02DA  303E               	movlw	62
  1701  02DB  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1702                           
  1703                           ;main.c: 584: ser_putch(96);
  1704  02E0  3060               	movlw	96
  1705  02E1  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1706                           
  1707                           ;main.c: 585: ser_putch(70);
  1708  02E6  3046               	movlw	70
  1709  02E7  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1710                           
  1711                           ;main.c: 586: ser_putch(12);
  1712  02EC  300C               	movlw	12
  1713  02ED  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1714                           
  1715                           ;main.c: 587: ser_putch(67);
  1716  02F2  3043               	movlw	67
  1717  02F3  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1718                           
  1719                           ;main.c: 588: ser_putch(12);
  1720  02F8  300C               	movlw	12
  1721  02F9  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1722                           
  1723                           ;main.c: 589: ser_putch(61);
  1724  02FE  303D               	movlw	61
  1725  02FF  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1726                           
  1727                           ;main.c: 590: ser_putch(96);
  1728  0304  3060               	movlw	96
  1729  0305  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1730                           
  1731                           ;main.c: 591: ser_putch(70);
  1732  030A  3046               	movlw	70
  1733  030B  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1734                           
  1735                           ;main.c: 592: ser_putch(12);
  1736  0310  300C               	movlw	12
  1737  0311  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1738                           
  1739                           ;main.c: 593: ser_putch(67);
  1740  0316  3043               	movlw	67
  1741  0317  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1742                           
  1743                           ;main.c: 594: ser_putch(12);
  1744  031C  300C               	movlw	12
  1745  031D  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1746                           
  1747                           ;main.c: 595: ser_putch(60);
  1748  0322  303C               	movlw	60
  1749  0323  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1750                           
  1751                           ;main.c: 596: ser_putch(96);
  1752  0328  3060               	movlw	96
  1753  0329  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1754                           
  1755                           ;main.c: 597: ser_putch(70);
  1756  032E  3046               	movlw	70
  1757  032F  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1758                           
  1759                           ;main.c: 598: ser_putch(12);
  1760  0334  300C               	movlw	12
  1761  0335  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1762                           
  1763                           ;main.c: 599: ser_putch(60);
  1764  033A  303C               	movlw	60
  1765  033B  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1766                           
  1767                           ;main.c: 600: ser_putch(20);
  1768  0340  3014               	movlw	20
  1769  0341  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1770                           
  1771                           ;main.c: 603: ser_putch(140);
  1772  0346  308C               	movlw	140
  1773  0347  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1774                           
  1775                           ;main.c: 604: ser_putch(6);
  1776  034C  3006               	movlw	6
  1777  034D  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1778                           
  1779                           ;main.c: 605: ser_putch(11);
  1780  0352  300B               	movlw	11
  1781  0353  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1782                           
  1783                           ;main.c: 606: ser_putch(55);
  1784  0358  3037               	movlw	55
  1785  0359  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1786                           
  1787                           ;main.c: 607: ser_putch(22);
  1788  035E  3016               	movlw	22
  1789  035F  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1790                           
  1791                           ;main.c: 608: ser_putch(55);
  1792  0364  3037               	movlw	55
  1793  0365  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1794                           
  1795                           ;main.c: 609: ser_putch(22);
  1796  036A  3016               	movlw	22
  1797  036B  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1798                           
  1799                           ;main.c: 610: ser_putch(0);
  1800  0370  3000               	movlw	0
  1801  0371  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1802                           
  1803                           ;main.c: 611: ser_putch(2);
  1804  0376  3002               	movlw	2
  1805  0377  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1806                           
  1807                           ;main.c: 612: ser_putch(58);
  1808  037C  303A               	movlw	58
  1809  037D  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1810                           
  1811                           ;main.c: 613: ser_putch(18);
  1812  0382  3012               	movlw	18
  1813  0383  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1814                           
  1815                           ;main.c: 614: ser_putch(48);
  1816  0388  3030               	movlw	48
  1817  0389  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1818                           
  1819                           ;main.c: 615: ser_putch(24);
  1820  038E  3018               	movlw	24
  1821  038F  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1822                           
  1823                           ;main.c: 616: ser_putch(0);
  1824  0394  3000               	movlw	0
  1825  0395  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1826                           
  1827                           ;main.c: 617: ser_putch(10);
  1828  039A  300A               	movlw	10
  1829  039B  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1830                           
  1831                           ;main.c: 618: ser_putch(55);
  1832  03A0  3037               	movlw	55
  1833  03A1  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1834                           
  1835                           ;main.c: 619: ser_putch(22);
  1836  03A6  3016               	movlw	22
  1837  03A7  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1838                           
  1839                           ;main.c: 620: ser_putch(55);
  1840  03AC  3037               	movlw	55
  1841  03AD  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1842                           
  1843                           ;main.c: 621: ser_putch(22);
  1844  03B2  3016               	movlw	22
  1845  03B3  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1846                           
  1847                           ;main.c: 622: ser_putch(0);
  1848  03B8  3000               	movlw	0
  1849  03B9  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1850                           
  1851                           ;main.c: 623: ser_putch(2);
  1852  03BE  3002               	movlw	2
  1853  03BF  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1854                           
  1855                           ;main.c: 624: ser_putch(53);
  1856  03C4  3035               	movlw	53
  1857  03C5  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1858                           
  1859                           ;main.c: 625: ser_putch(18);
  1860  03CA  3012               	movlw	18
  1861  03CB  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1862                           
  1863                           ;main.c: 626: ser_putch(54);
  1864  03D0  3036               	movlw	54
  1865  03D1  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1866                           
  1867                           ;main.c: 627: ser_putch(24);
  1868  03D6  3018               	movlw	24
  1869  03D7  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1870  03DC                     l4576:	
  1871                           ;main.c: 635: while(1){
  1872                           
  1873                           
  1874                           ;main.c: 637: if(PB7Counter >= 10 && !RB1== 0){
  1875  03DC  300A               	movlw	10
  1876  03DD  1283               	bcf	3,5	;RP0=0, select bank0
  1877  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  1878  03DF  0232               	subwf	_PB7Counter,w
  1879  03E0  1803               	btfsc	3,0
  1880  03E1  1C86               	btfss	6,1	;volatile
  1881  03E2  2C28               	goto	l4592
  1882                           
  1883                           ;main.c: 640: ser_putch(141);
  1884  03E3  308D               	movlw	141
  1885  03E4  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1886                           
  1887                           ;main.c: 641: ser_putch(6);
  1888  03E9  3006               	movlw	6
  1889  03EA  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1890                           
  1891                           ;main.c: 642: _delay((unsigned long)((3000)*(20000000/4000.0)));
  1892  03EF  304D               	movlw	77
  1893  03F0  1283               	bcf	3,5	;RP0=0, select bank0
  1894  03F1  1303               	bcf	3,6	;RP1=0, select bank0
  1895  03F2  00E4               	movwf	??_main+2
  1896  03F3  3019               	movlw	25
  1897  03F4  00E3               	movwf	??_main+1
  1898  03F5  309A               	movlw	154
  1899  03F6  00E2               	movwf	??_main
  1900  03F7                     u3487:	
  1901  03F7  0BE2               	decfsz	??_main,f
  1902  03F8  2BF7               	goto	u3487
  1903  03F9  0BE3               	decfsz	??_main+1,f
  1904  03FA  2BF7               	goto	u3487
  1905  03FB  0BE4               	decfsz	??_main+2,f
  1906  03FC  2BF7               	goto	u3487
  1907  03FD  2BFE               	nop2
  1908                           
  1909                           ;main.c: 643: ser_putch(141);
  1910  03FE  308D               	movlw	141
  1911  03FF  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1912                           
  1913                           ;main.c: 644: ser_putch(6);
  1914  0404  3006               	movlw	6
  1915  0405  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1916                           
  1917                           ;main.c: 645: _delay((unsigned long)((3000)*(20000000/4000.0)));
  1918  040A  304D               	movlw	77
  1919  040B  1283               	bcf	3,5	;RP0=0, select bank0
  1920  040C  1303               	bcf	3,6	;RP1=0, select bank0
  1921  040D  00E4               	movwf	??_main+2
  1922  040E  3019               	movlw	25
  1923  040F  00E3               	movwf	??_main+1
  1924  0410  309A               	movlw	154
  1925  0411  00E2               	movwf	??_main
  1926  0412                     u3497:	
  1927  0412  0BE2               	decfsz	??_main,f
  1928  0413  2C12               	goto	u3497
  1929  0414  0BE3               	decfsz	??_main+1,f
  1930  0415  2C12               	goto	u3497
  1931  0416  0BE4               	decfsz	??_main+2,f
  1932  0417  2C12               	goto	u3497
  1933  0418  2C19               	nop2
  1934                           
  1935                           ;main.c: 646: ser_putch(141);
  1936  0419  308D               	movlw	141
  1937  041A  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1938                           
  1939                           ;main.c: 647: ser_putch(5);
  1940  041F  3005               	movlw	5
  1941  0420  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  1942                           
  1943                           ;main.c: 652: PB7Counter=0;
  1944  0425  1283               	bcf	3,5	;RP0=0, select bank0
  1945  0426  1303               	bcf	3,6	;RP1=0, select bank0
  1946  0427  01B2               	clrf	_PB7Counter
  1947  0428                     l4592:	
  1948                           
  1949                           ;main.c: 656: }
  1950                           ;main.c: 661: if(PB8Counter >= 10 && !RB0 == 0){
  1951  0428  300A               	movlw	10
  1952  0429  0233               	subwf	_PB8Counter,w
  1953  042A  1803               	btfsc	3,0
  1954  042B  1C06               	btfss	6,0	;volatile
  1955  042C  2BDC               	goto	l4576
  1956                           
  1957                           ;main.c: 664: PathTo(2,0);
  1958  042D  01D0               	clrf	PathTo@y_target
  1959  042E  3002               	movlw	2
  1960  042F  120A  158A  24B4  120A  118A  	fcall	_PathTo
  1961                           
  1962                           ;main.c: 666: TravelPath();
  1963  0434  120A  118A  24F1  120A  118A  	fcall	_TravelPath
  1964                           
  1965                           ;main.c: 667: if (IR_Wall == 1)
  1966  0439  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  1967  043A  2C40               	goto	l4602
  1968                           
  1969                           ;main.c: 668: re_route();
  1970  043B  120A  118A  2702  120A  118A  	fcall	_re_route
  1971  0440                     l4602:	
  1972                           
  1973                           ;main.c: 669: if (targets_found == 1){
  1974  0440  1EF0               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  1975  0441  2C50               	goto	l330
  1976                           
  1977                           ;main.c: 670: PathTo(1,0);
  1978  0442  1283               	bcf	3,5	;RP0=0, select bank0
  1979  0443  1303               	bcf	3,6	;RP1=0, select bank0
  1980  0444  01D0               	clrf	PathTo@y_target
  1981  0445  3001               	movlw	1
  1982  0446  120A  158A  24B4  120A  118A  	fcall	_PathTo
  1983                           
  1984                           ;main.c: 671: TravelPath();
  1985  044B  120A  118A  24F1  120A  118A  	fcall	_TravelPath
  1986  0450                     l330:	
  1987                           
  1988                           ;main.c: 672: }
  1989                           ;main.c: 677: PathTo(3,0);
  1990  0450  1283               	bcf	3,5	;RP0=0, select bank0
  1991  0451  1303               	bcf	3,6	;RP1=0, select bank0
  1992  0452  01D0               	clrf	PathTo@y_target
  1993  0453  3003               	movlw	3
  1994  0454  120A  158A  24B4  120A  118A  	fcall	_PathTo
  1995                           
  1996                           ;main.c: 679: TravelPath();
  1997  0459  120A  118A  24F1  120A  118A  	fcall	_TravelPath
  1998                           
  1999                           ;main.c: 680: if (IR_Wall == 1)
  2000  045E  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2001  045F  2C65               	goto	l4610
  2002                           
  2003                           ;main.c: 681: re_route();
  2004  0460  120A  118A  2702  120A  118A  	fcall	_re_route
  2005  0465                     l4610:	
  2006                           
  2007                           ;main.c: 682: if (targets_found == 1){
  2008  0465  1EF0               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  2009  0466  2C75               	goto	l332
  2010                           
  2011                           ;main.c: 683: PathTo(1,0);
  2012  0467  1283               	bcf	3,5	;RP0=0, select bank0
  2013  0468  1303               	bcf	3,6	;RP1=0, select bank0
  2014  0469  01D0               	clrf	PathTo@y_target
  2015  046A  3001               	movlw	1
  2016  046B  120A  158A  24B4  120A  118A  	fcall	_PathTo
  2017                           
  2018                           ;main.c: 684: TravelPath();
  2019  0470  120A  118A  24F1  120A  118A  	fcall	_TravelPath
  2020  0475                     l332:	
  2021                           
  2022                           ;main.c: 685: }
  2023                           ;main.c: 687: PathTo(4,3);
  2024  0475  3003               	movlw	3
  2025  0476  1283               	bcf	3,5	;RP0=0, select bank0
  2026  0477  1303               	bcf	3,6	;RP1=0, select bank0
  2027  0478  00E2               	movwf	??_main
  2028  0479  0862               	movf	??_main,w
  2029  047A  00D0               	movwf	PathTo@y_target
  2030  047B  3004               	movlw	4
  2031  047C  120A  158A  24B4  120A  118A  	fcall	_PathTo
  2032                           
  2033                           ;main.c: 688: TravelPath();
  2034  0481  120A  118A  24F1  120A  118A  	fcall	_TravelPath
  2035                           
  2036                           ;main.c: 689: if (IR_Wall == 1)
  2037  0486  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2038  0487  2C8D               	goto	l4618
  2039                           
  2040                           ;main.c: 690: re_route();
  2041  0488  120A  118A  2702  120A  118A  	fcall	_re_route
  2042  048D                     l4618:	
  2043                           
  2044                           ;main.c: 691: if (targets_found == 1){
  2045  048D  1EF0               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  2046  048E  2C9D               	goto	l334
  2047                           
  2048                           ;main.c: 692: PathTo(1,0);
  2049  048F  1283               	bcf	3,5	;RP0=0, select bank0
  2050  0490  1303               	bcf	3,6	;RP1=0, select bank0
  2051  0491  01D0               	clrf	PathTo@y_target
  2052  0492  3001               	movlw	1
  2053  0493  120A  158A  24B4  120A  118A  	fcall	_PathTo
  2054                           
  2055                           ;main.c: 693: TravelPath();
  2056  0498  120A  118A  24F1  120A  118A  	fcall	_TravelPath
  2057  049D                     l334:	
  2058                           
  2059                           ;main.c: 694: }
  2060                           ;main.c: 696: PathTo(3,2);
  2061  049D  3002               	movlw	2
  2062  049E  1283               	bcf	3,5	;RP0=0, select bank0
  2063  049F  1303               	bcf	3,6	;RP1=0, select bank0
  2064  04A0  00E2               	movwf	??_main
  2065  04A1  0862               	movf	??_main,w
  2066  04A2  00D0               	movwf	PathTo@y_target
  2067  04A3  3003               	movlw	3
  2068  04A4  120A  158A  24B4  120A  118A  	fcall	_PathTo
  2069                           
  2070                           ;main.c: 697: TravelPath();
  2071  04A9  120A  118A  24F1  120A  118A  	fcall	_TravelPath
  2072                           
  2073                           ;main.c: 698: if (IR_Wall == 1)
  2074  04AE  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2075  04AF  2CB5               	goto	l4626
  2076                           
  2077                           ;main.c: 699: re_route();
  2078  04B0  120A  118A  2702  120A  118A  	fcall	_re_route
  2079  04B5                     l4626:	
  2080                           
  2081                           ;main.c: 700: if (targets_found == 1){
  2082  04B5  1EF0               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  2083  04B6  2CC5               	goto	l336
  2084                           
  2085                           ;main.c: 701: PathTo(1,0);
  2086  04B7  1283               	bcf	3,5	;RP0=0, select bank0
  2087  04B8  1303               	bcf	3,6	;RP1=0, select bank0
  2088  04B9  01D0               	clrf	PathTo@y_target
  2089  04BA  3001               	movlw	1
  2090  04BB  120A  158A  24B4  120A  118A  	fcall	_PathTo
  2091                           
  2092                           ;main.c: 702: TravelPath();
  2093  04C0  120A  118A  24F1  120A  118A  	fcall	_TravelPath
  2094  04C5                     l336:	
  2095                           
  2096                           ;main.c: 703: }
  2097                           ;main.c: 705: PathTo(0,3);
  2098  04C5  3003               	movlw	3
  2099  04C6  1283               	bcf	3,5	;RP0=0, select bank0
  2100  04C7  1303               	bcf	3,6	;RP1=0, select bank0
  2101  04C8  00E2               	movwf	??_main
  2102  04C9  0862               	movf	??_main,w
  2103  04CA  00D0               	movwf	PathTo@y_target
  2104  04CB  3000               	movlw	0
  2105  04CC  120A  158A  24B4  120A  118A  	fcall	_PathTo
  2106                           
  2107                           ;main.c: 707: TravelPath();
  2108  04D1  120A  118A  24F1  120A  118A  	fcall	_TravelPath
  2109                           
  2110                           ;main.c: 708: if (IR_Wall == 1)
  2111  04D6  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2112  04D7  2CDD               	goto	l4634
  2113                           
  2114                           ;main.c: 709: re_route();
  2115  04D8  120A  118A  2702  120A  118A  	fcall	_re_route
  2116  04DD                     l4634:	
  2117                           
  2118                           ;main.c: 710: if (targets_found == 1){
  2119  04DD  1EF0               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  2120  04DE  2CED               	goto	l4638
  2121                           
  2122                           ;main.c: 711: PathTo(1,0);
  2123  04DF  1283               	bcf	3,5	;RP0=0, select bank0
  2124  04E0  1303               	bcf	3,6	;RP1=0, select bank0
  2125  04E1  01D0               	clrf	PathTo@y_target
  2126  04E2  3001               	movlw	1
  2127  04E3  120A  158A  24B4  120A  118A  	fcall	_PathTo
  2128                           
  2129                           ;main.c: 712: TravelPath();
  2130  04E8  120A  118A  24F1  120A  118A  	fcall	_TravelPath
  2131  04ED                     l4638:	
  2132                           
  2133                           ;main.c: 713: }
  2134                           ;main.c: 721: PB8Counter = 0;
  2135  04ED  1283               	bcf	3,5	;RP0=0, select bank0
  2136  04EE  1303               	bcf	3,6	;RP1=0, select bank0
  2137  04EF  01B3               	clrf	_PB8Counter
  2138  04F0  2BDC               	goto	l4576
  2139  04F1                     __end_of_main:	
  2140                           
  2141                           	psect	text1
  2142  09D4                     __ptext1:	
  2143 ;; *************** function _spi_transfer *****************
  2144 ;; Defined at:
  2145 ;;		line 22 in file "SPI.c"
  2146 ;; Parameters:    Size  Location     Type
  2147 ;;  data            1    wreg     unsigned char 
  2148 ;; Auto vars:     Size  Location     Type
  2149 ;;  data            1    2[BANK0 ] unsigned char 
  2150 ;;  temp            1    1[BANK0 ] unsigned char 
  2151 ;; Return value:  Size  Location     Type
  2152 ;;                  1    wreg      unsigned char 
  2153 ;; Registers used:
  2154 ;;		wreg, status,2
  2155 ;; Tracked objects:
  2156 ;;		On entry : 0/0
  2157 ;;		On exit  : 0/0
  2158 ;;		Unchanged: 0/0
  2159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2160 ;;      Params:         0       0       0       0       0
  2161 ;;      Locals:         0       2       0       0       0
  2162 ;;      Temps:          0       1       0       0       0
  2163 ;;      Totals:         0       3       0       0       0
  2164 ;;Total ram usage:        3 bytes
  2165 ;; Hardware stack levels used:    1
  2166 ;; Hardware stack levels required when called:    1
  2167 ;; This function calls:
  2168 ;;		Nothing
  2169 ;; This function is called by:
  2170 ;;		_main
  2171 ;;		_stepCCW
  2172 ;;		_stepCW
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           
  2177                           ;psect for function _spi_transfer
  2178  09D4                     _spi_transfer:	
  2179                           
  2180                           ;incstack = 0
  2181                           ; Regs used in _spi_transfer: [wreg+status,2]
  2182                           ;spi_transfer@data stored from wreg
  2183  09D4  1283               	bcf	3,5	;RP0=0, select bank0
  2184  09D5  1303               	bcf	3,6	;RP1=0, select bank0
  2185  09D6  00CD               	movwf	spi_transfer@data
  2186                           
  2187                           ;SPI.c: 23: unsigned char temp = 0;
  2188  09D7  01CC               	clrf	spi_transfer@temp
  2189                           
  2190                           ;SPI.c: 25: SSPIF = 0;
  2191  09D8  118C               	bcf	12,3	;volatile
  2192                           
  2193                           ;SPI.c: 26: SSPBUF = data;
  2194  09D9  084D               	movf	spi_transfer@data,w
  2195  09DA  0093               	movwf	19	;volatile
  2196  09DB                     l971:	
  2197                           ;SPI.c: 28: while (SSPIF == 0);
  2198                           
  2199  09DB  1D8C               	btfss	12,3	;volatile
  2200  09DC  29DB               	goto	l971
  2201                           
  2202                           ;SPI.c: 29: temp = SSPBUF;
  2203  09DD  0813               	movf	19,w	;volatile
  2204  09DE  00CB               	movwf	??_spi_transfer
  2205  09DF  084B               	movf	??_spi_transfer,w
  2206  09E0  00CC               	movwf	spi_transfer@temp
  2207                           
  2208                           ;SPI.c: 30: SSPIF = 0;
  2209  09E1  118C               	bcf	12,3	;volatile
  2210  09E2  0008               	return
  2211  09E3                     __end_of_spi_transfer:	
  2212                           ;SPI.c: 32: return temp;
  2213                           ;	Return value of _spi_transfer is never used
  2214                           
  2215                           
  2216                           	psect	text2
  2217  0A30                     __ptext2:	
  2218 ;; *************** function _setupSPI *****************
  2219 ;; Defined at:
  2220 ;;		line 4 in file "SPI.c"
  2221 ;; Parameters:    Size  Location     Type
  2222 ;;		None
  2223 ;; Auto vars:     Size  Location     Type
  2224 ;;		None
  2225 ;; Return value:  Size  Location     Type
  2226 ;;                  1    wreg      void 
  2227 ;; Registers used:
  2228 ;;		wreg
  2229 ;; Tracked objects:
  2230 ;;		On entry : 0/0
  2231 ;;		On exit  : 0/0
  2232 ;;		Unchanged: 0/0
  2233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2234 ;;      Params:         0       0       0       0       0
  2235 ;;      Locals:         0       0       0       0       0
  2236 ;;      Temps:          0       0       0       0       0
  2237 ;;      Totals:         0       0       0       0       0
  2238 ;;Total ram usage:        0 bytes
  2239 ;; Hardware stack levels used:    1
  2240 ;; Hardware stack levels required when called:    1
  2241 ;; This function calls:
  2242 ;;		Nothing
  2243 ;; This function is called by:
  2244 ;;		_main
  2245 ;; This function uses a non-reentrant model
  2246 ;;
  2247                           
  2248                           
  2249                           ;psect for function _setupSPI
  2250  0A30                     _setupSPI:	
  2251                           
  2252                           ;SPI.c: 6: TRISB = 0b00000011;
  2253                           
  2254                           ;incstack = 0
  2255                           ; Regs used in _setupSPI: [wreg]
  2256  0A30  3003               	movlw	3
  2257  0A31  1683               	bsf	3,5	;RP0=1, select bank1
  2258  0A32  1303               	bcf	3,6	;RP1=0, select bank1
  2259  0A33  0086               	movwf	6	;volatile
  2260                           
  2261                           ;SPI.c: 8: SSPSTAT = 0b01000000;
  2262  0A34  3040               	movlw	64
  2263  0A35  0094               	movwf	20	;volatile
  2264                           
  2265                           ;SPI.c: 9: SSPCON = 0b00100000;
  2266  0A36  3020               	movlw	32
  2267  0A37  1283               	bcf	3,5	;RP0=0, select bank0
  2268  0A38  1303               	bcf	3,6	;RP1=0, select bank0
  2269  0A39  0094               	movwf	20	;volatile
  2270                           
  2271                           ;SPI.c: 10: TRISC = 0b10000000;
  2272  0A3A  3080               	movlw	128
  2273  0A3B  1683               	bsf	3,5	;RP0=1, select bank1
  2274  0A3C  1303               	bcf	3,6	;RP1=0, select bank1
  2275  0A3D  0087               	movwf	7	;volatile
  2276                           
  2277                           ;SPI.c: 11: PORTC = 0b00000011;
  2278  0A3E  3003               	movlw	3
  2279  0A3F  1283               	bcf	3,5	;RP0=0, select bank0
  2280  0A40  1303               	bcf	3,6	;RP1=0, select bank0
  2281  0A41  0087               	movwf	7	;volatile
  2282                           
  2283                           ;SPI.c: 14: OPTION_REG = 0b00000100;
  2284  0A42  3004               	movlw	4
  2285  0A43  1683               	bsf	3,5	;RP0=1, select bank1
  2286  0A44  1303               	bcf	3,6	;RP1=0, select bank1
  2287  0A45  0081               	movwf	1	;volatile
  2288                           
  2289                           ;SPI.c: 16: TMR0IE = 1;
  2290  0A46  168B               	bsf	11,5	;volatile
  2291                           
  2292                           ;SPI.c: 18: (GIE = 1);
  2293  0A47  178B               	bsf	11,7	;volatile
  2294  0A48  0008               	return
  2295  0A49                     __end_of_setupSPI:	
  2296                           
  2297                           	psect	text3
  2298  0ADB                     __ptext3:	
  2299 ;; *************** function _setupLCD *****************
  2300 ;; Defined at:
  2301 ;;		line 86 in file "LCD.c"
  2302 ;; Parameters:    Size  Location     Type
  2303 ;;		None
  2304 ;; Auto vars:     Size  Location     Type
  2305 ;;		None
  2306 ;; Return value:  Size  Location     Type
  2307 ;;                  1    wreg      void 
  2308 ;; Registers used:
  2309 ;;		wreg, status,2, status,0, pclath, cstack
  2310 ;; Tracked objects:
  2311 ;;		On entry : 0/0
  2312 ;;		On exit  : 0/0
  2313 ;;		Unchanged: 0/0
  2314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2315 ;;      Params:         0       0       0       0       0
  2316 ;;      Locals:         0       0       0       0       0
  2317 ;;      Temps:          0       0       0       0       0
  2318 ;;      Totals:         0       0       0       0       0
  2319 ;;Total ram usage:        0 bytes
  2320 ;; Hardware stack levels used:    1
  2321 ;; Hardware stack levels required when called:    2
  2322 ;; This function calls:
  2323 ;;		_lcdWriteControl
  2324 ;; This function is called by:
  2325 ;;		_main
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           
  2330                           ;psect for function _setupLCD
  2331  0ADB                     _setupLCD:	
  2332                           
  2333                           ;LCD.c: 88: ADCON1 = 0b00000010;
  2334                           
  2335                           ;incstack = 0
  2336                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  2337  0ADB  3002               	movlw	2
  2338  0ADC  1683               	bsf	3,5	;RP0=1, select bank1
  2339  0ADD  1303               	bcf	3,6	;RP1=0, select bank1
  2340  0ADE  009F               	movwf	31	;volatile
  2341                           
  2342                           ;LCD.c: 90: PORTD = 0;
  2343  0ADF  1283               	bcf	3,5	;RP0=0, select bank0
  2344  0AE0  1303               	bcf	3,6	;RP1=0, select bank0
  2345  0AE1  0188               	clrf	8	;volatile
  2346                           
  2347                           ;LCD.c: 91: PORTE = 0;
  2348  0AE2  0189               	clrf	9	;volatile
  2349                           
  2350                           ;LCD.c: 93: TRISD = 0b00000000;
  2351  0AE3  1683               	bsf	3,5	;RP0=1, select bank1
  2352  0AE4  1303               	bcf	3,6	;RP1=0, select bank1
  2353  0AE5  0188               	clrf	8	;volatile
  2354                           
  2355                           ;LCD.c: 94: TRISE = 0b00000000;
  2356  0AE6  0189               	clrf	9	;volatile
  2357                           
  2358                           ;LCD.c: 97: lcdWriteControl(0b00000001);
  2359  0AE7  3001               	movlw	1
  2360  0AE8  120A  118A  27EC  120A  158A  	fcall	_lcdWriteControl
  2361                           
  2362                           ;LCD.c: 98: lcdWriteControl(0b00111000);
  2363  0AED  3038               	movlw	56
  2364  0AEE  120A  118A  27EC  120A  158A  	fcall	_lcdWriteControl
  2365                           
  2366                           ;LCD.c: 99: lcdWriteControl(0b00001100);
  2367  0AF3  300C               	movlw	12
  2368  0AF4  120A  118A  27EC  120A  158A  	fcall	_lcdWriteControl
  2369                           
  2370                           ;LCD.c: 100: lcdWriteControl(0b00000110);
  2371  0AF9  3006               	movlw	6
  2372  0AFA  120A  118A  27EC  120A  158A  	fcall	_lcdWriteControl
  2373                           
  2374                           ;LCD.c: 101: lcdWriteControl(0b00000010);
  2375  0AFF  3002               	movlw	2
  2376  0B00  120A  118A  27EC   	fcall	_lcdWriteControl
  2377  0B03  0008               	return
  2378  0B04                     __end_of_setupLCD:	
  2379                           
  2380                           	psect	text4
  2381  0A1A                     __ptext4:	
  2382 ;; *************** function _setupADC *****************
  2383 ;; Defined at:
  2384 ;;		line 5 in file "ADC.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;		None
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;		None
  2389 ;; Return value:  Size  Location     Type
  2390 ;;                  1    wreg      void 
  2391 ;; Registers used:
  2392 ;;		wreg, status,2
  2393 ;; Tracked objects:
  2394 ;;		On entry : 0/0
  2395 ;;		On exit  : 0/0
  2396 ;;		Unchanged: 0/0
  2397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2398 ;;      Params:         0       0       0       0       0
  2399 ;;      Locals:         0       0       0       0       0
  2400 ;;      Temps:          0       1       0       0       0
  2401 ;;      Totals:         0       1       0       0       0
  2402 ;;Total ram usage:        1 bytes
  2403 ;; Hardware stack levels used:    1
  2404 ;; Hardware stack levels required when called:    1
  2405 ;; This function calls:
  2406 ;;		Nothing
  2407 ;; This function is called by:
  2408 ;;		_main
  2409 ;; This function uses a non-reentrant model
  2410 ;;
  2411                           
  2412                           
  2413                           ;psect for function _setupADC
  2414  0A1A                     _setupADC:	
  2415                           
  2416                           ;ADC.c: 6: PORTA = 0;
  2417                           
  2418                           ;incstack = 0
  2419                           ; Regs used in _setupADC: [wreg+status,2]
  2420  0A1A  1283               	bcf	3,5	;RP0=0, select bank0
  2421  0A1B  1303               	bcf	3,6	;RP1=0, select bank0
  2422  0A1C  0185               	clrf	5	;volatile
  2423                           
  2424                           ;ADC.c: 7: TRISA = 0b11111111;
  2425  0A1D  30FF               	movlw	255
  2426  0A1E  1683               	bsf	3,5	;RP0=1, select bank1
  2427  0A1F  1303               	bcf	3,6	;RP1=0, select bank1
  2428  0A20  0085               	movwf	5	;volatile
  2429                           
  2430                           ;ADC.c: 10: ADCON0 = 0b10001001;
  2431  0A21  3089               	movlw	137
  2432  0A22  1283               	bcf	3,5	;RP0=0, select bank0
  2433  0A23  1303               	bcf	3,6	;RP1=0, select bank0
  2434  0A24  009F               	movwf	31	;volatile
  2435                           
  2436                           ;ADC.c: 11: ADCON1 = 0b00000010;
  2437  0A25  3002               	movlw	2
  2438  0A26  1683               	bsf	3,5	;RP0=1, select bank1
  2439  0A27  1303               	bcf	3,6	;RP1=0, select bank1
  2440  0A28  009F               	movwf	31	;volatile
  2441                           
  2442                           ;ADC.c: 13: _delay((unsigned long)((50)*(20000000/4000000.0)));
  2443  0A29  3053               	movlw	83
  2444  0A2A  1283               	bcf	3,5	;RP0=0, select bank0
  2445  0A2B  1303               	bcf	3,6	;RP1=0, select bank0
  2446  0A2C  00CB               	movwf	??_setupADC
  2447  0A2D                     u3507:	
  2448  0A2D  0BCB               	decfsz	??_setupADC,f
  2449  0A2E  2A2D               	goto	u3507
  2450  0A2F  0008               	return
  2451  0A30                     __end_of_setupADC:	
  2452                           
  2453                           	psect	text5
  2454  09C5                     __ptext5:	
  2455 ;; *************** function _ser_init *****************
  2456 ;; Defined at:
  2457 ;;		line 5 in file "ser.c"
  2458 ;; Parameters:    Size  Location     Type
  2459 ;;		None
  2460 ;; Auto vars:     Size  Location     Type
  2461 ;;		None
  2462 ;; Return value:  Size  Location     Type
  2463 ;;                  1    wreg      void 
  2464 ;; Registers used:
  2465 ;;		wreg
  2466 ;; Tracked objects:
  2467 ;;		On entry : 0/0
  2468 ;;		On exit  : 0/0
  2469 ;;		Unchanged: 0/0
  2470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2471 ;;      Params:         0       0       0       0       0
  2472 ;;      Locals:         0       0       0       0       0
  2473 ;;      Temps:          0       0       0       0       0
  2474 ;;      Totals:         0       0       0       0       0
  2475 ;;Total ram usage:        0 bytes
  2476 ;; Hardware stack levels used:    1
  2477 ;; Hardware stack levels required when called:    1
  2478 ;; This function calls:
  2479 ;;		Nothing
  2480 ;; This function is called by:
  2481 ;;		_main
  2482 ;; This function uses a non-reentrant model
  2483 ;;
  2484                           
  2485                           
  2486                           ;psect for function _ser_init
  2487  09C5                     _ser_init:	
  2488                           
  2489                           ;ser.c: 7: TXSTA = 0b00100100;
  2490                           
  2491                           ;incstack = 0
  2492                           ; Regs used in _ser_init: [wreg]
  2493  09C5  3024               	movlw	36
  2494  09C6  1683               	bsf	3,5	;RP0=1, select bank1
  2495  09C7  1303               	bcf	3,6	;RP1=0, select bank1
  2496  09C8  0098               	movwf	24	;volatile
  2497                           
  2498                           ;ser.c: 8: RCSTA = 0b10011000;
  2499  09C9  3098               	movlw	152
  2500  09CA  1283               	bcf	3,5	;RP0=0, select bank0
  2501  09CB  1303               	bcf	3,6	;RP1=0, select bank0
  2502  09CC  0098               	movwf	24	;volatile
  2503                           
  2504                           ;ser.c: 24: SPBRG = 20;
  2505  09CD  3014               	movlw	20
  2506  09CE  1683               	bsf	3,5	;RP0=1, select bank1
  2507  09CF  1303               	bcf	3,6	;RP1=0, select bank1
  2508  09D0  0099               	movwf	25	;volatile
  2509                           
  2510                           ;ser.c: 26: PEIE = 1;
  2511  09D1  170B               	bsf	11,6	;volatile
  2512                           
  2513                           ;ser.c: 27: (GIE = 1);
  2514  09D2  178B               	bsf	11,7	;volatile
  2515  09D3  0008               	return
  2516  09D4                     __end_of_ser_init:	
  2517                           
  2518                           	psect	text6
  2519  0702                     __ptext6:	
  2520 ;; *************** function _re_route *****************
  2521 ;; Defined at:
  2522 ;;		line 421 in file "main.c"
  2523 ;; Parameters:    Size  Location     Type
  2524 ;;		None
  2525 ;; Auto vars:     Size  Location     Type
  2526 ;;		None
  2527 ;; Return value:  Size  Location     Type
  2528 ;;                  1    wreg      void 
  2529 ;; Registers used:
  2530 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2531 ;; Tracked objects:
  2532 ;;		On entry : 0/0
  2533 ;;		On exit  : 0/0
  2534 ;;		Unchanged: 0/0
  2535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2536 ;;      Params:         0       0       0       0       0
  2537 ;;      Locals:         0       0       0       0       0
  2538 ;;      Temps:          0       5       0       0       0
  2539 ;;      Totals:         0       5       0       0       0
  2540 ;;Total ram usage:        5 bytes
  2541 ;; Hardware stack levels used:    1
  2542 ;; Hardware stack levels required when called:    5
  2543 ;; This function calls:
  2544 ;;		_DriveDirect
  2545 ;;		_PathTo
  2546 ;;		_TravelPath
  2547 ;;		_Turn90
  2548 ;;		___bmul
  2549 ;;		_getSensorData
  2550 ;; This function is called by:
  2551 ;;		_main
  2552 ;; This function uses a non-reentrant model
  2553 ;;
  2554                           
  2555                           
  2556                           ;psect for function _re_route
  2557  0702                     _re_route:	
  2558                           
  2559                           ;main.c: 422: switch(orientation){
  2560                           
  2561                           ;incstack = 0
  2562                           ; Regs used in _re_route: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2563  0702  2F6E               	goto	l4194
  2564  0703                     l4184:	
  2565                           ;main.c: 423: case 0: (mazeGridDefault[y][x]) = ((mazeGridDefault[y][x]) + 4);
  2566                           
  2567  0703  3005               	movlw	5
  2568  0704  1283               	bcf	3,5	;RP0=0, select bank0
  2569  0705  1303               	bcf	3,6	;RP1=0, select bank0
  2570  0706  00DD               	movwf	??_re_route
  2571  0707  085D               	movf	??_re_route,w
  2572  0708  00CB               	movwf	___bmul@multiplicand
  2573  0709  0845               	movf	_y,w
  2574  070A  120A  158A  21F4  120A  118A  	fcall	___bmul
  2575  070F  3EB4               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2576  0710  1283               	bcf	3,5	;RP0=0, select bank0
  2577  0711  1303               	bcf	3,6	;RP1=0, select bank0
  2578  0712  076B               	addwf	_x,w
  2579  0713  00DE               	movwf	??_re_route+1
  2580  0714  085E               	movf	??_re_route+1,w
  2581  0715  0084               	movwf	4
  2582  0716  1383               	bcf	3,7	;select IRP bank1
  2583  0717  0800               	movf	0,w
  2584  0718  3E04               	addlw	4
  2585  0719  2F58               	goto	L4
  2586  071A                     l4186:	
  2587                           ;main.c: 425: case 1: (mazeGridDefault[y][x]) = ((mazeGridDefault[y][x]) + 2);
  2588                           
  2589                           ;main.c: 424: break;
  2590                           
  2591  071A  3005               	movlw	5
  2592  071B  00DD               	movwf	??_re_route
  2593  071C  085D               	movf	??_re_route,w
  2594  071D  00CB               	movwf	___bmul@multiplicand
  2595  071E  0845               	movf	_y,w
  2596  071F  120A  158A  21F4  120A  118A  	fcall	___bmul
  2597  0724  3EB4               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2598  0725  1283               	bcf	3,5	;RP0=0, select bank0
  2599  0726  1303               	bcf	3,6	;RP1=0, select bank0
  2600  0727  076B               	addwf	_x,w
  2601  0728  00DE               	movwf	??_re_route+1
  2602  0729  085E               	movf	??_re_route+1,w
  2603  072A  0084               	movwf	4
  2604  072B  1383               	bcf	3,7	;select IRP bank1
  2605  072C  0800               	movf	0,w
  2606  072D  3E02               	addlw	2
  2607  072E  2F58               	goto	L4
  2608  072F                     l4188:	
  2609                           ;main.c: 427: case 2: (mazeGridDefault[y][x]) = ((mazeGridDefault[y][x]) + 1);
  2610                           
  2611                           ;main.c: 426: break;
  2612                           
  2613  072F  3005               	movlw	5
  2614  0730  00DD               	movwf	??_re_route
  2615  0731  085D               	movf	??_re_route,w
  2616  0732  00CB               	movwf	___bmul@multiplicand
  2617  0733  0845               	movf	_y,w
  2618  0734  120A  158A  21F4  120A  118A  	fcall	___bmul
  2619  0739  3EB4               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2620  073A  1283               	bcf	3,5	;RP0=0, select bank0
  2621  073B  1303               	bcf	3,6	;RP1=0, select bank0
  2622  073C  076B               	addwf	_x,w
  2623  073D  00DE               	movwf	??_re_route+1
  2624  073E  085E               	movf	??_re_route+1,w
  2625  073F  0084               	movwf	4
  2626  0740  1383               	bcf	3,7	;select IRP bank1
  2627  0741  0800               	movf	0,w
  2628  0742  3E01               	addlw	1
  2629  0743  2F58               	goto	L4
  2630  0744                     l4190:	
  2631                           ;main.c: 429: case 3: (mazeGridDefault[y][x]) = ((mazeGridDefault[y][x]) + 8);
  2632                           
  2633                           ;main.c: 428: break;
  2634                           
  2635  0744  3005               	movlw	5
  2636  0745  00DD               	movwf	??_re_route
  2637  0746  085D               	movf	??_re_route,w
  2638  0747  00CB               	movwf	___bmul@multiplicand
  2639  0748  0845               	movf	_y,w
  2640  0749  120A  158A  21F4  120A  118A  	fcall	___bmul
  2641  074E  3EB4               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2642  074F  1283               	bcf	3,5	;RP0=0, select bank0
  2643  0750  1303               	bcf	3,6	;RP1=0, select bank0
  2644  0751  076B               	addwf	_x,w
  2645  0752  00DE               	movwf	??_re_route+1
  2646  0753  085E               	movf	??_re_route+1,w
  2647  0754  0084               	movwf	4
  2648  0755  1383               	bcf	3,7	;select IRP bank1
  2649  0756  0800               	movf	0,w
  2650  0757  3E08               	addlw	8
  2651  0758                     L4:	
  2652  0758  00DF               	movwf	??_re_route+2
  2653  0759  3005               	movlw	5
  2654  075A  00E0               	movwf	??_re_route+3
  2655  075B  0860               	movf	??_re_route+3,w
  2656  075C  00CB               	movwf	___bmul@multiplicand
  2657  075D  0845               	movf	_y,w
  2658  075E  120A  158A  21F4  120A  118A  	fcall	___bmul
  2659  0763  3EB4               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2660  0764  1283               	bcf	3,5	;RP0=0, select bank0
  2661  0765  1303               	bcf	3,6	;RP1=0, select bank0
  2662  0766  076B               	addwf	_x,w
  2663  0767  00E1               	movwf	??_re_route+4
  2664  0768  0861               	movf	??_re_route+4,w
  2665  0769  0084               	movwf	4
  2666  076A  085F               	movf	??_re_route+2,w
  2667  076B  1383               	bcf	3,7	;select IRP bank1
  2668  076C  0080               	movwf	0
  2669                           
  2670                           ;main.c: 431: }
  2671                           
  2672                           ;main.c: 430: break;
  2673  076D  2F7E               	goto	l4196
  2674  076E                     l4194:	
  2675  076E  1283               	bcf	3,5	;RP0=0, select bank0
  2676  076F  1303               	bcf	3,6	;RP1=0, select bank0
  2677  0770  0869               	movf	_orientation,w
  2678                           
  2679                           ; Switch size 1, requested type "space"
  2680                           ; Number of cases is 4, Range of values is 0 to 3
  2681                           ; switch strategies available:
  2682                           ; Name         Instructions Cycles
  2683                           ; simple_byte           13     7 (average)
  2684                           ; direct_byte           20     8 (fixed)
  2685                           ; jumptable            260     6 (fixed)
  2686                           ;	Chosen strategy is simple_byte
  2687  0771  3A00               	xorlw	0	; case 0
  2688  0772  1903               	skipnz
  2689  0773  2F03               	goto	l4184
  2690  0774  3A01               	xorlw	1	; case 1
  2691  0775  1903               	skipnz
  2692  0776  2F1A               	goto	l4186
  2693  0777  3A03               	xorlw	3	; case 2
  2694  0778  1903               	skipnz
  2695  0779  2F2F               	goto	l4188
  2696  077A  3A01               	xorlw	1	; case 3
  2697  077B  1903               	skipnz
  2698  077C  2F44               	goto	l4190
  2699  077D  2F7E               	goto	l4196
  2700  077E                     l4196:	
  2701                           
  2702                           ;main.c: 433: Turn90(0);
  2703  077E  3000               	movlw	0
  2704  077F  120A  158A  240F  120A  118A  	fcall	_Turn90
  2705                           
  2706                           ;main.c: 434: Turn90(0);
  2707  0784  3000               	movlw	0
  2708  0785  120A  158A  240F  120A  118A  	fcall	_Turn90
  2709                           
  2710                           ;main.c: 435: distance = 0;
  2711  078A  1283               	bcf	3,5	;RP0=0, select bank0
  2712  078B  1303               	bcf	3,6	;RP1=0, select bank0
  2713  078C  01A8               	clrf	_distance
  2714  078D  01A9               	clrf	_distance+1
  2715                           
  2716                           ;main.c: 436: DriveDirect(250,250);
  2717  078E  30FA               	movlw	250
  2718  078F  00CC               	movwf	DriveDirect@VelocityRight
  2719  0790  3000               	movlw	0
  2720  0791  00CD               	movwf	DriveDirect@VelocityRight+1
  2721  0792  30FA               	movlw	250
  2722  0793  00CE               	movwf	DriveDirect@VelocityLeft
  2723  0794  3000               	movlw	0
  2724  0795  00CF               	movwf	DriveDirect@VelocityLeft+1
  2725  0796  120A  158A  2382  120A  118A  	fcall	_DriveDirect
  2726  079B                     l4204:	
  2727                           ;main.c: 437: while (distance < 500){
  2728                           
  2729  079B  1283               	bcf	3,5	;RP0=0, select bank0
  2730  079C  1303               	bcf	3,6	;RP1=0, select bank0
  2731  079D  0829               	movf	_distance+1,w
  2732  079E  3A80               	xorlw	128
  2733  079F  00FF               	movwf	127
  2734  07A0  3081               	movlw	129
  2735  07A1  027F               	subwf	127,w
  2736  07A2  1D03               	skipz
  2737  07A3  2FA6               	goto	u3145
  2738  07A4  30F4               	movlw	244
  2739  07A5  0228               	subwf	_distance,w
  2740  07A6                     u3145:	
  2741  07A6  1803               	btfsc	3,0
  2742  07A7  2FBF               	goto	l4206
  2743                           
  2744                           ;main.c: 438: distance = distance + getSensorData(19,2);
  2745  07A8  3002               	movlw	2
  2746  07A9  1283               	bcf	3,5	;RP0=0, select bank0
  2747  07AA  1303               	bcf	3,6	;RP1=0, select bank0
  2748  07AB  00DD               	movwf	??_re_route
  2749  07AC  085D               	movf	??_re_route,w
  2750  07AD  00CD               	movwf	getSensorData@bytes
  2751  07AE  3013               	movlw	19
  2752  07AF  120A  158A  2304  120A  118A  	fcall	_getSensorData
  2753  07B4  1283               	bcf	3,5	;RP0=0, select bank0
  2754  07B5  1303               	bcf	3,6	;RP1=0, select bank0
  2755  07B6  0828               	movf	_distance,w
  2756  07B7  074D               	addwf	?_getSensorData,w
  2757  07B8  00A8               	movwf	_distance
  2758  07B9  0829               	movf	_distance+1,w
  2759  07BA  1803               	skipnc
  2760  07BB  0A29               	incf	_distance+1,w
  2761  07BC  074E               	addwf	?_getSensorData+1,w
  2762  07BD  00A9               	movwf	_distance+1
  2763  07BE  2F9B               	goto	l4204
  2764  07BF                     l4206:	
  2765                           
  2766                           ;main.c: 439: }
  2767                           ;main.c: 440: DriveDirect(0,0);
  2768  07BF  3000               	movlw	0
  2769  07C0  1283               	bcf	3,5	;RP0=0, select bank0
  2770  07C1  1303               	bcf	3,6	;RP1=0, select bank0
  2771  07C2  00CC               	movwf	DriveDirect@VelocityRight
  2772  07C3  00CD               	movwf	DriveDirect@VelocityRight+1
  2773  07C4  3000               	movlw	0
  2774  07C5  00CE               	movwf	DriveDirect@VelocityLeft
  2775  07C6  00CF               	movwf	DriveDirect@VelocityLeft+1
  2776  07C7  120A  158A  2382  120A  118A  	fcall	_DriveDirect
  2777                           
  2778                           ;main.c: 441: IR_Wall = 0;
  2779  07CC  1070               	bcf	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2780                           
  2781                           ;main.c: 443: _delay((unsigned long)((1000)*(20000000/4000.0)));
  2782  07CD  301A               	movlw	26
  2783  07CE  1283               	bcf	3,5	;RP0=0, select bank0
  2784  07CF  1303               	bcf	3,6	;RP1=0, select bank0
  2785  07D0  00DF               	movwf	??_re_route+2
  2786  07D1  305E               	movlw	94
  2787  07D2  00DE               	movwf	??_re_route+1
  2788  07D3  3086               	movlw	134
  2789  07D4  00DD               	movwf	??_re_route
  2790  07D5                     u3517:	
  2791  07D5  0BDD               	decfsz	??_re_route,f
  2792  07D6  2FD5               	goto	u3517
  2793  07D7  0BDE               	decfsz	??_re_route+1,f
  2794  07D8  2FD5               	goto	u3517
  2795  07D9  0BDF               	decfsz	??_re_route+2,f
  2796  07DA  2FD5               	goto	u3517
  2797  07DB  0000               	nop
  2798                           
  2799                           ;main.c: 444: PathTo(x_goto,y_goto);
  2800  07DC  1283               	bcf	3,5	;RP0=0, select bank0
  2801  07DD  1303               	bcf	3,6	;RP1=0, select bank0
  2802  07DE  0846               	movf	_y_goto,w
  2803  07DF  00DD               	movwf	??_re_route
  2804  07E0  085D               	movf	??_re_route,w
  2805  07E1  00D0               	movwf	PathTo@y_target
  2806  07E2  0841               	movf	_x_goto,w
  2807  07E3  120A  158A  24B4  120A  118A  	fcall	_PathTo
  2808                           
  2809                           ;main.c: 445: TravelPath();
  2810  07E8  120A  118A  24F1   	fcall	_TravelPath
  2811  07EB  0008               	return
  2812  07EC                     __end_of_re_route:	
  2813                           
  2814                           	psect	text7
  2815  04F1                     __ptext7:	
  2816 ;; *************** function _TravelPath *****************
  2817 ;; Defined at:
  2818 ;;		line 354 in file "main.c"
  2819 ;; Parameters:    Size  Location     Type
  2820 ;;		None
  2821 ;; Auto vars:     Size  Location     Type
  2822 ;;  n               1   17[BANK0 ] unsigned char 
  2823 ;; Return value:  Size  Location     Type
  2824 ;;                  1    wreg      void 
  2825 ;; Registers used:
  2826 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2827 ;; Tracked objects:
  2828 ;;		On entry : 0/0
  2829 ;;		On exit  : 0/0
  2830 ;;		Unchanged: 0/0
  2831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2832 ;;      Params:         0       0       0       0       0
  2833 ;;      Locals:         0       1       0       0       0
  2834 ;;      Temps:          0       2       0       0       0
  2835 ;;      Totals:         0       3       0       0       0
  2836 ;;Total ram usage:        3 bytes
  2837 ;; Hardware stack levels used:    1
  2838 ;; Hardware stack levels required when called:    4
  2839 ;; This function calls:
  2840 ;;		_Drive1m
  2841 ;;		_Turn90
  2842 ;; This function is called by:
  2843 ;;		_re_route
  2844 ;;		_main
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           
  2849                           ;psect for function _TravelPath
  2850  04F1                     _TravelPath:	
  2851                           
  2852                           ;main.c: 356: for (char n = 1; n <= (pathCountShortest); n++){
  2853                           
  2854                           ;incstack = 0
  2855                           ; Regs used in _TravelPath: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2856  04F1  1283               	bcf	3,5	;RP0=0, select bank0
  2857  04F2  1303               	bcf	3,6	;RP1=0, select bank0
  2858  04F3  01DC               	clrf	TravelPath@n
  2859  04F4  0ADC               	incf	TravelPath@n,f
  2860  04F5                     l4180:	
  2861  04F5  085C               	movf	TravelPath@n,w
  2862  04F6  026A               	subwf	_pathCountShortest,w
  2863  04F7  1C03               	btfss	3,0
  2864  04F8  0008               	return
  2865                           
  2866                           ;main.c: 358: if (pathShortest[0][n] > x){
  2867  04F9  085C               	movf	TravelPath@n,w
  2868  04FA  3EC8               	addlw	(low (_pathShortest| 0))& (0+255)
  2869  04FB  0084               	movwf	4
  2870  04FC  1383               	bcf	3,7	;select IRP bank1
  2871  04FD  0800               	movf	0,w
  2872  04FE  026B               	subwf	_x,w
  2873  04FF  1C03               	btfss	3,0
  2874  0500  2D28               	goto	l4110
  2875  0501  2D36               	goto	l4114
  2876  0502                     l4098:	
  2877                           ;main.c: 360: case 0: Turn90(0);
  2878                           
  2879                           ;main.c: 359: switch (orientation){
  2880                           
  2881  0502  3000               	movlw	0
  2882  0503  120A  158A  240F  120A  118A  	fcall	_Turn90
  2883                           
  2884                           ;main.c: 361: break;
  2885  0508  2DF2               	goto	l4172
  2886  0509                     l4100:	
  2887                           ;main.c: 362: case 2: Turn90(1);
  2888                           
  2889  0509  3001               	movlw	1
  2890  050A  120A  158A  240F  120A  118A  	fcall	_Turn90
  2891                           
  2892                           ;main.c: 363: break;
  2893  050F  2DF2               	goto	l4172
  2894  0510                     l4102:	
  2895                           ;main.c: 364: case 3: Turn90(1);
  2896                           
  2897  0510  3001               	movlw	1
  2898  0511  120A  158A  240F  120A  118A  	fcall	_Turn90
  2899                           
  2900                           ;main.c: 365: _delay((unsigned long)((5)*(20000000/4000.0)));
  2901  0516  3021               	movlw	33
  2902  0517  1283               	bcf	3,5	;RP0=0, select bank0
  2903  0518  1303               	bcf	3,6	;RP1=0, select bank0
  2904  0519  00DB               	movwf	??_TravelPath+1
  2905  051A  3076               	movlw	118
  2906  051B  00DA               	movwf	??_TravelPath
  2907  051C                     u3527:	
  2908  051C  0BDA               	decfsz	??_TravelPath,f
  2909  051D  2D1C               	goto	u3527
  2910  051E  0BDB               	decfsz	??_TravelPath+1,f
  2911  051F  2D1C               	goto	u3527
  2912  0520  0000               	nop
  2913                           
  2914                           ;main.c: 366: Turn90(1);
  2915  0521  3001               	movlw	1
  2916  0522  120A  158A  240F  120A  118A  	fcall	_Turn90
  2917                           
  2918                           ;main.c: 368: }
  2919                           
  2920                           ;main.c: 367: break;
  2921  0527  2DF2               	goto	l4172
  2922  0528                     l4110:	
  2923  0528  1283               	bcf	3,5	;RP0=0, select bank0
  2924  0529  1303               	bcf	3,6	;RP1=0, select bank0
  2925  052A  0869               	movf	_orientation,w
  2926                           
  2927                           ; Switch size 1, requested type "space"
  2928                           ; Number of cases is 3, Range of values is 0 to 3
  2929                           ; switch strategies available:
  2930                           ; Name         Instructions Cycles
  2931                           ; simple_byte           10     6 (average)
  2932                           ; direct_byte           20     8 (fixed)
  2933                           ; jumptable            260     6 (fixed)
  2934                           ;	Chosen strategy is simple_byte
  2935  052B  3A00               	xorlw	0	; case 0
  2936  052C  1903               	skipnz
  2937  052D  2D02               	goto	l4098
  2938  052E  3A02               	xorlw	2	; case 2
  2939  052F  1903               	skipnz
  2940  0530  2D09               	goto	l4100
  2941  0531  3A01               	xorlw	1	; case 3
  2942  0532  1903               	skipnz
  2943  0533  2D10               	goto	l4102
  2944  0534  2D35               	goto	l4112
  2945  0535                     l4112:	
  2946  0535  2DF2               	goto	l4172
  2947  0536                     l4114:	
  2948                           ;main.c: 370: }
  2949                           
  2950                           ;main.c: 369: Drive1m();
  2951                           
  2952                           
  2953                           ;main.c: 372: else if (pathShortest[0][n] < x){
  2954  0536  1283               	bcf	3,5	;RP0=0, select bank0
  2955  0537  1303               	bcf	3,6	;RP1=0, select bank0
  2956  0538  085C               	movf	TravelPath@n,w
  2957  0539  3EC8               	addlw	(low (_pathShortest| 0))& (0+255)
  2958  053A  0084               	movwf	4
  2959  053B  086B               	movf	_x,w
  2960  053C  1383               	bcf	3,7	;select IRP bank1
  2961  053D  0200               	subwf	0,w
  2962  053E  1C03               	btfss	3,0
  2963  053F  2D67               	goto	l4130
  2964  0540  2D75               	goto	l4134
  2965  0541                     l4118:	
  2966                           ;main.c: 374: case 0: Turn90(1);
  2967                           
  2968                           ;main.c: 373: switch (orientation){
  2969                           
  2970  0541  3001               	movlw	1
  2971  0542  120A  158A  240F  120A  118A  	fcall	_Turn90
  2972                           
  2973                           ;main.c: 375: break;
  2974  0547  2DF2               	goto	l4172
  2975  0548                     l4120:	
  2976                           ;main.c: 376: case 2: Turn90(0);
  2977                           
  2978  0548  3000               	movlw	0
  2979  0549  120A  158A  240F  120A  118A  	fcall	_Turn90
  2980                           
  2981                           ;main.c: 377: break;
  2982  054E  2DF2               	goto	l4172
  2983  054F                     l4122:	
  2984                           ;main.c: 378: case 1: Turn90(1);
  2985                           
  2986  054F  3001               	movlw	1
  2987  0550  120A  158A  240F  120A  118A  	fcall	_Turn90
  2988                           
  2989                           ;main.c: 379: _delay((unsigned long)((5)*(20000000/4000.0)));
  2990  0555  3021               	movlw	33
  2991  0556  1283               	bcf	3,5	;RP0=0, select bank0
  2992  0557  1303               	bcf	3,6	;RP1=0, select bank0
  2993  0558  00DB               	movwf	??_TravelPath+1
  2994  0559  3076               	movlw	118
  2995  055A  00DA               	movwf	??_TravelPath
  2996  055B                     u3537:	
  2997  055B  0BDA               	decfsz	??_TravelPath,f
  2998  055C  2D5B               	goto	u3537
  2999  055D  0BDB               	decfsz	??_TravelPath+1,f
  3000  055E  2D5B               	goto	u3537
  3001  055F  0000               	nop
  3002                           
  3003                           ;main.c: 380: Turn90(1);
  3004  0560  3001               	movlw	1
  3005  0561  120A  158A  240F  120A  118A  	fcall	_Turn90
  3006                           
  3007                           ;main.c: 382: }
  3008                           
  3009                           ;main.c: 381: break;
  3010  0566  2DF2               	goto	l4172
  3011  0567                     l4130:	
  3012  0567  1283               	bcf	3,5	;RP0=0, select bank0
  3013  0568  1303               	bcf	3,6	;RP1=0, select bank0
  3014  0569  0869               	movf	_orientation,w
  3015                           
  3016                           ; Switch size 1, requested type "space"
  3017                           ; Number of cases is 3, Range of values is 0 to 2
  3018                           ; switch strategies available:
  3019                           ; Name         Instructions Cycles
  3020                           ; simple_byte           10     6 (average)
  3021                           ; direct_byte           17     8 (fixed)
  3022                           ; jumptable            260     6 (fixed)
  3023                           ;	Chosen strategy is simple_byte
  3024  056A  3A00               	xorlw	0	; case 0
  3025  056B  1903               	skipnz
  3026  056C  2D41               	goto	l4118
  3027  056D  3A01               	xorlw	1	; case 1
  3028  056E  1903               	skipnz
  3029  056F  2D4F               	goto	l4122
  3030  0570  3A03               	xorlw	3	; case 2
  3031  0571  1903               	skipnz
  3032  0572  2D48               	goto	l4120
  3033  0573  2D74               	goto	l4132
  3034  0574                     l4132:	
  3035  0574  2DF2               	goto	l4172
  3036  0575                     l4134:	
  3037                           ;main.c: 384: }
  3038                           
  3039                           ;main.c: 383: Drive1m();
  3040                           
  3041                           
  3042                           ;main.c: 386: else if(pathShortest[1][n] > y){
  3043  0575  1283               	bcf	3,5	;RP0=0, select bank0
  3044  0576  1303               	bcf	3,6	;RP1=0, select bank0
  3045  0577  085C               	movf	TravelPath@n,w
  3046  0578  3ED8               	addlw	(low ((_pathShortest| 0+16)))& (0+255)
  3047  0579  0084               	movwf	4
  3048  057A  1383               	bcf	3,7	;select IRP bank1
  3049  057B  0800               	movf	0,w
  3050  057C  0245               	subwf	_y,w
  3051  057D  1C03               	btfss	3,0
  3052  057E  2DA6               	goto	l4150
  3053  057F  2DB4               	goto	l4154
  3054  0580                     l4138:	
  3055                           ;main.c: 388: case 1: Turn90(0);
  3056                           
  3057                           ;main.c: 387: switch(orientation){
  3058                           
  3059  0580  3000               	movlw	0
  3060  0581  120A  158A  240F  120A  118A  	fcall	_Turn90
  3061                           
  3062                           ;main.c: 389: break;
  3063  0586  2DF2               	goto	l4172
  3064  0587                     l4140:	
  3065                           ;main.c: 390: case 3: Turn90(1);
  3066                           
  3067  0587  3001               	movlw	1
  3068  0588  120A  158A  240F  120A  118A  	fcall	_Turn90
  3069                           
  3070                           ;main.c: 391: break;
  3071  058D  2DF2               	goto	l4172
  3072  058E                     l4142:	
  3073                           ;main.c: 392: case 0: Turn90(1);
  3074                           
  3075  058E  3001               	movlw	1
  3076  058F  120A  158A  240F  120A  118A  	fcall	_Turn90
  3077                           
  3078                           ;main.c: 393: _delay((unsigned long)((5)*(20000000/4000.0)));
  3079  0594  3021               	movlw	33
  3080  0595  1283               	bcf	3,5	;RP0=0, select bank0
  3081  0596  1303               	bcf	3,6	;RP1=0, select bank0
  3082  0597  00DB               	movwf	??_TravelPath+1
  3083  0598  3076               	movlw	118
  3084  0599  00DA               	movwf	??_TravelPath
  3085  059A                     u3547:	
  3086  059A  0BDA               	decfsz	??_TravelPath,f
  3087  059B  2D9A               	goto	u3547
  3088  059C  0BDB               	decfsz	??_TravelPath+1,f
  3089  059D  2D9A               	goto	u3547
  3090  059E  0000               	nop
  3091                           
  3092                           ;main.c: 394: Turn90(1);
  3093  059F  3001               	movlw	1
  3094  05A0  120A  158A  240F  120A  118A  	fcall	_Turn90
  3095                           
  3096                           ;main.c: 396: }
  3097                           
  3098                           ;main.c: 395: break;
  3099  05A5  2DF2               	goto	l4172
  3100  05A6                     l4150:	
  3101  05A6  1283               	bcf	3,5	;RP0=0, select bank0
  3102  05A7  1303               	bcf	3,6	;RP1=0, select bank0
  3103  05A8  0869               	movf	_orientation,w
  3104                           
  3105                           ; Switch size 1, requested type "space"
  3106                           ; Number of cases is 3, Range of values is 0 to 3
  3107                           ; switch strategies available:
  3108                           ; Name         Instructions Cycles
  3109                           ; simple_byte           10     6 (average)
  3110                           ; direct_byte           20     8 (fixed)
  3111                           ; jumptable            260     6 (fixed)
  3112                           ;	Chosen strategy is simple_byte
  3113  05A9  3A00               	xorlw	0	; case 0
  3114  05AA  1903               	skipnz
  3115  05AB  2D8E               	goto	l4142
  3116  05AC  3A01               	xorlw	1	; case 1
  3117  05AD  1903               	skipnz
  3118  05AE  2D80               	goto	l4138
  3119  05AF  3A02               	xorlw	2	; case 3
  3120  05B0  1903               	skipnz
  3121  05B1  2D87               	goto	l4140
  3122  05B2  2DB3               	goto	l4152
  3123  05B3                     l4152:	
  3124  05B3  2DF2               	goto	l4172
  3125  05B4                     l4154:	
  3126                           ;main.c: 398: }
  3127                           
  3128                           ;main.c: 397: Drive1m();
  3129                           
  3130                           
  3131                           ;main.c: 400: else if (pathShortest[1][n] < y){
  3132  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  3133  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  3134  05B6  085C               	movf	TravelPath@n,w
  3135  05B7  3ED8               	addlw	(low ((_pathShortest| 0+16)))& (0+255)
  3136  05B8  0084               	movwf	4
  3137  05B9  0845               	movf	_y,w
  3138  05BA  1383               	bcf	3,7	;select IRP bank1
  3139  05BB  0200               	subwf	0,w
  3140  05BC  1C03               	btfss	3,0
  3141  05BD  2DE5               	goto	l4170
  3142  05BE  2DF7               	goto	l4174
  3143  05BF                     l4158:	
  3144                           ;main.c: 402: case 1: Turn90(1);
  3145                           
  3146                           ;main.c: 401: switch (orientation){
  3147                           
  3148  05BF  3001               	movlw	1
  3149  05C0  120A  158A  240F  120A  118A  	fcall	_Turn90
  3150                           
  3151                           ;main.c: 403: break;
  3152  05C5  2DF2               	goto	l4172
  3153  05C6                     l4160:	
  3154                           ;main.c: 404: case 3: Turn90(0);
  3155                           
  3156  05C6  3000               	movlw	0
  3157  05C7  120A  158A  240F  120A  118A  	fcall	_Turn90
  3158                           
  3159                           ;main.c: 405: break;
  3160  05CC  2DF2               	goto	l4172
  3161  05CD                     l4162:	
  3162                           ;main.c: 406: case 2: Turn90(1);
  3163                           
  3164  05CD  3001               	movlw	1
  3165  05CE  120A  158A  240F  120A  118A  	fcall	_Turn90
  3166                           
  3167                           ;main.c: 407: _delay((unsigned long)((5)*(20000000/4000.0)));
  3168  05D3  3021               	movlw	33
  3169  05D4  1283               	bcf	3,5	;RP0=0, select bank0
  3170  05D5  1303               	bcf	3,6	;RP1=0, select bank0
  3171  05D6  00DB               	movwf	??_TravelPath+1
  3172  05D7  3076               	movlw	118
  3173  05D8  00DA               	movwf	??_TravelPath
  3174  05D9                     u3557:	
  3175  05D9  0BDA               	decfsz	??_TravelPath,f
  3176  05DA  2DD9               	goto	u3557
  3177  05DB  0BDB               	decfsz	??_TravelPath+1,f
  3178  05DC  2DD9               	goto	u3557
  3179  05DD  0000               	nop
  3180                           
  3181                           ;main.c: 408: Turn90(1);
  3182  05DE  3001               	movlw	1
  3183  05DF  120A  158A  240F  120A  118A  	fcall	_Turn90
  3184                           
  3185                           ;main.c: 410: }
  3186                           
  3187                           ;main.c: 409: break;
  3188  05E4  2DF2               	goto	l4172
  3189  05E5                     l4170:	
  3190  05E5  1283               	bcf	3,5	;RP0=0, select bank0
  3191  05E6  1303               	bcf	3,6	;RP1=0, select bank0
  3192  05E7  0869               	movf	_orientation,w
  3193                           
  3194                           ; Switch size 1, requested type "space"
  3195                           ; Number of cases is 3, Range of values is 1 to 3
  3196                           ; switch strategies available:
  3197                           ; Name         Instructions Cycles
  3198                           ; simple_byte           10     6 (average)
  3199                           ; direct_byte           20    11 (fixed)
  3200                           ; jumptable            263     9 (fixed)
  3201                           ;	Chosen strategy is simple_byte
  3202  05E8  3A01               	xorlw	1	; case 1
  3203  05E9  1903               	skipnz
  3204  05EA  2DBF               	goto	l4158
  3205  05EB  3A03               	xorlw	3	; case 2
  3206  05EC  1903               	skipnz
  3207  05ED  2DCD               	goto	l4162
  3208  05EE  3A01               	xorlw	1	; case 3
  3209  05EF  1903               	skipnz
  3210  05F0  2DC6               	goto	l4160
  3211  05F1  2DF2               	goto	l4172
  3212  05F2                     l4172:	
  3213                           
  3214                           ;main.c: 411: Drive1m();
  3215  05F2  120A  118A  2606  120A  118A  	fcall	_Drive1m
  3216  05F7                     l4174:	
  3217                           
  3218                           ;main.c: 412: }
  3219                           ;main.c: 415: if (IR_Wall == 1){
  3220  05F7  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  3221  05F8  2DFF               	goto	l4178
  3222                           
  3223                           ;main.c: 416: n = 20;
  3224  05F9  3014               	movlw	20
  3225  05FA  1283               	bcf	3,5	;RP0=0, select bank0
  3226  05FB  1303               	bcf	3,6	;RP1=0, select bank0
  3227  05FC  00DA               	movwf	??_TravelPath
  3228  05FD  085A               	movf	??_TravelPath,w
  3229  05FE  00DC               	movwf	TravelPath@n
  3230  05FF                     l4178:	
  3231  05FF  3001               	movlw	1
  3232  0600  1283               	bcf	3,5	;RP0=0, select bank0
  3233  0601  1303               	bcf	3,6	;RP1=0, select bank0
  3234  0602  00DA               	movwf	??_TravelPath
  3235  0603  085A               	movf	??_TravelPath,w
  3236  0604  07DC               	addwf	TravelPath@n,f
  3237  0605  2CF5               	goto	l4180
  3238  0606                     __end_of_TravelPath:	
  3239                           
  3240                           	psect	text8
  3241  0C0F                     __ptext8:	
  3242 ;; *************** function _Turn90 *****************
  3243 ;; Defined at:
  3244 ;;		line 323 in file "main.c"
  3245 ;; Parameters:    Size  Location     Type
  3246 ;;  direction       1    wreg     unsigned char 
  3247 ;; Auto vars:     Size  Location     Type
  3248 ;;  direction       1   13[BANK0 ] unsigned char 
  3249 ;; Return value:  Size  Location     Type
  3250 ;;                  1    wreg      void 
  3251 ;; Registers used:
  3252 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3253 ;; Tracked objects:
  3254 ;;		On entry : 0/0
  3255 ;;		On exit  : 0/0
  3256 ;;		Unchanged: 0/0
  3257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3258 ;;      Params:         0       0       0       0       0
  3259 ;;      Locals:         0       1       0       0       0
  3260 ;;      Temps:          0       3       0       0       0
  3261 ;;      Totals:         0       4       0       0       0
  3262 ;;Total ram usage:        4 bytes
  3263 ;; Hardware stack levels used:    1
  3264 ;; Hardware stack levels required when called:    3
  3265 ;; This function calls:
  3266 ;;		_Drive
  3267 ;;		_DriveDirect
  3268 ;;		_getSensorData
  3269 ;; This function is called by:
  3270 ;;		_TravelPath
  3271 ;;		_re_route
  3272 ;; This function uses a non-reentrant model
  3273 ;;
  3274                           
  3275                           
  3276                           ;psect for function _Turn90
  3277  0C0F                     _Turn90:	
  3278                           
  3279                           ;incstack = 0
  3280                           ; Regs used in _Turn90: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3281                           ;Turn90@direction stored from wreg
  3282  0C0F  1283               	bcf	3,5	;RP0=0, select bank0
  3283  0C10  1303               	bcf	3,6	;RP1=0, select bank0
  3284  0C11  00D8               	movwf	Turn90@direction
  3285                           
  3286                           ;main.c: 325: angle = 0;
  3287  0C12  01A6               	clrf	_angle
  3288  0C13  01A7               	clrf	_angle+1
  3289                           
  3290                           ;main.c: 327: if (direction == 1){
  3291  0C14  0358               	decf	Turn90@direction,w
  3292  0C15  1D03               	btfss	3,2
  3293  0C16  2C52               	goto	l3834
  3294                           
  3295                           ;main.c: 329: if (orientation == 0)
  3296  0C17  0869               	movf	_orientation,w
  3297  0C18  1D03               	btfss	3,2
  3298  0C19  2C1F               	goto	l3826
  3299                           
  3300                           ;main.c: 330: orientation = 3;
  3301  0C1A  3003               	movlw	3
  3302  0C1B  00D5               	movwf	??_Turn90
  3303  0C1C  0855               	movf	??_Turn90,w
  3304  0C1D  00E9               	movwf	_orientation
  3305  0C1E  2C21               	goto	l3828
  3306  0C1F                     l3826:	
  3307                           
  3308                           ;main.c: 331: else orientation--;
  3309  0C1F  3001               	movlw	1
  3310  0C20  02E9               	subwf	_orientation,f
  3311  0C21                     l3828:	
  3312                           
  3313                           ;main.c: 333: Drive(0,150,0x00,0x01);
  3314  0C21  3096               	movlw	150
  3315  0C22  00D5               	movwf	??_Turn90
  3316  0C23  0855               	movf	??_Turn90,w
  3317  0C24  00CC               	movwf	Drive@speedL
  3318  0C25  01CD               	clrf	Drive@radH
  3319  0C26  01CE               	clrf	Drive@radL
  3320  0C27  0ACE               	incf	Drive@radL,f
  3321  0C28  3000               	movlw	0
  3322  0C29  120A  158A  228B  120A  158A  	fcall	_Drive
  3323  0C2E                     l3832:	
  3324                           ;main.c: 334: while (angle < 86){
  3325                           
  3326  0C2E  1283               	bcf	3,5	;RP0=0, select bank0
  3327  0C2F  1303               	bcf	3,6	;RP1=0, select bank0
  3328  0C30  0827               	movf	_angle+1,w
  3329  0C31  3A80               	xorlw	128
  3330  0C32  00FF               	movwf	127
  3331  0C33  3080               	movlw	128
  3332  0C34  027F               	subwf	127,w
  3333  0C35  1D03               	skipz
  3334  0C36  2C39               	goto	u2555
  3335  0C37  3056               	movlw	86
  3336  0C38  0226               	subwf	_angle,w
  3337  0C39                     u2555:	
  3338  0C39  1803               	btfsc	3,0
  3339  0C3A  2C52               	goto	l3834
  3340                           
  3341                           ;main.c: 335: angle = angle + getSensorData(20,2);
  3342  0C3B  3002               	movlw	2
  3343  0C3C  1283               	bcf	3,5	;RP0=0, select bank0
  3344  0C3D  1303               	bcf	3,6	;RP1=0, select bank0
  3345  0C3E  00D5               	movwf	??_Turn90
  3346  0C3F  0855               	movf	??_Turn90,w
  3347  0C40  00CD               	movwf	getSensorData@bytes
  3348  0C41  3014               	movlw	20
  3349  0C42  120A  158A  2304  120A  158A  	fcall	_getSensorData
  3350  0C47  1283               	bcf	3,5	;RP0=0, select bank0
  3351  0C48  1303               	bcf	3,6	;RP1=0, select bank0
  3352  0C49  0826               	movf	_angle,w
  3353  0C4A  074D               	addwf	?_getSensorData,w
  3354  0C4B  00A6               	movwf	_angle
  3355  0C4C  0827               	movf	_angle+1,w
  3356  0C4D  1803               	skipnc
  3357  0C4E  0A27               	incf	_angle+1,w
  3358  0C4F  074E               	addwf	?_getSensorData+1,w
  3359  0C50  00A7               	movwf	_angle+1
  3360  0C51  2C2E               	goto	l3832
  3361  0C52                     l3834:	
  3362                           
  3363                           ;main.c: 336: }
  3364                           ;main.c: 337: }
  3365                           ;main.c: 339: if (direction == 0){
  3366  0C52  1283               	bcf	3,5	;RP0=0, select bank0
  3367  0C53  1303               	bcf	3,6	;RP1=0, select bank0
  3368  0C54  0858               	movf	Turn90@direction,w
  3369  0C55  1D03               	btfss	3,2
  3370  0C56  2C97               	goto	l3848
  3371                           
  3372                           ;main.c: 341: if (orientation == 3)
  3373  0C57  3003               	movlw	3
  3374  0C58  0669               	xorwf	_orientation,w
  3375  0C59  1D03               	btfss	3,2
  3376  0C5A  2C5D               	goto	l3840
  3377                           
  3378                           ;main.c: 342: orientation = 0;
  3379  0C5B  01E9               	clrf	_orientation
  3380  0C5C  2C61               	goto	l3842
  3381  0C5D                     l3840:	
  3382                           
  3383                           ;main.c: 343: else orientation++;
  3384  0C5D  3001               	movlw	1
  3385  0C5E  00D5               	movwf	??_Turn90
  3386  0C5F  0855               	movf	??_Turn90,w
  3387  0C60  07E9               	addwf	_orientation,f
  3388  0C61                     l3842:	
  3389                           
  3390                           ;main.c: 345: Drive(0,150,0xFF,0xFF);
  3391  0C61  3096               	movlw	150
  3392  0C62  00D5               	movwf	??_Turn90
  3393  0C63  0855               	movf	??_Turn90,w
  3394  0C64  00CC               	movwf	Drive@speedL
  3395  0C65  30FF               	movlw	255
  3396  0C66  00D6               	movwf	??_Turn90+1
  3397  0C67  0856               	movf	??_Turn90+1,w
  3398  0C68  00CD               	movwf	Drive@radH
  3399  0C69  30FF               	movlw	255
  3400  0C6A  00D7               	movwf	??_Turn90+2
  3401  0C6B  0857               	movf	??_Turn90+2,w
  3402  0C6C  00CE               	movwf	Drive@radL
  3403  0C6D  3000               	movlw	0
  3404  0C6E  120A  158A  228B  120A  158A  	fcall	_Drive
  3405  0C73                     l3846:	
  3406                           ;main.c: 346: while (angle > -86){
  3407                           
  3408  0C73  1283               	bcf	3,5	;RP0=0, select bank0
  3409  0C74  1303               	bcf	3,6	;RP1=0, select bank0
  3410  0C75  0827               	movf	_angle+1,w
  3411  0C76  3A80               	xorlw	128
  3412  0C77  00FF               	movwf	127
  3413  0C78  307F               	movlw	127
  3414  0C79  027F               	subwf	127,w
  3415  0C7A  1D03               	skipz
  3416  0C7B  2C7E               	goto	u2585
  3417  0C7C  30AB               	movlw	171
  3418  0C7D  0226               	subwf	_angle,w
  3419  0C7E                     u2585:	
  3420  0C7E  1C03               	btfss	3,0
  3421  0C7F  2C97               	goto	l3848
  3422                           
  3423                           ;main.c: 347: angle = angle + getSensorData(20,2);
  3424  0C80  3002               	movlw	2
  3425  0C81  1283               	bcf	3,5	;RP0=0, select bank0
  3426  0C82  1303               	bcf	3,6	;RP1=0, select bank0
  3427  0C83  00D5               	movwf	??_Turn90
  3428  0C84  0855               	movf	??_Turn90,w
  3429  0C85  00CD               	movwf	getSensorData@bytes
  3430  0C86  3014               	movlw	20
  3431  0C87  120A  158A  2304  120A  158A  	fcall	_getSensorData
  3432  0C8C  1283               	bcf	3,5	;RP0=0, select bank0
  3433  0C8D  1303               	bcf	3,6	;RP1=0, select bank0
  3434  0C8E  0826               	movf	_angle,w
  3435  0C8F  074D               	addwf	?_getSensorData,w
  3436  0C90  00A6               	movwf	_angle
  3437  0C91  0827               	movf	_angle+1,w
  3438  0C92  1803               	skipnc
  3439  0C93  0A27               	incf	_angle+1,w
  3440  0C94  074E               	addwf	?_getSensorData+1,w
  3441  0C95  00A7               	movwf	_angle+1
  3442  0C96  2C73               	goto	l3846
  3443  0C97                     l3848:	
  3444                           
  3445                           ;main.c: 348: }
  3446                           ;main.c: 349: }
  3447                           ;main.c: 350: DriveDirect(0,0);
  3448  0C97  3000               	movlw	0
  3449  0C98  1283               	bcf	3,5	;RP0=0, select bank0
  3450  0C99  1303               	bcf	3,6	;RP1=0, select bank0
  3451  0C9A  00CC               	movwf	DriveDirect@VelocityRight
  3452  0C9B  00CD               	movwf	DriveDirect@VelocityRight+1
  3453  0C9C  3000               	movlw	0
  3454  0C9D  00CE               	movwf	DriveDirect@VelocityLeft
  3455  0C9E  00CF               	movwf	DriveDirect@VelocityLeft+1
  3456  0C9F  120A  158A  2382  120A  158A  	fcall	_DriveDirect
  3457                           
  3458                           ;main.c: 351: _delay((unsigned long)((100)*(20000000/4000.0)));
  3459  0CA4  3003               	movlw	3
  3460  0CA5  1283               	bcf	3,5	;RP0=0, select bank0
  3461  0CA6  1303               	bcf	3,6	;RP1=0, select bank0
  3462  0CA7  00D7               	movwf	??_Turn90+2
  3463  0CA8  308A               	movlw	138
  3464  0CA9  00D6               	movwf	??_Turn90+1
  3465  0CAA  3056               	movlw	86
  3466  0CAB  00D5               	movwf	??_Turn90
  3467  0CAC                     u3567:	
  3468  0CAC  0BD5               	decfsz	??_Turn90,f
  3469  0CAD  2CAC               	goto	u3567
  3470  0CAE  0BD6               	decfsz	??_Turn90+1,f
  3471  0CAF  2CAC               	goto	u3567
  3472  0CB0  0BD7               	decfsz	??_Turn90+2,f
  3473  0CB1  2CAC               	goto	u3567
  3474  0CB2  2CB3               	nop2
  3475  0CB3  0008               	return
  3476  0CB4                     __end_of_Turn90:	
  3477                           
  3478                           	psect	text9
  3479  0A8B                     __ptext9:	
  3480 ;; *************** function _Drive *****************
  3481 ;; Defined at:
  3482 ;;		line 45 in file "ser.c"
  3483 ;; Parameters:    Size  Location     Type
  3484 ;;  speedH          1    wreg     unsigned char 
  3485 ;;  speedL          1    1[BANK0 ] unsigned char 
  3486 ;;  radH            1    2[BANK0 ] unsigned char 
  3487 ;;  radL            1    3[BANK0 ] unsigned char 
  3488 ;; Auto vars:     Size  Location     Type
  3489 ;;  speedH          1    4[BANK0 ] unsigned char 
  3490 ;; Return value:  Size  Location     Type
  3491 ;;                  1    wreg      void 
  3492 ;; Registers used:
  3493 ;;		wreg, status,2, status,0, pclath, cstack
  3494 ;; Tracked objects:
  3495 ;;		On entry : 0/0
  3496 ;;		On exit  : 0/0
  3497 ;;		Unchanged: 0/0
  3498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3499 ;;      Params:         0       3       0       0       0
  3500 ;;      Locals:         0       1       0       0       0
  3501 ;;      Temps:          0       0       0       0       0
  3502 ;;      Totals:         0       4       0       0       0
  3503 ;;Total ram usage:        4 bytes
  3504 ;; Hardware stack levels used:    1
  3505 ;; Hardware stack levels required when called:    2
  3506 ;; This function calls:
  3507 ;;		_ser_putch
  3508 ;; This function is called by:
  3509 ;;		_Turn90
  3510 ;; This function uses a non-reentrant model
  3511 ;;
  3512                           
  3513                           
  3514                           ;psect for function _Drive
  3515  0A8B                     _Drive:	
  3516                           
  3517                           ;incstack = 0
  3518                           ; Regs used in _Drive: [wreg+status,2+status,0+pclath+cstack]
  3519                           ;Drive@speedH stored from wreg
  3520  0A8B  1283               	bcf	3,5	;RP0=0, select bank0
  3521  0A8C  1303               	bcf	3,6	;RP1=0, select bank0
  3522  0A8D  00CF               	movwf	Drive@speedH
  3523                           
  3524                           ;ser.c: 46: ser_putch(137);
  3525  0A8E  3089               	movlw	137
  3526  0A8F  120A  158A  21B9  120A  158A  	fcall	_ser_putch
  3527                           
  3528                           ;ser.c: 47: ser_putch(speedH);
  3529  0A94  1283               	bcf	3,5	;RP0=0, select bank0
  3530  0A95  1303               	bcf	3,6	;RP1=0, select bank0
  3531  0A96  084F               	movf	Drive@speedH,w
  3532  0A97  120A  158A  21B9  120A  158A  	fcall	_ser_putch
  3533                           
  3534                           ;ser.c: 48: ser_putch(speedL);
  3535  0A9C  1283               	bcf	3,5	;RP0=0, select bank0
  3536  0A9D  1303               	bcf	3,6	;RP1=0, select bank0
  3537  0A9E  084C               	movf	Drive@speedL,w
  3538  0A9F  120A  158A  21B9  120A  158A  	fcall	_ser_putch
  3539                           
  3540                           ;ser.c: 49: ser_putch(radH);
  3541  0AA4  1283               	bcf	3,5	;RP0=0, select bank0
  3542  0AA5  1303               	bcf	3,6	;RP1=0, select bank0
  3543  0AA6  084D               	movf	Drive@radH,w
  3544  0AA7  120A  158A  21B9  120A  158A  	fcall	_ser_putch
  3545                           
  3546                           ;ser.c: 50: ser_putch(radL);
  3547  0AAC  1283               	bcf	3,5	;RP0=0, select bank0
  3548  0AAD  1303               	bcf	3,6	;RP1=0, select bank0
  3549  0AAE  084E               	movf	Drive@radL,w
  3550  0AAF  120A  158A  21B9   	fcall	_ser_putch
  3551  0AB2  0008               	return
  3552  0AB3                     __end_of_Drive:	
  3553                           
  3554                           	psect	text10
  3555  0606                     __ptext10:	
  3556 ;; *************** function _Drive1m *****************
  3557 ;; Defined at:
  3558 ;;		line 246 in file "main.c"
  3559 ;; Parameters:    Size  Location     Type
  3560 ;;		None
  3561 ;; Auto vars:     Size  Location     Type
  3562 ;;  omni_IR         1   14[BANK0 ] unsigned char 
  3563 ;;  n               1   13[BANK0 ] unsigned char 
  3564 ;; Return value:  Size  Location     Type
  3565 ;;                  1    wreg      void 
  3566 ;; Registers used:
  3567 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3568 ;; Tracked objects:
  3569 ;;		On entry : 0/0
  3570 ;;		On exit  : 0/0
  3571 ;;		Unchanged: 0/0
  3572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3573 ;;      Params:         0       0       0       0       0
  3574 ;;      Locals:         0       2       0       0       0
  3575 ;;      Temps:          0       3       0       0       0
  3576 ;;      Totals:         0       5       0       0       0
  3577 ;;Total ram usage:        5 bytes
  3578 ;; Hardware stack levels used:    1
  3579 ;; Hardware stack levels required when called:    3
  3580 ;; This function calls:
  3581 ;;		_DriveDirect
  3582 ;;		_getSensorData
  3583 ;;		_ser_putch
  3584 ;; This function is called by:
  3585 ;;		_TravelPath
  3586 ;; This function uses a non-reentrant model
  3587 ;;
  3588                           
  3589                           
  3590                           ;psect for function _Drive1m
  3591  0606                     _Drive1m:	
  3592                           
  3593                           ;main.c: 254: distance = 0;
  3594                           
  3595                           ;incstack = 0
  3596                           ; Regs used in _Drive1m: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3597  0606  1283               	bcf	3,5	;RP0=0, select bank0
  3598  0607  1303               	bcf	3,6	;RP1=0, select bank0
  3599  0608  01A8               	clrf	_distance
  3600  0609  01A9               	clrf	_distance+1
  3601                           
  3602                           ;main.c: 255: DriveDirect(250,250);
  3603  060A  30FA               	movlw	250
  3604  060B  00CC               	movwf	DriveDirect@VelocityRight
  3605  060C  3000               	movlw	0
  3606  060D  00CD               	movwf	DriveDirect@VelocityRight+1
  3607  060E  30FA               	movlw	250
  3608  060F  00CE               	movwf	DriveDirect@VelocityLeft
  3609  0610  3000               	movlw	0
  3610  0611  00CF               	movwf	DriveDirect@VelocityLeft+1
  3611  0612  120A  158A  2382  120A  118A  	fcall	_DriveDirect
  3612                           
  3613                           ;main.c: 256: RB2 = 1;
  3614  0617  1283               	bcf	3,5	;RP0=0, select bank0
  3615  0618  1303               	bcf	3,6	;RP1=0, select bank0
  3616  0619  1506               	bsf	6,2	;volatile
  3617                           
  3618                           ;main.c: 257: RB3 = 1;
  3619  061A  1586               	bsf	6,3	;volatile
  3620  061B                     l3792:	
  3621                           ;main.c: 260: while (distance < 1000){
  3622                           
  3623  061B  1283               	bcf	3,5	;RP0=0, select bank0
  3624  061C  1303               	bcf	3,6	;RP1=0, select bank0
  3625  061D  0829               	movf	_distance+1,w
  3626  061E  3A80               	xorlw	128
  3627  061F  00FF               	movwf	127
  3628  0620  3083               	movlw	131
  3629  0621  027F               	subwf	127,w
  3630  0622  1D03               	skipz
  3631  0623  2E26               	goto	u2505
  3632  0624  30E8               	movlw	232
  3633  0625  0228               	subwf	_distance,w
  3634  0626                     u2505:	
  3635  0626  1803               	btfsc	3,0
  3636  0627  2EBA               	goto	l3794
  3637                           
  3638                           ;main.c: 263: distance = distance + getSensorData(19,2);
  3639  0628  3002               	movlw	2
  3640  0629  1283               	bcf	3,5	;RP0=0, select bank0
  3641  062A  1303               	bcf	3,6	;RP1=0, select bank0
  3642  062B  00D5               	movwf	??_Drive1m
  3643  062C  0855               	movf	??_Drive1m,w
  3644  062D  00CD               	movwf	getSensorData@bytes
  3645  062E  3013               	movlw	19
  3646  062F  120A  158A  2304  120A  118A  	fcall	_getSensorData
  3647  0634  1283               	bcf	3,5	;RP0=0, select bank0
  3648  0635  1303               	bcf	3,6	;RP1=0, select bank0
  3649  0636  0828               	movf	_distance,w
  3650  0637  074D               	addwf	?_getSensorData,w
  3651  0638  00A8               	movwf	_distance
  3652  0639  0829               	movf	_distance+1,w
  3653  063A  1803               	skipnc
  3654  063B  0A29               	incf	_distance+1,w
  3655  063C  074E               	addwf	?_getSensorData+1,w
  3656  063D  00A9               	movwf	_distance+1
  3657                           
  3658                           ;main.c: 265: if ((getSensorData(13,1)) == 1){
  3659  063E  01CD               	clrf	getSensorData@bytes
  3660  063F  0ACD               	incf	getSensorData@bytes,f
  3661  0640  300D               	movlw	13
  3662  0641  120A  158A  2304  120A  118A  	fcall	_getSensorData
  3663  0646  1283               	bcf	3,5	;RP0=0, select bank0
  3664  0647  1303               	bcf	3,6	;RP1=0, select bank0
  3665  0648  034D               	decf	?_getSensorData,w
  3666  0649  044E               	iorwf	?_getSensorData+1,w
  3667  064A  1D03               	btfss	3,2
  3668  064B  2E1B               	goto	l3792
  3669                           
  3670                           ;main.c: 267: if((getSensorData(17,1)) < 240){
  3671  064C  01CD               	clrf	getSensorData@bytes
  3672  064D  0ACD               	incf	getSensorData@bytes,f
  3673  064E  3011               	movlw	17
  3674  064F  120A  158A  2304  120A  118A  	fcall	_getSensorData
  3675  0654  1283               	bcf	3,5	;RP0=0, select bank0
  3676  0655  1303               	bcf	3,6	;RP1=0, select bank0
  3677  0656  084E               	movf	?_getSensorData+1,w
  3678  0657  3A80               	xorlw	128
  3679  0658  00FF               	movwf	127
  3680  0659  3080               	movlw	128
  3681  065A  027F               	subwf	127,w
  3682  065B  1D03               	skipz
  3683  065C  2E5F               	goto	u2475
  3684  065D  30F0               	movlw	240
  3685  065E  024D               	subwf	?_getSensorData,w
  3686  065F                     u2475:	
  3687  065F  1803               	skipnc
  3688  0660  2E69               	goto	l3772
  3689                           
  3690                           ;main.c: 268: IR_Wall = 1;
  3691  0661  1470               	bsf	_IR_Wall/(0+8),_IR_Wall& (0+7)
  3692                           
  3693                           ;main.c: 269: distance = 1001;
  3694  0662  30E9               	movlw	233
  3695  0663  1283               	bcf	3,5	;RP0=0, select bank0
  3696  0664  1303               	bcf	3,6	;RP1=0, select bank0
  3697  0665  00A8               	movwf	_distance
  3698  0666  3003               	movlw	3
  3699  0667  00A9               	movwf	_distance+1
  3700                           
  3701                           ;main.c: 270: RB3 = 0;
  3702  0668  1186               	bcf	6,3	;volatile
  3703  0669                     l3772:	
  3704                           
  3705                           ;main.c: 271: }
  3706                           ;main.c: 274: unsigned char omni_IR = (getSensorData(17,1));
  3707  0669  1283               	bcf	3,5	;RP0=0, select bank0
  3708  066A  1303               	bcf	3,6	;RP1=0, select bank0
  3709  066B  01CD               	clrf	getSensorData@bytes
  3710  066C  0ACD               	incf	getSensorData@bytes,f
  3711  066D  3011               	movlw	17
  3712  066E  120A  158A  2304  120A  118A  	fcall	_getSensorData
  3713  0673  1283               	bcf	3,5	;RP0=0, select bank0
  3714  0674  1303               	bcf	3,6	;RP1=0, select bank0
  3715  0675  084D               	movf	?_getSensorData,w
  3716  0676  00D5               	movwf	??_Drive1m
  3717  0677  0855               	movf	??_Drive1m,w
  3718  0678  00D9               	movwf	Drive1m@omni_IR
  3719                           
  3720                           ;main.c: 275: if (omni_IR == 250 || omni_IR == 246){
  3721  0679  30FA               	movlw	250
  3722  067A  0659               	xorwf	Drive1m@omni_IR,w
  3723  067B  1903               	btfsc	3,2
  3724  067C  2E81               	goto	l3778
  3725  067D  30F6               	movlw	246
  3726  067E  0659               	xorwf	Drive1m@omni_IR,w
  3727  067F  1D03               	btfss	3,2
  3728  0680  2E1B               	goto	l3792
  3729  0681                     l3778:	
  3730                           
  3731                           ;main.c: 277: targets++;
  3732  0681  3001               	movlw	1
  3733  0682  00D5               	movwf	??_Drive1m
  3734  0683  0855               	movf	??_Drive1m,w
  3735  0684  07C0               	addwf	_targets,f
  3736                           
  3737                           ;main.c: 279: switch(targets){
  3738  0685  2EA1               	goto	l3788
  3739  0686                     l3780:	
  3740                           ;main.c: 280: case 1: ser_putch(141);
  3741                           
  3742  0686  308D               	movlw	141
  3743  0687  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  3744                           
  3745                           ;main.c: 281: ser_putch(5);
  3746  068C  3005               	movlw	5
  3747  068D  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  3748                           
  3749                           ;main.c: 282: break;
  3750  0692  2EAB               	goto	l3790
  3751  0693                     l3782:	
  3752                           ;main.c: 283: case 2: ser_putch(141);
  3753                           
  3754  0693  308D               	movlw	141
  3755  0694  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  3756                           
  3757                           ;main.c: 284: ser_putch(3);
  3758  0699  3003               	movlw	3
  3759  069A  120A  158A  21B9  120A  118A  	fcall	_ser_putch
  3760                           
  3761                           ;main.c: 285: targets_found = 1;
  3762  069F  16F0               	bsf	_targets_found/(0+8),_targets_found& (0+7)
  3763                           
  3764                           ;main.c: 287: }
  3765                           
  3766                           ;main.c: 286: break;
  3767  06A0  2EAB               	goto	l3790
  3768  06A1                     l3788:	
  3769  06A1  1283               	bcf	3,5	;RP0=0, select bank0
  3770  06A2  1303               	bcf	3,6	;RP1=0, select bank0
  3771  06A3  0840               	movf	_targets,w
  3772                           
  3773                           ; Switch size 1, requested type "space"
  3774                           ; Number of cases is 2, Range of values is 1 to 2
  3775                           ; switch strategies available:
  3776                           ; Name         Instructions Cycles
  3777                           ; simple_byte            7     4 (average)
  3778                           ; direct_byte           17    11 (fixed)
  3779                           ; jumptable            263     9 (fixed)
  3780                           ;	Chosen strategy is simple_byte
  3781  06A4  3A01               	xorlw	1	; case 1
  3782  06A5  1903               	skipnz
  3783  06A6  2E86               	goto	l3780
  3784  06A7  3A03               	xorlw	3	; case 2
  3785  06A8  1903               	skipnz
  3786  06A9  2E93               	goto	l3782
  3787  06AA  2EAB               	goto	l3790
  3788  06AB                     l3790:	
  3789                           
  3790                           ;main.c: 289: _delay((unsigned long)((2000)*(20000000/4000.0)));
  3791  06AB  3033               	movlw	51
  3792  06AC  1283               	bcf	3,5	;RP0=0, select bank0
  3793  06AD  1303               	bcf	3,6	;RP1=0, select bank0
  3794  06AE  00D7               	movwf	??_Drive1m+2
  3795  06AF  30BC               	movlw	188
  3796  06B0  00D6               	movwf	??_Drive1m+1
  3797  06B1  3010               	movlw	16
  3798  06B2  00D5               	movwf	??_Drive1m
  3799  06B3                     u3577:	
  3800  06B3  0BD5               	decfsz	??_Drive1m,f
  3801  06B4  2EB3               	goto	u3577
  3802  06B5  0BD6               	decfsz	??_Drive1m+1,f
  3803  06B6  2EB3               	goto	u3577
  3804  06B7  0BD7               	decfsz	??_Drive1m+2,f
  3805  06B8  2EB3               	goto	u3577
  3806  06B9  2E1B               	goto	l3792
  3807  06BA                     l3794:	
  3808                           
  3809                           ;main.c: 291: }
  3810                           ;main.c: 293: }
  3811                           ;main.c: 294: }
  3812                           ;main.c: 297: DriveDirect(0,0);
  3813  06BA  3000               	movlw	0
  3814  06BB  1283               	bcf	3,5	;RP0=0, select bank0
  3815  06BC  1303               	bcf	3,6	;RP1=0, select bank0
  3816  06BD  00CC               	movwf	DriveDirect@VelocityRight
  3817  06BE  00CD               	movwf	DriveDirect@VelocityRight+1
  3818  06BF  3000               	movlw	0
  3819  06C0  00CE               	movwf	DriveDirect@VelocityLeft
  3820  06C1  00CF               	movwf	DriveDirect@VelocityLeft+1
  3821  06C2  120A  158A  2382  120A  118A  	fcall	_DriveDirect
  3822                           
  3823                           ;main.c: 299: if(IR_Wall == 0){
  3824  06C7  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  3825  06C8  2EDC               	goto	l3810
  3826  06C9  2EF9               	goto	l3814
  3827  06CA                     l3800:	
  3828                           ;main.c: 301: case 0: y--;
  3829                           
  3830                           ;main.c: 300: switch(orientation){
  3831                           
  3832  06CA  3001               	movlw	1
  3833  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  3834  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  3835  06CD  02C5               	subwf	_y,f
  3836                           
  3837                           ;main.c: 302: break;
  3838  06CE  2EEC               	goto	l3812
  3839  06CF                     l3802:	
  3840                           ;main.c: 303: case 1: x++;
  3841                           
  3842  06CF  3001               	movlw	1
  3843  06D0  00D5               	movwf	??_Drive1m
  3844  06D1  0855               	movf	??_Drive1m,w
  3845  06D2  07EB               	addwf	_x,f
  3846                           
  3847                           ;main.c: 304: break;
  3848  06D3  2EEC               	goto	l3812
  3849  06D4                     l3804:	
  3850                           ;main.c: 305: case 2: y++;
  3851                           
  3852  06D4  3001               	movlw	1
  3853  06D5  00D5               	movwf	??_Drive1m
  3854  06D6  0855               	movf	??_Drive1m,w
  3855  06D7  07C5               	addwf	_y,f
  3856                           
  3857                           ;main.c: 306: break;
  3858  06D8  2EEC               	goto	l3812
  3859  06D9                     l3806:	
  3860                           ;main.c: 307: case 3: x--;
  3861                           
  3862  06D9  3001               	movlw	1
  3863  06DA  02EB               	subwf	_x,f
  3864                           
  3865                           ;main.c: 309: }
  3866                           
  3867                           ;main.c: 308: break;
  3868  06DB  2EEC               	goto	l3812
  3869  06DC                     l3810:	
  3870  06DC  1283               	bcf	3,5	;RP0=0, select bank0
  3871  06DD  1303               	bcf	3,6	;RP1=0, select bank0
  3872  06DE  0869               	movf	_orientation,w
  3873                           
  3874                           ; Switch size 1, requested type "space"
  3875                           ; Number of cases is 4, Range of values is 0 to 3
  3876                           ; switch strategies available:
  3877                           ; Name         Instructions Cycles
  3878                           ; simple_byte           13     7 (average)
  3879                           ; direct_byte           20     8 (fixed)
  3880                           ; jumptable            260     6 (fixed)
  3881                           ;	Chosen strategy is simple_byte
  3882  06DF  3A00               	xorlw	0	; case 0
  3883  06E0  1903               	skipnz
  3884  06E1  2ECA               	goto	l3800
  3885  06E2  3A01               	xorlw	1	; case 1
  3886  06E3  1903               	skipnz
  3887  06E4  2ECF               	goto	l3802
  3888  06E5  3A03               	xorlw	3	; case 2
  3889  06E6  1903               	skipnz
  3890  06E7  2ED4               	goto	l3804
  3891  06E8  3A01               	xorlw	1	; case 3
  3892  06E9  1903               	skipnz
  3893  06EA  2ED9               	goto	l3806
  3894  06EB  2EEC               	goto	l3812
  3895  06EC                     l3812:	
  3896                           
  3897                           ;main.c: 310: _delay((unsigned long)((100)*(20000000/4000.0)));
  3898  06EC  3003               	movlw	3
  3899  06ED  00D7               	movwf	??_Drive1m+2
  3900  06EE  308A               	movlw	138
  3901  06EF  00D6               	movwf	??_Drive1m+1
  3902  06F0  3056               	movlw	86
  3903  06F1  00D5               	movwf	??_Drive1m
  3904  06F2                     u3587:	
  3905  06F2  0BD5               	decfsz	??_Drive1m,f
  3906  06F3  2EF2               	goto	u3587
  3907  06F4  0BD6               	decfsz	??_Drive1m+1,f
  3908  06F5  2EF2               	goto	u3587
  3909  06F6  0BD7               	decfsz	??_Drive1m+2,f
  3910  06F7  2EF2               	goto	u3587
  3911  06F8  2EF9               	nop2
  3912  06F9                     l3814:	
  3913                           
  3914                           ;main.c: 311: }
  3915                           ;main.c: 316: if (targets_found == 1){
  3916  06F9  1EF0               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  3917  06FA  0008               	return
  3918                           
  3919                           ;main.c: 317: char n = 20;
  3920  06FB  3014               	movlw	20
  3921  06FC  1283               	bcf	3,5	;RP0=0, select bank0
  3922  06FD  1303               	bcf	3,6	;RP1=0, select bank0
  3923  06FE  00D5               	movwf	??_Drive1m
  3924  06FF  0855               	movf	??_Drive1m,w
  3925  0700  00D8               	movwf	Drive1m@n
  3926  0701  0008               	return
  3927  0702                     __end_of_Drive1m:	
  3928                           
  3929                           	psect	text11
  3930  0B04                     __ptext11:	
  3931 ;; *************** function _getSensorData *****************
  3932 ;; Defined at:
  3933 ;;		line 85 in file "ser.c"
  3934 ;; Parameters:    Size  Location     Type
  3935 ;;  packetID        1    wreg     unsigned char 
  3936 ;;  bytes           1    2[BANK0 ] unsigned char 
  3937 ;; Auto vars:     Size  Location     Type
  3938 ;;  packetID        1    6[BANK0 ] unsigned char 
  3939 ;;  sensor          2    7[BANK0 ] int 
  3940 ;; Return value:  Size  Location     Type
  3941 ;;                  2    2[BANK0 ] int 
  3942 ;; Registers used:
  3943 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3949 ;;      Params:         0       2       0       0       0
  3950 ;;      Locals:         0       3       0       0       0
  3951 ;;      Temps:          0       2       0       0       0
  3952 ;;      Totals:         0       7       0       0       0
  3953 ;;Total ram usage:        7 bytes
  3954 ;; Hardware stack levels used:    1
  3955 ;; Hardware stack levels required when called:    2
  3956 ;; This function calls:
  3957 ;;		_ser_getch
  3958 ;;		_ser_putch
  3959 ;; This function is called by:
  3960 ;;		_Drive1m
  3961 ;;		_Turn90
  3962 ;;		_re_route
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966                           
  3967                           ;psect for function _getSensorData
  3968  0B04                     _getSensorData:	
  3969                           
  3970                           ;incstack = 0
  3971                           ; Regs used in _getSensorData: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3972                           ;getSensorData@packetID stored from wreg
  3973  0B04  1283               	bcf	3,5	;RP0=0, select bank0
  3974  0B05  1303               	bcf	3,6	;RP1=0, select bank0
  3975  0B06  00D1               	movwf	getSensorData@packetID
  3976                           
  3977                           ;ser.c: 86: ser_putch(142);
  3978  0B07  308E               	movlw	142
  3979  0B08  120A  158A  21B9  120A  158A  	fcall	_ser_putch
  3980                           
  3981                           ;ser.c: 87: ser_putch(packetID);
  3982  0B0D  1283               	bcf	3,5	;RP0=0, select bank0
  3983  0B0E  1303               	bcf	3,6	;RP1=0, select bank0
  3984  0B0F  0851               	movf	getSensorData@packetID,w
  3985  0B10  120A  158A  21B9  120A  158A  	fcall	_ser_putch
  3986                           
  3987                           ;ser.c: 89: if (bytes == 2)
  3988  0B15  3002               	movlw	2
  3989  0B16  1283               	bcf	3,5	;RP0=0, select bank0
  3990  0B17  1303               	bcf	3,6	;RP1=0, select bank0
  3991  0B18  064D               	xorwf	getSensorData@bytes,w
  3992  0B19  1D03               	btfss	3,2
  3993  0B1A  2B26               	goto	l3714
  3994                           
  3995                           ;ser.c: 90: highByte = ser_getch();
  3996  0B1B  120A  158A  21AF  120A  158A  	fcall	_ser_getch
  3997  0B20  1283               	bcf	3,5	;RP0=0, select bank0
  3998  0B21  1303               	bcf	3,6	;RP1=0, select bank0
  3999  0B22  00CF               	movwf	??_getSensorData
  4000  0B23  084F               	movf	??_getSensorData,w
  4001  0B24  00CA               	movwf	_highByte
  4002  0B25  2B27               	goto	l3716
  4003  0B26                     l3714:	
  4004                           
  4005                           ;ser.c: 91: else
  4006                           ;ser.c: 92: highByte = 0;
  4007  0B26  01CA               	clrf	_highByte
  4008  0B27                     l3716:	
  4009                           
  4010                           ;ser.c: 94: lowByte = ser_getch();
  4011  0B27  120A  158A  21AF   	fcall	_ser_getch
  4012  0B2A  1283               	bcf	3,5	;RP0=0, select bank0
  4013  0B2B  1303               	bcf	3,6	;RP1=0, select bank0
  4014  0B2C  00CF               	movwf	??_getSensorData
  4015  0B2D  084F               	movf	??_getSensorData,w
  4016  0B2E  00B8               	movwf	_lowByte
  4017                           
  4018                           ;ser.c: 96: signed int sensor = (256*highByte + lowByte);
  4019  0B2F  084A               	movf	_highByte,w
  4020  0B30  00CF               	movwf	??_getSensorData
  4021  0B31  01D0               	clrf	??_getSensorData+1
  4022  0B32  084F               	movf	??_getSensorData,w
  4023  0B33  00D0               	movwf	??_getSensorData+1
  4024  0B34  01CF               	clrf	??_getSensorData
  4025  0B35  0838               	movf	_lowByte,w
  4026  0B36  074F               	addwf	??_getSensorData,w
  4027  0B37  00D2               	movwf	getSensorData@sensor
  4028  0B38  3000               	movlw	0
  4029  0B39  1803               	skipnc
  4030  0B3A  3001               	movlw	1
  4031  0B3B  0750               	addwf	??_getSensorData+1,w
  4032  0B3C  00D3               	movwf	getSensorData@sensor+1
  4033                           
  4034                           ;ser.c: 98: return sensor;
  4035  0B3D  0853               	movf	getSensorData@sensor+1,w
  4036  0B3E  00CE               	movwf	?_getSensorData+1
  4037  0B3F  0852               	movf	getSensorData@sensor,w
  4038  0B40  00CD               	movwf	?_getSensorData
  4039  0B41  0008               	return
  4040  0B42                     __end_of_getSensorData:	
  4041                           
  4042                           	psect	text12
  4043  09AF                     __ptext12:	
  4044 ;; *************** function _ser_getch *****************
  4045 ;; Defined at:
  4046 ;;		line 35 in file "ser.c"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;		None
  4049 ;; Auto vars:     Size  Location     Type
  4050 ;;  rxbyte          1    1[BANK0 ] unsigned char 
  4051 ;; Return value:  Size  Location     Type
  4052 ;;                  1    wreg      unsigned char 
  4053 ;; Registers used:
  4054 ;;		wreg
  4055 ;; Tracked objects:
  4056 ;;		On entry : 0/0
  4057 ;;		On exit  : 0/0
  4058 ;;		Unchanged: 0/0
  4059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4060 ;;      Params:         0       0       0       0       0
  4061 ;;      Locals:         0       1       0       0       0
  4062 ;;      Temps:          0       1       0       0       0
  4063 ;;      Totals:         0       2       0       0       0
  4064 ;;Total ram usage:        2 bytes
  4065 ;; Hardware stack levels used:    1
  4066 ;; Hardware stack levels required when called:    1
  4067 ;; This function calls:
  4068 ;;		Nothing
  4069 ;; This function is called by:
  4070 ;;		_getSensorData
  4071 ;; This function uses a non-reentrant model
  4072 ;;
  4073                           
  4074                           
  4075                           ;psect for function _ser_getch
  4076  09AF                     _ser_getch:	
  4077  09AF                     l841:	
  4078                           ;ser.c: 36: while(!RCIF);
  4079                           
  4080                           ;incstack = 0
  4081                           ; Regs used in _ser_getch: [wreg]
  4082                           
  4083  09AF  1283               	bcf	3,5	;RP0=0, select bank0
  4084  09B0  1303               	bcf	3,6	;RP1=0, select bank0
  4085  09B1  1E8C               	btfss	12,5	;volatile
  4086  09B2  29AF               	goto	l841
  4087                           
  4088                           ;ser.c: 37: unsigned char rxbyte = RCREG;
  4089  09B3  081A               	movf	26,w	;volatile
  4090  09B4  00CB               	movwf	??_ser_getch
  4091  09B5  084B               	movf	??_ser_getch,w
  4092  09B6  00CC               	movwf	ser_getch@rxbyte
  4093                           
  4094                           ;ser.c: 38: return rxbyte;
  4095  09B7  084C               	movf	ser_getch@rxbyte,w
  4096  09B8  0008               	return
  4097  09B9                     __end_of_ser_getch:	
  4098                           
  4099                           	psect	text13
  4100  0B82                     __ptext13:	
  4101 ;; *************** function _DriveDirect *****************
  4102 ;; Defined at:
  4103 ;;		line 54 in file "ser.c"
  4104 ;; Parameters:    Size  Location     Type
  4105 ;;  VelocityRigh    2    1[BANK0 ] int 
  4106 ;;  VelocityLeft    2    3[BANK0 ] int 
  4107 ;; Auto vars:     Size  Location     Type
  4108 ;;  data            2    8[BANK0 ] unsigned int 
  4109 ;;  data            2    6[BANK0 ] unsigned int 
  4110 ;; Return value:  Size  Location     Type
  4111 ;;                  1    wreg      void 
  4112 ;; Registers used:
  4113 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4119 ;;      Params:         0       4       0       0       0
  4120 ;;      Locals:         0       4       0       0       0
  4121 ;;      Temps:          0       1       0       0       0
  4122 ;;      Totals:         0       9       0       0       0
  4123 ;;Total ram usage:        9 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; Hardware stack levels required when called:    2
  4126 ;; This function calls:
  4127 ;;		_ser_putch
  4128 ;; This function is called by:
  4129 ;;		_Drive1m
  4130 ;;		_Turn90
  4131 ;;		_re_route
  4132 ;;		_wallFollow
  4133 ;; This function uses a non-reentrant model
  4134 ;;
  4135                           
  4136                           
  4137                           ;psect for function _DriveDirect
  4138  0B82                     _DriveDirect:	
  4139                           
  4140                           ;ser.c: 55: RightSpeedH = 0;
  4141                           
  4142                           ;incstack = 0
  4143                           ; Regs used in _DriveDirect: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4144  0B82  1283               	bcf	3,5	;RP0=0, select bank0
  4145  0B83  1303               	bcf	3,6	;RP1=0, select bank0
  4146  0B84  01B4               	clrf	_RightSpeedH
  4147                           
  4148                           ;ser.c: 56: LeftSpeedH = 0;
  4149  0B85  01B0               	clrf	_LeftSpeedH
  4150                           
  4151                           ;ser.c: 58: if(VelocityRight > 255){
  4152  0B86  084D               	movf	DriveDirect@VelocityRight+1,w
  4153  0B87  3A80               	xorlw	128
  4154  0B88  00FF               	movwf	127
  4155  0B89  3081               	movlw	129
  4156  0B8A  027F               	subwf	127,w
  4157  0B8B  1D03               	skipz
  4158  0B8C  2B8F               	goto	u2385
  4159  0B8D  3000               	movlw	0
  4160  0B8E  024C               	subwf	DriveDirect@VelocityRight,w
  4161  0B8F                     u2385:	
  4162  0B8F  1C03               	skipc
  4163  0B90  2BB2               	goto	l3680
  4164                           
  4165                           ;ser.c: 59: unsigned int data = VelocityRight;
  4166  0B91  1283               	bcf	3,5	;RP0=0, select bank0
  4167  0B92  1303               	bcf	3,6	;RP1=0, select bank0
  4168  0B93  084D               	movf	DriveDirect@VelocityRight+1,w
  4169  0B94  00D2               	movwf	DriveDirect@data+1
  4170  0B95  084C               	movf	DriveDirect@VelocityRight,w
  4171  0B96  00D1               	movwf	DriveDirect@data
  4172                           
  4173                           ;ser.c: 60: for (RightSpeedH = 0; data > 255; RightSpeedH++){
  4174  0B97  01B4               	clrf	_RightSpeedH
  4175  0B98  3001               	movlw	1
  4176  0B99  0252               	subwf	DriveDirect@data+1,w
  4177  0B9A  3000               	movlw	0
  4178  0B9B  1903               	skipnz
  4179  0B9C  0251               	subwf	DriveDirect@data,w
  4180  0B9D  1C03               	btfss	3,0
  4181  0B9E  2BB2               	goto	l3680
  4182  0B9F                     l3676:	
  4183                           
  4184                           ;ser.c: 61: data = data - 256;
  4185  0B9F  0851               	movf	DriveDirect@data,w
  4186  0BA0  3E00               	addlw	0
  4187  0BA1  00D1               	movwf	DriveDirect@data
  4188  0BA2  0852               	movf	DriveDirect@data+1,w
  4189  0BA3  1803               	skipnc
  4190  0BA4  3E01               	addlw	1
  4191  0BA5  3EFF               	addlw	255
  4192  0BA6  00D2               	movwf	DriveDirect@data+1
  4193  0BA7  3001               	movlw	1
  4194  0BA8  00D0               	movwf	??_DriveDirect
  4195  0BA9  0850               	movf	??_DriveDirect,w
  4196  0BAA  07B4               	addwf	_RightSpeedH,f
  4197  0BAB  3001               	movlw	1
  4198  0BAC  0252               	subwf	DriveDirect@data+1,w
  4199  0BAD  3000               	movlw	0
  4200  0BAE  1903               	skipnz
  4201  0BAF  0251               	subwf	DriveDirect@data,w
  4202  0BB0  1803               	skipnc
  4203  0BB1  2B9F               	goto	l3676
  4204  0BB2                     l3680:	
  4205                           
  4206                           ;ser.c: 62: }
  4207                           ;ser.c: 63: }
  4208                           ;ser.c: 64: RightSpeedL = VelocityRight;
  4209  0BB2  1283               	bcf	3,5	;RP0=0, select bank0
  4210  0BB3  1303               	bcf	3,6	;RP1=0, select bank0
  4211  0BB4  084C               	movf	DriveDirect@VelocityRight,w
  4212  0BB5  00D0               	movwf	??_DriveDirect
  4213  0BB6  0850               	movf	??_DriveDirect,w
  4214  0BB7  00B5               	movwf	_RightSpeedL
  4215                           
  4216                           ;ser.c: 67: if(VelocityLeft > 255){
  4217  0BB8  084F               	movf	DriveDirect@VelocityLeft+1,w
  4218  0BB9  3A80               	xorlw	128
  4219  0BBA  00FF               	movwf	127
  4220  0BBB  3081               	movlw	129
  4221  0BBC  027F               	subwf	127,w
  4222  0BBD  1D03               	skipz
  4223  0BBE  2BC1               	goto	u2415
  4224  0BBF  3000               	movlw	0
  4225  0BC0  024E               	subwf	DriveDirect@VelocityLeft,w
  4226  0BC1                     u2415:	
  4227  0BC1  1C03               	skipc
  4228  0BC2  2BE4               	goto	l3696
  4229                           
  4230                           ;ser.c: 68: unsigned int data = VelocityLeft;
  4231  0BC3  1283               	bcf	3,5	;RP0=0, select bank0
  4232  0BC4  1303               	bcf	3,6	;RP1=0, select bank0
  4233  0BC5  084F               	movf	DriveDirect@VelocityLeft+1,w
  4234  0BC6  00D4               	movwf	DriveDirect@data_463+1
  4235  0BC7  084E               	movf	DriveDirect@VelocityLeft,w
  4236  0BC8  00D3               	movwf	DriveDirect@data_463
  4237                           
  4238                           ;ser.c: 69: for (LeftSpeedH = 0; data > 255; LeftSpeedH++){
  4239  0BC9  01B0               	clrf	_LeftSpeedH
  4240  0BCA  3001               	movlw	1
  4241  0BCB  0254               	subwf	DriveDirect@data_463+1,w
  4242  0BCC  3000               	movlw	0
  4243  0BCD  1903               	skipnz
  4244  0BCE  0253               	subwf	DriveDirect@data_463,w
  4245  0BCF  1C03               	btfss	3,0
  4246  0BD0  2BE4               	goto	l3696
  4247  0BD1                     l3692:	
  4248                           
  4249                           ;ser.c: 70: data = data - 256;
  4250  0BD1  0853               	movf	DriveDirect@data_463,w
  4251  0BD2  3E00               	addlw	0
  4252  0BD3  00D3               	movwf	DriveDirect@data_463
  4253  0BD4  0854               	movf	DriveDirect@data_463+1,w
  4254  0BD5  1803               	skipnc
  4255  0BD6  3E01               	addlw	1
  4256  0BD7  3EFF               	addlw	255
  4257  0BD8  00D4               	movwf	DriveDirect@data_463+1
  4258  0BD9  3001               	movlw	1
  4259  0BDA  00D0               	movwf	??_DriveDirect
  4260  0BDB  0850               	movf	??_DriveDirect,w
  4261  0BDC  07B0               	addwf	_LeftSpeedH,f
  4262  0BDD  3001               	movlw	1
  4263  0BDE  0254               	subwf	DriveDirect@data_463+1,w
  4264  0BDF  3000               	movlw	0
  4265  0BE0  1903               	skipnz
  4266  0BE1  0253               	subwf	DriveDirect@data_463,w
  4267  0BE2  1803               	skipnc
  4268  0BE3  2BD1               	goto	l3692
  4269  0BE4                     l3696:	
  4270                           
  4271                           ;ser.c: 71: }
  4272                           ;ser.c: 72: }
  4273                           ;ser.c: 73: LeftSpeedL = VelocityLeft;
  4274  0BE4  1283               	bcf	3,5	;RP0=0, select bank0
  4275  0BE5  1303               	bcf	3,6	;RP1=0, select bank0
  4276  0BE6  084E               	movf	DriveDirect@VelocityLeft,w
  4277  0BE7  00D0               	movwf	??_DriveDirect
  4278  0BE8  0850               	movf	??_DriveDirect,w
  4279  0BE9  00B1               	movwf	_LeftSpeedL
  4280                           
  4281                           ;ser.c: 76: ser_putch(145);
  4282  0BEA  3091               	movlw	145
  4283  0BEB  120A  158A  21B9  120A  158A  	fcall	_ser_putch
  4284                           
  4285                           ;ser.c: 77: ser_putch(RightSpeedH);
  4286  0BF0  1283               	bcf	3,5	;RP0=0, select bank0
  4287  0BF1  1303               	bcf	3,6	;RP1=0, select bank0
  4288  0BF2  0834               	movf	_RightSpeedH,w
  4289  0BF3  120A  158A  21B9  120A  158A  	fcall	_ser_putch
  4290                           
  4291                           ;ser.c: 78: ser_putch(RightSpeedL);
  4292  0BF8  1283               	bcf	3,5	;RP0=0, select bank0
  4293  0BF9  1303               	bcf	3,6	;RP1=0, select bank0
  4294  0BFA  0835               	movf	_RightSpeedL,w
  4295  0BFB  120A  158A  21B9  120A  158A  	fcall	_ser_putch
  4296                           
  4297                           ;ser.c: 79: ser_putch(LeftSpeedH);
  4298  0C00  1283               	bcf	3,5	;RP0=0, select bank0
  4299  0C01  1303               	bcf	3,6	;RP1=0, select bank0
  4300  0C02  0830               	movf	_LeftSpeedH,w
  4301  0C03  120A  158A  21B9  120A  158A  	fcall	_ser_putch
  4302                           
  4303                           ;ser.c: 80: ser_putch(LeftSpeedL);
  4304  0C08  1283               	bcf	3,5	;RP0=0, select bank0
  4305  0C09  1303               	bcf	3,6	;RP1=0, select bank0
  4306  0C0A  0831               	movf	_LeftSpeedL,w
  4307  0C0B  120A  158A  21B9   	fcall	_ser_putch
  4308  0C0E  0008               	return
  4309  0C0F                     __end_of_DriveDirect:	
  4310                           
  4311                           	psect	text14
  4312  09B9                     __ptext14:	
  4313 ;; *************** function _ser_putch *****************
  4314 ;; Defined at:
  4315 ;;		line 30 in file "ser.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;  c               1    wreg     unsigned char 
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;  c               1    0[BANK0 ] unsigned char 
  4320 ;; Return value:  Size  Location     Type
  4321 ;;                  1    wreg      void 
  4322 ;; Registers used:
  4323 ;;		wreg
  4324 ;; Tracked objects:
  4325 ;;		On entry : 0/0
  4326 ;;		On exit  : 0/0
  4327 ;;		Unchanged: 0/0
  4328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4329 ;;      Params:         0       0       0       0       0
  4330 ;;      Locals:         0       1       0       0       0
  4331 ;;      Temps:          0       0       0       0       0
  4332 ;;      Totals:         0       1       0       0       0
  4333 ;;Total ram usage:        1 bytes
  4334 ;; Hardware stack levels used:    1
  4335 ;; Hardware stack levels required when called:    1
  4336 ;; This function calls:
  4337 ;;		Nothing
  4338 ;; This function is called by:
  4339 ;;		_Drive1m
  4340 ;;		_main
  4341 ;;		_Drive
  4342 ;;		_DriveDirect
  4343 ;;		_getSensorData
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           
  4348                           ;psect for function _ser_putch
  4349  09B9                     _ser_putch:	
  4350                           
  4351                           ;incstack = 0
  4352                           ; Regs used in _ser_putch: [wreg]
  4353                           ;ser_putch@c stored from wreg
  4354  09B9  1283               	bcf	3,5	;RP0=0, select bank0
  4355  09BA  1303               	bcf	3,6	;RP1=0, select bank0
  4356  09BB  00CB               	movwf	ser_putch@c
  4357  09BC                     l835:	
  4358                           ;ser.c: 31: while(!TRMT);
  4359                           
  4360  09BC  1683               	bsf	3,5	;RP0=1, select bank1
  4361  09BD  1303               	bcf	3,6	;RP1=0, select bank1
  4362  09BE  1C98               	btfss	24,1	;volatile
  4363  09BF  29BC               	goto	l835
  4364                           
  4365                           ;ser.c: 32: TXREG=c;
  4366  09C0  1283               	bcf	3,5	;RP0=0, select bank0
  4367  09C1  1303               	bcf	3,6	;RP1=0, select bank0
  4368  09C2  084B               	movf	ser_putch@c,w
  4369  09C3  0099               	movwf	25	;volatile
  4370  09C4  0008               	return
  4371  09C5                     __end_of_ser_putch:	
  4372                           
  4373                           	psect	text15
  4374  0CB4                     __ptext15:	
  4375 ;; *************** function _PathTo *****************
  4376 ;; Defined at:
  4377 ;;		line 46 in file "main.c"
  4378 ;; Parameters:    Size  Location     Type
  4379 ;;  x_target        1    wreg     unsigned char 
  4380 ;;  y_target        1    5[BANK0 ] unsigned char 
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;  x_target        1   13[BANK0 ] unsigned char 
  4383 ;;  sum             1   14[BANK0 ] unsigned char 
  4384 ;;  loop            2   15[BANK0 ] int 
  4385 ;; Return value:  Size  Location     Type
  4386 ;;                  1    wreg      void 
  4387 ;; Registers used:
  4388 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4389 ;; Tracked objects:
  4390 ;;		On entry : 0/0
  4391 ;;		On exit  : 0/0
  4392 ;;		Unchanged: 0/0
  4393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4394 ;;      Params:         0       1       0       0       0
  4395 ;;      Locals:         0       4       0       0       0
  4396 ;;      Temps:          0       7       0       0       0
  4397 ;;      Totals:         0      12       0       0       0
  4398 ;;Total ram usage:       12 bytes
  4399 ;; Hardware stack levels used:    1
  4400 ;; Hardware stack levels required when called:    3
  4401 ;; This function calls:
  4402 ;;		___bmul
  4403 ;;		_lcdSetCursor
  4404 ;;		_lcdWriteString
  4405 ;; This function is called by:
  4406 ;;		_re_route
  4407 ;;		_main
  4408 ;; This function uses a non-reentrant model
  4409 ;;
  4410                           
  4411                           
  4412                           ;psect for function _PathTo
  4413  0CB4                     _PathTo:	
  4414                           
  4415                           ;incstack = 0
  4416                           ; Regs used in _PathTo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4417                           ;PathTo@x_target stored from wreg
  4418  0CB4  1283               	bcf	3,5	;RP0=0, select bank0
  4419  0CB5  1303               	bcf	3,6	;RP1=0, select bank0
  4420  0CB6  00D8               	movwf	PathTo@x_target
  4421                           
  4422                           ;main.c: 50: for (r = 0; r <= 3; r++){
  4423  0CB7  01BB               	clrf	_r
  4424  0CB8  3004               	movlw	4
  4425  0CB9  023B               	subwf	_r,w
  4426  0CBA  1803               	btfsc	3,0
  4427  0CBB  2CF9               	goto	l3888
  4428  0CBC                     l3872:	
  4429                           
  4430                           ;main.c: 51: for (c = 0; c <= 4; c++){
  4431  0CBC  01B6               	clrf	_c
  4432  0CBD  3005               	movlw	5
  4433  0CBE  0236               	subwf	_c,w
  4434  0CBF  1803               	btfsc	3,0
  4435  0CC0  2CF1               	goto	l3884
  4436  0CC1                     l3878:	
  4437                           
  4438                           ;main.c: 52: mazeGrid[r][c] = mazeGridDefault[r][c];
  4439  0CC1  3005               	movlw	5
  4440  0CC2  00D1               	movwf	??_PathTo
  4441  0CC3  0851               	movf	??_PathTo,w
  4442  0CC4  00CB               	movwf	___bmul@multiplicand
  4443  0CC5  083B               	movf	_r,w
  4444  0CC6  120A  158A  21F4  120A  158A  	fcall	___bmul
  4445  0CCB  3EB4               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  4446  0CCC  1283               	bcf	3,5	;RP0=0, select bank0
  4447  0CCD  1303               	bcf	3,6	;RP1=0, select bank0
  4448  0CCE  0736               	addwf	_c,w
  4449  0CCF  00D2               	movwf	??_PathTo+1
  4450  0CD0  0852               	movf	??_PathTo+1,w
  4451  0CD1  0084               	movwf	4
  4452  0CD2  1383               	bcf	3,7	;select IRP bank1
  4453  0CD3  0800               	movf	0,w
  4454  0CD4  00D3               	movwf	??_PathTo+2
  4455  0CD5  3005               	movlw	5
  4456  0CD6  00D4               	movwf	??_PathTo+3
  4457  0CD7  0854               	movf	??_PathTo+3,w
  4458  0CD8  00CB               	movwf	___bmul@multiplicand
  4459  0CD9  083B               	movf	_r,w
  4460  0CDA  120A  158A  21F4  120A  158A  	fcall	___bmul
  4461  0CDF  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  4462  0CE0  1283               	bcf	3,5	;RP0=0, select bank0
  4463  0CE1  1303               	bcf	3,6	;RP1=0, select bank0
  4464  0CE2  0736               	addwf	_c,w
  4465  0CE3  00D5               	movwf	??_PathTo+4
  4466  0CE4  0855               	movf	??_PathTo+4,w
  4467  0CE5  0084               	movwf	4
  4468  0CE6  0853               	movf	??_PathTo+2,w
  4469  0CE7  1383               	bcf	3,7	;select IRP bank1
  4470  0CE8  0080               	movwf	0
  4471  0CE9  3001               	movlw	1
  4472  0CEA  00D1               	movwf	??_PathTo
  4473  0CEB  0851               	movf	??_PathTo,w
  4474  0CEC  07B6               	addwf	_c,f
  4475  0CED  3005               	movlw	5
  4476  0CEE  0236               	subwf	_c,w
  4477  0CEF  1C03               	skipc
  4478  0CF0  2CC1               	goto	l3878
  4479  0CF1                     l3884:	
  4480  0CF1  3001               	movlw	1
  4481  0CF2  00D1               	movwf	??_PathTo
  4482  0CF3  0851               	movf	??_PathTo,w
  4483  0CF4  07BB               	addwf	_r,f
  4484  0CF5  3004               	movlw	4
  4485  0CF6  023B               	subwf	_r,w
  4486  0CF7  1C03               	skipc
  4487  0CF8  2CBC               	goto	l3872
  4488  0CF9                     l3888:	
  4489                           
  4490                           ;main.c: 53: }
  4491                           ;main.c: 54: }
  4492                           ;main.c: 56: pathCountShortest = 20;
  4493  0CF9  3014               	movlw	20
  4494  0CFA  00D1               	movwf	??_PathTo
  4495  0CFB  0851               	movf	??_PathTo,w
  4496  0CFC  00EA               	movwf	_pathCountShortest
  4497                           
  4498                           ;main.c: 57: for (r = 0; r <= 1; r++){
  4499  0CFD  01BB               	clrf	_r
  4500  0CFE  3002               	movlw	2
  4501  0CFF  023B               	subwf	_r,w
  4502  0D00  1803               	btfsc	3,0
  4503  0D01  2D29               	goto	l3912
  4504  0D02                     l3896:	
  4505                           
  4506                           ;main.c: 58: for (c = 0; c <= 15; c++){
  4507  0D02  01B6               	clrf	_c
  4508  0D03  3010               	movlw	16
  4509  0D04  0236               	subwf	_c,w
  4510  0D05  1803               	btfsc	3,0
  4511  0D06  2D21               	goto	l3908
  4512  0D07                     l3902:	
  4513                           
  4514                           ;main.c: 59: pathShortest[r][c] = 0;
  4515  0D07  083B               	movf	_r,w
  4516  0D08  00D1               	movwf	??_PathTo
  4517  0D09  3004               	movlw	4
  4518  0D0A                     u2675:	
  4519  0D0A  1003               	clrc
  4520  0D0B  0DD1               	rlf	??_PathTo,f
  4521  0D0C  3EFF               	addlw	-1
  4522  0D0D  1D03               	skipz
  4523  0D0E  2D0A               	goto	u2675
  4524  0D0F  30C8               	movlw	(low (_pathShortest| 0))& (0+255)
  4525  0D10  0751               	addwf	??_PathTo,w
  4526  0D11  00D2               	movwf	??_PathTo+1
  4527  0D12  0836               	movf	_c,w
  4528  0D13  0752               	addwf	??_PathTo+1,w
  4529  0D14  00D3               	movwf	??_PathTo+2
  4530  0D15  0853               	movf	??_PathTo+2,w
  4531  0D16  0084               	movwf	4
  4532  0D17  1383               	bcf	3,7	;select IRP bank1
  4533  0D18  0180               	clrf	0
  4534  0D19  3001               	movlw	1
  4535  0D1A  00D1               	movwf	??_PathTo
  4536  0D1B  0851               	movf	??_PathTo,w
  4537  0D1C  07B6               	addwf	_c,f
  4538  0D1D  3010               	movlw	16
  4539  0D1E  0236               	subwf	_c,w
  4540  0D1F  1C03               	skipc
  4541  0D20  2D07               	goto	l3902
  4542  0D21                     l3908:	
  4543  0D21  3001               	movlw	1
  4544  0D22  00D1               	movwf	??_PathTo
  4545  0D23  0851               	movf	??_PathTo,w
  4546  0D24  07BB               	addwf	_r,f
  4547  0D25  3002               	movlw	2
  4548  0D26  023B               	subwf	_r,w
  4549  0D27  1C03               	skipc
  4550  0D28  2D02               	goto	l3896
  4551  0D29                     l3912:	
  4552                           
  4553                           ;main.c: 60: }
  4554                           ;main.c: 61: }
  4555                           ;main.c: 64: x_goto = x_target;
  4556  0D29  0858               	movf	PathTo@x_target,w
  4557  0D2A  00D1               	movwf	??_PathTo
  4558  0D2B  0851               	movf	??_PathTo,w
  4559  0D2C  00C1               	movwf	_x_goto
  4560                           
  4561                           ;main.c: 65: y_goto = y_target;
  4562  0D2D  0850               	movf	PathTo@y_target,w
  4563  0D2E  00D1               	movwf	??_PathTo
  4564  0D2F  0851               	movf	??_PathTo,w
  4565  0D30  00C6               	movwf	_y_goto
  4566                           
  4567                           ;main.c: 67: x_path = x;
  4568  0D31  086B               	movf	_x,w
  4569  0D32  00D1               	movwf	??_PathTo
  4570  0D33  0851               	movf	??_PathTo,w
  4571  0D34  00C3               	movwf	_x_path
  4572                           
  4573                           ;main.c: 68: y_path = y;
  4574  0D35  0845               	movf	_y,w
  4575  0D36  00D1               	movwf	??_PathTo
  4576  0D37  0851               	movf	??_PathTo,w
  4577  0D38  00C8               	movwf	_y_path
  4578                           
  4579                           ;main.c: 69: orientation_path = orientation;
  4580  0D39  0869               	movf	_orientation,w
  4581  0D3A  00D1               	movwf	??_PathTo
  4582  0D3B  0851               	movf	??_PathTo,w
  4583  0D3C  00B9               	movwf	_orientation_path
  4584                           
  4585                           ;main.c: 71: pathCount = 0;
  4586  0D3D  01BA               	clrf	_pathCount
  4587                           
  4588                           ;main.c: 74: lcdSetCursor(0b10000000);
  4589  0D3E  3080               	movlw	128
  4590  0D3F  120A  158A  21A6  120A  158A  	fcall	_lcdSetCursor
  4591                           
  4592                           ;main.c: 75: lcdWriteString("Working...");
  4593  0D44  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  4594  0D45  120A  158A  2249  120A  158A  	fcall	_lcdWriteString
  4595                           
  4596                           ;main.c: 77: for (int loop = 0; loop <= 2000; loop++){
  4597  0D4A  1283               	bcf	3,5	;RP0=0, select bank0
  4598  0D4B  1303               	bcf	3,6	;RP1=0, select bank0
  4599  0D4C  01DA               	clrf	PathTo@loop
  4600  0D4D  01DB               	clrf	PathTo@loop+1
  4601  0D4E                     L16:	
  4602  0D4E  085B               	movf	PathTo@loop+1,w
  4603  0D4F  3A80               	xorlw	128
  4604  0D50  00FF               	movwf	127
  4605  0D51  3087               	movlw	135
  4606  0D52  027F               	subwf	127,w
  4607  0D53  1D03               	skipz
  4608  0D54  2D57               	goto	u2705
  4609  0D55  30D1               	movlw	209
  4610  0D56  025A               	subwf	PathTo@loop,w
  4611  0D57                     u2705:	
  4612  0D57  1803               	btfsc	3,0
  4613  0D58  0008               	return
  4614                           
  4615                           ;main.c: 79: reset_flag = 0;
  4616  0D59  11F0               	bcf	_reset_flag/(0+8),_reset_flag& (0+7)
  4617                           
  4618                           ;main.c: 81: path[0][pathCount] = x_path;
  4619  0D5A  1283               	bcf	3,5	;RP0=0, select bank0
  4620  0D5B  1303               	bcf	3,6	;RP1=0, select bank0
  4621  0D5C  0843               	movf	_x_path,w
  4622  0D5D  00D1               	movwf	??_PathTo
  4623  0D5E  083A               	movf	_pathCount,w
  4624  0D5F  3ED0               	addlw	(low (_path| (0+256)))& (0+255)
  4625  0D60  0084               	movwf	4
  4626  0D61  0851               	movf	??_PathTo,w
  4627  0D62  1783               	bsf	3,7	;select IRP bank3
  4628  0D63  0080               	movwf	0
  4629                           
  4630                           ;main.c: 82: path[1][pathCount] = y_path;
  4631  0D64  0848               	movf	_y_path,w
  4632  0D65  00D1               	movwf	??_PathTo
  4633  0D66  083A               	movf	_pathCount,w
  4634  0D67  3EE0               	addlw	(low ((_path| (0+256)+16)))& (0+255)
  4635  0D68  0084               	movwf	4
  4636  0D69  0851               	movf	??_PathTo,w
  4637  0D6A  0080               	movwf	0
  4638                           
  4639                           ;main.c: 87: left = gridWalls[0][(mazeGrid[y_path][x_path])];
  4640  0D6B  3005               	movlw	5
  4641  0D6C  00D1               	movwf	??_PathTo
  4642  0D6D  0851               	movf	??_PathTo,w
  4643  0D6E  00CB               	movwf	___bmul@multiplicand
  4644  0D6F  0848               	movf	_y_path,w
  4645  0D70  120A  158A  21F4  120A  158A  	fcall	___bmul
  4646  0D75  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  4647  0D76  1283               	bcf	3,5	;RP0=0, select bank0
  4648  0D77  1303               	bcf	3,6	;RP1=0, select bank0
  4649  0D78  0743               	addwf	_x_path,w
  4650  0D79  00D2               	movwf	??_PathTo+1
  4651  0D7A  0852               	movf	??_PathTo+1,w
  4652  0D7B  0084               	movwf	4
  4653  0D7C  1383               	bcf	3,7	;select IRP bank1
  4654  0D7D  0800               	movf	0,w
  4655  0D7E  3E90               	addlw	(low (_gridWalls| (0+256)))& (0+255)
  4656  0D7F  0084               	movwf	4
  4657  0D80  1170               	bcf	_left/(0+8),_left& (0+7)
  4658  0D81  1783               	bsf	3,7	;select IRP bank3
  4659  0D82  1800               	btfsc	0,0
  4660  0D83  1570               	bsf	_left/(0+8),_left& (0+7)
  4661                           
  4662                           ;main.c: 88: up = gridWalls[1][(mazeGrid[y_path][x_path])];
  4663  0D84  3005               	movlw	5
  4664  0D85  1283               	bcf	3,5	;RP0=0, select bank0
  4665  0D86  1303               	bcf	3,6	;RP1=0, select bank0
  4666  0D87  00D1               	movwf	??_PathTo
  4667  0D88  0851               	movf	??_PathTo,w
  4668  0D89  00CB               	movwf	___bmul@multiplicand
  4669  0D8A  0848               	movf	_y_path,w
  4670  0D8B  120A  158A  21F4  120A  158A  	fcall	___bmul
  4671  0D90  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  4672  0D91  1283               	bcf	3,5	;RP0=0, select bank0
  4673  0D92  1303               	bcf	3,6	;RP1=0, select bank0
  4674  0D93  0743               	addwf	_x_path,w
  4675  0D94  00D2               	movwf	??_PathTo+1
  4676  0D95  0852               	movf	??_PathTo+1,w
  4677  0D96  0084               	movwf	4
  4678  0D97  1383               	bcf	3,7	;select IRP bank1
  4679  0D98  0800               	movf	0,w
  4680  0D99  3EA0               	addlw	(low ((_gridWalls| (0+256)+16)))& (0+255)
  4681  0D9A  0084               	movwf	4
  4682  0D9B  1370               	bcf	_up/(0+8),_up& (0+7)
  4683  0D9C  1783               	bsf	3,7	;select IRP bank3
  4684  0D9D  1800               	btfsc	0,0
  4685  0D9E  1770               	bsf	_up/(0+8),_up& (0+7)
  4686                           
  4687                           ;main.c: 89: right = gridWalls[2][(mazeGrid[y_path][x_path])];
  4688  0D9F  3005               	movlw	5
  4689  0DA0  1283               	bcf	3,5	;RP0=0, select bank0
  4690  0DA1  1303               	bcf	3,6	;RP1=0, select bank0
  4691  0DA2  00D1               	movwf	??_PathTo
  4692  0DA3  0851               	movf	??_PathTo,w
  4693  0DA4  00CB               	movwf	___bmul@multiplicand
  4694  0DA5  0848               	movf	_y_path,w
  4695  0DA6  120A  158A  21F4  120A  158A  	fcall	___bmul
  4696  0DAB  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  4697  0DAC  1283               	bcf	3,5	;RP0=0, select bank0
  4698  0DAD  1303               	bcf	3,6	;RP1=0, select bank0
  4699  0DAE  0743               	addwf	_x_path,w
  4700  0DAF  00D2               	movwf	??_PathTo+1
  4701  0DB0  0852               	movf	??_PathTo+1,w
  4702  0DB1  0084               	movwf	4
  4703  0DB2  1383               	bcf	3,7	;select IRP bank1
  4704  0DB3  0800               	movf	0,w
  4705  0DB4  3EB0               	addlw	(low ((_gridWalls| (0+256)+32)))& (0+255)
  4706  0DB5  0084               	movwf	4
  4707  0DB6  1270               	bcf	_right/(0+8),_right& (0+7)
  4708  0DB7  1783               	bsf	3,7	;select IRP bank3
  4709  0DB8  1800               	btfsc	0,0
  4710  0DB9  1670               	bsf	_right/(0+8),_right& (0+7)
  4711                           
  4712                           ;main.c: 90: down = gridWalls[3][(mazeGrid[y_path][x_path])];
  4713  0DBA  3005               	movlw	5
  4714  0DBB  1283               	bcf	3,5	;RP0=0, select bank0
  4715  0DBC  1303               	bcf	3,6	;RP1=0, select bank0
  4716  0DBD  00D1               	movwf	??_PathTo
  4717  0DBE  0851               	movf	??_PathTo,w
  4718  0DBF  00CB               	movwf	___bmul@multiplicand
  4719  0DC0  0848               	movf	_y_path,w
  4720  0DC1  120A  158A  21F4  120A  158A  	fcall	___bmul
  4721  0DC6  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  4722  0DC7  1283               	bcf	3,5	;RP0=0, select bank0
  4723  0DC8  1303               	bcf	3,6	;RP1=0, select bank0
  4724  0DC9  0743               	addwf	_x_path,w
  4725  0DCA  00D2               	movwf	??_PathTo+1
  4726  0DCB  0852               	movf	??_PathTo+1,w
  4727  0DCC  0084               	movwf	4
  4728  0DCD  1383               	bcf	3,7	;select IRP bank1
  4729  0DCE  0800               	movf	0,w
  4730  0DCF  3EC0               	addlw	(low ((_gridWalls| (0+256)+48)))& (0+255)
  4731  0DD0  0084               	movwf	4
  4732  0DD1  10F0               	bcf	_down/(0+8),_down& (0+7)
  4733  0DD2  1783               	bsf	3,7	;select IRP bank3
  4734  0DD3  1800               	btfsc	0,0
  4735  0DD4  14F0               	bsf	_down/(0+8),_down& (0+7)
  4736                           
  4737                           ;main.c: 94: if (pathCount != 0){
  4738  0DD5  1283               	bcf	3,5	;RP0=0, select bank0
  4739  0DD6  1303               	bcf	3,6	;RP1=0, select bank0
  4740  0DD7  083A               	movf	_pathCount,w
  4741  0DD8  1D03               	btfss	3,2
  4742  0DD9  2DE3               	goto	l3942
  4743  0DDA  2DF1               	goto	l3944
  4744  0DDB                     l182:	
  4745                           ;main.c: 96: case 0: down = 1;
  4746                           
  4747                           ;main.c: 95: switch(orientation_path){
  4748                           
  4749  0DDB  14F0               	bsf	_down/(0+8),_down& (0+7)
  4750                           
  4751                           ;main.c: 97: break;
  4752  0DDC  2DF1               	goto	l3944
  4753  0DDD                     l184:	
  4754                           ;main.c: 98: case 1: left = 1;
  4755                           
  4756  0DDD  1570               	bsf	_left/(0+8),_left& (0+7)
  4757                           
  4758                           ;main.c: 99: break;
  4759  0DDE  2DF1               	goto	l3944
  4760  0DDF                     l185:	
  4761                           ;main.c: 100: case 2: up = 1;
  4762                           
  4763  0DDF  1770               	bsf	_up/(0+8),_up& (0+7)
  4764                           
  4765                           ;main.c: 101: break;
  4766  0DE0  2DF1               	goto	l3944
  4767  0DE1                     l186:	
  4768                           ;main.c: 102: case 3: right = 1;
  4769                           
  4770  0DE1  1670               	bsf	_right/(0+8),_right& (0+7)
  4771                           
  4772                           ;main.c: 104: }
  4773                           
  4774                           ;main.c: 103: break;
  4775  0DE2  2DF1               	goto	l3944
  4776  0DE3                     l3942:	
  4777  0DE3  0839               	movf	_orientation_path,w
  4778                           
  4779                           ; Switch size 1, requested type "space"
  4780                           ; Number of cases is 4, Range of values is 0 to 3
  4781                           ; switch strategies available:
  4782                           ; Name         Instructions Cycles
  4783                           ; simple_byte           13     7 (average)
  4784                           ; direct_byte           20     8 (fixed)
  4785                           ; jumptable            260     6 (fixed)
  4786                           ;	Chosen strategy is simple_byte
  4787  0DE4  3A00               	xorlw	0	; case 0
  4788  0DE5  1903               	skipnz
  4789  0DE6  2DDB               	goto	l182
  4790  0DE7  3A01               	xorlw	1	; case 1
  4791  0DE8  1903               	skipnz
  4792  0DE9  2DDD               	goto	l184
  4793  0DEA  3A03               	xorlw	3	; case 2
  4794  0DEB  1903               	skipnz
  4795  0DEC  2DDF               	goto	l185
  4796  0DED  3A01               	xorlw	1	; case 3
  4797  0DEE  1903               	skipnz
  4798  0DEF  2DE1               	goto	l186
  4799  0DF0  2DF1               	goto	l3944
  4800  0DF1                     l3944:	
  4801                           
  4802                           ;main.c: 105: }
  4803                           ;main.c: 109: char sum = (left + up + down + right);
  4804  0DF1  3000               	movlw	0
  4805  0DF2  1970               	btfsc	_left/(0+8),_left& (0+7)
  4806  0DF3  3001               	movlw	1
  4807  0DF4  1B70               	btfsc	_up/(0+8),_up& (0+7)
  4808  0DF5  3E01               	addlw	1
  4809  0DF6  18F0               	btfsc	_down/(0+8),_down& (0+7)
  4810  0DF7  3E01               	addlw	1
  4811  0DF8  1A70               	btfsc	_right/(0+8),_right& (0+7)
  4812  0DF9  3E01               	addlw	1
  4813  0DFA  00D1               	movwf	??_PathTo
  4814  0DFB  0851               	movf	??_PathTo,w
  4815  0DFC  00D9               	movwf	PathTo@sum
  4816                           
  4817                           ;main.c: 110: if(sum <= 2){
  4818  0DFD  3003               	movlw	3
  4819  0DFE  0259               	subwf	PathTo@sum,w
  4820  0DFF  1803               	skipnc
  4821  0E00  2E1C               	goto	l187
  4822                           
  4823                           ;main.c: 111: x_int = x_path;
  4824  0E01  0843               	movf	_x_path,w
  4825  0E02  00D1               	movwf	??_PathTo
  4826  0E03  0851               	movf	??_PathTo,w
  4827  0E04  00C2               	movwf	_x_int
  4828                           
  4829                           ;main.c: 112: y_int = y_path;
  4830  0E05  0848               	movf	_y_path,w
  4831  0E06  00D1               	movwf	??_PathTo
  4832  0E07  0851               	movf	??_PathTo,w
  4833  0E08  00C7               	movwf	_y_int
  4834                           
  4835                           ;main.c: 118: if (left == 0)
  4836  0E09  1970               	btfsc	_left/(0+8),_left& (0+7)
  4837  0E0A  2E0D               	goto	l188
  4838                           
  4839                           ;main.c: 119: intersection_orientation = 3;
  4840  0E0B  3003               	movlw	3
  4841  0E0C  2E19               	goto	L5
  4842  0E0D                     l188:	
  4843                           
  4844                           ;main.c: 120: else if (up == 0)
  4845  0E0D  1B70               	btfsc	_up/(0+8),_up& (0+7)
  4846  0E0E  2E11               	goto	l190
  4847                           
  4848                           ;main.c: 121: intersection_orientation = 0;
  4849  0E0F  01B7               	clrf	_intersection_orientation
  4850  0E10  2E1C               	goto	l187
  4851  0E11                     l190:	
  4852                           
  4853                           ;main.c: 122: else if (right == 0)
  4854  0E11  1A70               	btfsc	_right/(0+8),_right& (0+7)
  4855  0E12  2E16               	goto	l192
  4856                           
  4857                           ;main.c: 123: intersection_orientation = 1;
  4858  0E13  01B7               	clrf	_intersection_orientation
  4859  0E14  0AB7               	incf	_intersection_orientation,f
  4860  0E15  2E1C               	goto	l187
  4861  0E16                     l192:	
  4862                           
  4863                           ;main.c: 124: else if (down == 0)
  4864  0E16  18F0               	btfsc	_down/(0+8),_down& (0+7)
  4865  0E17  2E1C               	goto	l187
  4866                           
  4867                           ;main.c: 125: intersection_orientation = 2;
  4868  0E18  3002               	movlw	2
  4869  0E19                     L5:	
  4870  0E19  00D1               	movwf	??_PathTo
  4871  0E1A  0851               	movf	??_PathTo,w
  4872  0E1B  00B7               	movwf	_intersection_orientation
  4873  0E1C                     l187:	
  4874                           
  4875                           ;main.c: 126: }
  4876                           ;main.c: 133: if ((x_path == x_target)){
  4877  0E1C  0843               	movf	_x_path,w
  4878  0E1D  0658               	xorwf	PathTo@x_target,w
  4879  0E1E  1D03               	skipz
  4880  0E1F  2F1A               	goto	l4024
  4881                           
  4882                           ;main.c: 134: if (y_path == y_target){
  4883  0E20  0848               	movf	_y_path,w
  4884  0E21  0650               	xorwf	PathTo@y_target,w
  4885  0E22  1D03               	skipz
  4886  0E23  2F1A               	goto	l4024
  4887                           
  4888                           ;main.c: 138: if(pathCount < pathCountShortest){
  4889  0E24  086A               	movf	_pathCountShortest,w
  4890  0E25  023A               	subwf	_pathCount,w
  4891  0E26  1803               	skipnc
  4892  0E27  2ED2               	goto	l3996
  4893                           
  4894                           ;main.c: 139: pathCountShortest = pathCount;
  4895  0E28  083A               	movf	_pathCount,w
  4896  0E29  00D1               	movwf	??_PathTo
  4897  0E2A  0851               	movf	??_PathTo,w
  4898  0E2B  00EA               	movwf	_pathCountShortest
  4899                           
  4900                           ;main.c: 140: for (r = 0; r <= 1; r++){
  4901  0E2C  01BB               	clrf	_r
  4902  0E2D                     L13:	
  4903  0E2D  3002               	movlw	2
  4904  0E2E  023B               	subwf	_r,w
  4905  0E2F  1803               	btfsc	3,0
  4906  0E30  2ED2               	goto	l3996
  4907                           
  4908                           ;main.c: 141: for (c = 0; c <= 15; c++){
  4909  0E31  01B6               	clrf	_c
  4910  0E32  3010               	movlw	16
  4911  0E33  0236               	subwf	_c,w
  4912  0E34  1803               	btfsc	3,0
  4913  0E35  2E64               	goto	l3982
  4914  0E36                     l3976:	
  4915                           
  4916                           ;main.c: 142: pathShortest[r][c] = path[r][c];
  4917  0E36  083B               	movf	_r,w
  4918  0E37  00D1               	movwf	??_PathTo
  4919  0E38  3004               	movlw	4
  4920  0E39                     u2865:	
  4921  0E39  1003               	clrc
  4922  0E3A  0DD1               	rlf	??_PathTo,f
  4923  0E3B  3EFF               	addlw	-1
  4924  0E3C  1D03               	skipz
  4925  0E3D  2E39               	goto	u2865
  4926  0E3E  30D0               	movlw	(low (_path| (0+256)))& (0+255)
  4927  0E3F  0751               	addwf	??_PathTo,w
  4928  0E40  00D2               	movwf	??_PathTo+1
  4929  0E41  0836               	movf	_c,w
  4930  0E42  0752               	addwf	??_PathTo+1,w
  4931  0E43  00D3               	movwf	??_PathTo+2
  4932  0E44  0853               	movf	??_PathTo+2,w
  4933  0E45  0084               	movwf	4
  4934  0E46  1783               	bsf	3,7	;select IRP bank3
  4935  0E47  0800               	movf	0,w
  4936  0E48  00D4               	movwf	??_PathTo+3
  4937  0E49  083B               	movf	_r,w
  4938  0E4A  00D5               	movwf	??_PathTo+4
  4939  0E4B  3004               	movlw	4
  4940  0E4C                     u2875:	
  4941  0E4C  1003               	clrc
  4942  0E4D  0DD5               	rlf	??_PathTo+4,f
  4943  0E4E  3EFF               	addlw	-1
  4944  0E4F  1D03               	skipz
  4945  0E50  2E4C               	goto	u2875
  4946  0E51  30C8               	movlw	(low (_pathShortest| 0))& (0+255)
  4947  0E52  0755               	addwf	??_PathTo+4,w
  4948  0E53  00D6               	movwf	??_PathTo+5
  4949  0E54  0836               	movf	_c,w
  4950  0E55  0756               	addwf	??_PathTo+5,w
  4951  0E56  00D7               	movwf	??_PathTo+6
  4952  0E57  0857               	movf	??_PathTo+6,w
  4953  0E58  0084               	movwf	4
  4954  0E59  0854               	movf	??_PathTo+3,w
  4955  0E5A  1383               	bcf	3,7	;select IRP bank1
  4956  0E5B  0080               	movwf	0
  4957  0E5C  3001               	movlw	1
  4958  0E5D  00D1               	movwf	??_PathTo
  4959  0E5E  0851               	movf	??_PathTo,w
  4960  0E5F  07B6               	addwf	_c,f
  4961  0E60  3010               	movlw	16
  4962  0E61  0236               	subwf	_c,w
  4963  0E62  1C03               	skipc
  4964  0E63  2E36               	goto	l3976
  4965  0E64                     l3982:	
  4966  0E64  3001               	movlw	1
  4967  0E65  00D1               	movwf	??_PathTo
  4968  0E66  0851               	movf	??_PathTo,w
  4969  0E67  07BB               	addwf	_r,f
  4970  0E68  2E2D               	goto	L13
  4971  0E69                     l3986:	
  4972                           ;main.c: 152: case 0: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 4);
  4973                           
  4974                           ;main.c: 143: }
  4975                           ;main.c: 144: }
  4976                           ;main.c: 145: }
  4977                           ;main.c: 151: switch(intersection_orientation){
  4978                           
  4979  0E69  3005               	movlw	5
  4980  0E6A  00D1               	movwf	??_PathTo
  4981  0E6B  0851               	movf	??_PathTo,w
  4982  0E6C  00CB               	movwf	___bmul@multiplicand
  4983  0E6D  0847               	movf	_y_int,w
  4984  0E6E  120A  158A  21F4  120A  158A  	fcall	___bmul
  4985  0E73  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  4986  0E74  1283               	bcf	3,5	;RP0=0, select bank0
  4987  0E75  1303               	bcf	3,6	;RP1=0, select bank0
  4988  0E76  0742               	addwf	_x_int,w
  4989  0E77  00D2               	movwf	??_PathTo+1
  4990  0E78  0852               	movf	??_PathTo+1,w
  4991  0E79  0084               	movwf	4
  4992  0E7A  1383               	bcf	3,7	;select IRP bank1
  4993  0E7B  0800               	movf	0,w
  4994  0E7C  3E04               	addlw	4
  4995  0E7D  2EBC               	goto	L14
  4996  0E7E                     l3988:	
  4997                           ;main.c: 154: case 1: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 2);
  4998                           
  4999                           ;main.c: 153: break;
  5000                           
  5001  0E7E  3005               	movlw	5
  5002  0E7F  00D1               	movwf	??_PathTo
  5003  0E80  0851               	movf	??_PathTo,w
  5004  0E81  00CB               	movwf	___bmul@multiplicand
  5005  0E82  0847               	movf	_y_int,w
  5006  0E83  120A  158A  21F4  120A  158A  	fcall	___bmul
  5007  0E88  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5008  0E89  1283               	bcf	3,5	;RP0=0, select bank0
  5009  0E8A  1303               	bcf	3,6	;RP1=0, select bank0
  5010  0E8B  0742               	addwf	_x_int,w
  5011  0E8C  00D2               	movwf	??_PathTo+1
  5012  0E8D  0852               	movf	??_PathTo+1,w
  5013  0E8E  0084               	movwf	4
  5014  0E8F  1383               	bcf	3,7	;select IRP bank1
  5015  0E90  0800               	movf	0,w
  5016  0E91  3E02               	addlw	2
  5017  0E92  2EBC               	goto	L14
  5018  0E93                     l3990:	
  5019                           ;main.c: 156: case 2: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 1);
  5020                           
  5021                           ;main.c: 155: break;
  5022                           
  5023  0E93  3005               	movlw	5
  5024  0E94  00D1               	movwf	??_PathTo
  5025  0E95  0851               	movf	??_PathTo,w
  5026  0E96  00CB               	movwf	___bmul@multiplicand
  5027  0E97  0847               	movf	_y_int,w
  5028  0E98  120A  158A  21F4  120A  158A  	fcall	___bmul
  5029  0E9D  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5030  0E9E  1283               	bcf	3,5	;RP0=0, select bank0
  5031  0E9F  1303               	bcf	3,6	;RP1=0, select bank0
  5032  0EA0  0742               	addwf	_x_int,w
  5033  0EA1  00D2               	movwf	??_PathTo+1
  5034  0EA2  0852               	movf	??_PathTo+1,w
  5035  0EA3  0084               	movwf	4
  5036  0EA4  1383               	bcf	3,7	;select IRP bank1
  5037  0EA5  0800               	movf	0,w
  5038  0EA6  3E01               	addlw	1
  5039  0EA7  2EBC               	goto	L14
  5040  0EA8                     l3992:	
  5041                           ;main.c: 158: case 3: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 8);
  5042                           
  5043                           ;main.c: 157: break;
  5044                           
  5045  0EA8  3005               	movlw	5
  5046  0EA9  00D1               	movwf	??_PathTo
  5047  0EAA  0851               	movf	??_PathTo,w
  5048  0EAB  00CB               	movwf	___bmul@multiplicand
  5049  0EAC  0847               	movf	_y_int,w
  5050  0EAD  120A  158A  21F4  120A  158A  	fcall	___bmul
  5051  0EB2  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5052  0EB3  1283               	bcf	3,5	;RP0=0, select bank0
  5053  0EB4  1303               	bcf	3,6	;RP1=0, select bank0
  5054  0EB5  0742               	addwf	_x_int,w
  5055  0EB6  00D2               	movwf	??_PathTo+1
  5056  0EB7  0852               	movf	??_PathTo+1,w
  5057  0EB8  0084               	movwf	4
  5058  0EB9  1383               	bcf	3,7	;select IRP bank1
  5059  0EBA  0800               	movf	0,w
  5060  0EBB  3E08               	addlw	8
  5061  0EBC                     L14:	
  5062  0EBC  00D3               	movwf	??_PathTo+2
  5063  0EBD  3005               	movlw	5
  5064  0EBE  00D4               	movwf	??_PathTo+3
  5065  0EBF  0854               	movf	??_PathTo+3,w
  5066  0EC0  00CB               	movwf	___bmul@multiplicand
  5067  0EC1  0847               	movf	_y_int,w
  5068  0EC2  120A  158A  21F4  120A  158A  	fcall	___bmul
  5069  0EC7  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5070  0EC8  1283               	bcf	3,5	;RP0=0, select bank0
  5071  0EC9  1303               	bcf	3,6	;RP1=0, select bank0
  5072  0ECA  0742               	addwf	_x_int,w
  5073  0ECB  00D5               	movwf	??_PathTo+4
  5074  0ECC  0855               	movf	??_PathTo+4,w
  5075  0ECD  0084               	movwf	4
  5076  0ECE  0853               	movf	??_PathTo+2,w
  5077  0ECF  1383               	bcf	3,7	;select IRP bank1
  5078  0ED0  0080               	movwf	0
  5079                           
  5080                           ;main.c: 160: }
  5081                           
  5082                           ;main.c: 159: break;
  5083  0ED1  2EE0               	goto	l3998
  5084  0ED2                     l3996:	
  5085  0ED2  0837               	movf	_intersection_orientation,w
  5086                           
  5087                           ; Switch size 1, requested type "space"
  5088                           ; Number of cases is 4, Range of values is 0 to 3
  5089                           ; switch strategies available:
  5090                           ; Name         Instructions Cycles
  5091                           ; simple_byte           13     7 (average)
  5092                           ; direct_byte           20     8 (fixed)
  5093                           ; jumptable            260     6 (fixed)
  5094                           ;	Chosen strategy is simple_byte
  5095  0ED3  3A00               	xorlw	0	; case 0
  5096  0ED4  1903               	skipnz
  5097  0ED5  2E69               	goto	l3986
  5098  0ED6  3A01               	xorlw	1	; case 1
  5099  0ED7  1903               	skipnz
  5100  0ED8  2E7E               	goto	l3988
  5101  0ED9  3A03               	xorlw	3	; case 2
  5102  0EDA  1903               	skipnz
  5103  0EDB  2E93               	goto	l3990
  5104  0EDC  3A01               	xorlw	1	; case 3
  5105  0EDD  1903               	skipnz
  5106  0EDE  2EA8               	goto	l3992
  5107  0EDF  2EE0               	goto	l3998
  5108  0EE0                     l3998:	
  5109                           
  5110                           ;main.c: 163: x_path = x;
  5111  0EE0  086B               	movf	_x,w
  5112  0EE1  00D1               	movwf	??_PathTo
  5113  0EE2  0851               	movf	??_PathTo,w
  5114  0EE3  00C3               	movwf	_x_path
  5115                           
  5116                           ;main.c: 164: y_path = y;
  5117  0EE4  0845               	movf	_y,w
  5118  0EE5  00D1               	movwf	??_PathTo
  5119  0EE6  0851               	movf	??_PathTo,w
  5120  0EE7  00C8               	movwf	_y_path
  5121                           
  5122                           ;main.c: 165: orientation_path = orientation;
  5123  0EE8  0869               	movf	_orientation,w
  5124  0EE9  00D1               	movwf	??_PathTo
  5125  0EEA  0851               	movf	??_PathTo,w
  5126  0EEB  00B9               	movwf	_orientation_path
  5127                           
  5128                           ;main.c: 166: pathCount = 0;
  5129  0EEC  01BA               	clrf	_pathCount
  5130                           
  5131                           ;main.c: 167: reset_flag = 1;
  5132  0EED  15F0               	bsf	_reset_flag/(0+8),_reset_flag& (0+7)
  5133                           
  5134                           ;main.c: 170: for (r = 0; r <= 1; r++){
  5135  0EEE  01BB               	clrf	_r
  5136  0EEF  3002               	movlw	2
  5137  0EF0  023B               	subwf	_r,w
  5138  0EF1  1803               	btfsc	3,0
  5139  0EF2  2F1A               	goto	l4024
  5140  0EF3                     l4008:	
  5141                           
  5142                           ;main.c: 171: for (c = 0; c <= 15; c++){
  5143  0EF3  01B6               	clrf	_c
  5144  0EF4  3010               	movlw	16
  5145  0EF5  0236               	subwf	_c,w
  5146  0EF6  1803               	btfsc	3,0
  5147  0EF7  2F12               	goto	l4020
  5148  0EF8                     l4014:	
  5149                           
  5150                           ;main.c: 172: path[r][c] = 0;
  5151  0EF8  083B               	movf	_r,w
  5152  0EF9  00D1               	movwf	??_PathTo
  5153  0EFA  3004               	movlw	4
  5154  0EFB                     u2925:	
  5155  0EFB  1003               	clrc
  5156  0EFC  0DD1               	rlf	??_PathTo,f
  5157  0EFD  3EFF               	addlw	-1
  5158  0EFE  1D03               	skipz
  5159  0EFF  2EFB               	goto	u2925
  5160  0F00  30D0               	movlw	(low (_path| (0+256)))& (0+255)
  5161  0F01  0751               	addwf	??_PathTo,w
  5162  0F02  00D2               	movwf	??_PathTo+1
  5163  0F03  0836               	movf	_c,w
  5164  0F04  0752               	addwf	??_PathTo+1,w
  5165  0F05  00D3               	movwf	??_PathTo+2
  5166  0F06  0853               	movf	??_PathTo+2,w
  5167  0F07  0084               	movwf	4
  5168  0F08  1783               	bsf	3,7	;select IRP bank3
  5169  0F09  0180               	clrf	0
  5170  0F0A  3001               	movlw	1
  5171  0F0B  00D1               	movwf	??_PathTo
  5172  0F0C  0851               	movf	??_PathTo,w
  5173  0F0D  07B6               	addwf	_c,f
  5174  0F0E  3010               	movlw	16
  5175  0F0F  0236               	subwf	_c,w
  5176  0F10  1C03               	skipc
  5177  0F11  2EF8               	goto	l4014
  5178  0F12                     l4020:	
  5179  0F12  3001               	movlw	1
  5180  0F13  00D1               	movwf	??_PathTo
  5181  0F14  0851               	movf	??_PathTo,w
  5182  0F15  07BB               	addwf	_r,f
  5183  0F16  3002               	movlw	2
  5184  0F17  023B               	subwf	_r,w
  5185  0F18  1C03               	skipc
  5186  0F19  2EF3               	goto	l4008
  5187  0F1A                     l4024:	
  5188                           
  5189                           ;main.c: 173: }
  5190                           ;main.c: 174: }
  5191                           ;main.c: 175: }
  5192                           ;main.c: 176: }
  5193                           ;main.c: 182: if((sum == 4) || (pathCount >= 15)){
  5194  0F1A  3004               	movlw	4
  5195  0F1B  0659               	xorwf	PathTo@sum,w
  5196  0F1C  1903               	btfsc	3,2
  5197  0F1D  2F8C               	goto	l4038
  5198  0F1E  300F               	movlw	15
  5199  0F1F  023A               	subwf	_pathCount,w
  5200  0F20  1803               	btfsc	3,0
  5201  0F21  2F8C               	goto	l4038
  5202  0F22  2FD4               	goto	l212
  5203  0F23                     l4028:	
  5204                           ;main.c: 186: case 0: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 4);
  5205                           
  5206                           ;main.c: 185: switch(intersection_orientation){
  5207                           
  5208  0F23  3005               	movlw	5
  5209  0F24  00D1               	movwf	??_PathTo
  5210  0F25  0851               	movf	??_PathTo,w
  5211  0F26  00CB               	movwf	___bmul@multiplicand
  5212  0F27  0847               	movf	_y_int,w
  5213  0F28  120A  158A  21F4  120A  158A  	fcall	___bmul
  5214  0F2D  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5215  0F2E  1283               	bcf	3,5	;RP0=0, select bank0
  5216  0F2F  1303               	bcf	3,6	;RP1=0, select bank0
  5217  0F30  0742               	addwf	_x_int,w
  5218  0F31  00D2               	movwf	??_PathTo+1
  5219  0F32  0852               	movf	??_PathTo+1,w
  5220  0F33  0084               	movwf	4
  5221  0F34  1383               	bcf	3,7	;select IRP bank1
  5222  0F35  0800               	movf	0,w
  5223  0F36  3E04               	addlw	4
  5224  0F37  2F76               	goto	L15
  5225  0F38                     l4030:	
  5226                           ;main.c: 188: case 1: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 2);
  5227                           
  5228                           ;main.c: 187: break;
  5229                           
  5230  0F38  3005               	movlw	5
  5231  0F39  00D1               	movwf	??_PathTo
  5232  0F3A  0851               	movf	??_PathTo,w
  5233  0F3B  00CB               	movwf	___bmul@multiplicand
  5234  0F3C  0847               	movf	_y_int,w
  5235  0F3D  120A  158A  21F4  120A  158A  	fcall	___bmul
  5236  0F42  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5237  0F43  1283               	bcf	3,5	;RP0=0, select bank0
  5238  0F44  1303               	bcf	3,6	;RP1=0, select bank0
  5239  0F45  0742               	addwf	_x_int,w
  5240  0F46  00D2               	movwf	??_PathTo+1
  5241  0F47  0852               	movf	??_PathTo+1,w
  5242  0F48  0084               	movwf	4
  5243  0F49  1383               	bcf	3,7	;select IRP bank1
  5244  0F4A  0800               	movf	0,w
  5245  0F4B  3E02               	addlw	2
  5246  0F4C  2F76               	goto	L15
  5247  0F4D                     l4032:	
  5248                           ;main.c: 190: case 2: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 1);
  5249                           
  5250                           ;main.c: 189: break;
  5251                           
  5252  0F4D  3005               	movlw	5
  5253  0F4E  00D1               	movwf	??_PathTo
  5254  0F4F  0851               	movf	??_PathTo,w
  5255  0F50  00CB               	movwf	___bmul@multiplicand
  5256  0F51  0847               	movf	_y_int,w
  5257  0F52  120A  158A  21F4  120A  158A  	fcall	___bmul
  5258  0F57  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5259  0F58  1283               	bcf	3,5	;RP0=0, select bank0
  5260  0F59  1303               	bcf	3,6	;RP1=0, select bank0
  5261  0F5A  0742               	addwf	_x_int,w
  5262  0F5B  00D2               	movwf	??_PathTo+1
  5263  0F5C  0852               	movf	??_PathTo+1,w
  5264  0F5D  0084               	movwf	4
  5265  0F5E  1383               	bcf	3,7	;select IRP bank1
  5266  0F5F  0800               	movf	0,w
  5267  0F60  3E01               	addlw	1
  5268  0F61  2F76               	goto	L15
  5269  0F62                     l4034:	
  5270                           ;main.c: 192: case 3: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 8);
  5271                           
  5272                           ;main.c: 191: break;
  5273                           
  5274  0F62  3005               	movlw	5
  5275  0F63  00D1               	movwf	??_PathTo
  5276  0F64  0851               	movf	??_PathTo,w
  5277  0F65  00CB               	movwf	___bmul@multiplicand
  5278  0F66  0847               	movf	_y_int,w
  5279  0F67  120A  158A  21F4  120A  158A  	fcall	___bmul
  5280  0F6C  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5281  0F6D  1283               	bcf	3,5	;RP0=0, select bank0
  5282  0F6E  1303               	bcf	3,6	;RP1=0, select bank0
  5283  0F6F  0742               	addwf	_x_int,w
  5284  0F70  00D2               	movwf	??_PathTo+1
  5285  0F71  0852               	movf	??_PathTo+1,w
  5286  0F72  0084               	movwf	4
  5287  0F73  1383               	bcf	3,7	;select IRP bank1
  5288  0F74  0800               	movf	0,w
  5289  0F75  3E08               	addlw	8
  5290  0F76                     L15:	
  5291  0F76  00D3               	movwf	??_PathTo+2
  5292  0F77  3005               	movlw	5
  5293  0F78  00D4               	movwf	??_PathTo+3
  5294  0F79  0854               	movf	??_PathTo+3,w
  5295  0F7A  00CB               	movwf	___bmul@multiplicand
  5296  0F7B  0847               	movf	_y_int,w
  5297  0F7C  120A  158A  21F4  120A  158A  	fcall	___bmul
  5298  0F81  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5299  0F82  1283               	bcf	3,5	;RP0=0, select bank0
  5300  0F83  1303               	bcf	3,6	;RP1=0, select bank0
  5301  0F84  0742               	addwf	_x_int,w
  5302  0F85  00D5               	movwf	??_PathTo+4
  5303  0F86  0855               	movf	??_PathTo+4,w
  5304  0F87  0084               	movwf	4
  5305  0F88  0853               	movf	??_PathTo+2,w
  5306  0F89  1383               	bcf	3,7	;select IRP bank1
  5307  0F8A  0080               	movwf	0
  5308                           
  5309                           ;main.c: 194: }
  5310                           
  5311                           ;main.c: 193: break;
  5312  0F8B  2F9A               	goto	l4040
  5313  0F8C                     l4038:	
  5314  0F8C  0837               	movf	_intersection_orientation,w
  5315                           
  5316                           ; Switch size 1, requested type "space"
  5317                           ; Number of cases is 4, Range of values is 0 to 3
  5318                           ; switch strategies available:
  5319                           ; Name         Instructions Cycles
  5320                           ; simple_byte           13     7 (average)
  5321                           ; direct_byte           20     8 (fixed)
  5322                           ; jumptable            260     6 (fixed)
  5323                           ;	Chosen strategy is simple_byte
  5324  0F8D  3A00               	xorlw	0	; case 0
  5325  0F8E  1903               	skipnz
  5326  0F8F  2F23               	goto	l4028
  5327  0F90  3A01               	xorlw	1	; case 1
  5328  0F91  1903               	skipnz
  5329  0F92  2F38               	goto	l4030
  5330  0F93  3A03               	xorlw	3	; case 2
  5331  0F94  1903               	skipnz
  5332  0F95  2F4D               	goto	l4032
  5333  0F96  3A01               	xorlw	1	; case 3
  5334  0F97  1903               	skipnz
  5335  0F98  2F62               	goto	l4034
  5336  0F99  2F9A               	goto	l4040
  5337  0F9A                     l4040:	
  5338                           
  5339                           ;main.c: 197: x_path = x;
  5340  0F9A  086B               	movf	_x,w
  5341  0F9B  00D1               	movwf	??_PathTo
  5342  0F9C  0851               	movf	??_PathTo,w
  5343  0F9D  00C3               	movwf	_x_path
  5344                           
  5345                           ;main.c: 198: y_path = y;
  5346  0F9E  0845               	movf	_y,w
  5347  0F9F  00D1               	movwf	??_PathTo
  5348  0FA0  0851               	movf	??_PathTo,w
  5349  0FA1  00C8               	movwf	_y_path
  5350                           
  5351                           ;main.c: 199: orientation_path = orientation;
  5352  0FA2  0869               	movf	_orientation,w
  5353  0FA3  00D1               	movwf	??_PathTo
  5354  0FA4  0851               	movf	??_PathTo,w
  5355  0FA5  00B9               	movwf	_orientation_path
  5356                           
  5357                           ;main.c: 200: pathCount = 0;
  5358  0FA6  01BA               	clrf	_pathCount
  5359                           
  5360                           ;main.c: 201: reset_flag = 1;
  5361  0FA7  15F0               	bsf	_reset_flag/(0+8),_reset_flag& (0+7)
  5362                           
  5363                           ;main.c: 203: for (r = 0; r <= 1; r++){
  5364  0FA8  01BB               	clrf	_r
  5365  0FA9  3002               	movlw	2
  5366  0FAA  023B               	subwf	_r,w
  5367  0FAB  1803               	btfsc	3,0
  5368  0FAC  2FD4               	goto	l212
  5369  0FAD                     l4050:	
  5370                           
  5371                           ;main.c: 204: for (c = 0; c <= 15; c++){
  5372  0FAD  01B6               	clrf	_c
  5373  0FAE  3010               	movlw	16
  5374  0FAF  0236               	subwf	_c,w
  5375  0FB0  1803               	btfsc	3,0
  5376  0FB1  2FCC               	goto	l4062
  5377  0FB2                     l4056:	
  5378                           
  5379                           ;main.c: 205: path[r][c] = 0;
  5380  0FB2  083B               	movf	_r,w
  5381  0FB3  00D1               	movwf	??_PathTo
  5382  0FB4  3004               	movlw	4
  5383  0FB5                     u2995:	
  5384  0FB5  1003               	clrc
  5385  0FB6  0DD1               	rlf	??_PathTo,f
  5386  0FB7  3EFF               	addlw	-1
  5387  0FB8  1D03               	skipz
  5388  0FB9  2FB5               	goto	u2995
  5389  0FBA  30D0               	movlw	(low (_path| (0+256)))& (0+255)
  5390  0FBB  0751               	addwf	??_PathTo,w
  5391  0FBC  00D2               	movwf	??_PathTo+1
  5392  0FBD  0836               	movf	_c,w
  5393  0FBE  0752               	addwf	??_PathTo+1,w
  5394  0FBF  00D3               	movwf	??_PathTo+2
  5395  0FC0  0853               	movf	??_PathTo+2,w
  5396  0FC1  0084               	movwf	4
  5397  0FC2  1783               	bsf	3,7	;select IRP bank3
  5398  0FC3  0180               	clrf	0
  5399  0FC4  3001               	movlw	1
  5400  0FC5  00D1               	movwf	??_PathTo
  5401  0FC6  0851               	movf	??_PathTo,w
  5402  0FC7  07B6               	addwf	_c,f
  5403  0FC8  3010               	movlw	16
  5404  0FC9  0236               	subwf	_c,w
  5405  0FCA  1C03               	skipc
  5406  0FCB  2FB2               	goto	l4056
  5407  0FCC                     l4062:	
  5408  0FCC  3001               	movlw	1
  5409  0FCD  00D1               	movwf	??_PathTo
  5410  0FCE  0851               	movf	??_PathTo,w
  5411  0FCF  07BB               	addwf	_r,f
  5412  0FD0  3002               	movlw	2
  5413  0FD1  023B               	subwf	_r,w
  5414  0FD2  1C03               	skipc
  5415  0FD3  2FAD               	goto	l4050
  5416  0FD4                     l212:	
  5417                           
  5418                           ;main.c: 206: }
  5419                           ;main.c: 207: }
  5420                           ;main.c: 208: }
  5421                           ;main.c: 217: if (reset_flag != 1){
  5422  0FD4  19F0               	btfsc	_reset_flag/(0+8),_reset_flag& (0+7)
  5423  0FD5  2FF9               	goto	l225
  5424                           
  5425                           ;main.c: 220: if(left == 0){
  5426  0FD6  1970               	btfsc	_left/(0+8),_left& (0+7)
  5427  0FD7  2FDC               	goto	l226
  5428                           
  5429                           ;main.c: 221: x_path--;
  5430  0FD8  3001               	movlw	1
  5431  0FD9  02C3               	subwf	_x_path,f
  5432                           
  5433                           ;main.c: 222: orientation_path = 3;
  5434  0FDA  3003               	movlw	3
  5435  0FDB  2FF2               	goto	L17
  5436  0FDC                     l226:	
  5437                           ;main.c: 224: }
  5438                           
  5439                           ;main.c: 223: pathCount++;
  5440                           
  5441                           
  5442                           ;main.c: 225: else if(up == 0){
  5443  0FDC  1B70               	btfsc	_up/(0+8),_up& (0+7)
  5444  0FDD  2FE2               	goto	l228
  5445                           
  5446                           ;main.c: 226: y_path--;
  5447  0FDE  3001               	movlw	1
  5448  0FDF  02C8               	subwf	_y_path,f
  5449                           
  5450                           ;main.c: 227: orientation_path = 0;
  5451  0FE0  01B9               	clrf	_orientation_path
  5452  0FE1  2FF5               	goto	l4088
  5453  0FE2                     l228:	
  5454                           ;main.c: 229: }
  5455                           
  5456                           ;main.c: 228: pathCount++;
  5457                           
  5458                           
  5459                           ;main.c: 230: else if(right == 0){
  5460  0FE2  1A70               	btfsc	_right/(0+8),_right& (0+7)
  5461  0FE3  2FEB               	goto	l230
  5462                           
  5463                           ;main.c: 231: x_path++;
  5464  0FE4  3001               	movlw	1
  5465  0FE5  00D1               	movwf	??_PathTo
  5466  0FE6  0851               	movf	??_PathTo,w
  5467  0FE7  07C3               	addwf	_x_path,f
  5468                           
  5469                           ;main.c: 232: orientation_path = 1;
  5470  0FE8  01B9               	clrf	_orientation_path
  5471  0FE9  0AB9               	incf	_orientation_path,f
  5472  0FEA  2FF5               	goto	l4088
  5473  0FEB                     l230:	
  5474                           ;main.c: 234: }
  5475                           
  5476                           ;main.c: 233: pathCount++;
  5477                           
  5478                           
  5479                           ;main.c: 235: else if(down == 0){
  5480  0FEB  18F0               	btfsc	_down/(0+8),_down& (0+7)
  5481  0FEC  2FF9               	goto	l225
  5482                           
  5483                           ;main.c: 236: y_path++;
  5484  0FED  3001               	movlw	1
  5485  0FEE  00D1               	movwf	??_PathTo
  5486  0FEF  0851               	movf	??_PathTo,w
  5487  0FF0  07C8               	addwf	_y_path,f
  5488                           
  5489                           ;main.c: 237: orientation_path = 2;
  5490  0FF1  3002               	movlw	2
  5491  0FF2                     L17:	
  5492  0FF2  00D1               	movwf	??_PathTo
  5493  0FF3  0851               	movf	??_PathTo,w
  5494  0FF4  00B9               	movwf	_orientation_path
  5495  0FF5                     l4088:	
  5496                           
  5497                           ;main.c: 238: pathCount++;
  5498  0FF5  3001               	movlw	1
  5499  0FF6  00D1               	movwf	??_PathTo
  5500  0FF7  0851               	movf	??_PathTo,w
  5501  0FF8  07BA               	addwf	_pathCount,f
  5502  0FF9                     l225:	
  5503  0FF9  3001               	movlw	1
  5504  0FFA  07DA               	addwf	PathTo@loop,f
  5505  0FFB  1803               	skipnc
  5506  0FFC  0ADB               	incf	PathTo@loop+1,f
  5507  0FFD  3000               	movlw	0
  5508  0FFE  07DB               	addwf	PathTo@loop+1,f
  5509  0FFF  2D4E               	goto	L16
  5510  1000                     __end_of_PathTo:	
  5511                           
  5512                           	psect	text16
  5513  0A49                     __ptext16:	
  5514 ;; *************** function _lcdWriteString *****************
  5515 ;; Defined at:
  5516 ;;		line 32 in file "LCD.c"
  5517 ;; Parameters:    Size  Location     Type
  5518 ;;  s               1    wreg     PTR unsigned char 
  5519 ;;		 -> STR_1(11), 
  5520 ;; Auto vars:     Size  Location     Type
  5521 ;;  s               1    4[BANK0 ] PTR unsigned char 
  5522 ;;		 -> STR_1(11), 
  5523 ;; Return value:  Size  Location     Type
  5524 ;;                  1    wreg      void 
  5525 ;; Registers used:
  5526 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5527 ;; Tracked objects:
  5528 ;;		On entry : 0/0
  5529 ;;		On exit  : 0/0
  5530 ;;		Unchanged: 0/0
  5531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5532 ;;      Params:         0       0       0       0       0
  5533 ;;      Locals:         0       1       0       0       0
  5534 ;;      Temps:          0       1       0       0       0
  5535 ;;      Totals:         0       2       0       0       0
  5536 ;;Total ram usage:        2 bytes
  5537 ;; Hardware stack levels used:    1
  5538 ;; Hardware stack levels required when called:    2
  5539 ;; This function calls:
  5540 ;;		_lcdWriteData
  5541 ;; This function is called by:
  5542 ;;		_PathTo
  5543 ;; This function uses a non-reentrant model
  5544 ;;
  5545                           
  5546                           
  5547                           ;psect for function _lcdWriteString
  5548  0A49                     _lcdWriteString:	
  5549                           
  5550                           ;incstack = 0
  5551                           ; Regs used in _lcdWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5552                           ;lcdWriteString@s stored from wreg
  5553  0A49  1283               	bcf	3,5	;RP0=0, select bank0
  5554  0A4A  1303               	bcf	3,6	;RP1=0, select bank0
  5555  0A4B  00CF               	movwf	lcdWriteString@s
  5556  0A4C                     l3752:	
  5557                           ;LCD.c: 34: while(*s) lcdWriteData(*s++);
  5558                           
  5559  0A4C  084F               	movf	lcdWriteString@s,w
  5560  0A4D  0084               	movwf	4
  5561  0A4E  120A  158A  2000  120A  158A  	fcall	stringdir
  5562  0A53  3A00               	xorlw	0
  5563  0A54  1903               	btfsc	3,2
  5564  0A55  0008               	return
  5565  0A56  084F               	movf	lcdWriteString@s,w
  5566  0A57  0084               	movwf	4
  5567  0A58  120A  158A  2000  120A  158A  	fcall	stringdir
  5568  0A5D  120A  158A  2207  120A  158A  	fcall	_lcdWriteData
  5569  0A62  3001               	movlw	1
  5570  0A63  1283               	bcf	3,5	;RP0=0, select bank0
  5571  0A64  1303               	bcf	3,6	;RP1=0, select bank0
  5572  0A65  00CE               	movwf	??_lcdWriteString
  5573  0A66  084E               	movf	??_lcdWriteString,w
  5574  0A67  07CF               	addwf	lcdWriteString@s,f
  5575  0A68  2A4C               	goto	l3752
  5576  0A69                     __end_of_lcdWriteString:	
  5577                           
  5578                           	psect	text17
  5579  0A07                     __ptext17:	
  5580 ;; *************** function _lcdWriteData *****************
  5581 ;; Defined at:
  5582 ;;		line 16 in file "LCD.c"
  5583 ;; Parameters:    Size  Location     Type
  5584 ;;  databyte        1    wreg     unsigned char 
  5585 ;; Auto vars:     Size  Location     Type
  5586 ;;  databyte        1    2[BANK0 ] unsigned char 
  5587 ;; Return value:  Size  Location     Type
  5588 ;;                  1    wreg      void 
  5589 ;; Registers used:
  5590 ;;		wreg
  5591 ;; Tracked objects:
  5592 ;;		On entry : 0/0
  5593 ;;		On exit  : 0/0
  5594 ;;		Unchanged: 0/0
  5595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5596 ;;      Params:         0       0       0       0       0
  5597 ;;      Locals:         0       1       0       0       0
  5598 ;;      Temps:          0       2       0       0       0
  5599 ;;      Totals:         0       3       0       0       0
  5600 ;;Total ram usage:        3 bytes
  5601 ;; Hardware stack levels used:    1
  5602 ;; Hardware stack levels required when called:    1
  5603 ;; This function calls:
  5604 ;;		Nothing
  5605 ;; This function is called by:
  5606 ;;		_lcdWriteString
  5607 ;;		_lcdWriteToDigitBCD
  5608 ;; This function uses a non-reentrant model
  5609 ;;
  5610                           
  5611                           
  5612                           ;psect for function _lcdWriteData
  5613  0A07                     _lcdWriteData:	
  5614                           
  5615                           ;incstack = 0
  5616                           ; Regs used in _lcdWriteData: [wreg]
  5617                           ;lcdWriteData@databyte stored from wreg
  5618  0A07  1283               	bcf	3,5	;RP0=0, select bank0
  5619  0A08  1303               	bcf	3,6	;RP1=0, select bank0
  5620  0A09  00CD               	movwf	lcdWriteData@databyte
  5621                           
  5622                           ;LCD.c: 17: RE2 = 0;
  5623  0A0A  1109               	bcf	9,2	;volatile
  5624                           
  5625                           ;LCD.c: 18: RE1 = 0;
  5626  0A0B  1089               	bcf	9,1	;volatile
  5627                           
  5628                           ;LCD.c: 19: RE0 = 1;
  5629  0A0C  1409               	bsf	9,0	;volatile
  5630                           
  5631                           ;LCD.c: 20: PORTD = databyte;
  5632  0A0D  084D               	movf	lcdWriteData@databyte,w
  5633  0A0E  0088               	movwf	8	;volatile
  5634                           
  5635                           ;LCD.c: 21: RE2 = 1;
  5636  0A0F  1509               	bsf	9,2	;volatile
  5637                           
  5638                           ;LCD.c: 22: RE2 = 0;
  5639  0A10  1109               	bcf	9,2	;volatile
  5640                           
  5641                           ;LCD.c: 23: _delay((unsigned long)((1)*(20000000/4000.0)));
  5642  0A11  3007               	movlw	7
  5643  0A12  00CC               	movwf	??_lcdWriteData+1
  5644  0A13  307D               	movlw	125
  5645  0A14  00CB               	movwf	??_lcdWriteData
  5646  0A15                     u3597:	
  5647  0A15  0BCB               	decfsz	??_lcdWriteData,f
  5648  0A16  2A15               	goto	u3597
  5649  0A17  0BCC               	decfsz	??_lcdWriteData+1,f
  5650  0A18  2A15               	goto	u3597
  5651  0A19  0008               	return
  5652  0A1A                     __end_of_lcdWriteData:	
  5653                           
  5654                           	psect	text18
  5655  09A6                     __ptext18:	
  5656 ;; *************** function _lcdSetCursor *****************
  5657 ;; Defined at:
  5658 ;;		line 27 in file "LCD.c"
  5659 ;; Parameters:    Size  Location     Type
  5660 ;;  address         1    wreg     unsigned char 
  5661 ;; Auto vars:     Size  Location     Type
  5662 ;;  address         1    3[BANK0 ] unsigned char 
  5663 ;; Return value:  Size  Location     Type
  5664 ;;                  1    wreg      void 
  5665 ;; Registers used:
  5666 ;;		wreg, status,2, status,0, pclath, cstack
  5667 ;; Tracked objects:
  5668 ;;		On entry : 0/0
  5669 ;;		On exit  : 0/0
  5670 ;;		Unchanged: 0/0
  5671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5672 ;;      Params:         0       0       0       0       0
  5673 ;;      Locals:         0       1       0       0       0
  5674 ;;      Temps:          0       0       0       0       0
  5675 ;;      Totals:         0       1       0       0       0
  5676 ;;Total ram usage:        1 bytes
  5677 ;; Hardware stack levels used:    1
  5678 ;; Hardware stack levels required when called:    2
  5679 ;; This function calls:
  5680 ;;		_lcdWriteControl
  5681 ;; This function is called by:
  5682 ;;		_PathTo
  5683 ;; This function uses a non-reentrant model
  5684 ;;
  5685                           
  5686                           
  5687                           ;psect for function _lcdSetCursor
  5688  09A6                     _lcdSetCursor:	
  5689                           
  5690                           ;incstack = 0
  5691                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  5692                           ;lcdSetCursor@address stored from wreg
  5693  09A6  1283               	bcf	3,5	;RP0=0, select bank0
  5694  09A7  1303               	bcf	3,6	;RP1=0, select bank0
  5695  09A8  00CE               	movwf	lcdSetCursor@address
  5696                           
  5697                           ;LCD.c: 28: address |= 0b10000000;
  5698  09A9  17CE               	bsf	lcdSetCursor@address,7
  5699                           
  5700                           ;LCD.c: 29: lcdWriteControl(address);
  5701  09AA  084E               	movf	lcdSetCursor@address,w
  5702  09AB  120A  118A  27EC   	fcall	_lcdWriteControl
  5703  09AE  0008               	return
  5704  09AF                     __end_of_lcdSetCursor:	
  5705                           
  5706                           	psect	text19
  5707  07EC                     __ptext19:	
  5708 ;; *************** function _lcdWriteControl *****************
  5709 ;; Defined at:
  5710 ;;		line 5 in file "LCD.c"
  5711 ;; Parameters:    Size  Location     Type
  5712 ;;  databyte        1    wreg     unsigned char 
  5713 ;; Auto vars:     Size  Location     Type
  5714 ;;  databyte        1    2[BANK0 ] unsigned char 
  5715 ;; Return value:  Size  Location     Type
  5716 ;;                  1    wreg      void 
  5717 ;; Registers used:
  5718 ;;		wreg
  5719 ;; Tracked objects:
  5720 ;;		On entry : 0/0
  5721 ;;		On exit  : 0/0
  5722 ;;		Unchanged: 0/0
  5723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5724 ;;      Params:         0       0       0       0       0
  5725 ;;      Locals:         0       1       0       0       0
  5726 ;;      Temps:          0       2       0       0       0
  5727 ;;      Totals:         0       3       0       0       0
  5728 ;;Total ram usage:        3 bytes
  5729 ;; Hardware stack levels used:    1
  5730 ;; Hardware stack levels required when called:    1
  5731 ;; This function calls:
  5732 ;;		Nothing
  5733 ;; This function is called by:
  5734 ;;		_lcdSetCursor
  5735 ;;		_setupLCD
  5736 ;; This function uses a non-reentrant model
  5737 ;;
  5738                           
  5739                           
  5740                           ;psect for function _lcdWriteControl
  5741  07EC                     _lcdWriteControl:	
  5742                           
  5743                           ;incstack = 0
  5744                           ; Regs used in _lcdWriteControl: [wreg]
  5745                           ;lcdWriteControl@databyte stored from wreg
  5746  07EC  1283               	bcf	3,5	;RP0=0, select bank0
  5747  07ED  1303               	bcf	3,6	;RP1=0, select bank0
  5748  07EE  00CD               	movwf	lcdWriteControl@databyte
  5749                           
  5750                           ;LCD.c: 6: RE2 = 0;
  5751  07EF  1109               	bcf	9,2	;volatile
  5752                           
  5753                           ;LCD.c: 7: RE1 = 0;
  5754  07F0  1089               	bcf	9,1	;volatile
  5755                           
  5756                           ;LCD.c: 8: RE0 = 0;
  5757  07F1  1009               	bcf	9,0	;volatile
  5758                           
  5759                           ;LCD.c: 9: PORTD = databyte;
  5760  07F2  084D               	movf	lcdWriteControl@databyte,w
  5761  07F3  0088               	movwf	8	;volatile
  5762                           
  5763                           ;LCD.c: 10: RE2 = 1;
  5764  07F4  1509               	bsf	9,2	;volatile
  5765                           
  5766                           ;LCD.c: 11: RE2 = 0;
  5767  07F5  1109               	bcf	9,2	;volatile
  5768                           
  5769                           ;LCD.c: 12: _delay((unsigned long)((2)*(20000000/4000.0)));
  5770  07F6  300D               	movlw	13
  5771  07F7  00CC               	movwf	??_lcdWriteControl+1
  5772  07F8  30FB               	movlw	251
  5773  07F9  00CB               	movwf	??_lcdWriteControl
  5774  07FA                     u3607:	
  5775  07FA  0BCB               	decfsz	??_lcdWriteControl,f
  5776  07FB  2FFA               	goto	u3607
  5777  07FC  0BCC               	decfsz	??_lcdWriteControl+1,f
  5778  07FD  2FFA               	goto	u3607
  5779  07FE  2FFF               	nop2
  5780  07FF  0008               	return
  5781  0800                     __end_of_lcdWriteControl:	
  5782                           
  5783                           	psect	text20
  5784  09F4                     __ptext20:	
  5785 ;; *************** function ___bmul *****************
  5786 ;; Defined at:
  5787 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
  5788 ;; Parameters:    Size  Location     Type
  5789 ;;  multiplier      1    wreg     unsigned char 
  5790 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  5791 ;; Auto vars:     Size  Location     Type
  5792 ;;  multiplier      1    3[BANK0 ] unsigned char 
  5793 ;;  product         1    2[BANK0 ] unsigned char 
  5794 ;; Return value:  Size  Location     Type
  5795 ;;                  1    wreg      unsigned char 
  5796 ;; Registers used:
  5797 ;;		wreg, status,2, status,0
  5798 ;; Tracked objects:
  5799 ;;		On entry : 0/0
  5800 ;;		On exit  : 0/0
  5801 ;;		Unchanged: 0/0
  5802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5803 ;;      Params:         0       1       0       0       0
  5804 ;;      Locals:         0       2       0       0       0
  5805 ;;      Temps:          0       1       0       0       0
  5806 ;;      Totals:         0       4       0       0       0
  5807 ;;Total ram usage:        4 bytes
  5808 ;; Hardware stack levels used:    1
  5809 ;; Hardware stack levels required when called:    1
  5810 ;; This function calls:
  5811 ;;		Nothing
  5812 ;; This function is called by:
  5813 ;;		_PathTo
  5814 ;;		_re_route
  5815 ;; This function uses a non-reentrant model
  5816 ;;
  5817                           
  5818                           
  5819                           ;psect for function ___bmul
  5820  09F4                     ___bmul:	
  5821                           
  5822                           ;incstack = 0
  5823                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5824                           ;___bmul@multiplier stored from wreg
  5825  09F4  1283               	bcf	3,5	;RP0=0, select bank0
  5826  09F5  1303               	bcf	3,6	;RP1=0, select bank0
  5827  09F6  00CE               	movwf	___bmul@multiplier
  5828  09F7  01CD               	clrf	___bmul@product
  5829  09F8                     l3854:	
  5830  09F8  1C4E               	btfss	___bmul@multiplier,0
  5831  09F9  29FE               	goto	l3858
  5832  09FA  084B               	movf	___bmul@multiplicand,w
  5833  09FB  00CC               	movwf	??___bmul
  5834  09FC  084C               	movf	??___bmul,w
  5835  09FD  07CD               	addwf	___bmul@product,f
  5836  09FE                     l3858:	
  5837  09FE  1003               	clrc
  5838  09FF  0DCB               	rlf	___bmul@multiplicand,f
  5839  0A00  1003               	clrc
  5840  0A01  0CCE               	rrf	___bmul@multiplier,f
  5841  0A02  084E               	movf	___bmul@multiplier,w
  5842  0A03  1D03               	btfss	3,2
  5843  0A04  29F8               	goto	l3854
  5844  0A05  084D               	movf	___bmul@product,w
  5845  0A06  0008               	return
  5846  0A07                     __end_of___bmul:	
  5847                           
  5848                           	psect	text21
  5849  0A69                     __ptext21:	
  5850 ;; *************** function _isr *****************
  5851 ;; Defined at:
  5852 ;;		line 450 in file "main.c"
  5853 ;; Parameters:    Size  Location     Type
  5854 ;;		None
  5855 ;; Auto vars:     Size  Location     Type
  5856 ;;		None
  5857 ;; Return value:  Size  Location     Type
  5858 ;;                  1    wreg      void 
  5859 ;; Registers used:
  5860 ;;		wreg, status,2, status,0
  5861 ;; Tracked objects:
  5862 ;;		On entry : 0/0
  5863 ;;		On exit  : 0/0
  5864 ;;		Unchanged: 0/0
  5865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5866 ;;      Params:         0       0       0       0       0
  5867 ;;      Locals:         0       0       0       0       0
  5868 ;;      Temps:          5       0       0       0       0
  5869 ;;      Totals:         5       0       0       0       0
  5870 ;;Total ram usage:        5 bytes
  5871 ;; Hardware stack levels used:    1
  5872 ;; This function calls:
  5873 ;;		Nothing
  5874 ;; This function is called by:
  5875 ;;		Interrupt level 1
  5876 ;; This function uses a non-reentrant model
  5877 ;;
  5878                           
  5879                           
  5880                           ;psect for function _isr
  5881  0A69                     _isr:	
  5882                           
  5883                           ;main.c: 451: if(TMR0IF){
  5884  0A69  1D0B               	btfss	11,2	;volatile
  5885  0A6A  2A80               	goto	i1l323
  5886                           
  5887                           ;main.c: 452: TMR0IF = 0;
  5888  0A6B  110B               	bcf	11,2	;volatile
  5889                           
  5890                           ;main.c: 453: TMR0 = 100;
  5891  0A6C  3064               	movlw	100
  5892  0A6D  0081               	movwf	1	;volatile
  5893                           
  5894                           ;main.c: 454: time_count++;
  5895  0A6E  3001               	movlw	1
  5896  0A6F  07AC               	addwf	_time_count,f	;volatile
  5897  0A70  1803               	skipnc
  5898  0A71  0AAD               	incf	_time_count+1,f	;volatile
  5899  0A72  3000               	movlw	0
  5900  0A73  07AD               	addwf	_time_count+1,f	;volatile
  5901                           
  5902                           ;main.c: 456: if(!RB0)
  5903  0A74  1806               	btfsc	6,0	;volatile
  5904  0A75  2A7A               	goto	i1l3190
  5905                           
  5906                           ;main.c: 457: PB8Counter++;
  5907  0A76  3001               	movlw	1
  5908  0A77  00F1               	movwf	??_isr
  5909  0A78  0871               	movf	??_isr,w
  5910  0A79  07B3               	addwf	_PB8Counter,f
  5911  0A7A                     i1l3190:	
  5912                           
  5913                           ;main.c: 458: if(!RB1)
  5914  0A7A  1886               	btfsc	6,1	;volatile
  5915  0A7B  2A80               	goto	i1l323
  5916                           
  5917                           ;main.c: 459: PB7Counter++;
  5918  0A7C  3001               	movlw	1
  5919  0A7D  00F1               	movwf	??_isr
  5920  0A7E  0871               	movf	??_isr,w
  5921  0A7F  07B2               	addwf	_PB7Counter,f
  5922  0A80                     i1l323:	
  5923  0A80  0875               	movf	??_isr+4,w
  5924  0A81  00FF               	movwf	127
  5925  0A82  0874               	movf	??_isr+3,w
  5926  0A83  008A               	movwf	10
  5927  0A84  0873               	movf	??_isr+2,w
  5928  0A85  0084               	movwf	4
  5929  0A86  0E72               	swapf	(??_isr+1)^(0+-128),w
  5930  0A87  0083               	movwf	3
  5931  0A88  0EFE               	swapf	126,f
  5932  0A89  0E7E               	swapf	126,w
  5933  0A8A  0009               	retfie
  5934  0A8B                     __end_of_isr:	
  5935  007E                     btemp	set	126	;btemp
  5936  007E                     wtemp	set	126
  5937  007E                     wtemp0	set	126
  5938  0080                     wtemp1	set	128
  5939  0082                     wtemp2	set	130
  5940  0084                     wtemp3	set	132
  5941  0086                     wtemp4	set	134
  5942  0088                     wtemp5	set	136
  5943  007F                     wtemp6	set	127
  5944  007E                     ttemp	set	126
  5945  007E                     ttemp0	set	126
  5946  0081                     ttemp1	set	129
  5947  0084                     ttemp2	set	132
  5948  0087                     ttemp3	set	135
  5949  007F                     ttemp4	set	127
  5950  007E                     ltemp	set	126
  5951  007E                     ltemp0	set	126
  5952  0082                     ltemp1	set	130
  5953  0086                     ltemp2	set	134
  5954  0080                     ltemp3	set	128
  5955                           
  5956                           	psect	intentry
  5957  0004                     __pintentry:	
  5958                           ;incstack = 0
  5959                           ; Regs used in _isr: [wreg+status,2+status,0]
  5960                           
  5961  0004                     interrupt_function:	
  5962  007E                     saved_w	set	btemp
  5963  0004  00FE               	movwf	btemp
  5964  0005  0E03               	swapf	3,w
  5965  0006  00F2               	movwf	??_isr+1
  5966  0007  0804               	movf	4,w
  5967  0008  00F3               	movwf	??_isr+2
  5968  0009  080A               	movf	10,w
  5969  000A  00F4               	movwf	??_isr+3
  5970  000B  1283               	bcf	3,5	;RP0=0, select bank0
  5971  000C  1303               	bcf	3,6	;RP1=0, select bank0
  5972  000D  087F               	movf	btemp+1,w
  5973  000E  00F5               	movwf	??_isr+4
  5974  000F  120A  158A  2A69   	ljmp	_isr


Data Sizes:
    Strings     11
    Constant    0
    Data        111
    BSS         115
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     26      76
    BANK1            80      0      76
    BANK3            96      0      96
    BANK2            96      6       6

Pointer List with Targets:

    lcdWriteString@s	PTR unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_re_route
    _setupLCD->_lcdWriteControl
    _re_route->_TravelPath
    _TravelPath->_Drive1m
    _Turn90->_DriveDirect
    _Drive->_ser_putch
    _Drive1m->_DriveDirect
    _getSensorData->_ser_getch
    _DriveDirect->_ser_putch
    _PathTo->_lcdWriteString
    _lcdWriteString->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   21277
                                             23 BANK0      3     3      0
                                              0 BANK2      6     6      0
                             _PathTo
                         _TravelPath
                           _re_route
                           _ser_init
                          _ser_putch
                           _setupADC
                           _setupLCD
                           _setupSPI
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _spi_transfer                                         3     3      0      44
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      31
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _re_route                                             5     5      0   13296
                                             18 BANK0      5     5      0
                        _DriveDirect
                             _PathTo
                         _TravelPath
                             _Turn90
                             ___bmul
                      _getSensorData
 ---------------------------------------------------------------------------------
 (2) _TravelPath                                           3     3      0    5012
                                             15 BANK0      3     3      0
                            _Drive1m
                             _Turn90
 ---------------------------------------------------------------------------------
 (2) _Turn90                                               4     4      0    2678
                                             10 BANK0      4     4      0
                              _Drive
                        _DriveDirect
                      _getSensorData
 ---------------------------------------------------------------------------------
 (3) _Drive                                                4     1      3     545
                                              1 BANK0      4     1      3
                          _ser_putch
 ---------------------------------------------------------------------------------
 (3) _Drive1m                                              5     5      0    2170
                                             10 BANK0      5     5      0
                        _DriveDirect
                      _getSensorData
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _getSensorData                                        7     5      2     616
                                              2 BANK0      7     5      2
                          _ser_getch
                          _ser_putch
 ---------------------------------------------------------------------------------
 (3) _ser_getch                                            2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _DriveDirect                                          9     5      4    1455
                                              1 BANK0      9     5      4
                          _ser_putch
 ---------------------------------------------------------------------------------
 (1) _ser_putch                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _PathTo                                              12    11      1    2349
                                              5 BANK0     12    11      1
                             ___bmul
                       _lcdSetCursor
                     _lcdWriteString
 ---------------------------------------------------------------------------------
 (3) _lcdWriteString                                       2     2      0     126
                                              3 BANK0      2     2      0
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (4) _lcdWriteData                                         3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _lcdSetCursor                                         1     1      0      65
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1    1186
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PathTo
     ___bmul
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteString
       _lcdWriteData
   _TravelPath
     _Drive1m
       _DriveDirect
         _ser_putch
       _getSensorData
         _ser_getch
         _ser_putch
       _ser_putch
     _Turn90
       _Drive
         _ser_putch
       _DriveDirect
         _ser_putch
       _getSensorData
         _ser_getch
         _ser_putch
   _re_route
     _DriveDirect
       _ser_putch
     _PathTo
       ___bmul
       _lcdSetCursor
         _lcdWriteControl
       _lcdWriteString
         _lcdWriteData
     _TravelPath
       _Drive1m
         _DriveDirect
           _ser_putch
         _getSensorData
           _ser_getch
           _ser_putch
         _ser_putch
       _Turn90
         _Drive
           _ser_putch
         _DriveDirect
           _ser_putch
         _getSensorData
           _ser_getch
           _ser_putch
     _Turn90
       _Drive
         _ser_putch
       _DriveDirect
         _ser_putch
       _getSensorData
         _ser_getch
         _ser_putch
     ___bmul
     _getSensorData
       _ser_getch
       _ser_putch
   _ser_init
   _ser_putch
   _setupADC
   _setupLCD
     _lcdWriteControl
   _setupSPI
   _spi_transfer

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      60       9      100.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      6       6      11        6.3%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      4C       7       95.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1A      4C       5       95.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0     108      12        0.0%
ABS                  0      0     108       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Oct 06 18:40:48 2016

                       _c 0036                         _r 003B                         _x 006B  
         ??_getSensorData 004F                         _y 0045                         pc 0002  
          ___bmul@product 004D               __CFG_CP$OFF 0000                        _GO 00FA  
                      _up 0386                        fsr 0004               Drive@speedH 004F  
             Drive@speedL 004C                       l212 0FD4                       l230 0FEB  
                     l225 0FF9                       l226 0FDC                       l330 0450  
                     l228 0FE2                       l332 0475                       l190 0E11  
                     l182 0DDB                       l334 049D                       l192 0E16  
                     l184 0DDD                       l336 04C5                       l185 0DDF  
                     l186 0DE1                       l187 0E1C                       l188 0E0D  
                     l841 09AF                       l835 09BC                       l971 09DB  
                     _GIE 005F                       _RB0 0030                       _RB1 0031  
                     _RB2 0032             ??_DriveDirect 0050                       _RB3 0033  
                     _RC2 003A                       _RE0 0048                       _RE1 0049  
                     _RE2 004A              __CFG_CPD$OFF 0000                       _isr 0A69  
                     fsr0 0004                       indf 0000              __CFG_FOSC$HS 0000  
          ??_lcdWriteData 004B              __CFG_LVP$OFF 0000                      l4020 0F12  
                    l4100 0509                      l4030 0F38                      l4014 0EF8  
                    l4102 0510                      l4110 0528                      l4032 0F4D  
                    l4040 0F9A                      l4008 0EF3                      l4024 0F1A  
                    l4120 0548                      l4112 0535                      l4050 0FAD  
                    l4034 0F62                      l4122 054F                      l4130 0567  
                    l4114 0536                      l4028 0F23                      l4140 0587  
                    l4132 0574                      l4204 079B                      l4062 0FCC  
                    l4038 0F8C                      l4142 058E                      l4150 05A6  
                    l4118 0541                      l4134 0575                      l4206 07BF  
                    l4056 0FB2                      l4160 05C6                      l4152 05B3  
                    l4162 05CD                      l4170 05E5                      l4138 0580  
                    l4154 05B4                      l4172 05F2                      l4180 04F5  
                    l4158 05BF                      l4174 05F7                      l4190 0744  
                    l4088 0FF5                      l3800 06CA                      l4184 0703  
                    l3714 0B26                      l3802 06CF                      l3810 06DC  
                    l4178 05FF                      l4098 0502                      l4186 071A  
                    l4194 076E                      l4610 0465                      l4602 0440  
                    l3716 0B27                      l3804 06D4                      l3812 06EC  
                    l4188 072F                      l4196 077E                      l3902 0D07  
                    l3806 06D9                      l3814 06F9                      l3752 0A4C  
                    l3912 0D29                      l3680 0BB2                      l3840 0C5D  
                    l3832 0C2E                      l3842 0C61                      l3826 0C1F  
                    l3834 0C52                      l4634 04DD                      l4626 04B5  
                    l4618 048D                      l3908 0D21                      l3692 0BD1  
                    l3676 0B9F                      l3780 0686                      l3772 0669  
                    l3828 0C21                      l3854 09F8                      l3942 0DE3  
                    l3782 0693                      l3790 06AB                      l3846 0C73  
                    l4638 04ED                      l3944 0DF1                      l3872 0CBC  
                    l3696 0BE4                      l3792 061B                      l3848 0C97  
                    l4592 0428                      l4576 03DC                      l3858 09FE  
                    l3794 06BA                      l3778 0681                      l3884 0CF1  
                    l3788 06A1                      l3990 0E93                      l3982 0E64  
                    l3878 0CC1                      l3992 0EA8                      l3976 0E36  
                    l3896 0D02                      l3888 0CF9                      l3986 0E69  
                    l3988 0E7E                      l3996 0ED2                      ?_isr 0071  
                    l3998 0EE0                      STR_1 0806                      u2415 0BC1  
                    u2505 0626                      u3145 07A6                      u2705 0D57  
                    u2385 0B8F                      u2475 065F                      u2555 0C39  
                    u3507 0A2D                      u3517 07D5                      u3607 07FA  
                    u3527 051C                      u3447 0067                      u2585 0C7E  
                    u3537 055B                      u3457 009E                      u2675 0D0A  
                    u3547 059A                      u3467 00B3                      _PEIE 005E  
                    u2925 0EFB                      u3557 05D9                      u3477 00C8  
                    u3567 0CAC                      u3487 03F7                      u2865 0E39  
                    u3577 06B3                      u3497 0412                      u2875 0E4C  
                    u3587 06F2                      _RCIF 0065                      u3597 0A15  
                    u2995 0FB5                      _TMR0 0001                      _TRMT 04C1  
            __CFG_WRT$OFF 0000                      _radH 003C                      _radL 003D  
                    _main 005F                      _left 0382                      _down 0381  
                    _path 01D0                      _loop 002A                      btemp 007E  
                    ltemp 007E                      start 0012                      ttemp 007E  
                    wtemp 007E         ___bmul@multiplier 004E           __end_of_Drive1m 0702  
                   ??_isr 0071                PathTo@loop 005A                     ?_main 0071  
           __CFG_WDTE$OFF 0000                     i1l323 0A80                     _RCREG 001A  
                   _RCSTA 0018                     _SPBRG 0099                     _PORTA 0005  
                   _PORTB 0006                     _PORTC 0007                     _PORTD 0008  
                   _PORTE 0009                     _TRISA 0085                     _TRISB 0086  
                   _TRISC 0087                     _TRISD 0088                     _TRISE 0089  
                   _SSPIF 0063                     _TXREG 0019                     _TXSTA 0098  
_intersection_orientation 0037                     _Drive 0A8B                     _angle 0026  
     __end_of_DriveDirect 0C0F                     _right 0384                     _x_int 0042  
                   _y_int 0047            __pbitbssCOMMON 0380            __CFG_BOREN$OFF 0000  
                   pclath 000A                     ltemp0 007E                     ltemp1 0082  
                   ltemp2 0086                     ltemp3 0080                _LeftSpeedH 0030  
              _LeftSpeedL 0031                     ttemp0 007E                     ttemp1 0081  
                   ttemp2 0084                     ttemp3 0087                     ttemp4 007F  
                   status 0003                     wtemp0 007E                     wtemp1 0080  
                   wtemp2 0082                     wtemp3 0084                     wtemp4 0086  
                   wtemp5 0088                     wtemp6 007F           __initialization 0015  
            __end_of_main 04F1  __size_of_lcdWriteControl 0014                    ??_main 0062  
    __end_of_lcdSetCursor 09AF          ??_lcdWriteString 004E                    ?_Drive 004C  
                  _ADCON0 001F                    _ADCON1 009F                    _ADRESH 001E  
                  _ADRESL 009E                    i1l3190 0A7A                    _TMR0IE 005D  
                  _TMR0IF 005A                    _SSPCON 0014                    _SSPBUF 0013  
               ??_Drive1m 0055            __CFG_PWRTE$OFF 0000                    _PathTo 0CB4  
                  _adcRAW 0076                    _Turn90 0C0F                    ___bmul 09F4  
    __end_of_lcdWriteData 0A1A           lcdWriteString@s 004F                    _speedH 003E  
                  _speedL 003F                    _x_goto 0041                    _x_path 0043  
                  _y_goto 0046                    _y_path 0048          __end_of_re_route 07EC  
             _DriveDirect 0B82          __end_of_ser_init 09D4          __end_of_setupADC 0A30  
        __end_of_setupLCD 0B04          __end_of_setupSPI 0A49                    saved_w 007E  
         Turn90@direction 0058                _TravelPath 04F1   __end_of__initialization 005B  
     ___bmul@multiplicand 004B             __end_of_Drive 0AB3            __pcstackCOMMON 0071  
            __pidataBANK0 0997              __pidataBANK1 0AB3              __pidataBANK3 0B42  
          PathTo@x_target 0058            PathTo@y_target 0050           DriveDirect@data 0051  
                 ??_Drive 004F         ??_lcdWriteControl 004B                __pbssBANK0 0020  
              __pbssBANK1 00C8                __pbssBANK3 01D0         _pathCountShortest 006A  
     lcdSetCursor@address 004E                   ?_PathTo 0050                __pmaintext 005F  
                 ?_Turn90 0071                   ?___bmul 004B                __pintentry 0004  
   __size_of_lcdSetCursor 0009     __end_of_getSensorData 0B42        __size_of_ser_getch 000A  
      __size_of_ser_putch 000C               ?_TravelPath 0071               _RightSpeedH 0034  
             _RightSpeedL 0035                   _IR_Wall 0380                   _SSPSTAT 0094  
              __stringtab 0800                   _Drive1m 0606   DriveDirect@VelocityLeft 004E  
   __size_of_lcdWriteData 0013                 ?_re_route 0071              _lcdSetCursor 09A6  
               ?_ser_init 0071           __size_of_PathTo 034C                 ?_setupADC 0071  
               ?_setupLCD 0071                 ?_setupSPI 0071           __size_of_Turn90 00A5  
         __size_of___bmul 0013                   __ptext1 09D4                   __ptext2 0A30  
                 __ptext3 0ADB                   __ptext4 0A1A                   __ptext5 09C5  
                 __ptext6 0702                   __ptext7 04F1                   __ptext8 0C0F  
                 __ptext9 0A8B              __size_of_isr 0022                   _lowByte 0038  
        _orientation_path 0039                   _targets 0040                   clrloop0 099F  
            _lcdWriteData 0A07      end_of_initialization 005B         __end_of_ser_getch 09B9  
       __end_of_ser_putch 09C5                ??_re_route 005D                _reset_flag 0383  
              ??_ser_init 004B                ??_setupADC 004B                ??_setupLCD 004E  
              ??_setupSPI 004B       __size_of_TravelPath 0115                _time_count 002C  
            ?_DriveDirect 004C                 Drive@radH 004D                 Drive@radL 004E  
             TravelPath@n 005C             ?_spi_transfer 0071           ser_getch@rxbyte 004C  
              main@fourth 0114                main@second 0112            __end_of_PathTo 1000  
               PathTo@sum 0059            __end_of_Turn90 0CB4       DriveDirect@data_463 0053  
          __end_of___bmul 0A07           _lcdWriteControl 07EC       start_initialization 0015  
             __end_of_isr 0A8B            ??_spi_transfer 004B   __size_of_lcdWriteString 0020  
                ??_PathTo 0051                  ??_Turn90 0055                  ??___bmul 004C  
              init_fetch0 09E3               __pdataBANK0 0065               __pdataBANK1 00A0  
             __pdataBANK3 0190               __pbssCOMMON 0076                 ___latbits 0002  
           __pcstackBANK0 004B             __pcstackBANK2 0110              ??_TravelPath 005A  
                ?_Drive1m 0071   __end_of_lcdWriteControl 0800         __size_of_re_route 00EA  
       __size_of_ser_init 000F         __size_of_setupADC 0016         __size_of_setupLCD 0029  
      __end_of_TravelPath 0606         __size_of_setupSPI 0019                 __pstrings 0800  
            _pathShortest 00C8                 _gridWalls 0190            __size_of_Drive 0028  
    __size_of_DriveDirect 008D             _targets_found 0385           main@controlByte 0110  
               _pathCount 003A   lcdWriteControl@databyte 004D         interrupt_function 0004  
  __size_of_getSensorData 003E                ser_putch@c 004B     getSensorData@packetID 0051  
               clear_ram0 099E                 _ser_getch 09AF                 _ser_putch 09B9  
               _timerLoop 002E                  Drive1m@n 0058             _VelocityRight 00EA  
    __end_of_spi_transfer 09E3               __stringbase 0805          spi_transfer@data 004D  
               main@fifth 0115                 main@first 0111          spi_transfer@temp 004C  
              _ADC_ADJUST 0078                 main@third 0113                  _Distance 0024  
    lcdWriteData@databyte 004D            _lcdWriteString 0A49  DriveDirect@VelocityRight 004C  
        __size_of_Drive1m 00FC          _ADJUSTED_SPEED_L 0020          _ADJUSTED_SPEED_R 0022  
              ?_ser_getch 0071          ?_lcdWriteControl 0071           _mazeGridDefault 00B4  
              ?_ser_putch 0071             _getSensorData 0B04        __end_of__stringtab 0806  
                __ptext10 0606                  __ptext11 0B04                  __ptext20 09F4  
                __ptext12 09AF                  __ptext21 0A69                  __ptext13 0B82  
                __ptext14 09B9                  __ptext15 0CB4                  __ptext16 0A49  
                __ptext17 0A07                  __ptext18 09A6                  __ptext19 07EC  
                _highByte 004A    __end_of_lcdWriteString 0A69                  _distance 0028  
                _mazeGrid 00A0             __size_of_main 0492                  _re_route 0702  
                _ser_init 09C5                  _setupADC 0A1A                  _setupLCD 0ADB  
                _setupSPI 0A30                _PB7Counter 0032                  _x_target 0044  
              _PB8Counter 0033                  _y_target 0049              _VelocityLeft 00E8  
          ?_getSensorData 004D                  init_ram0 09E7           ?_lcdWriteString 0071  
          Drive1m@omni_IR 0059                  intlevel1 0000             ?_lcdSetCursor 0071  
               stringcode 0800               ??_ser_getch 004B               ??_ser_putch 004B  
     getSensorData@sensor 0052     __size_of_spi_transfer 000F               _orientation 0069  
              _OPTION_REG 0081                  stringdir 0800                  stringtab 0800  
      getSensorData@bytes 004D             ?_lcdWriteData 0071              _spi_transfer 09D4  
          ??_lcdSetCursor 004E           _CURRENT_SPEED_L 0065           _CURRENT_SPEED_R 0067  
