

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Fri Oct 07 12:36:00 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	intentry,global,class=CODE,delta=2
    45                           	dabs	1,0x7E,2
    46  0000                     	;# 
    47  0001                     	;# 
    48  0002                     	;# 
    49  0003                     	;# 
    50  0004                     	;# 
    51  0005                     	;# 
    52  0006                     	;# 
    53  0007                     	;# 
    54  0008                     	;# 
    55  0009                     	;# 
    56  000A                     	;# 
    57  000B                     	;# 
    58  000C                     	;# 
    59  000D                     	;# 
    60  000E                     	;# 
    61  000E                     	;# 
    62  000F                     	;# 
    63  0010                     	;# 
    64  0011                     	;# 
    65  0012                     	;# 
    66  0013                     	;# 
    67  0014                     	;# 
    68  0015                     	;# 
    69  0015                     	;# 
    70  0016                     	;# 
    71  0017                     	;# 
    72  0018                     	;# 
    73  0019                     	;# 
    74  001A                     	;# 
    75  001B                     	;# 
    76  001B                     	;# 
    77  001C                     	;# 
    78  001D                     	;# 
    79  001E                     	;# 
    80  001F                     	;# 
    81  0081                     	;# 
    82  0085                     	;# 
    83  0086                     	;# 
    84  0087                     	;# 
    85  0088                     	;# 
    86  0089                     	;# 
    87  008C                     	;# 
    88  008D                     	;# 
    89  008E                     	;# 
    90  0091                     	;# 
    91  0092                     	;# 
    92  0093                     	;# 
    93  0094                     	;# 
    94  0098                     	;# 
    95  0099                     	;# 
    96  009C                     	;# 
    97  009D                     	;# 
    98  009E                     	;# 
    99  009F                     	;# 
   100  010C                     	;# 
   101  010D                     	;# 
   102  010E                     	;# 
   103  010F                     	;# 
   104  018C                     	;# 
   105  018D                     	;# 
   106  0000                     	;# 
   107  0001                     	;# 
   108  0002                     	;# 
   109  0003                     	;# 
   110  0004                     	;# 
   111  0005                     	;# 
   112  0006                     	;# 
   113  0007                     	;# 
   114  0008                     	;# 
   115  0009                     	;# 
   116  000A                     	;# 
   117  000B                     	;# 
   118  000C                     	;# 
   119  000D                     	;# 
   120  000E                     	;# 
   121  000E                     	;# 
   122  000F                     	;# 
   123  0010                     	;# 
   124  0011                     	;# 
   125  0012                     	;# 
   126  0013                     	;# 
   127  0014                     	;# 
   128  0015                     	;# 
   129  0015                     	;# 
   130  0016                     	;# 
   131  0017                     	;# 
   132  0018                     	;# 
   133  0019                     	;# 
   134  001A                     	;# 
   135  001B                     	;# 
   136  001B                     	;# 
   137  001C                     	;# 
   138  001D                     	;# 
   139  001E                     	;# 
   140  001F                     	;# 
   141  0081                     	;# 
   142  0085                     	;# 
   143  0086                     	;# 
   144  0087                     	;# 
   145  0088                     	;# 
   146  0089                     	;# 
   147  008C                     	;# 
   148  008D                     	;# 
   149  008E                     	;# 
   150  0091                     	;# 
   151  0092                     	;# 
   152  0093                     	;# 
   153  0094                     	;# 
   154  0098                     	;# 
   155  0099                     	;# 
   156  009C                     	;# 
   157  009D                     	;# 
   158  009E                     	;# 
   159  009F                     	;# 
   160  010C                     	;# 
   161  010D                     	;# 
   162  010E                     	;# 
   163  010F                     	;# 
   164  018C                     	;# 
   165  018D                     	;# 
   166  0000                     	;# 
   167  0001                     	;# 
   168  0002                     	;# 
   169  0003                     	;# 
   170  0004                     	;# 
   171  0005                     	;# 
   172  0006                     	;# 
   173  0007                     	;# 
   174  0008                     	;# 
   175  0009                     	;# 
   176  000A                     	;# 
   177  000B                     	;# 
   178  000C                     	;# 
   179  000D                     	;# 
   180  000E                     	;# 
   181  000E                     	;# 
   182  000F                     	;# 
   183  0010                     	;# 
   184  0011                     	;# 
   185  0012                     	;# 
   186  0013                     	;# 
   187  0014                     	;# 
   188  0015                     	;# 
   189  0015                     	;# 
   190  0016                     	;# 
   191  0017                     	;# 
   192  0018                     	;# 
   193  0019                     	;# 
   194  001A                     	;# 
   195  001B                     	;# 
   196  001B                     	;# 
   197  001C                     	;# 
   198  001D                     	;# 
   199  001E                     	;# 
   200  001F                     	;# 
   201  0081                     	;# 
   202  0085                     	;# 
   203  0086                     	;# 
   204  0087                     	;# 
   205  0088                     	;# 
   206  0089                     	;# 
   207  008C                     	;# 
   208  008D                     	;# 
   209  008E                     	;# 
   210  0091                     	;# 
   211  0092                     	;# 
   212  0093                     	;# 
   213  0094                     	;# 
   214  0098                     	;# 
   215  0099                     	;# 
   216  009C                     	;# 
   217  009D                     	;# 
   218  009E                     	;# 
   219  009F                     	;# 
   220  010C                     	;# 
   221  010D                     	;# 
   222  010E                     	;# 
   223  010F                     	;# 
   224  018C                     	;# 
   225  018D                     	;# 
   226  0000                     	;# 
   227  0001                     	;# 
   228  0002                     	;# 
   229  0003                     	;# 
   230  0004                     	;# 
   231  0005                     	;# 
   232  0006                     	;# 
   233  0007                     	;# 
   234  0008                     	;# 
   235  0009                     	;# 
   236  000A                     	;# 
   237  000B                     	;# 
   238  000C                     	;# 
   239  000D                     	;# 
   240  000E                     	;# 
   241  000E                     	;# 
   242  000F                     	;# 
   243  0010                     	;# 
   244  0011                     	;# 
   245  0012                     	;# 
   246  0013                     	;# 
   247  0014                     	;# 
   248  0015                     	;# 
   249  0015                     	;# 
   250  0016                     	;# 
   251  0017                     	;# 
   252  0018                     	;# 
   253  0019                     	;# 
   254  001A                     	;# 
   255  001B                     	;# 
   256  001B                     	;# 
   257  001C                     	;# 
   258  001D                     	;# 
   259  001E                     	;# 
   260  001F                     	;# 
   261  0081                     	;# 
   262  0085                     	;# 
   263  0086                     	;# 
   264  0087                     	;# 
   265  0088                     	;# 
   266  0089                     	;# 
   267  008C                     	;# 
   268  008D                     	;# 
   269  008E                     	;# 
   270  0091                     	;# 
   271  0092                     	;# 
   272  0093                     	;# 
   273  0094                     	;# 
   274  0098                     	;# 
   275  0099                     	;# 
   276  009C                     	;# 
   277  009D                     	;# 
   278  009E                     	;# 
   279  009F                     	;# 
   280  010C                     	;# 
   281  010D                     	;# 
   282  010E                     	;# 
   283  010F                     	;# 
   284  018C                     	;# 
   285  018D                     	;# 
   286  0000                     	;# 
   287  0001                     	;# 
   288  0002                     	;# 
   289  0003                     	;# 
   290  0004                     	;# 
   291  0005                     	;# 
   292  0006                     	;# 
   293  0007                     	;# 
   294  0008                     	;# 
   295  0009                     	;# 
   296  000A                     	;# 
   297  000B                     	;# 
   298  000C                     	;# 
   299  000D                     	;# 
   300  000E                     	;# 
   301  000E                     	;# 
   302  000F                     	;# 
   303  0010                     	;# 
   304  0011                     	;# 
   305  0012                     	;# 
   306  0013                     	;# 
   307  0014                     	;# 
   308  0015                     	;# 
   309  0015                     	;# 
   310  0016                     	;# 
   311  0017                     	;# 
   312  0018                     	;# 
   313  0019                     	;# 
   314  001A                     	;# 
   315  001B                     	;# 
   316  001B                     	;# 
   317  001C                     	;# 
   318  001D                     	;# 
   319  001E                     	;# 
   320  001F                     	;# 
   321  0081                     	;# 
   322  0085                     	;# 
   323  0086                     	;# 
   324  0087                     	;# 
   325  0088                     	;# 
   326  0089                     	;# 
   327  008C                     	;# 
   328  008D                     	;# 
   329  008E                     	;# 
   330  0091                     	;# 
   331  0092                     	;# 
   332  0093                     	;# 
   333  0094                     	;# 
   334  0098                     	;# 
   335  0099                     	;# 
   336  009C                     	;# 
   337  009D                     	;# 
   338  009E                     	;# 
   339  009F                     	;# 
   340  010C                     	;# 
   341  010D                     	;# 
   342  010E                     	;# 
   343  010F                     	;# 
   344  018C                     	;# 
   345  018D                     	;# 
   346  0000                     	;# 
   347  0001                     	;# 
   348  0002                     	;# 
   349  0003                     	;# 
   350  0004                     	;# 
   351  0005                     	;# 
   352  0006                     	;# 
   353  0007                     	;# 
   354  0008                     	;# 
   355  0009                     	;# 
   356  000A                     	;# 
   357  000B                     	;# 
   358  000C                     	;# 
   359  000D                     	;# 
   360  000E                     	;# 
   361  000E                     	;# 
   362  000F                     	;# 
   363  0010                     	;# 
   364  0011                     	;# 
   365  0012                     	;# 
   366  0013                     	;# 
   367  0014                     	;# 
   368  0015                     	;# 
   369  0015                     	;# 
   370  0016                     	;# 
   371  0017                     	;# 
   372  0018                     	;# 
   373  0019                     	;# 
   374  001A                     	;# 
   375  001B                     	;# 
   376  001B                     	;# 
   377  001C                     	;# 
   378  001D                     	;# 
   379  001E                     	;# 
   380  001F                     	;# 
   381  0081                     	;# 
   382  0085                     	;# 
   383  0086                     	;# 
   384  0087                     	;# 
   385  0088                     	;# 
   386  0089                     	;# 
   387  008C                     	;# 
   388  008D                     	;# 
   389  008E                     	;# 
   390  0091                     	;# 
   391  0092                     	;# 
   392  0093                     	;# 
   393  0094                     	;# 
   394  0098                     	;# 
   395  0099                     	;# 
   396  009C                     	;# 
   397  009D                     	;# 
   398  009E                     	;# 
   399  009F                     	;# 
   400  010C                     	;# 
   401  010D                     	;# 
   402  010E                     	;# 
   403  010F                     	;# 
   404  018C                     	;# 
   405  018D                     	;# 
   406                           
   407                           	psect	idataBANK0
   408  0951                     __pidataBANK0:	
   409                           
   410                           ;initializer for _CURRENT_SPEED_L
   411  0951  3496               	retlw	150
   412  0952  3400               	retlw	0
   413                           
   414                           ;initializer for _CURRENT_SPEED_R
   415  0953  3496               	retlw	150
   416  0954  3400               	retlw	0
   417                           
   418                           ;initializer for _orientation
   419  0955  3403               	retlw	3
   420                           
   421                           ;initializer for _pathCountShortest
   422  0956  3414               	retlw	20
   423                           
   424                           ;initializer for _x
   425  0957  3401               	retlw	1
   426                           
   427                           	psect	idataBANK1
   428  0A68                     __pidataBANK1:	
   429                           
   430                           ;initializer for _mazeGrid
   431  0A68  340C               	retlw	12
   432  0A69  3407               	retlw	7
   433  0A6A  340E               	retlw	14
   434  0A6B  340D               	retlw	13
   435  0A6C  3406               	retlw	6
   436  0A6D  3409               	retlw	9
   437  0A6E  3405               	retlw	5
   438  0A6F  3400               	retlw	0
   439  0A70  3405               	retlw	5
   440  0A71  3402               	retlw	2
   441  0A72  340C               	retlw	12
   442  0A73  3406               	retlw	6
   443  0A74  340A               	retlw	10
   444  0A75  340E               	retlw	14
   445  0A76  340A               	retlw	10
   446  0A77  340B               	retlw	11
   447  0A78  3409               	retlw	9
   448  0A79  3401               	retlw	1
   449  0A7A  3401               	retlw	1
   450  0A7B  3403               	retlw	3
   451                           
   452                           ;initializer for _mazeGridDefault
   453  0A7C  340C               	retlw	12
   454  0A7D  3407               	retlw	7
   455  0A7E  340E               	retlw	14
   456  0A7F  340D               	retlw	13
   457  0A80  3406               	retlw	6
   458  0A81  3409               	retlw	9
   459  0A82  3405               	retlw	5
   460  0A83  3400               	retlw	0
   461  0A84  3405               	retlw	5
   462  0A85  3402               	retlw	2
   463  0A86  340C               	retlw	12
   464  0A87  3406               	retlw	6
   465  0A88  340A               	retlw	10
   466  0A89  340E               	retlw	14
   467  0A8A  340A               	retlw	10
   468  0A8B  340B               	retlw	11
   469  0A8C  3409               	retlw	9
   470  0A8D  3401               	retlw	1
   471  0A8E  3401               	retlw	1
   472  0A8F  3403               	retlw	3
   473                           
   474                           	psect	idataBANK3
   475  0AF7                     __pidataBANK3:	
   476                           
   477                           ;initializer for _gridWalls
   478  0AF7  3400               	retlw	0
   479  0AF8  3400               	retlw	0
   480  0AF9  3400               	retlw	0
   481  0AFA  3400               	retlw	0
   482  0AFB  3400               	retlw	0
   483  0AFC  3400               	retlw	0
   484  0AFD  3400               	retlw	0
   485  0AFE  3400               	retlw	0
   486  0AFF  3401               	retlw	1
   487  0B00  3401               	retlw	1
   488  0B01  3401               	retlw	1
   489  0B02  3401               	retlw	1
   490  0B03  3401               	retlw	1
   491  0B04  3401               	retlw	1
   492  0B05  3401               	retlw	1
   493  0B06  3401               	retlw	1
   494  0B07  3400               	retlw	0
   495  0B08  3400               	retlw	0
   496  0B09  3400               	retlw	0
   497  0B0A  3400               	retlw	0
   498  0B0B  3401               	retlw	1
   499  0B0C  3401               	retlw	1
   500  0B0D  3401               	retlw	1
   501  0B0E  3401               	retlw	1
   502  0B0F  3400               	retlw	0
   503  0B10  3400               	retlw	0
   504  0B11  3400               	retlw	0
   505  0B12  3400               	retlw	0
   506  0B13  3401               	retlw	1
   507  0B14  3401               	retlw	1
   508  0B15  3401               	retlw	1
   509  0B16  3401               	retlw	1
   510  0B17  3400               	retlw	0
   511  0B18  3400               	retlw	0
   512  0B19  3401               	retlw	1
   513  0B1A  3401               	retlw	1
   514  0B1B  3400               	retlw	0
   515  0B1C  3400               	retlw	0
   516  0B1D  3401               	retlw	1
   517  0B1E  3401               	retlw	1
   518  0B1F  3400               	retlw	0
   519  0B20  3400               	retlw	0
   520  0B21  3401               	retlw	1
   521  0B22  3401               	retlw	1
   522  0B23  3400               	retlw	0
   523  0B24  3400               	retlw	0
   524  0B25  3401               	retlw	1
   525  0B26  3401               	retlw	1
   526  0B27  3400               	retlw	0
   527  0B28  3401               	retlw	1
   528  0B29  3400               	retlw	0
   529  0B2A  3401               	retlw	1
   530  0B2B  3400               	retlw	0
   531  0B2C  3401               	retlw	1
   532  0B2D  3400               	retlw	0
   533  0B2E  3401               	retlw	1
   534  0B2F  3400               	retlw	0
   535  0B30  3401               	retlw	1
   536  0B31  3400               	retlw	0
   537  0B32  3401               	retlw	1
   538  0B33  3400               	retlw	0
   539  0B34  3401               	retlw	1
   540  0B35  3400               	retlw	0
   541  0B36  3401               	retlw	1
   542  001F                     _ADCON0	set	31
   543  0005                     _PORTA	set	5
   544  0006                     _PORTB	set	6
   545  0007                     _PORTC	set	7
   546  0008                     _PORTD	set	8
   547  0009                     _PORTE	set	9
   548  001A                     _RCREG	set	26
   549  0018                     _RCSTA	set	24
   550  0013                     _SSPBUF	set	19
   551  0014                     _SSPCON	set	20
   552  0001                     _TMR0	set	1
   553  0019                     _TXREG	set	25
   554  001E                     _ADRESH	set	30
   555  005F                     _GIE	set	95
   556  00FA                     _GO	set	250
   557  005E                     _PEIE	set	94
   558  0030                     _RB0	set	48
   559  0031                     _RB1	set	49
   560  0032                     _RB2	set	50
   561  0033                     _RB3	set	51
   562  003A                     _RC2	set	58
   563  0065                     _RCIF	set	101
   564  0048                     _RE0	set	72
   565  0049                     _RE1	set	73
   566  004A                     _RE2	set	74
   567  0063                     _SSPIF	set	99
   568  005D                     _TMR0IE	set	93
   569  005A                     _TMR0IF	set	90
   570  009F                     _ADCON1	set	159
   571  009E                     _ADRESL	set	158
   572  0081                     _OPTION_REG	set	129
   573  0099                     _SPBRG	set	153
   574  0094                     _SSPSTAT	set	148
   575  0085                     _TRISA	set	133
   576  0086                     _TRISB	set	134
   577  0087                     _TRISC	set	135
   578  0088                     _TRISD	set	136
   579  0089                     _TRISE	set	137
   580  0098                     _TXSTA	set	152
   581  04C1                     _TRMT	set	1217
   582                           
   583                           	psect	strings
   584  0800                     __pstrings:	
   585  0800                     stringtab:	
   586  0800                     __stringtab:	
   587  0800                     stringcode:	
   588                           ;	String table - string pointers are 1 byte each
   589                           
   590  0800                     stringdir:	
   591  0800  3008               	movlw	high stringdir
   592  0801  008A               	movwf	10
   593  0802  0804               	movf	4,w
   594  0803  0A84               	incf	4,f
   595  0804  0782               	addwf	2,f
   596  0805                     __stringbase:	
   597  0805  3400               	retlw	0
   598  0806                     __end_of__stringtab:	
   599  0806                     STR_1:	
   600  0806  3457               	retlw	87	;'W'
   601  0807  346F               	retlw	111	;'o'
   602  0808  3472               	retlw	114	;'r'
   603  0809  346B               	retlw	107	;'k'
   604  080A  3469               	retlw	105	;'i'
   605  080B  346E               	retlw	110	;'n'
   606  080C  3467               	retlw	103	;'g'
   607  080D  342E               	retlw	46	;'.'
   608  080E  342E               	retlw	46	;'.'
   609  080F  342E               	retlw	46	;'.'
   610  0810  3400               	retlw	0
   611                           
   612                           ; #config settings
   613  0000                     
   614                           	psect	cinit
   615  0015                     start_initialization:	
   616  0015                     __initialization:	
   617                           
   618                           ; Initialize objects allocated to BANK3
   619  0015  1783               	bsf	3,7	;select IRP bank2
   620  0016  30D0               	movlw	low (__pdataBANK3+64)
   621  0017  00FD               	movwf	btemp+-1
   622  0018  300A               	movlw	high __pidataBANK3
   623  0019  00FE               	movwf	btemp
   624  001A  30F7               	movlw	low __pidataBANK3
   625  001B  00FF               	movwf	btemp+1
   626  001C  3090               	movlw	low __pdataBANK3
   627  001D  0084               	movwf	4
   628  001E  120A  158A  21A1  120A  118A  	fcall	init_ram0
   629                           
   630                           ; Initialize objects allocated to BANK1
   631  0023  1383               	bcf	3,7	;select IRP bank0
   632  0024  30C8               	movlw	low (__pdataBANK1+40)
   633  0025  00FD               	movwf	btemp+-1
   634  0026  300A               	movlw	high __pidataBANK1
   635  0027  00FE               	movwf	btemp
   636  0028  3068               	movlw	low __pidataBANK1
   637  0029  00FF               	movwf	btemp+1
   638  002A  30A0               	movlw	low __pdataBANK1
   639  002B  0084               	movwf	4
   640  002C  120A  158A  21A1  120A  118A  	fcall	init_ram0
   641                           
   642                           ; Initialize objects allocated to BANK0
   643  0031  306C               	movlw	low (__pdataBANK0+7)
   644  0032  00FD               	movwf	btemp+-1
   645  0033  3009               	movlw	high __pidataBANK0
   646  0034  00FE               	movwf	btemp
   647  0035  3051               	movlw	low __pidataBANK0
   648  0036  00FF               	movwf	btemp+1
   649  0037  3065               	movlw	low __pdataBANK0
   650  0038  0084               	movwf	4
   651  0039  120A  158A  21A1  120A  118A  	fcall	init_ram0
   652                           
   653                           ; Clear objects allocated to BANK3
   654  003E  1783               	bsf	3,7	;select IRP bank2
   655  003F  30D0               	movlw	low __pbssBANK3
   656  0040  0084               	movwf	4
   657  0041  30F0               	movlw	low (__pbssBANK3+32)
   658  0042  120A  158A  2158  120A  118A  	fcall	clear_ram0
   659                           
   660                           ; Clear objects allocated to BANK1
   661  0047  1383               	bcf	3,7	;select IRP bank0
   662  0048  30C8               	movlw	low __pbssBANK1
   663  0049  0084               	movwf	4
   664  004A  30EC               	movlw	low (__pbssBANK1+36)
   665  004B  120A  158A  2158  120A  118A  	fcall	clear_ram0
   666                           
   667                           ; Clear objects allocated to BANK0
   668  0050  3020               	movlw	low __pbssBANK0
   669  0051  0084               	movwf	4
   670  0052  304B               	movlw	low (__pbssBANK0+43)
   671  0053  120A  158A  2158   	fcall	clear_ram0
   672                           
   673                           ; Clear objects allocated to COMMON
   674  0056  01F6               	clrf	__pbssCOMMON& (0+127)
   675  0057  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   676  0058  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   677  0059  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   678                           
   679                           ; Clear objects allocated to BITCOMMON
   680  005A  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   681  005B                     end_of_initialization:	
   682                           ;End of C runtime variable initialization code
   683                           
   684  005B                     __end_of__initialization:	
   685  005B  0183               	clrf	3
   686  005C  120A  118A  285F   	ljmp	_main	;jump to C main() function
   687                           
   688                           	psect	bitbssCOMMON
   689  0380                     __pbitbssCOMMON:	
   690  0380                     _IR_Wall:	
   691  0380                     	ds	1
   692  0381                     _down:	
   693  0381                     	ds	1
   694  0382                     _left:	
   695  0382                     	ds	1
   696  0383                     _reset_flag:	
   697  0383                     	ds	1
   698  0384                     _right:	
   699  0384                     	ds	1
   700  0385                     _targets_found:	
   701  0385                     	ds	1
   702  0386                     _up:	
   703  0386                     	ds	1
   704                           
   705                           	psect	bssCOMMON
   706  0076                     __pbssCOMMON:	
   707  0076                     _adcRAW:	
   708  0076                     	ds	2
   709  0078                     _ADC_ADJUST:	
   710  0078                     	ds	2
   711                           
   712                           	psect	bssBANK0
   713  0020                     __pbssBANK0:	
   714  0020                     _ADJUSTED_SPEED_L:	
   715  0020                     	ds	2
   716  0022                     _ADJUSTED_SPEED_R:	
   717  0022                     	ds	2
   718  0024                     _Distance:	
   719  0024                     	ds	2
   720  0026                     _angle:	
   721  0026                     	ds	2
   722  0028                     _distance:	
   723  0028                     	ds	2
   724  002A                     _loop:	
   725  002A                     	ds	2
   726  002C                     _time_count:	
   727  002C                     	ds	2
   728  002E                     _timerLoop:	
   729  002E                     	ds	2
   730  0030                     _LeftSpeedH:	
   731  0030                     	ds	1
   732  0031                     _LeftSpeedL:	
   733  0031                     	ds	1
   734  0032                     _PB7Counter:	
   735  0032                     	ds	1
   736  0033                     _PB8Counter:	
   737  0033                     	ds	1
   738  0034                     _RightSpeedH:	
   739  0034                     	ds	1
   740  0035                     _RightSpeedL:	
   741  0035                     	ds	1
   742  0036                     _c:	
   743  0036                     	ds	1
   744  0037                     _intersection_orientation:	
   745  0037                     	ds	1
   746  0038                     _lowByte:	
   747  0038                     	ds	1
   748  0039                     _orientation_path:	
   749  0039                     	ds	1
   750  003A                     _pathCount:	
   751  003A                     	ds	1
   752  003B                     _r:	
   753  003B                     	ds	1
   754  003C                     _radH:	
   755  003C                     	ds	1
   756  003D                     _radL:	
   757  003D                     	ds	1
   758  003E                     _speedH:	
   759  003E                     	ds	1
   760  003F                     _speedL:	
   761  003F                     	ds	1
   762  0040                     _targets:	
   763  0040                     	ds	1
   764  0041                     _x_goto:	
   765  0041                     	ds	1
   766  0042                     _x_int:	
   767  0042                     	ds	1
   768  0043                     _x_path:	
   769  0043                     	ds	1
   770  0044                     _x_target:	
   771  0044                     	ds	1
   772  0045                     _y:	
   773  0045                     	ds	1
   774  0046                     _y_goto:	
   775  0046                     	ds	1
   776  0047                     _y_int:	
   777  0047                     	ds	1
   778  0048                     _y_path:	
   779  0048                     	ds	1
   780  0049                     _y_target:	
   781  0049                     	ds	1
   782  004A                     _highByte:	
   783  004A                     	ds	1
   784                           
   785                           	psect	dataBANK0
   786  0065                     __pdataBANK0:	
   787  0065                     _CURRENT_SPEED_L:	
   788  0065                     	ds	2
   789  0067                     _CURRENT_SPEED_R:	
   790  0067                     	ds	2
   791  0069                     _orientation:	
   792  0069                     	ds	1
   793  006A                     _pathCountShortest:	
   794  006A                     	ds	1
   795  006B                     _x:	
   796  006B                     	ds	1
   797                           
   798                           	psect	bssBANK1
   799  00C8                     __pbssBANK1:	
   800  00C8                     _pathShortest:	
   801  00C8                     	ds	32
   802  00E8                     _VelocityLeft:	
   803  00E8                     	ds	2
   804  00EA                     _VelocityRight:	
   805  00EA                     	ds	2
   806                           
   807                           	psect	dataBANK1
   808  00A0                     __pdataBANK1:	
   809  00A0                     _mazeGrid:	
   810  00A0                     	ds	20
   811  00B4                     _mazeGridDefault:	
   812  00B4                     	ds	20
   813                           
   814                           	psect	bssBANK3
   815  01D0                     __pbssBANK3:	
   816  01D0                     _path:	
   817  01D0                     	ds	32
   818                           
   819                           	psect	dataBANK3
   820  0190                     __pdataBANK3:	
   821  0190                     _gridWalls:	
   822  0190                     	ds	64
   823                           
   824                           	psect	inittext
   825  099D                     init_fetch0:	
   826                           ;	Called with low address in FSR and high address in W
   827                           
   828  099D  087E               	movf	126,w
   829  099E  008A               	movwf	10
   830  099F  087F               	movf	127,w
   831  09A0  0082               	movwf	2
   832  09A1                     init_ram0:	
   833                           ;Called with:
   834                           ;	high address of idata address in btemp 
   835                           ;	low address of idata address in btemp+1 
   836                           ;	low address of data in FSR
   837                           ;	high address + 1 of data in btemp-1
   838                           
   839  09A1  219D  120A  158A   	fcall	init_fetch0
   840  09A4  0080               	movwf	0
   841  09A5  0A84               	incf	4,f
   842  09A6  0804               	movf	4,w
   843  09A7  067D               	xorwf	125,w
   844  09A8  1903               	btfsc	3,2
   845  09A9  3400               	retlw	0
   846  09AA  0AFF               	incf	127,f
   847  09AB  1903               	btfsc	3,2
   848  09AC  0AFE               	incf	126,f
   849  09AD  29A1               	goto	init_ram0
   850                           
   851                           	psect	clrtext
   852  0958                     clear_ram0:	
   853                           ;	Called with FSR containing the base address, and
   854                           ;	W with the last address+1
   855                           
   856  0958  0064               	clrwdt	;clear the watchdog before getting into this loop
   857  0959                     clrloop0:	
   858  0959  0180               	clrf	0	;clear RAM location pointed to by FSR
   859  095A  0A84               	incf	4,f	;increment pointer
   860  095B  0604               	xorwf	4,w	;XOR with final address
   861  095C  1903               	btfsc	3,2	;have we reached the end yet?
   862  095D  3400               	retlw	0	;all done for this memory range, return
   863  095E  0604               	xorwf	4,w	;XOR again to restore value
   864  095F  2959               	goto	clrloop0	;do the next byte
   865                           
   866                           	psect	cstackBANK2
   867  0110                     __pcstackBANK2:	
   868  0110                     main@controlByte:	
   869                           
   870                           ; 1 bytes @ 0x0
   871  0110                     	ds	1
   872  0111                     main@first:	
   873                           
   874                           ; 1 bytes @ 0x1
   875  0111                     	ds	1
   876  0112                     main@second:	
   877                           
   878                           ; 1 bytes @ 0x2
   879  0112                     	ds	1
   880  0113                     main@third:	
   881                           
   882                           ; 1 bytes @ 0x3
   883  0113                     	ds	1
   884  0114                     main@fourth:	
   885                           
   886                           ; 1 bytes @ 0x4
   887  0114                     	ds	1
   888  0115                     main@fifth:	
   889                           
   890                           ; 1 bytes @ 0x5
   891  0115                     	ds	1
   892                           
   893                           	psect	cstackCOMMON
   894  0071                     __pcstackCOMMON:	
   895  0071                     ?_lcdSetCursor:	
   896  0071                     ?_lcdWriteString:	
   897                           ; 1 bytes @ 0x0
   898                           
   899  0071                     ?_lcdWriteData:	
   900                           ; 1 bytes @ 0x0
   901                           
   902  0071                     ?_ser_putch:	
   903                           ; 1 bytes @ 0x0
   904                           
   905  0071                     ?_ser_init:	
   906                           ; 1 bytes @ 0x0
   907                           
   908  0071                     ?_setupSPI:	
   909                           ; 1 bytes @ 0x0
   910                           
   911  0071                     ?_setupLCD:	
   912                           ; 1 bytes @ 0x0
   913                           
   914  0071                     ?_setupADC:	
   915                           ; 1 bytes @ 0x0
   916                           
   917  0071                     ?_spi_transfer:	
   918                           ; 1 bytes @ 0x0
   919                           
   920  0071                     ?_Drive1m:	
   921                           ; 1 bytes @ 0x0
   922                           
   923  0071                     ?_Turn90:	
   924                           ; 1 bytes @ 0x0
   925                           
   926  0071                     ?_TravelPath:	
   927                           ; 1 bytes @ 0x0
   928                           
   929  0071                     ?_re_route:	
   930                           ; 1 bytes @ 0x0
   931                           
   932  0071                     ?_isr:	
   933                           ; 1 bytes @ 0x0
   934                           
   935  0071                     ??_isr:	
   936                           ; 1 bytes @ 0x0
   937                           
   938  0071                     ?_main:	
   939                           ; 1 bytes @ 0x0
   940                           
   941  0071                     ?_lcdWriteControl:	
   942                           ; 1 bytes @ 0x0
   943                           
   944  0071                     ?_ser_getch:	
   945                           ; 1 bytes @ 0x0
   946                           
   947                           
   948                           ; 1 bytes @ 0x0
   949  0071                     	ds	5
   950                           
   951                           	psect	cstackBANK0
   952  004B                     __pcstackBANK0:	
   953  004B                     ??_lcdWriteData:	
   954  004B                     ??_ser_putch:	
   955                           ; 1 bytes @ 0x0
   956                           
   957  004B                     ??_ser_init:	
   958                           ; 1 bytes @ 0x0
   959                           
   960  004B                     ??_setupSPI:	
   961                           ; 1 bytes @ 0x0
   962                           
   963  004B                     ??_setupADC:	
   964                           ; 1 bytes @ 0x0
   965                           
   966  004B                     ??_spi_transfer:	
   967                           ; 1 bytes @ 0x0
   968                           
   969  004B                     ??_lcdWriteControl:	
   970                           ; 1 bytes @ 0x0
   971                           
   972  004B                     ??_ser_getch:	
   973                           ; 1 bytes @ 0x0
   974                           
   975  004B                     ?___bmul:	
   976                           ; 1 bytes @ 0x0
   977                           
   978  004B                     ser_putch@c:	
   979                           ; 1 bytes @ 0x0
   980                           
   981  004B                     ___bmul@multiplicand:	
   982                           ; 1 bytes @ 0x0
   983                           
   984                           
   985                           ; 1 bytes @ 0x0
   986  004B                     	ds	1
   987  004C                     ?_DriveDirect:	
   988  004C                     ?_Drive:	
   989                           ; 1 bytes @ 0x1
   990                           
   991  004C                     ??___bmul:	
   992                           ; 1 bytes @ 0x1
   993                           
   994  004C                     ser_getch@rxbyte:	
   995                           ; 1 bytes @ 0x1
   996                           
   997  004C                     Drive@speedL:	
   998                           ; 1 bytes @ 0x1
   999                           
  1000  004C                     spi_transfer@temp:	
  1001                           ; 1 bytes @ 0x1
  1002                           
  1003  004C                     DriveDirect@VelocityRight:	
  1004                           ; 1 bytes @ 0x1
  1005                           
  1006                           
  1007                           ; 2 bytes @ 0x1
  1008  004C                     	ds	1
  1009  004D                     ?_getSensorData:	
  1010  004D                     lcdWriteControl@databyte:	
  1011                           ; 2 bytes @ 0x2
  1012                           
  1013  004D                     lcdWriteData@databyte:	
  1014                           ; 1 bytes @ 0x2
  1015                           
  1016  004D                     Drive@radH:	
  1017                           ; 1 bytes @ 0x2
  1018                           
  1019  004D                     getSensorData@bytes:	
  1020                           ; 1 bytes @ 0x2
  1021                           
  1022  004D                     spi_transfer@data:	
  1023                           ; 1 bytes @ 0x2
  1024                           
  1025  004D                     ___bmul@product:	
  1026                           ; 1 bytes @ 0x2
  1027                           
  1028                           
  1029                           ; 1 bytes @ 0x2
  1030  004D                     	ds	1
  1031  004E                     ??_lcdSetCursor:	
  1032  004E                     ??_lcdWriteString:	
  1033                           ; 1 bytes @ 0x3
  1034                           
  1035  004E                     ??_setupLCD:	
  1036                           ; 1 bytes @ 0x3
  1037                           
  1038  004E                     lcdSetCursor@address:	
  1039                           ; 1 bytes @ 0x3
  1040                           
  1041  004E                     Drive@radL:	
  1042                           ; 1 bytes @ 0x3
  1043                           
  1044  004E                     ___bmul@multiplier:	
  1045                           ; 1 bytes @ 0x3
  1046                           
  1047  004E                     DriveDirect@VelocityLeft:	
  1048                           ; 1 bytes @ 0x3
  1049                           
  1050                           
  1051                           ; 2 bytes @ 0x3
  1052  004E                     	ds	1
  1053  004F                     ??_getSensorData:	
  1054  004F                     ??_Drive:	
  1055                           ; 1 bytes @ 0x4
  1056                           
  1057  004F                     lcdWriteString@s:	
  1058                           ; 1 bytes @ 0x4
  1059                           
  1060  004F                     Drive@speedH:	
  1061                           ; 1 bytes @ 0x4
  1062                           
  1063                           
  1064                           ; 1 bytes @ 0x4
  1065  004F                     	ds	1
  1066  0050                     ??_DriveDirect:	
  1067  0050                     ?_PathTo:	
  1068                           ; 1 bytes @ 0x5
  1069                           
  1070  0050                     PathTo@y_target:	
  1071                           ; 1 bytes @ 0x5
  1072                           
  1073                           
  1074                           ; 1 bytes @ 0x5
  1075  0050                     	ds	1
  1076  0051                     ??_PathTo:	
  1077  0051                     getSensorData@packetID:	
  1078                           ; 1 bytes @ 0x6
  1079                           
  1080  0051                     DriveDirect@data:	
  1081                           ; 1 bytes @ 0x6
  1082                           
  1083                           
  1084                           ; 2 bytes @ 0x6
  1085  0051                     	ds	1
  1086  0052                     getSensorData@sensor:	
  1087                           
  1088                           ; 2 bytes @ 0x7
  1089  0052                     	ds	1
  1090  0053                     DriveDirect@data_467:	
  1091                           
  1092                           ; 2 bytes @ 0x8
  1093  0053                     	ds	2
  1094  0055                     ??_Drive1m:	
  1095  0055                     ??_Turn90:	
  1096                           ; 1 bytes @ 0xA
  1097                           
  1098                           
  1099                           ; 1 bytes @ 0xA
  1100  0055                     	ds	3
  1101  0058                     PathTo@x_target:	
  1102  0058                     Drive1m@n:	
  1103                           ; 1 bytes @ 0xD
  1104                           
  1105  0058                     Turn90@direction:	
  1106                           ; 1 bytes @ 0xD
  1107                           
  1108                           
  1109                           ; 1 bytes @ 0xD
  1110  0058                     	ds	1
  1111  0059                     PathTo@sum:	
  1112  0059                     Drive1m@omni_IR:	
  1113                           ; 1 bytes @ 0xE
  1114                           
  1115                           
  1116                           ; 1 bytes @ 0xE
  1117  0059                     	ds	1
  1118  005A                     ??_TravelPath:	
  1119  005A                     PathTo@loop:	
  1120                           ; 1 bytes @ 0xF
  1121                           
  1122                           
  1123                           ; 2 bytes @ 0xF
  1124  005A                     	ds	2
  1125  005C                     TravelPath@n:	
  1126                           
  1127                           ; 1 bytes @ 0x11
  1128  005C                     	ds	1
  1129  005D                     ??_re_route:	
  1130                           
  1131                           ; 1 bytes @ 0x12
  1132  005D                     	ds	5
  1133  0062                     ??_main:	
  1134                           
  1135                           ; 1 bytes @ 0x17
  1136  0062                     	ds	3
  1137                           
  1138                           	psect	maintext
  1139  005F                     __pmaintext:	
  1140 ;;
  1141 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1142 ;;
  1143 ;; *************** function _main *****************
  1144 ;; Defined at:
  1145 ;;		line 471 in file "main.c"
  1146 ;; Parameters:    Size  Location     Type
  1147 ;;		None
  1148 ;; Auto vars:     Size  Location     Type
  1149 ;;  fifth           1    5[BANK2 ] unsigned char 
  1150 ;;  fourth          1    4[BANK2 ] unsigned char 
  1151 ;;  third           1    3[BANK2 ] unsigned char 
  1152 ;;  second          1    2[BANK2 ] unsigned char 
  1153 ;;  first           1    1[BANK2 ] unsigned char 
  1154 ;;  controlByte     1    0[BANK2 ] unsigned char 
  1155 ;; Return value:  Size  Location     Type
  1156 ;;                  1    wreg      void 
  1157 ;; Registers used:
  1158 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1159 ;; Tracked objects:
  1160 ;;		On entry : B00/0
  1161 ;;		On exit  : 0/0
  1162 ;;		Unchanged: 0/0
  1163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1164 ;;      Params:         0       0       0       0       0
  1165 ;;      Locals:         0       0       0       0       6
  1166 ;;      Temps:          0       3       0       0       0
  1167 ;;      Totals:         0       3       0       0       6
  1168 ;;Total ram usage:        9 bytes
  1169 ;; Hardware stack levels required when called:    6
  1170 ;; This function calls:
  1171 ;;		_PathTo
  1172 ;;		_TravelPath
  1173 ;;		_re_route
  1174 ;;		_ser_init
  1175 ;;		_ser_putch
  1176 ;;		_setupADC
  1177 ;;		_setupLCD
  1178 ;;		_setupSPI
  1179 ;;		_spi_transfer
  1180 ;; This function is called by:
  1181 ;;		Startup code after reset
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185                           
  1186                           ;psect for function _main
  1187  005F                     _main:	
  1188                           
  1189                           ;main.c: 473: _delay((unsigned long)((5000)*(20000000/4000.0)));
  1190                           
  1191                           ;incstack = 0
  1192                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1193  005F  307F               	movlw	127
  1194  0060  1283               	bcf	3,5	;RP0=0, select bank0
  1195  0061  1303               	bcf	3,6	;RP1=0, select bank0
  1196  0062  00E4               	movwf	??_main+2
  1197  0063  30D4               	movlw	212
  1198  0064  00E3               	movwf	??_main+1
  1199  0065  30AE               	movlw	174
  1200  0066  00E2               	movwf	??_main
  1201  0067                     u3567:	
  1202  0067  0BE2               	decfsz	??_main,f
  1203  0068  2867               	goto	u3567
  1204  0069  0BE3               	decfsz	??_main+1,f
  1205  006A  2867               	goto	u3567
  1206  006B  0BE4               	decfsz	??_main+2,f
  1207  006C  2867               	goto	u3567
  1208  006D  286E               	nop2
  1209                           
  1210                           ;main.c: 475: ser_init();
  1211  006E  120A  158A  217F  120A  118A  	fcall	_ser_init
  1212                           
  1213                           ;main.c: 476: setupSPI();
  1214  0073  120A  118A  27E2  120A  118A  	fcall	_setupSPI
  1215                           
  1216                           ;main.c: 477: setupLCD();
  1217  0078  120A  158A  2290  120A  118A  	fcall	_setupLCD
  1218                           
  1219                           ;main.c: 478: setupADC();
  1220  007D  120A  158A  21E8  120A  118A  	fcall	_setupADC
  1221                           
  1222                           ;main.c: 480: TRISB = 0b00000011;
  1223  0082  3003               	movlw	3
  1224  0083  1683               	bsf	3,5	;RP0=1, select bank1
  1225  0084  1303               	bcf	3,6	;RP1=0, select bank1
  1226  0085  0086               	movwf	6	;volatile
  1227                           
  1228                           ;main.c: 481: PORTB = 0b11111100;
  1229  0086  30FC               	movlw	252
  1230  0087  1283               	bcf	3,5	;RP0=0, select bank0
  1231  0088  1303               	bcf	3,6	;RP1=0, select bank0
  1232  0089  0086               	movwf	6	;volatile
  1233                           
  1234                           ;main.c: 483: unsigned char controlByte = 0b00001101;
  1235  008A  300D               	movlw	13
  1236  008B  00E2               	movwf	??_main
  1237  008C  0862               	movf	??_main,w
  1238  008D  1283               	bcf	3,5	;RP0=0, select bank2
  1239  008E  1703               	bsf	3,6	;RP1=1, select bank2
  1240  008F  0090               	movwf	main@controlByte^(0+256)
  1241                           
  1242                           ;main.c: 484: spi_transfer(controlByte);
  1243  0090  0810               	movf	main@controlByte^(0+256),w
  1244  0091  120A  158A  218E  120A  118A  	fcall	_spi_transfer
  1245                           
  1246                           ;main.c: 486: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1247  0096  301A               	movlw	26
  1248  0097  1283               	bcf	3,5	;RP0=0, select bank0
  1249  0098  1303               	bcf	3,6	;RP1=0, select bank0
  1250  0099  00E4               	movwf	??_main+2
  1251  009A  305E               	movlw	94
  1252  009B  00E3               	movwf	??_main+1
  1253  009C  3086               	movlw	134
  1254  009D  00E2               	movwf	??_main
  1255  009E                     u3577:	
  1256  009E  0BE2               	decfsz	??_main,f
  1257  009F  289E               	goto	u3577
  1258  00A0  0BE3               	decfsz	??_main+1,f
  1259  00A1  289E               	goto	u3577
  1260  00A2  0BE4               	decfsz	??_main+2,f
  1261  00A3  289E               	goto	u3577
  1262  00A4  0000               	nop
  1263                           
  1264                           ;main.c: 487: ser_putch(128);
  1265  00A5  3080               	movlw	128
  1266  00A6  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1267                           
  1268                           ;main.c: 488: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1269  00AB  301A               	movlw	26
  1270  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  1271  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  1272  00AE  00E4               	movwf	??_main+2
  1273  00AF  305E               	movlw	94
  1274  00B0  00E3               	movwf	??_main+1
  1275  00B1  3086               	movlw	134
  1276  00B2  00E2               	movwf	??_main
  1277  00B3                     u3587:	
  1278  00B3  0BE2               	decfsz	??_main,f
  1279  00B4  28B3               	goto	u3587
  1280  00B5  0BE3               	decfsz	??_main+1,f
  1281  00B6  28B3               	goto	u3587
  1282  00B7  0BE4               	decfsz	??_main+2,f
  1283  00B8  28B3               	goto	u3587
  1284  00B9  0000               	nop
  1285                           
  1286                           ;main.c: 489: ser_putch(132);
  1287  00BA  3084               	movlw	132
  1288  00BB  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1289                           
  1290                           ;main.c: 490: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1291  00C0  301A               	movlw	26
  1292  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  1293  00C2  1303               	bcf	3,6	;RP1=0, select bank0
  1294  00C3  00E4               	movwf	??_main+2
  1295  00C4  305E               	movlw	94
  1296  00C5  00E3               	movwf	??_main+1
  1297  00C6  3086               	movlw	134
  1298  00C7  00E2               	movwf	??_main
  1299  00C8                     u3597:	
  1300  00C8  0BE2               	decfsz	??_main,f
  1301  00C9  28C8               	goto	u3597
  1302  00CA  0BE3               	decfsz	??_main+1,f
  1303  00CB  28C8               	goto	u3597
  1304  00CC  0BE4               	decfsz	??_main+2,f
  1305  00CD  28C8               	goto	u3597
  1306  00CE  0000               	nop
  1307                           
  1308                           ;main.c: 493: x = 1;
  1309  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  1310  00D0  1303               	bcf	3,6	;RP1=0, select bank0
  1311  00D1  01EB               	clrf	_x
  1312  00D2  0AEB               	incf	_x,f
  1313                           
  1314                           ;main.c: 494: y = 0;
  1315  00D3  01C5               	clrf	_y
  1316                           
  1317                           ;main.c: 495: orientation = 3;
  1318  00D4  3003               	movlw	3
  1319  00D5  00E2               	movwf	??_main
  1320  00D6  0862               	movf	??_main,w
  1321  00D7  00E9               	movwf	_orientation
  1322                           
  1323                           ;main.c: 499: ser_putch(140);
  1324  00D8  308C               	movlw	140
  1325  00D9  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1326                           
  1327                           ;main.c: 500: ser_putch(2);
  1328  00DE  3002               	movlw	2
  1329  00DF  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1330                           
  1331                           ;main.c: 501: ser_putch(10);
  1332  00E4  300A               	movlw	10
  1333  00E5  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1334                           
  1335                           ;main.c: 502: ser_putch(67);
  1336  00EA  3043               	movlw	67
  1337  00EB  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1338                           
  1339                           ;main.c: 503: ser_putch(32);
  1340  00F0  3020               	movlw	32
  1341  00F1  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1342                           
  1343                           ;main.c: 504: ser_putch(77);
  1344  00F6  304D               	movlw	77
  1345  00F7  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1346                           
  1347                           ;main.c: 505: ser_putch(16);
  1348  00FC  3010               	movlw	16
  1349  00FD  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1350                           
  1351                           ;main.c: 506: ser_putch(77);
  1352  0102  304D               	movlw	77
  1353  0103  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1354                           
  1355                           ;main.c: 507: ser_putch(16);
  1356  0108  3010               	movlw	16
  1357  0109  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1358                           
  1359                           ;main.c: 508: ser_putch(77);
  1360  010E  304D               	movlw	77
  1361  010F  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1362                           
  1363                           ;main.c: 509: ser_putch(16);
  1364  0114  3010               	movlw	16
  1365  0115  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1366                           
  1367                           ;main.c: 510: ser_putch(77);
  1368  011A  304D               	movlw	77
  1369  011B  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1370                           
  1371                           ;main.c: 511: ser_putch(16);
  1372  0120  3010               	movlw	16
  1373  0121  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1374                           
  1375                           ;main.c: 512: ser_putch(76);
  1376  0126  304C               	movlw	76
  1377  0127  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1378                           
  1379                           ;main.c: 513: ser_putch(16);
  1380  012C  3010               	movlw	16
  1381  012D  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1382                           
  1383                           ;main.c: 514: ser_putch(74);
  1384  0132  304A               	movlw	74
  1385  0133  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1386                           
  1387                           ;main.c: 515: ser_putch(16);
  1388  0138  3010               	movlw	16
  1389  0139  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1390                           
  1391                           ;main.c: 516: ser_putch(72);
  1392  013E  3048               	movlw	72
  1393  013F  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1394                           
  1395                           ;main.c: 517: ser_putch(32);
  1396  0144  3020               	movlw	32
  1397  0145  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1398                           
  1399                           ;main.c: 518: ser_putch(79);
  1400  014A  304F               	movlw	79
  1401  014B  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1402                           
  1403                           ;main.c: 519: ser_putch(16);
  1404  0150  3010               	movlw	16
  1405  0151  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1406                           
  1407                           ;main.c: 520: ser_putch(84);
  1408  0156  3054               	movlw	84
  1409  0157  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1410                           
  1411                           ;main.c: 521: ser_putch(48);
  1412  015C  3030               	movlw	48
  1413  015D  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1414                           
  1415                           ;main.c: 524: char first = 16;
  1416  0162  3010               	movlw	16
  1417  0163  1283               	bcf	3,5	;RP0=0, select bank0
  1418  0164  1303               	bcf	3,6	;RP1=0, select bank0
  1419  0165  00E2               	movwf	??_main
  1420  0166  0862               	movf	??_main,w
  1421  0167  1283               	bcf	3,5	;RP0=0, select bank2
  1422  0168  1703               	bsf	3,6	;RP1=1, select bank2
  1423  0169  0091               	movwf	main@first^(0+256)
  1424                           
  1425                           ;main.c: 525: char second = 8;
  1426  016A  3008               	movlw	8
  1427  016B  1283               	bcf	3,5	;RP0=0, select bank0
  1428  016C  1303               	bcf	3,6	;RP1=0, select bank0
  1429  016D  00E2               	movwf	??_main
  1430  016E  0862               	movf	??_main,w
  1431  016F  1283               	bcf	3,5	;RP0=0, select bank2
  1432  0170  1703               	bsf	3,6	;RP1=1, select bank2
  1433  0171  0092               	movwf	main@second^(0+256)
  1434                           
  1435                           ;main.c: 526: char third = 12;
  1436  0172  300C               	movlw	12
  1437  0173  1283               	bcf	3,5	;RP0=0, select bank0
  1438  0174  1303               	bcf	3,6	;RP1=0, select bank0
  1439  0175  00E2               	movwf	??_main
  1440  0176  0862               	movf	??_main,w
  1441  0177  1283               	bcf	3,5	;RP0=0, select bank2
  1442  0178  1703               	bsf	3,6	;RP1=1, select bank2
  1443  0179  0093               	movwf	main@third^(0+256)
  1444                           
  1445                           ;main.c: 527: char fourth = 36;
  1446  017A  3024               	movlw	36
  1447  017B  1283               	bcf	3,5	;RP0=0, select bank0
  1448  017C  1303               	bcf	3,6	;RP1=0, select bank0
  1449  017D  00E2               	movwf	??_main
  1450  017E  0862               	movf	??_main,w
  1451  017F  1283               	bcf	3,5	;RP0=0, select bank2
  1452  0180  1703               	bsf	3,6	;RP1=1, select bank2
  1453  0181  0094               	movwf	main@fourth^(0+256)
  1454                           
  1455                           ;main.c: 528: char fifth = 32;
  1456  0182  3020               	movlw	32
  1457  0183  1283               	bcf	3,5	;RP0=0, select bank0
  1458  0184  1303               	bcf	3,6	;RP1=0, select bank0
  1459  0185  00E2               	movwf	??_main
  1460  0186  0862               	movf	??_main,w
  1461  0187  1283               	bcf	3,5	;RP0=0, select bank2
  1462  0188  1703               	bsf	3,6	;RP1=1, select bank2
  1463  0189  0095               	movwf	main@fifth^(0+256)
  1464                           
  1465                           ;main.c: 532: ser_putch(140);
  1466  018A  308C               	movlw	140
  1467  018B  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1468                           
  1469                           ;main.c: 533: ser_putch(3);
  1470  0190  3003               	movlw	3
  1471  0191  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1472                           
  1473                           ;main.c: 534: ser_putch(16);
  1474  0196  3010               	movlw	16
  1475  0197  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1476                           
  1477                           ;main.c: 535: ser_putch(62);
  1478  019C  303E               	movlw	62
  1479  019D  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1480                           
  1481                           ;main.c: 536: ser_putch(first);
  1482  01A2  1283               	bcf	3,5	;RP0=0, select bank2
  1483  01A3  1703               	bsf	3,6	;RP1=1, select bank2
  1484  01A4  0811               	movf	main@first^(0+256),w
  1485  01A5  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1486                           
  1487                           ;main.c: 537: ser_putch(69);
  1488  01AA  3045               	movlw	69
  1489  01AB  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1490                           
  1491                           ;main.c: 538: ser_putch(second);
  1492  01B0  1283               	bcf	3,5	;RP0=0, select bank2
  1493  01B1  1703               	bsf	3,6	;RP1=1, select bank2
  1494  01B2  0812               	movf	main@second^(0+256),w
  1495  01B3  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1496                           
  1497                           ;main.c: 539: ser_putch(62);
  1498  01B8  303E               	movlw	62
  1499  01B9  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1500                           
  1501                           ;main.c: 540: ser_putch(third);
  1502  01BE  1283               	bcf	3,5	;RP0=0, select bank2
  1503  01BF  1703               	bsf	3,6	;RP1=1, select bank2
  1504  01C0  0813               	movf	main@third^(0+256),w
  1505  01C1  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1506                           
  1507                           ;main.c: 541: ser_putch(65);
  1508  01C6  3041               	movlw	65
  1509  01C7  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1510                           
  1511                           ;main.c: 542: ser_putch(fourth);
  1512  01CC  1283               	bcf	3,5	;RP0=0, select bank2
  1513  01CD  1703               	bsf	3,6	;RP1=1, select bank2
  1514  01CE  0814               	movf	main@fourth^(0+256),w
  1515  01CF  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1516                           
  1517                           ;main.c: 543: ser_putch(62);
  1518  01D4  303E               	movlw	62
  1519  01D5  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1520                           
  1521                           ;main.c: 544: ser_putch(fifth);
  1522  01DA  1283               	bcf	3,5	;RP0=0, select bank2
  1523  01DB  1703               	bsf	3,6	;RP1=1, select bank2
  1524  01DC  0815               	movf	main@fifth^(0+256),w
  1525  01DD  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1526                           
  1527                           ;main.c: 546: ser_putch(65);
  1528  01E2  3041               	movlw	65
  1529  01E3  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1530                           
  1531                           ;main.c: 547: ser_putch(first);
  1532  01E8  1283               	bcf	3,5	;RP0=0, select bank2
  1533  01E9  1703               	bsf	3,6	;RP1=1, select bank2
  1534  01EA  0811               	movf	main@first^(0+256),w
  1535  01EB  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1536                           
  1537                           ;main.c: 548: ser_putch(62);
  1538  01F0  303E               	movlw	62
  1539  01F1  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1540                           
  1541                           ;main.c: 549: ser_putch(second);
  1542  01F6  1283               	bcf	3,5	;RP0=0, select bank2
  1543  01F7  1703               	bsf	3,6	;RP1=1, select bank2
  1544  01F8  0812               	movf	main@second^(0+256),w
  1545  01F9  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1546                           
  1547                           ;main.c: 550: ser_putch(65);
  1548  01FE  3041               	movlw	65
  1549  01FF  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1550                           
  1551                           ;main.c: 551: ser_putch(third);
  1552  0204  1283               	bcf	3,5	;RP0=0, select bank2
  1553  0205  1703               	bsf	3,6	;RP1=1, select bank2
  1554  0206  0813               	movf	main@third^(0+256),w
  1555  0207  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1556                           
  1557                           ;main.c: 552: ser_putch(69);
  1558  020C  3045               	movlw	69
  1559  020D  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1560                           
  1561                           ;main.c: 553: ser_putch(fourth);
  1562  0212  1283               	bcf	3,5	;RP0=0, select bank2
  1563  0213  1703               	bsf	3,6	;RP1=1, select bank2
  1564  0214  0814               	movf	main@fourth^(0+256),w
  1565  0215  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1566                           
  1567                           ;main.c: 554: ser_putch(65);
  1568  021A  3041               	movlw	65
  1569  021B  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1570                           
  1571                           ;main.c: 555: ser_putch(fifth);
  1572  0220  1283               	bcf	3,5	;RP0=0, select bank2
  1573  0221  1703               	bsf	3,6	;RP1=1, select bank2
  1574  0222  0815               	movf	main@fifth^(0+256),w
  1575  0223  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1576                           
  1577                           ;main.c: 557: ser_putch(69);
  1578  0228  3045               	movlw	69
  1579  0229  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1580                           
  1581                           ;main.c: 558: ser_putch(first);
  1582  022E  1283               	bcf	3,5	;RP0=0, select bank2
  1583  022F  1703               	bsf	3,6	;RP1=1, select bank2
  1584  0230  0811               	movf	main@first^(0+256),w
  1585  0231  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1586                           
  1587                           ;main.c: 559: ser_putch(65);
  1588  0236  3041               	movlw	65
  1589  0237  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1590                           
  1591                           ;main.c: 560: ser_putch(second);
  1592  023C  1283               	bcf	3,5	;RP0=0, select bank2
  1593  023D  1703               	bsf	3,6	;RP1=1, select bank2
  1594  023E  0812               	movf	main@second^(0+256),w
  1595  023F  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1596                           
  1597                           ;main.c: 561: ser_putch(69);
  1598  0244  3045               	movlw	69
  1599  0245  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1600                           
  1601                           ;main.c: 562: ser_putch(third);
  1602  024A  1283               	bcf	3,5	;RP0=0, select bank2
  1603  024B  1703               	bsf	3,6	;RP1=1, select bank2
  1604  024C  0813               	movf	main@third^(0+256),w
  1605  024D  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1606                           
  1607                           ;main.c: 563: ser_putch(60);
  1608  0252  303C               	movlw	60
  1609  0253  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1610                           
  1611                           ;main.c: 564: ser_putch(fourth);
  1612  0258  1283               	bcf	3,5	;RP0=0, select bank2
  1613  0259  1703               	bsf	3,6	;RP1=1, select bank2
  1614  025A  0814               	movf	main@fourth^(0+256),w
  1615  025B  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1616                           
  1617                           ;main.c: 565: ser_putch(48);
  1618  0260  3030               	movlw	48
  1619  0261  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1620                           
  1621                           ;main.c: 566: ser_putch(fifth);
  1622  0266  1283               	bcf	3,5	;RP0=0, select bank2
  1623  0267  1703               	bsf	3,6	;RP1=1, select bank2
  1624  0268  0815               	movf	main@fifth^(0+256),w
  1625  0269  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1626                           
  1627                           ;main.c: 568: ser_putch(65);
  1628  026E  3041               	movlw	65
  1629  026F  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1630                           
  1631                           ;main.c: 569: ser_putch(16);
  1632  0274  3010               	movlw	16
  1633  0275  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1634                           
  1635                           ;main.c: 572: ser_putch(140);
  1636  027A  308C               	movlw	140
  1637  027B  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1638                           
  1639                           ;main.c: 573: ser_putch(4);
  1640  0280  3004               	movlw	4
  1641  0281  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1642                           
  1643                           ;main.c: 574: ser_putch(3);
  1644  0286  3003               	movlw	3
  1645  0287  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1646                           
  1647                           ;main.c: 575: ser_putch(60);
  1648  028C  303C               	movlw	60
  1649  028D  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1650                           
  1651                           ;main.c: 576: ser_putch(12);
  1652  0292  300C               	movlw	12
  1653  0293  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1654                           
  1655                           ;main.c: 577: ser_putch(65);
  1656  0298  3041               	movlw	65
  1657  0299  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1658                           
  1659                           ;main.c: 578: ser_putch(12);
  1660  029E  300C               	movlw	12
  1661  029F  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1662                           
  1663                           ;main.c: 579: ser_putch(69);
  1664  02A4  3045               	movlw	69
  1665  02A5  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1666                           
  1667                           ;main.c: 580: ser_putch(96);
  1668  02AA  3060               	movlw	96
  1669  02AB  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1670                           
  1671                           ;main.c: 584: ser_putch(140);
  1672  02B0  308C               	movlw	140
  1673  02B1  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1674                           
  1675                           ;main.c: 585: ser_putch(5);
  1676  02B6  3005               	movlw	5
  1677  02B7  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1678                           
  1679                           ;main.c: 586: ser_putch(11);
  1680  02BC  300B               	movlw	11
  1681  02BD  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1682                           
  1683                           ;main.c: 587: ser_putch(70);
  1684  02C2  3046               	movlw	70
  1685  02C3  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1686                           
  1687                           ;main.c: 588: ser_putch(12);
  1688  02C8  300C               	movlw	12
  1689  02C9  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1690                           
  1691                           ;main.c: 589: ser_putch(67);
  1692  02CE  3043               	movlw	67
  1693  02CF  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1694                           
  1695                           ;main.c: 590: ser_putch(12);
  1696  02D4  300C               	movlw	12
  1697  02D5  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1698                           
  1699                           ;main.c: 591: ser_putch(62);
  1700  02DA  303E               	movlw	62
  1701  02DB  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1702                           
  1703                           ;main.c: 592: ser_putch(96);
  1704  02E0  3060               	movlw	96
  1705  02E1  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1706                           
  1707                           ;main.c: 593: ser_putch(70);
  1708  02E6  3046               	movlw	70
  1709  02E7  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1710                           
  1711                           ;main.c: 594: ser_putch(12);
  1712  02EC  300C               	movlw	12
  1713  02ED  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1714                           
  1715                           ;main.c: 595: ser_putch(67);
  1716  02F2  3043               	movlw	67
  1717  02F3  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1718                           
  1719                           ;main.c: 596: ser_putch(12);
  1720  02F8  300C               	movlw	12
  1721  02F9  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1722                           
  1723                           ;main.c: 597: ser_putch(61);
  1724  02FE  303D               	movlw	61
  1725  02FF  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1726                           
  1727                           ;main.c: 598: ser_putch(96);
  1728  0304  3060               	movlw	96
  1729  0305  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1730                           
  1731                           ;main.c: 599: ser_putch(70);
  1732  030A  3046               	movlw	70
  1733  030B  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1734                           
  1735                           ;main.c: 600: ser_putch(12);
  1736  0310  300C               	movlw	12
  1737  0311  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1738                           
  1739                           ;main.c: 601: ser_putch(67);
  1740  0316  3043               	movlw	67
  1741  0317  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1742                           
  1743                           ;main.c: 602: ser_putch(12);
  1744  031C  300C               	movlw	12
  1745  031D  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1746                           
  1747                           ;main.c: 603: ser_putch(60);
  1748  0322  303C               	movlw	60
  1749  0323  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1750                           
  1751                           ;main.c: 604: ser_putch(96);
  1752  0328  3060               	movlw	96
  1753  0329  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1754                           
  1755                           ;main.c: 605: ser_putch(70);
  1756  032E  3046               	movlw	70
  1757  032F  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1758                           
  1759                           ;main.c: 606: ser_putch(12);
  1760  0334  300C               	movlw	12
  1761  0335  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1762                           
  1763                           ;main.c: 607: ser_putch(60);
  1764  033A  303C               	movlw	60
  1765  033B  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1766                           
  1767                           ;main.c: 608: ser_putch(20);
  1768  0340  3014               	movlw	20
  1769  0341  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1770                           
  1771                           ;main.c: 611: ser_putch(140);
  1772  0346  308C               	movlw	140
  1773  0347  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1774                           
  1775                           ;main.c: 612: ser_putch(6);
  1776  034C  3006               	movlw	6
  1777  034D  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1778                           
  1779                           ;main.c: 613: ser_putch(11);
  1780  0352  300B               	movlw	11
  1781  0353  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1782                           
  1783                           ;main.c: 614: ser_putch(55);
  1784  0358  3037               	movlw	55
  1785  0359  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1786                           
  1787                           ;main.c: 615: ser_putch(22);
  1788  035E  3016               	movlw	22
  1789  035F  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1790                           
  1791                           ;main.c: 616: ser_putch(55);
  1792  0364  3037               	movlw	55
  1793  0365  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1794                           
  1795                           ;main.c: 617: ser_putch(22);
  1796  036A  3016               	movlw	22
  1797  036B  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1798                           
  1799                           ;main.c: 618: ser_putch(0);
  1800  0370  3000               	movlw	0
  1801  0371  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1802                           
  1803                           ;main.c: 619: ser_putch(2);
  1804  0376  3002               	movlw	2
  1805  0377  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1806                           
  1807                           ;main.c: 620: ser_putch(58);
  1808  037C  303A               	movlw	58
  1809  037D  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1810                           
  1811                           ;main.c: 621: ser_putch(18);
  1812  0382  3012               	movlw	18
  1813  0383  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1814                           
  1815                           ;main.c: 622: ser_putch(48);
  1816  0388  3030               	movlw	48
  1817  0389  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1818                           
  1819                           ;main.c: 623: ser_putch(24);
  1820  038E  3018               	movlw	24
  1821  038F  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1822                           
  1823                           ;main.c: 624: ser_putch(0);
  1824  0394  3000               	movlw	0
  1825  0395  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1826                           
  1827                           ;main.c: 625: ser_putch(10);
  1828  039A  300A               	movlw	10
  1829  039B  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1830                           
  1831                           ;main.c: 626: ser_putch(55);
  1832  03A0  3037               	movlw	55
  1833  03A1  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1834                           
  1835                           ;main.c: 627: ser_putch(22);
  1836  03A6  3016               	movlw	22
  1837  03A7  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1838                           
  1839                           ;main.c: 628: ser_putch(55);
  1840  03AC  3037               	movlw	55
  1841  03AD  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1842                           
  1843                           ;main.c: 629: ser_putch(22);
  1844  03B2  3016               	movlw	22
  1845  03B3  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1846                           
  1847                           ;main.c: 630: ser_putch(0);
  1848  03B8  3000               	movlw	0
  1849  03B9  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1850                           
  1851                           ;main.c: 631: ser_putch(2);
  1852  03BE  3002               	movlw	2
  1853  03BF  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1854                           
  1855                           ;main.c: 632: ser_putch(53);
  1856  03C4  3035               	movlw	53
  1857  03C5  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1858                           
  1859                           ;main.c: 633: ser_putch(18);
  1860  03CA  3012               	movlw	18
  1861  03CB  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1862                           
  1863                           ;main.c: 634: ser_putch(54);
  1864  03D0  3036               	movlw	54
  1865  03D1  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1866                           
  1867                           ;main.c: 635: ser_putch(24);
  1868  03D6  3018               	movlw	24
  1869  03D7  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1870  03DC                     l4666:	
  1871                           ;main.c: 643: while(1){
  1872                           
  1873                           
  1874                           ;main.c: 645: if(PB7Counter >= 10 && !RB1== 0){
  1875  03DC  300A               	movlw	10
  1876  03DD  1283               	bcf	3,5	;RP0=0, select bank0
  1877  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  1878  03DF  0232               	subwf	_PB7Counter,w
  1879  03E0  1803               	btfsc	3,0
  1880  03E1  1C86               	btfss	6,1	;volatile
  1881  03E2  2C28               	goto	l4682
  1882                           
  1883                           ;main.c: 648: ser_putch(141);
  1884  03E3  308D               	movlw	141
  1885  03E4  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1886                           
  1887                           ;main.c: 649: ser_putch(6);
  1888  03E9  3006               	movlw	6
  1889  03EA  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1890                           
  1891                           ;main.c: 650: _delay((unsigned long)((3000)*(20000000/4000.0)));
  1892  03EF  304D               	movlw	77
  1893  03F0  1283               	bcf	3,5	;RP0=0, select bank0
  1894  03F1  1303               	bcf	3,6	;RP1=0, select bank0
  1895  03F2  00E4               	movwf	??_main+2
  1896  03F3  3019               	movlw	25
  1897  03F4  00E3               	movwf	??_main+1
  1898  03F5  309A               	movlw	154
  1899  03F6  00E2               	movwf	??_main
  1900  03F7                     u3607:	
  1901  03F7  0BE2               	decfsz	??_main,f
  1902  03F8  2BF7               	goto	u3607
  1903  03F9  0BE3               	decfsz	??_main+1,f
  1904  03FA  2BF7               	goto	u3607
  1905  03FB  0BE4               	decfsz	??_main+2,f
  1906  03FC  2BF7               	goto	u3607
  1907  03FD  2BFE               	nop2
  1908                           
  1909                           ;main.c: 651: ser_putch(141);
  1910  03FE  308D               	movlw	141
  1911  03FF  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1912                           
  1913                           ;main.c: 652: ser_putch(6);
  1914  0404  3006               	movlw	6
  1915  0405  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1916                           
  1917                           ;main.c: 653: _delay((unsigned long)((3000)*(20000000/4000.0)));
  1918  040A  304D               	movlw	77
  1919  040B  1283               	bcf	3,5	;RP0=0, select bank0
  1920  040C  1303               	bcf	3,6	;RP1=0, select bank0
  1921  040D  00E4               	movwf	??_main+2
  1922  040E  3019               	movlw	25
  1923  040F  00E3               	movwf	??_main+1
  1924  0410  309A               	movlw	154
  1925  0411  00E2               	movwf	??_main
  1926  0412                     u3617:	
  1927  0412  0BE2               	decfsz	??_main,f
  1928  0413  2C12               	goto	u3617
  1929  0414  0BE3               	decfsz	??_main+1,f
  1930  0415  2C12               	goto	u3617
  1931  0416  0BE4               	decfsz	??_main+2,f
  1932  0417  2C12               	goto	u3617
  1933  0418  2C19               	nop2
  1934                           
  1935                           ;main.c: 654: ser_putch(141);
  1936  0419  308D               	movlw	141
  1937  041A  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1938                           
  1939                           ;main.c: 655: ser_putch(5);
  1940  041F  3005               	movlw	5
  1941  0420  120A  158A  2173  120A  118A  	fcall	_ser_putch
  1942                           
  1943                           ;main.c: 660: PB7Counter=0;
  1944  0425  1283               	bcf	3,5	;RP0=0, select bank0
  1945  0426  1303               	bcf	3,6	;RP1=0, select bank0
  1946  0427  01B2               	clrf	_PB7Counter
  1947  0428                     l4682:	
  1948                           
  1949                           ;main.c: 664: }
  1950                           ;main.c: 669: if(PB8Counter >= 10 && !RB0 == 0){
  1951  0428  300A               	movlw	10
  1952  0429  0233               	subwf	_PB8Counter,w
  1953  042A  1803               	btfsc	3,0
  1954  042B  1C06               	btfss	6,0	;volatile
  1955  042C  2BDC               	goto	l4666
  1956                           
  1957                           ;main.c: 672: PathTo(2,0);
  1958  042D  01D0               	clrf	PathTo@y_target
  1959  042E  3002               	movlw	2
  1960  042F  120A  158A  2469  120A  118A  	fcall	_PathTo
  1961                           
  1962                           ;main.c: 674: TravelPath();
  1963  0434  120A  118A  24F1  120A  118A  	fcall	_TravelPath
  1964                           
  1965                           ;main.c: 675: if (IR_Wall == 1)
  1966  0439  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  1967  043A  2C40               	goto	l4692
  1968                           
  1969                           ;main.c: 676: re_route();
  1970  043B  120A  118A  26F8  120A  118A  	fcall	_re_route
  1971  0440                     l4692:	
  1972                           
  1973                           ;main.c: 677: if (targets_found == 1){
  1974  0440  1EF0               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  1975  0441  2C50               	goto	l336
  1976                           
  1977                           ;main.c: 678: PathTo(1,0);
  1978  0442  1283               	bcf	3,5	;RP0=0, select bank0
  1979  0443  1303               	bcf	3,6	;RP1=0, select bank0
  1980  0444  01D0               	clrf	PathTo@y_target
  1981  0445  3001               	movlw	1
  1982  0446  120A  158A  2469  120A  118A  	fcall	_PathTo
  1983                           
  1984                           ;main.c: 679: TravelPath();
  1985  044B  120A  118A  24F1  120A  118A  	fcall	_TravelPath
  1986  0450                     l336:	
  1987                           
  1988                           ;main.c: 680: }
  1989                           ;main.c: 685: PathTo(3,0);
  1990  0450  1283               	bcf	3,5	;RP0=0, select bank0
  1991  0451  1303               	bcf	3,6	;RP1=0, select bank0
  1992  0452  01D0               	clrf	PathTo@y_target
  1993  0453  3003               	movlw	3
  1994  0454  120A  158A  2469  120A  118A  	fcall	_PathTo
  1995                           
  1996                           ;main.c: 687: TravelPath();
  1997  0459  120A  118A  24F1  120A  118A  	fcall	_TravelPath
  1998                           
  1999                           ;main.c: 688: if (IR_Wall == 1)
  2000  045E  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2001  045F  2C65               	goto	l4700
  2002                           
  2003                           ;main.c: 689: re_route();
  2004  0460  120A  118A  26F8  120A  118A  	fcall	_re_route
  2005  0465                     l4700:	
  2006                           
  2007                           ;main.c: 690: if (targets_found == 1){
  2008  0465  1EF0               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  2009  0466  2C75               	goto	l338
  2010                           
  2011                           ;main.c: 691: PathTo(1,0);
  2012  0467  1283               	bcf	3,5	;RP0=0, select bank0
  2013  0468  1303               	bcf	3,6	;RP1=0, select bank0
  2014  0469  01D0               	clrf	PathTo@y_target
  2015  046A  3001               	movlw	1
  2016  046B  120A  158A  2469  120A  118A  	fcall	_PathTo
  2017                           
  2018                           ;main.c: 692: TravelPath();
  2019  0470  120A  118A  24F1  120A  118A  	fcall	_TravelPath
  2020  0475                     l338:	
  2021                           
  2022                           ;main.c: 693: }
  2023                           ;main.c: 695: PathTo(4,3);
  2024  0475  3003               	movlw	3
  2025  0476  1283               	bcf	3,5	;RP0=0, select bank0
  2026  0477  1303               	bcf	3,6	;RP1=0, select bank0
  2027  0478  00E2               	movwf	??_main
  2028  0479  0862               	movf	??_main,w
  2029  047A  00D0               	movwf	PathTo@y_target
  2030  047B  3004               	movlw	4
  2031  047C  120A  158A  2469  120A  118A  	fcall	_PathTo
  2032                           
  2033                           ;main.c: 696: TravelPath();
  2034  0481  120A  118A  24F1  120A  118A  	fcall	_TravelPath
  2035                           
  2036                           ;main.c: 697: if (IR_Wall == 1)
  2037  0486  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2038  0487  2C8D               	goto	l4708
  2039                           
  2040                           ;main.c: 698: re_route();
  2041  0488  120A  118A  26F8  120A  118A  	fcall	_re_route
  2042  048D                     l4708:	
  2043                           
  2044                           ;main.c: 699: if (targets_found == 1){
  2045  048D  1EF0               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  2046  048E  2C9D               	goto	l340
  2047                           
  2048                           ;main.c: 700: PathTo(1,0);
  2049  048F  1283               	bcf	3,5	;RP0=0, select bank0
  2050  0490  1303               	bcf	3,6	;RP1=0, select bank0
  2051  0491  01D0               	clrf	PathTo@y_target
  2052  0492  3001               	movlw	1
  2053  0493  120A  158A  2469  120A  118A  	fcall	_PathTo
  2054                           
  2055                           ;main.c: 701: TravelPath();
  2056  0498  120A  118A  24F1  120A  118A  	fcall	_TravelPath
  2057  049D                     l340:	
  2058                           
  2059                           ;main.c: 702: }
  2060                           ;main.c: 704: PathTo(3,2);
  2061  049D  3002               	movlw	2
  2062  049E  1283               	bcf	3,5	;RP0=0, select bank0
  2063  049F  1303               	bcf	3,6	;RP1=0, select bank0
  2064  04A0  00E2               	movwf	??_main
  2065  04A1  0862               	movf	??_main,w
  2066  04A2  00D0               	movwf	PathTo@y_target
  2067  04A3  3003               	movlw	3
  2068  04A4  120A  158A  2469  120A  118A  	fcall	_PathTo
  2069                           
  2070                           ;main.c: 705: TravelPath();
  2071  04A9  120A  118A  24F1  120A  118A  	fcall	_TravelPath
  2072                           
  2073                           ;main.c: 706: if (IR_Wall == 1)
  2074  04AE  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2075  04AF  2CB5               	goto	l4716
  2076                           
  2077                           ;main.c: 707: re_route();
  2078  04B0  120A  118A  26F8  120A  118A  	fcall	_re_route
  2079  04B5                     l4716:	
  2080                           
  2081                           ;main.c: 708: if (targets_found == 1){
  2082  04B5  1EF0               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  2083  04B6  2CC5               	goto	l342
  2084                           
  2085                           ;main.c: 709: PathTo(1,0);
  2086  04B7  1283               	bcf	3,5	;RP0=0, select bank0
  2087  04B8  1303               	bcf	3,6	;RP1=0, select bank0
  2088  04B9  01D0               	clrf	PathTo@y_target
  2089  04BA  3001               	movlw	1
  2090  04BB  120A  158A  2469  120A  118A  	fcall	_PathTo
  2091                           
  2092                           ;main.c: 710: TravelPath();
  2093  04C0  120A  118A  24F1  120A  118A  	fcall	_TravelPath
  2094  04C5                     l342:	
  2095                           
  2096                           ;main.c: 711: }
  2097                           ;main.c: 713: PathTo(3,3);
  2098  04C5  3003               	movlw	3
  2099  04C6  1283               	bcf	3,5	;RP0=0, select bank0
  2100  04C7  1303               	bcf	3,6	;RP1=0, select bank0
  2101  04C8  00E2               	movwf	??_main
  2102  04C9  0862               	movf	??_main,w
  2103  04CA  00D0               	movwf	PathTo@y_target
  2104  04CB  3003               	movlw	3
  2105  04CC  120A  158A  2469  120A  118A  	fcall	_PathTo
  2106                           
  2107                           ;main.c: 714: TravelPath();
  2108  04D1  120A  118A  24F1  120A  118A  	fcall	_TravelPath
  2109                           
  2110                           ;main.c: 715: if (IR_Wall == 1)
  2111  04D6  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2112  04D7  2CDD               	goto	l4724
  2113                           
  2114                           ;main.c: 716: re_route();
  2115  04D8  120A  118A  26F8  120A  118A  	fcall	_re_route
  2116  04DD                     l4724:	
  2117                           
  2118                           ;main.c: 717: if (targets_found == 1){
  2119  04DD  1EF0               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  2120  04DE  2CED               	goto	l4728
  2121                           
  2122                           ;main.c: 718: PathTo(1,0);
  2123  04DF  1283               	bcf	3,5	;RP0=0, select bank0
  2124  04E0  1303               	bcf	3,6	;RP1=0, select bank0
  2125  04E1  01D0               	clrf	PathTo@y_target
  2126  04E2  3001               	movlw	1
  2127  04E3  120A  158A  2469  120A  118A  	fcall	_PathTo
  2128                           
  2129                           ;main.c: 719: TravelPath();
  2130  04E8  120A  118A  24F1  120A  118A  	fcall	_TravelPath
  2131  04ED                     l4728:	
  2132                           
  2133                           ;main.c: 720: }
  2134                           ;main.c: 728: PB8Counter = 0;
  2135  04ED  1283               	bcf	3,5	;RP0=0, select bank0
  2136  04EE  1303               	bcf	3,6	;RP1=0, select bank0
  2137  04EF  01B3               	clrf	_PB8Counter
  2138  04F0  2BDC               	goto	l4666
  2139  04F1                     __end_of_main:	
  2140                           
  2141                           	psect	text1
  2142  098E                     __ptext1:	
  2143 ;; *************** function _spi_transfer *****************
  2144 ;; Defined at:
  2145 ;;		line 22 in file "SPI.c"
  2146 ;; Parameters:    Size  Location     Type
  2147 ;;  data            1    wreg     unsigned char 
  2148 ;; Auto vars:     Size  Location     Type
  2149 ;;  data            1    2[BANK0 ] unsigned char 
  2150 ;;  temp            1    1[BANK0 ] unsigned char 
  2151 ;; Return value:  Size  Location     Type
  2152 ;;                  1    wreg      unsigned char 
  2153 ;; Registers used:
  2154 ;;		wreg, status,2
  2155 ;; Tracked objects:
  2156 ;;		On entry : 0/0
  2157 ;;		On exit  : 0/0
  2158 ;;		Unchanged: 0/0
  2159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2160 ;;      Params:         0       0       0       0       0
  2161 ;;      Locals:         0       2       0       0       0
  2162 ;;      Temps:          0       1       0       0       0
  2163 ;;      Totals:         0       3       0       0       0
  2164 ;;Total ram usage:        3 bytes
  2165 ;; Hardware stack levels used:    1
  2166 ;; Hardware stack levels required when called:    1
  2167 ;; This function calls:
  2168 ;;		Nothing
  2169 ;; This function is called by:
  2170 ;;		_main
  2171 ;;		_stepCCW
  2172 ;;		_stepCW
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           
  2177                           ;psect for function _spi_transfer
  2178  098E                     _spi_transfer:	
  2179                           
  2180                           ;incstack = 0
  2181                           ; Regs used in _spi_transfer: [wreg+status,2]
  2182                           ;spi_transfer@data stored from wreg
  2183  098E  1283               	bcf	3,5	;RP0=0, select bank0
  2184  098F  1303               	bcf	3,6	;RP1=0, select bank0
  2185  0990  00CD               	movwf	spi_transfer@data
  2186                           
  2187                           ;SPI.c: 23: unsigned char temp = 0;
  2188  0991  01CC               	clrf	spi_transfer@temp
  2189                           
  2190                           ;SPI.c: 25: SSPIF = 0;
  2191  0992  118C               	bcf	12,3	;volatile
  2192                           
  2193                           ;SPI.c: 26: SSPBUF = data;
  2194  0993  084D               	movf	spi_transfer@data,w
  2195  0994  0093               	movwf	19	;volatile
  2196  0995                     l977:	
  2197                           ;SPI.c: 28: while (SSPIF == 0);
  2198                           
  2199  0995  1D8C               	btfss	12,3	;volatile
  2200  0996  2995               	goto	l977
  2201                           
  2202                           ;SPI.c: 29: temp = SSPBUF;
  2203  0997  0813               	movf	19,w	;volatile
  2204  0998  00CB               	movwf	??_spi_transfer
  2205  0999  084B               	movf	??_spi_transfer,w
  2206  099A  00CC               	movwf	spi_transfer@temp
  2207                           
  2208                           ;SPI.c: 30: SSPIF = 0;
  2209  099B  118C               	bcf	12,3	;volatile
  2210  099C  0008               	return
  2211  099D                     __end_of_spi_transfer:	
  2212                           ;SPI.c: 32: return temp;
  2213                           ;	Return value of _spi_transfer is never used
  2214                           
  2215                           
  2216                           	psect	text2
  2217  07E2                     __ptext2:	
  2218 ;; *************** function _setupSPI *****************
  2219 ;; Defined at:
  2220 ;;		line 4 in file "SPI.c"
  2221 ;; Parameters:    Size  Location     Type
  2222 ;;		None
  2223 ;; Auto vars:     Size  Location     Type
  2224 ;;		None
  2225 ;; Return value:  Size  Location     Type
  2226 ;;                  1    wreg      void 
  2227 ;; Registers used:
  2228 ;;		wreg
  2229 ;; Tracked objects:
  2230 ;;		On entry : 0/0
  2231 ;;		On exit  : 0/0
  2232 ;;		Unchanged: 0/0
  2233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2234 ;;      Params:         0       0       0       0       0
  2235 ;;      Locals:         0       0       0       0       0
  2236 ;;      Temps:          0       0       0       0       0
  2237 ;;      Totals:         0       0       0       0       0
  2238 ;;Total ram usage:        0 bytes
  2239 ;; Hardware stack levels used:    1
  2240 ;; Hardware stack levels required when called:    1
  2241 ;; This function calls:
  2242 ;;		Nothing
  2243 ;; This function is called by:
  2244 ;;		_main
  2245 ;; This function uses a non-reentrant model
  2246 ;;
  2247                           
  2248                           
  2249                           ;psect for function _setupSPI
  2250  07E2                     _setupSPI:	
  2251                           
  2252                           ;SPI.c: 6: TRISB = 0b00000011;
  2253                           
  2254                           ;incstack = 0
  2255                           ; Regs used in _setupSPI: [wreg]
  2256  07E2  3003               	movlw	3
  2257  07E3  1683               	bsf	3,5	;RP0=1, select bank1
  2258  07E4  1303               	bcf	3,6	;RP1=0, select bank1
  2259  07E5  0086               	movwf	6	;volatile
  2260                           
  2261                           ;SPI.c: 8: SSPSTAT = 0b01000000;
  2262  07E6  3040               	movlw	64
  2263  07E7  0094               	movwf	20	;volatile
  2264                           
  2265                           ;SPI.c: 9: SSPCON = 0b00100000;
  2266  07E8  3020               	movlw	32
  2267  07E9  1283               	bcf	3,5	;RP0=0, select bank0
  2268  07EA  1303               	bcf	3,6	;RP1=0, select bank0
  2269  07EB  0094               	movwf	20	;volatile
  2270                           
  2271                           ;SPI.c: 10: TRISC = 0b10000000;
  2272  07EC  3080               	movlw	128
  2273  07ED  1683               	bsf	3,5	;RP0=1, select bank1
  2274  07EE  1303               	bcf	3,6	;RP1=0, select bank1
  2275  07EF  0087               	movwf	7	;volatile
  2276                           
  2277                           ;SPI.c: 11: PORTC = 0b00000011;
  2278  07F0  3003               	movlw	3
  2279  07F1  1283               	bcf	3,5	;RP0=0, select bank0
  2280  07F2  1303               	bcf	3,6	;RP1=0, select bank0
  2281  07F3  0087               	movwf	7	;volatile
  2282                           
  2283                           ;SPI.c: 14: OPTION_REG = 0b00000100;
  2284  07F4  3004               	movlw	4
  2285  07F5  1683               	bsf	3,5	;RP0=1, select bank1
  2286  07F6  1303               	bcf	3,6	;RP1=0, select bank1
  2287  07F7  0081               	movwf	1	;volatile
  2288                           
  2289                           ;SPI.c: 16: TMR0IE = 1;
  2290  07F8  168B               	bsf	11,5	;volatile
  2291                           
  2292                           ;SPI.c: 18: (GIE = 1);
  2293  07F9  178B               	bsf	11,7	;volatile
  2294  07FA  0008               	return
  2295  07FB                     __end_of_setupSPI:	
  2296                           
  2297                           	psect	text3
  2298  0A90                     __ptext3:	
  2299 ;; *************** function _setupLCD *****************
  2300 ;; Defined at:
  2301 ;;		line 86 in file "LCD.c"
  2302 ;; Parameters:    Size  Location     Type
  2303 ;;		None
  2304 ;; Auto vars:     Size  Location     Type
  2305 ;;		None
  2306 ;; Return value:  Size  Location     Type
  2307 ;;                  1    wreg      void 
  2308 ;; Registers used:
  2309 ;;		wreg, status,2, status,0, pclath, cstack
  2310 ;; Tracked objects:
  2311 ;;		On entry : 0/0
  2312 ;;		On exit  : 0/0
  2313 ;;		Unchanged: 0/0
  2314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2315 ;;      Params:         0       0       0       0       0
  2316 ;;      Locals:         0       0       0       0       0
  2317 ;;      Temps:          0       0       0       0       0
  2318 ;;      Totals:         0       0       0       0       0
  2319 ;;Total ram usage:        0 bytes
  2320 ;; Hardware stack levels used:    1
  2321 ;; Hardware stack levels required when called:    2
  2322 ;; This function calls:
  2323 ;;		_lcdWriteControl
  2324 ;; This function is called by:
  2325 ;;		_main
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           
  2330                           ;psect for function _setupLCD
  2331  0A90                     _setupLCD:	
  2332                           
  2333                           ;LCD.c: 88: ADCON1 = 0b00000010;
  2334                           
  2335                           ;incstack = 0
  2336                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  2337  0A90  3002               	movlw	2
  2338  0A91  1683               	bsf	3,5	;RP0=1, select bank1
  2339  0A92  1303               	bcf	3,6	;RP1=0, select bank1
  2340  0A93  009F               	movwf	31	;volatile
  2341                           
  2342                           ;LCD.c: 90: PORTD = 0;
  2343  0A94  1283               	bcf	3,5	;RP0=0, select bank0
  2344  0A95  1303               	bcf	3,6	;RP1=0, select bank0
  2345  0A96  0188               	clrf	8	;volatile
  2346                           
  2347                           ;LCD.c: 91: PORTE = 0;
  2348  0A97  0189               	clrf	9	;volatile
  2349                           
  2350                           ;LCD.c: 93: TRISD = 0b00000000;
  2351  0A98  1683               	bsf	3,5	;RP0=1, select bank1
  2352  0A99  1303               	bcf	3,6	;RP1=0, select bank1
  2353  0A9A  0188               	clrf	8	;volatile
  2354                           
  2355                           ;LCD.c: 94: TRISE = 0b00000000;
  2356  0A9B  0189               	clrf	9	;volatile
  2357                           
  2358                           ;LCD.c: 97: lcdWriteControl(0b00000001);
  2359  0A9C  3001               	movlw	1
  2360  0A9D  120A  158A  21D4  120A  158A  	fcall	_lcdWriteControl
  2361                           
  2362                           ;LCD.c: 98: lcdWriteControl(0b00111000);
  2363  0AA2  3038               	movlw	56
  2364  0AA3  120A  158A  21D4  120A  158A  	fcall	_lcdWriteControl
  2365                           
  2366                           ;LCD.c: 99: lcdWriteControl(0b00001100);
  2367  0AA8  300C               	movlw	12
  2368  0AA9  120A  158A  21D4  120A  158A  	fcall	_lcdWriteControl
  2369                           
  2370                           ;LCD.c: 100: lcdWriteControl(0b00000110);
  2371  0AAE  3006               	movlw	6
  2372  0AAF  120A  158A  21D4  120A  158A  	fcall	_lcdWriteControl
  2373                           
  2374                           ;LCD.c: 101: lcdWriteControl(0b00000010);
  2375  0AB4  3002               	movlw	2
  2376  0AB5  120A  158A  21D4   	fcall	_lcdWriteControl
  2377  0AB8  0008               	return
  2378  0AB9                     __end_of_setupLCD:	
  2379                           
  2380                           	psect	text4
  2381  09E8                     __ptext4:	
  2382 ;; *************** function _setupADC *****************
  2383 ;; Defined at:
  2384 ;;		line 5 in file "ADC.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;		None
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;		None
  2389 ;; Return value:  Size  Location     Type
  2390 ;;                  1    wreg      void 
  2391 ;; Registers used:
  2392 ;;		wreg, status,2
  2393 ;; Tracked objects:
  2394 ;;		On entry : 0/0
  2395 ;;		On exit  : 0/0
  2396 ;;		Unchanged: 0/0
  2397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2398 ;;      Params:         0       0       0       0       0
  2399 ;;      Locals:         0       0       0       0       0
  2400 ;;      Temps:          0       1       0       0       0
  2401 ;;      Totals:         0       1       0       0       0
  2402 ;;Total ram usage:        1 bytes
  2403 ;; Hardware stack levels used:    1
  2404 ;; Hardware stack levels required when called:    1
  2405 ;; This function calls:
  2406 ;;		Nothing
  2407 ;; This function is called by:
  2408 ;;		_main
  2409 ;; This function uses a non-reentrant model
  2410 ;;
  2411                           
  2412                           
  2413                           ;psect for function _setupADC
  2414  09E8                     _setupADC:	
  2415                           
  2416                           ;ADC.c: 6: PORTA = 0;
  2417                           
  2418                           ;incstack = 0
  2419                           ; Regs used in _setupADC: [wreg+status,2]
  2420  09E8  1283               	bcf	3,5	;RP0=0, select bank0
  2421  09E9  1303               	bcf	3,6	;RP1=0, select bank0
  2422  09EA  0185               	clrf	5	;volatile
  2423                           
  2424                           ;ADC.c: 7: TRISA = 0b11111111;
  2425  09EB  30FF               	movlw	255
  2426  09EC  1683               	bsf	3,5	;RP0=1, select bank1
  2427  09ED  1303               	bcf	3,6	;RP1=0, select bank1
  2428  09EE  0085               	movwf	5	;volatile
  2429                           
  2430                           ;ADC.c: 10: ADCON0 = 0b10001001;
  2431  09EF  3089               	movlw	137
  2432  09F0  1283               	bcf	3,5	;RP0=0, select bank0
  2433  09F1  1303               	bcf	3,6	;RP1=0, select bank0
  2434  09F2  009F               	movwf	31	;volatile
  2435                           
  2436                           ;ADC.c: 11: ADCON1 = 0b00000010;
  2437  09F3  3002               	movlw	2
  2438  09F4  1683               	bsf	3,5	;RP0=1, select bank1
  2439  09F5  1303               	bcf	3,6	;RP1=0, select bank1
  2440  09F6  009F               	movwf	31	;volatile
  2441                           
  2442                           ;ADC.c: 13: _delay((unsigned long)((50)*(20000000/4000000.0)));
  2443  09F7  3053               	movlw	83
  2444  09F8  1283               	bcf	3,5	;RP0=0, select bank0
  2445  09F9  1303               	bcf	3,6	;RP1=0, select bank0
  2446  09FA  00CB               	movwf	??_setupADC
  2447  09FB                     u3627:	
  2448  09FB  0BCB               	decfsz	??_setupADC,f
  2449  09FC  29FB               	goto	u3627
  2450  09FD  0008               	return
  2451  09FE                     __end_of_setupADC:	
  2452                           
  2453                           	psect	text5
  2454  097F                     __ptext5:	
  2455 ;; *************** function _ser_init *****************
  2456 ;; Defined at:
  2457 ;;		line 5 in file "ser.c"
  2458 ;; Parameters:    Size  Location     Type
  2459 ;;		None
  2460 ;; Auto vars:     Size  Location     Type
  2461 ;;		None
  2462 ;; Return value:  Size  Location     Type
  2463 ;;                  1    wreg      void 
  2464 ;; Registers used:
  2465 ;;		wreg
  2466 ;; Tracked objects:
  2467 ;;		On entry : 0/0
  2468 ;;		On exit  : 0/0
  2469 ;;		Unchanged: 0/0
  2470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2471 ;;      Params:         0       0       0       0       0
  2472 ;;      Locals:         0       0       0       0       0
  2473 ;;      Temps:          0       0       0       0       0
  2474 ;;      Totals:         0       0       0       0       0
  2475 ;;Total ram usage:        0 bytes
  2476 ;; Hardware stack levels used:    1
  2477 ;; Hardware stack levels required when called:    1
  2478 ;; This function calls:
  2479 ;;		Nothing
  2480 ;; This function is called by:
  2481 ;;		_main
  2482 ;; This function uses a non-reentrant model
  2483 ;;
  2484                           
  2485                           
  2486                           ;psect for function _ser_init
  2487  097F                     _ser_init:	
  2488                           
  2489                           ;ser.c: 7: TXSTA = 0b00100100;
  2490                           
  2491                           ;incstack = 0
  2492                           ; Regs used in _ser_init: [wreg]
  2493  097F  3024               	movlw	36
  2494  0980  1683               	bsf	3,5	;RP0=1, select bank1
  2495  0981  1303               	bcf	3,6	;RP1=0, select bank1
  2496  0982  0098               	movwf	24	;volatile
  2497                           
  2498                           ;ser.c: 8: RCSTA = 0b10011000;
  2499  0983  3098               	movlw	152
  2500  0984  1283               	bcf	3,5	;RP0=0, select bank0
  2501  0985  1303               	bcf	3,6	;RP1=0, select bank0
  2502  0986  0098               	movwf	24	;volatile
  2503                           
  2504                           ;ser.c: 24: SPBRG = 20;
  2505  0987  3014               	movlw	20
  2506  0988  1683               	bsf	3,5	;RP0=1, select bank1
  2507  0989  1303               	bcf	3,6	;RP1=0, select bank1
  2508  098A  0099               	movwf	25	;volatile
  2509                           
  2510                           ;ser.c: 26: PEIE = 1;
  2511  098B  170B               	bsf	11,6	;volatile
  2512                           
  2513                           ;ser.c: 27: (GIE = 1);
  2514  098C  178B               	bsf	11,7	;volatile
  2515  098D  0008               	return
  2516  098E                     __end_of_ser_init:	
  2517                           
  2518                           	psect	text6
  2519  06F8                     __ptext6:	
  2520 ;; *************** function _re_route *****************
  2521 ;; Defined at:
  2522 ;;		line 429 in file "main.c"
  2523 ;; Parameters:    Size  Location     Type
  2524 ;;		None
  2525 ;; Auto vars:     Size  Location     Type
  2526 ;;		None
  2527 ;; Return value:  Size  Location     Type
  2528 ;;                  1    wreg      void 
  2529 ;; Registers used:
  2530 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2531 ;; Tracked objects:
  2532 ;;		On entry : 0/0
  2533 ;;		On exit  : 0/0
  2534 ;;		Unchanged: 0/0
  2535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2536 ;;      Params:         0       0       0       0       0
  2537 ;;      Locals:         0       0       0       0       0
  2538 ;;      Temps:          0       5       0       0       0
  2539 ;;      Totals:         0       5       0       0       0
  2540 ;;Total ram usage:        5 bytes
  2541 ;; Hardware stack levels used:    1
  2542 ;; Hardware stack levels required when called:    5
  2543 ;; This function calls:
  2544 ;;		_DriveDirect
  2545 ;;		_PathTo
  2546 ;;		_TravelPath
  2547 ;;		_Turn90
  2548 ;;		___bmul
  2549 ;;		_getSensorData
  2550 ;; This function is called by:
  2551 ;;		_main
  2552 ;; This function uses a non-reentrant model
  2553 ;;
  2554                           
  2555                           
  2556                           ;psect for function _re_route
  2557  06F8                     _re_route:	
  2558                           
  2559                           ;main.c: 430: switch(orientation){
  2560                           
  2561                           ;incstack = 0
  2562                           ; Regs used in _re_route: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2563  06F8  2F64               	goto	l4284
  2564  06F9                     l4274:	
  2565                           ;main.c: 431: case 0: (mazeGridDefault[y][x]) = ((mazeGridDefault[y][x]) + 4);
  2566                           
  2567  06F9  3005               	movlw	5
  2568  06FA  1283               	bcf	3,5	;RP0=0, select bank0
  2569  06FB  1303               	bcf	3,6	;RP1=0, select bank0
  2570  06FC  00DD               	movwf	??_re_route
  2571  06FD  085D               	movf	??_re_route,w
  2572  06FE  00CB               	movwf	___bmul@multiplicand
  2573  06FF  0845               	movf	_y,w
  2574  0700  120A  158A  21AE  120A  118A  	fcall	___bmul
  2575  0705  3EB4               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2576  0706  1283               	bcf	3,5	;RP0=0, select bank0
  2577  0707  1303               	bcf	3,6	;RP1=0, select bank0
  2578  0708  076B               	addwf	_x,w
  2579  0709  00DE               	movwf	??_re_route+1
  2580  070A  085E               	movf	??_re_route+1,w
  2581  070B  0084               	movwf	4
  2582  070C  1383               	bcf	3,7	;select IRP bank1
  2583  070D  0800               	movf	0,w
  2584  070E  3E04               	addlw	4
  2585  070F  2F4E               	goto	L4
  2586  0710                     l4276:	
  2587                           ;main.c: 433: case 1: (mazeGridDefault[y][x]) = ((mazeGridDefault[y][x]) + 2);
  2588                           
  2589                           ;main.c: 432: break;
  2590                           
  2591  0710  3005               	movlw	5
  2592  0711  00DD               	movwf	??_re_route
  2593  0712  085D               	movf	??_re_route,w
  2594  0713  00CB               	movwf	___bmul@multiplicand
  2595  0714  0845               	movf	_y,w
  2596  0715  120A  158A  21AE  120A  118A  	fcall	___bmul
  2597  071A  3EB4               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2598  071B  1283               	bcf	3,5	;RP0=0, select bank0
  2599  071C  1303               	bcf	3,6	;RP1=0, select bank0
  2600  071D  076B               	addwf	_x,w
  2601  071E  00DE               	movwf	??_re_route+1
  2602  071F  085E               	movf	??_re_route+1,w
  2603  0720  0084               	movwf	4
  2604  0721  1383               	bcf	3,7	;select IRP bank1
  2605  0722  0800               	movf	0,w
  2606  0723  3E02               	addlw	2
  2607  0724  2F4E               	goto	L4
  2608  0725                     l4278:	
  2609                           ;main.c: 435: case 2: (mazeGridDefault[y][x]) = ((mazeGridDefault[y][x]) + 1);
  2610                           
  2611                           ;main.c: 434: break;
  2612                           
  2613  0725  3005               	movlw	5
  2614  0726  00DD               	movwf	??_re_route
  2615  0727  085D               	movf	??_re_route,w
  2616  0728  00CB               	movwf	___bmul@multiplicand
  2617  0729  0845               	movf	_y,w
  2618  072A  120A  158A  21AE  120A  118A  	fcall	___bmul
  2619  072F  3EB4               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2620  0730  1283               	bcf	3,5	;RP0=0, select bank0
  2621  0731  1303               	bcf	3,6	;RP1=0, select bank0
  2622  0732  076B               	addwf	_x,w
  2623  0733  00DE               	movwf	??_re_route+1
  2624  0734  085E               	movf	??_re_route+1,w
  2625  0735  0084               	movwf	4
  2626  0736  1383               	bcf	3,7	;select IRP bank1
  2627  0737  0800               	movf	0,w
  2628  0738  3E01               	addlw	1
  2629  0739  2F4E               	goto	L4
  2630  073A                     l4280:	
  2631                           ;main.c: 437: case 3: (mazeGridDefault[y][x]) = ((mazeGridDefault[y][x]) + 8);
  2632                           
  2633                           ;main.c: 436: break;
  2634                           
  2635  073A  3005               	movlw	5
  2636  073B  00DD               	movwf	??_re_route
  2637  073C  085D               	movf	??_re_route,w
  2638  073D  00CB               	movwf	___bmul@multiplicand
  2639  073E  0845               	movf	_y,w
  2640  073F  120A  158A  21AE  120A  118A  	fcall	___bmul
  2641  0744  3EB4               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2642  0745  1283               	bcf	3,5	;RP0=0, select bank0
  2643  0746  1303               	bcf	3,6	;RP1=0, select bank0
  2644  0747  076B               	addwf	_x,w
  2645  0748  00DE               	movwf	??_re_route+1
  2646  0749  085E               	movf	??_re_route+1,w
  2647  074A  0084               	movwf	4
  2648  074B  1383               	bcf	3,7	;select IRP bank1
  2649  074C  0800               	movf	0,w
  2650  074D  3E08               	addlw	8
  2651  074E                     L4:	
  2652  074E  00DF               	movwf	??_re_route+2
  2653  074F  3005               	movlw	5
  2654  0750  00E0               	movwf	??_re_route+3
  2655  0751  0860               	movf	??_re_route+3,w
  2656  0752  00CB               	movwf	___bmul@multiplicand
  2657  0753  0845               	movf	_y,w
  2658  0754  120A  158A  21AE  120A  118A  	fcall	___bmul
  2659  0759  3EB4               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2660  075A  1283               	bcf	3,5	;RP0=0, select bank0
  2661  075B  1303               	bcf	3,6	;RP1=0, select bank0
  2662  075C  076B               	addwf	_x,w
  2663  075D  00E1               	movwf	??_re_route+4
  2664  075E  0861               	movf	??_re_route+4,w
  2665  075F  0084               	movwf	4
  2666  0760  085F               	movf	??_re_route+2,w
  2667  0761  1383               	bcf	3,7	;select IRP bank1
  2668  0762  0080               	movwf	0
  2669                           
  2670                           ;main.c: 439: }
  2671                           
  2672                           ;main.c: 438: break;
  2673  0763  2F74               	goto	l4286
  2674  0764                     l4284:	
  2675  0764  1283               	bcf	3,5	;RP0=0, select bank0
  2676  0765  1303               	bcf	3,6	;RP1=0, select bank0
  2677  0766  0869               	movf	_orientation,w
  2678                           
  2679                           ; Switch size 1, requested type "space"
  2680                           ; Number of cases is 4, Range of values is 0 to 3
  2681                           ; switch strategies available:
  2682                           ; Name         Instructions Cycles
  2683                           ; simple_byte           13     7 (average)
  2684                           ; direct_byte           20     8 (fixed)
  2685                           ; jumptable            260     6 (fixed)
  2686                           ;	Chosen strategy is simple_byte
  2687  0767  3A00               	xorlw	0	; case 0
  2688  0768  1903               	skipnz
  2689  0769  2EF9               	goto	l4274
  2690  076A  3A01               	xorlw	1	; case 1
  2691  076B  1903               	skipnz
  2692  076C  2F10               	goto	l4276
  2693  076D  3A03               	xorlw	3	; case 2
  2694  076E  1903               	skipnz
  2695  076F  2F25               	goto	l4278
  2696  0770  3A01               	xorlw	1	; case 3
  2697  0771  1903               	skipnz
  2698  0772  2F3A               	goto	l4280
  2699  0773  2F74               	goto	l4286
  2700  0774                     l4286:	
  2701                           
  2702                           ;main.c: 441: Turn90(0);
  2703  0774  3000               	movlw	0
  2704  0775  120A  158A  23C4  120A  118A  	fcall	_Turn90
  2705                           
  2706                           ;main.c: 442: Turn90(0);
  2707  077A  3000               	movlw	0
  2708  077B  120A  158A  23C4  120A  118A  	fcall	_Turn90
  2709                           
  2710                           ;main.c: 443: distance = 0;
  2711  0780  1283               	bcf	3,5	;RP0=0, select bank0
  2712  0781  1303               	bcf	3,6	;RP1=0, select bank0
  2713  0782  01A8               	clrf	_distance
  2714  0783  01A9               	clrf	_distance+1
  2715                           
  2716                           ;main.c: 444: DriveDirect(250,250);
  2717  0784  30FA               	movlw	250
  2718  0785  00CC               	movwf	DriveDirect@VelocityRight
  2719  0786  3000               	movlw	0
  2720  0787  00CD               	movwf	DriveDirect@VelocityRight+1
  2721  0788  30FA               	movlw	250
  2722  0789  00CE               	movwf	DriveDirect@VelocityLeft
  2723  078A  3000               	movlw	0
  2724  078B  00CF               	movwf	DriveDirect@VelocityLeft+1
  2725  078C  120A  158A  2337  120A  118A  	fcall	_DriveDirect
  2726  0791                     l4294:	
  2727                           ;main.c: 445: while (distance < 500){
  2728                           
  2729  0791  1283               	bcf	3,5	;RP0=0, select bank0
  2730  0792  1303               	bcf	3,6	;RP1=0, select bank0
  2731  0793  0829               	movf	_distance+1,w
  2732  0794  3A80               	xorlw	128
  2733  0795  00FF               	movwf	127
  2734  0796  3081               	movlw	129
  2735  0797  027F               	subwf	127,w
  2736  0798  1D03               	skipz
  2737  0799  2F9C               	goto	u3265
  2738  079A  30F4               	movlw	244
  2739  079B  0228               	subwf	_distance,w
  2740  079C                     u3265:	
  2741  079C  1803               	btfsc	3,0
  2742  079D  2FB5               	goto	l4296
  2743                           
  2744                           ;main.c: 446: distance = distance + getSensorData(19,2);
  2745  079E  3002               	movlw	2
  2746  079F  1283               	bcf	3,5	;RP0=0, select bank0
  2747  07A0  1303               	bcf	3,6	;RP1=0, select bank0
  2748  07A1  00DD               	movwf	??_re_route
  2749  07A2  085D               	movf	??_re_route,w
  2750  07A3  00CD               	movwf	getSensorData@bytes
  2751  07A4  3013               	movlw	19
  2752  07A5  120A  158A  22B9  120A  118A  	fcall	_getSensorData
  2753  07AA  1283               	bcf	3,5	;RP0=0, select bank0
  2754  07AB  1303               	bcf	3,6	;RP1=0, select bank0
  2755  07AC  0828               	movf	_distance,w
  2756  07AD  074D               	addwf	?_getSensorData,w
  2757  07AE  00A8               	movwf	_distance
  2758  07AF  0829               	movf	_distance+1,w
  2759  07B0  1803               	skipnc
  2760  07B1  0A29               	incf	_distance+1,w
  2761  07B2  074E               	addwf	?_getSensorData+1,w
  2762  07B3  00A9               	movwf	_distance+1
  2763  07B4  2F91               	goto	l4294
  2764  07B5                     l4296:	
  2765                           
  2766                           ;main.c: 447: }
  2767                           ;main.c: 448: DriveDirect(0,0);
  2768  07B5  3000               	movlw	0
  2769  07B6  1283               	bcf	3,5	;RP0=0, select bank0
  2770  07B7  1303               	bcf	3,6	;RP1=0, select bank0
  2771  07B8  00CC               	movwf	DriveDirect@VelocityRight
  2772  07B9  00CD               	movwf	DriveDirect@VelocityRight+1
  2773  07BA  3000               	movlw	0
  2774  07BB  00CE               	movwf	DriveDirect@VelocityLeft
  2775  07BC  00CF               	movwf	DriveDirect@VelocityLeft+1
  2776  07BD  120A  158A  2337  120A  118A  	fcall	_DriveDirect
  2777                           
  2778                           ;main.c: 449: IR_Wall = 0;
  2779  07C2  1070               	bcf	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2780                           
  2781                           ;main.c: 451: _delay((unsigned long)((1000)*(20000000/4000.0)));
  2782  07C3  301A               	movlw	26
  2783  07C4  1283               	bcf	3,5	;RP0=0, select bank0
  2784  07C5  1303               	bcf	3,6	;RP1=0, select bank0
  2785  07C6  00DF               	movwf	??_re_route+2
  2786  07C7  305E               	movlw	94
  2787  07C8  00DE               	movwf	??_re_route+1
  2788  07C9  3086               	movlw	134
  2789  07CA  00DD               	movwf	??_re_route
  2790  07CB                     u3637:	
  2791  07CB  0BDD               	decfsz	??_re_route,f
  2792  07CC  2FCB               	goto	u3637
  2793  07CD  0BDE               	decfsz	??_re_route+1,f
  2794  07CE  2FCB               	goto	u3637
  2795  07CF  0BDF               	decfsz	??_re_route+2,f
  2796  07D0  2FCB               	goto	u3637
  2797  07D1  0000               	nop
  2798                           
  2799                           ;main.c: 452: PathTo(x_goto,y_goto);
  2800  07D2  1283               	bcf	3,5	;RP0=0, select bank0
  2801  07D3  1303               	bcf	3,6	;RP1=0, select bank0
  2802  07D4  0846               	movf	_y_goto,w
  2803  07D5  00DD               	movwf	??_re_route
  2804  07D6  085D               	movf	??_re_route,w
  2805  07D7  00D0               	movwf	PathTo@y_target
  2806  07D8  0841               	movf	_x_goto,w
  2807  07D9  120A  158A  2469  120A  118A  	fcall	_PathTo
  2808                           
  2809                           ;main.c: 453: TravelPath();
  2810  07DE  120A  118A  24F1   	fcall	_TravelPath
  2811  07E1  0008               	return
  2812  07E2                     __end_of_re_route:	
  2813                           
  2814                           	psect	text7
  2815  04F1                     __ptext7:	
  2816 ;; *************** function _TravelPath *****************
  2817 ;; Defined at:
  2818 ;;		line 362 in file "main.c"
  2819 ;; Parameters:    Size  Location     Type
  2820 ;;		None
  2821 ;; Auto vars:     Size  Location     Type
  2822 ;;  n               1   17[BANK0 ] unsigned char 
  2823 ;; Return value:  Size  Location     Type
  2824 ;;                  1    wreg      void 
  2825 ;; Registers used:
  2826 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2827 ;; Tracked objects:
  2828 ;;		On entry : 0/0
  2829 ;;		On exit  : 0/0
  2830 ;;		Unchanged: 0/0
  2831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2832 ;;      Params:         0       0       0       0       0
  2833 ;;      Locals:         0       1       0       0       0
  2834 ;;      Temps:          0       2       0       0       0
  2835 ;;      Totals:         0       3       0       0       0
  2836 ;;Total ram usage:        3 bytes
  2837 ;; Hardware stack levels used:    1
  2838 ;; Hardware stack levels required when called:    4
  2839 ;; This function calls:
  2840 ;;		_Drive1m
  2841 ;;		_Turn90
  2842 ;; This function is called by:
  2843 ;;		_re_route
  2844 ;;		_main
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           
  2849                           ;psect for function _TravelPath
  2850  04F1                     _TravelPath:	
  2851                           
  2852                           ;main.c: 364: for (char n = 1; n <= (pathCountShortest); n++){
  2853                           
  2854                           ;incstack = 0
  2855                           ; Regs used in _TravelPath: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2856  04F1  1283               	bcf	3,5	;RP0=0, select bank0
  2857  04F2  1303               	bcf	3,6	;RP1=0, select bank0
  2858  04F3  01DC               	clrf	TravelPath@n
  2859  04F4  0ADC               	incf	TravelPath@n,f
  2860  04F5                     l4270:	
  2861  04F5  085C               	movf	TravelPath@n,w
  2862  04F6  026A               	subwf	_pathCountShortest,w
  2863  04F7  1C03               	btfss	3,0
  2864  04F8  0008               	return
  2865                           
  2866                           ;main.c: 366: if (pathShortest[0][n] > x){
  2867  04F9  085C               	movf	TravelPath@n,w
  2868  04FA  3EC8               	addlw	(low (_pathShortest| 0))& (0+255)
  2869  04FB  0084               	movwf	4
  2870  04FC  1383               	bcf	3,7	;select IRP bank1
  2871  04FD  0800               	movf	0,w
  2872  04FE  026B               	subwf	_x,w
  2873  04FF  1C03               	btfss	3,0
  2874  0500  2D28               	goto	l4200
  2875  0501  2D36               	goto	l4204
  2876  0502                     l4188:	
  2877                           ;main.c: 368: case 0: Turn90(0);
  2878                           
  2879                           ;main.c: 367: switch (orientation){
  2880                           
  2881  0502  3000               	movlw	0
  2882  0503  120A  158A  23C4  120A  118A  	fcall	_Turn90
  2883                           
  2884                           ;main.c: 369: break;
  2885  0508  2DF2               	goto	l4262
  2886  0509                     l4190:	
  2887                           ;main.c: 370: case 2: Turn90(1);
  2888                           
  2889  0509  3001               	movlw	1
  2890  050A  120A  158A  23C4  120A  118A  	fcall	_Turn90
  2891                           
  2892                           ;main.c: 371: break;
  2893  050F  2DF2               	goto	l4262
  2894  0510                     l4192:	
  2895                           ;main.c: 372: case 3: Turn90(1);
  2896                           
  2897  0510  3001               	movlw	1
  2898  0511  120A  158A  23C4  120A  118A  	fcall	_Turn90
  2899                           
  2900                           ;main.c: 373: _delay((unsigned long)((5)*(20000000/4000.0)));
  2901  0516  3021               	movlw	33
  2902  0517  1283               	bcf	3,5	;RP0=0, select bank0
  2903  0518  1303               	bcf	3,6	;RP1=0, select bank0
  2904  0519  00DB               	movwf	??_TravelPath+1
  2905  051A  3076               	movlw	118
  2906  051B  00DA               	movwf	??_TravelPath
  2907  051C                     u3647:	
  2908  051C  0BDA               	decfsz	??_TravelPath,f
  2909  051D  2D1C               	goto	u3647
  2910  051E  0BDB               	decfsz	??_TravelPath+1,f
  2911  051F  2D1C               	goto	u3647
  2912  0520  0000               	nop
  2913                           
  2914                           ;main.c: 374: Turn90(1);
  2915  0521  3001               	movlw	1
  2916  0522  120A  158A  23C4  120A  118A  	fcall	_Turn90
  2917                           
  2918                           ;main.c: 376: }
  2919                           
  2920                           ;main.c: 375: break;
  2921  0527  2DF2               	goto	l4262
  2922  0528                     l4200:	
  2923  0528  1283               	bcf	3,5	;RP0=0, select bank0
  2924  0529  1303               	bcf	3,6	;RP1=0, select bank0
  2925  052A  0869               	movf	_orientation,w
  2926                           
  2927                           ; Switch size 1, requested type "space"
  2928                           ; Number of cases is 3, Range of values is 0 to 3
  2929                           ; switch strategies available:
  2930                           ; Name         Instructions Cycles
  2931                           ; simple_byte           10     6 (average)
  2932                           ; direct_byte           20     8 (fixed)
  2933                           ; jumptable            260     6 (fixed)
  2934                           ;	Chosen strategy is simple_byte
  2935  052B  3A00               	xorlw	0	; case 0
  2936  052C  1903               	skipnz
  2937  052D  2D02               	goto	l4188
  2938  052E  3A02               	xorlw	2	; case 2
  2939  052F  1903               	skipnz
  2940  0530  2D09               	goto	l4190
  2941  0531  3A01               	xorlw	1	; case 3
  2942  0532  1903               	skipnz
  2943  0533  2D10               	goto	l4192
  2944  0534  2D35               	goto	l4202
  2945  0535                     l4202:	
  2946  0535  2DF2               	goto	l4262
  2947  0536                     l4204:	
  2948                           ;main.c: 378: }
  2949                           
  2950                           ;main.c: 377: Drive1m();
  2951                           
  2952                           
  2953                           ;main.c: 380: else if (pathShortest[0][n] < x){
  2954  0536  1283               	bcf	3,5	;RP0=0, select bank0
  2955  0537  1303               	bcf	3,6	;RP1=0, select bank0
  2956  0538  085C               	movf	TravelPath@n,w
  2957  0539  3EC8               	addlw	(low (_pathShortest| 0))& (0+255)
  2958  053A  0084               	movwf	4
  2959  053B  086B               	movf	_x,w
  2960  053C  1383               	bcf	3,7	;select IRP bank1
  2961  053D  0200               	subwf	0,w
  2962  053E  1C03               	btfss	3,0
  2963  053F  2D67               	goto	l4220
  2964  0540  2D75               	goto	l4224
  2965  0541                     l4208:	
  2966                           ;main.c: 382: case 0: Turn90(1);
  2967                           
  2968                           ;main.c: 381: switch (orientation){
  2969                           
  2970  0541  3001               	movlw	1
  2971  0542  120A  158A  23C4  120A  118A  	fcall	_Turn90
  2972                           
  2973                           ;main.c: 383: break;
  2974  0547  2DF2               	goto	l4262
  2975  0548                     l4210:	
  2976                           ;main.c: 384: case 2: Turn90(0);
  2977                           
  2978  0548  3000               	movlw	0
  2979  0549  120A  158A  23C4  120A  118A  	fcall	_Turn90
  2980                           
  2981                           ;main.c: 385: break;
  2982  054E  2DF2               	goto	l4262
  2983  054F                     l4212:	
  2984                           ;main.c: 386: case 1: Turn90(1);
  2985                           
  2986  054F  3001               	movlw	1
  2987  0550  120A  158A  23C4  120A  118A  	fcall	_Turn90
  2988                           
  2989                           ;main.c: 387: _delay((unsigned long)((5)*(20000000/4000.0)));
  2990  0555  3021               	movlw	33
  2991  0556  1283               	bcf	3,5	;RP0=0, select bank0
  2992  0557  1303               	bcf	3,6	;RP1=0, select bank0
  2993  0558  00DB               	movwf	??_TravelPath+1
  2994  0559  3076               	movlw	118
  2995  055A  00DA               	movwf	??_TravelPath
  2996  055B                     u3657:	
  2997  055B  0BDA               	decfsz	??_TravelPath,f
  2998  055C  2D5B               	goto	u3657
  2999  055D  0BDB               	decfsz	??_TravelPath+1,f
  3000  055E  2D5B               	goto	u3657
  3001  055F  0000               	nop
  3002                           
  3003                           ;main.c: 388: Turn90(1);
  3004  0560  3001               	movlw	1
  3005  0561  120A  158A  23C4  120A  118A  	fcall	_Turn90
  3006                           
  3007                           ;main.c: 390: }
  3008                           
  3009                           ;main.c: 389: break;
  3010  0566  2DF2               	goto	l4262
  3011  0567                     l4220:	
  3012  0567  1283               	bcf	3,5	;RP0=0, select bank0
  3013  0568  1303               	bcf	3,6	;RP1=0, select bank0
  3014  0569  0869               	movf	_orientation,w
  3015                           
  3016                           ; Switch size 1, requested type "space"
  3017                           ; Number of cases is 3, Range of values is 0 to 2
  3018                           ; switch strategies available:
  3019                           ; Name         Instructions Cycles
  3020                           ; simple_byte           10     6 (average)
  3021                           ; direct_byte           17     8 (fixed)
  3022                           ; jumptable            260     6 (fixed)
  3023                           ;	Chosen strategy is simple_byte
  3024  056A  3A00               	xorlw	0	; case 0
  3025  056B  1903               	skipnz
  3026  056C  2D41               	goto	l4208
  3027  056D  3A01               	xorlw	1	; case 1
  3028  056E  1903               	skipnz
  3029  056F  2D4F               	goto	l4212
  3030  0570  3A03               	xorlw	3	; case 2
  3031  0571  1903               	skipnz
  3032  0572  2D48               	goto	l4210
  3033  0573  2D74               	goto	l4222
  3034  0574                     l4222:	
  3035  0574  2DF2               	goto	l4262
  3036  0575                     l4224:	
  3037                           ;main.c: 392: }
  3038                           
  3039                           ;main.c: 391: Drive1m();
  3040                           
  3041                           
  3042                           ;main.c: 394: else if(pathShortest[1][n] > y){
  3043  0575  1283               	bcf	3,5	;RP0=0, select bank0
  3044  0576  1303               	bcf	3,6	;RP1=0, select bank0
  3045  0577  085C               	movf	TravelPath@n,w
  3046  0578  3ED8               	addlw	(low ((_pathShortest| 0+16)))& (0+255)
  3047  0579  0084               	movwf	4
  3048  057A  1383               	bcf	3,7	;select IRP bank1
  3049  057B  0800               	movf	0,w
  3050  057C  0245               	subwf	_y,w
  3051  057D  1C03               	btfss	3,0
  3052  057E  2DA6               	goto	l4240
  3053  057F  2DB4               	goto	l4244
  3054  0580                     l4228:	
  3055                           ;main.c: 396: case 1: Turn90(0);
  3056                           
  3057                           ;main.c: 395: switch(orientation){
  3058                           
  3059  0580  3000               	movlw	0
  3060  0581  120A  158A  23C4  120A  118A  	fcall	_Turn90
  3061                           
  3062                           ;main.c: 397: break;
  3063  0586  2DF2               	goto	l4262
  3064  0587                     l4230:	
  3065                           ;main.c: 398: case 3: Turn90(1);
  3066                           
  3067  0587  3001               	movlw	1
  3068  0588  120A  158A  23C4  120A  118A  	fcall	_Turn90
  3069                           
  3070                           ;main.c: 399: break;
  3071  058D  2DF2               	goto	l4262
  3072  058E                     l4232:	
  3073                           ;main.c: 400: case 0: Turn90(1);
  3074                           
  3075  058E  3001               	movlw	1
  3076  058F  120A  158A  23C4  120A  118A  	fcall	_Turn90
  3077                           
  3078                           ;main.c: 401: _delay((unsigned long)((5)*(20000000/4000.0)));
  3079  0594  3021               	movlw	33
  3080  0595  1283               	bcf	3,5	;RP0=0, select bank0
  3081  0596  1303               	bcf	3,6	;RP1=0, select bank0
  3082  0597  00DB               	movwf	??_TravelPath+1
  3083  0598  3076               	movlw	118
  3084  0599  00DA               	movwf	??_TravelPath
  3085  059A                     u3667:	
  3086  059A  0BDA               	decfsz	??_TravelPath,f
  3087  059B  2D9A               	goto	u3667
  3088  059C  0BDB               	decfsz	??_TravelPath+1,f
  3089  059D  2D9A               	goto	u3667
  3090  059E  0000               	nop
  3091                           
  3092                           ;main.c: 402: Turn90(1);
  3093  059F  3001               	movlw	1
  3094  05A0  120A  158A  23C4  120A  118A  	fcall	_Turn90
  3095                           
  3096                           ;main.c: 404: }
  3097                           
  3098                           ;main.c: 403: break;
  3099  05A5  2DF2               	goto	l4262
  3100  05A6                     l4240:	
  3101  05A6  1283               	bcf	3,5	;RP0=0, select bank0
  3102  05A7  1303               	bcf	3,6	;RP1=0, select bank0
  3103  05A8  0869               	movf	_orientation,w
  3104                           
  3105                           ; Switch size 1, requested type "space"
  3106                           ; Number of cases is 3, Range of values is 0 to 3
  3107                           ; switch strategies available:
  3108                           ; Name         Instructions Cycles
  3109                           ; simple_byte           10     6 (average)
  3110                           ; direct_byte           20     8 (fixed)
  3111                           ; jumptable            260     6 (fixed)
  3112                           ;	Chosen strategy is simple_byte
  3113  05A9  3A00               	xorlw	0	; case 0
  3114  05AA  1903               	skipnz
  3115  05AB  2D8E               	goto	l4232
  3116  05AC  3A01               	xorlw	1	; case 1
  3117  05AD  1903               	skipnz
  3118  05AE  2D80               	goto	l4228
  3119  05AF  3A02               	xorlw	2	; case 3
  3120  05B0  1903               	skipnz
  3121  05B1  2D87               	goto	l4230
  3122  05B2  2DB3               	goto	l4242
  3123  05B3                     l4242:	
  3124  05B3  2DF2               	goto	l4262
  3125  05B4                     l4244:	
  3126                           ;main.c: 406: }
  3127                           
  3128                           ;main.c: 405: Drive1m();
  3129                           
  3130                           
  3131                           ;main.c: 408: else if (pathShortest[1][n] < y){
  3132  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  3133  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  3134  05B6  085C               	movf	TravelPath@n,w
  3135  05B7  3ED8               	addlw	(low ((_pathShortest| 0+16)))& (0+255)
  3136  05B8  0084               	movwf	4
  3137  05B9  0845               	movf	_y,w
  3138  05BA  1383               	bcf	3,7	;select IRP bank1
  3139  05BB  0200               	subwf	0,w
  3140  05BC  1C03               	btfss	3,0
  3141  05BD  2DE5               	goto	l4260
  3142  05BE  2DF7               	goto	l4264
  3143  05BF                     l4248:	
  3144                           ;main.c: 410: case 1: Turn90(1);
  3145                           
  3146                           ;main.c: 409: switch (orientation){
  3147                           
  3148  05BF  3001               	movlw	1
  3149  05C0  120A  158A  23C4  120A  118A  	fcall	_Turn90
  3150                           
  3151                           ;main.c: 411: break;
  3152  05C5  2DF2               	goto	l4262
  3153  05C6                     l4250:	
  3154                           ;main.c: 412: case 3: Turn90(0);
  3155                           
  3156  05C6  3000               	movlw	0
  3157  05C7  120A  158A  23C4  120A  118A  	fcall	_Turn90
  3158                           
  3159                           ;main.c: 413: break;
  3160  05CC  2DF2               	goto	l4262
  3161  05CD                     l4252:	
  3162                           ;main.c: 414: case 2: Turn90(1);
  3163                           
  3164  05CD  3001               	movlw	1
  3165  05CE  120A  158A  23C4  120A  118A  	fcall	_Turn90
  3166                           
  3167                           ;main.c: 415: _delay((unsigned long)((5)*(20000000/4000.0)));
  3168  05D3  3021               	movlw	33
  3169  05D4  1283               	bcf	3,5	;RP0=0, select bank0
  3170  05D5  1303               	bcf	3,6	;RP1=0, select bank0
  3171  05D6  00DB               	movwf	??_TravelPath+1
  3172  05D7  3076               	movlw	118
  3173  05D8  00DA               	movwf	??_TravelPath
  3174  05D9                     u3677:	
  3175  05D9  0BDA               	decfsz	??_TravelPath,f
  3176  05DA  2DD9               	goto	u3677
  3177  05DB  0BDB               	decfsz	??_TravelPath+1,f
  3178  05DC  2DD9               	goto	u3677
  3179  05DD  0000               	nop
  3180                           
  3181                           ;main.c: 416: Turn90(1);
  3182  05DE  3001               	movlw	1
  3183  05DF  120A  158A  23C4  120A  118A  	fcall	_Turn90
  3184                           
  3185                           ;main.c: 418: }
  3186                           
  3187                           ;main.c: 417: break;
  3188  05E4  2DF2               	goto	l4262
  3189  05E5                     l4260:	
  3190  05E5  1283               	bcf	3,5	;RP0=0, select bank0
  3191  05E6  1303               	bcf	3,6	;RP1=0, select bank0
  3192  05E7  0869               	movf	_orientation,w
  3193                           
  3194                           ; Switch size 1, requested type "space"
  3195                           ; Number of cases is 3, Range of values is 1 to 3
  3196                           ; switch strategies available:
  3197                           ; Name         Instructions Cycles
  3198                           ; simple_byte           10     6 (average)
  3199                           ; direct_byte           20    11 (fixed)
  3200                           ; jumptable            263     9 (fixed)
  3201                           ;	Chosen strategy is simple_byte
  3202  05E8  3A01               	xorlw	1	; case 1
  3203  05E9  1903               	skipnz
  3204  05EA  2DBF               	goto	l4248
  3205  05EB  3A03               	xorlw	3	; case 2
  3206  05EC  1903               	skipnz
  3207  05ED  2DCD               	goto	l4252
  3208  05EE  3A01               	xorlw	1	; case 3
  3209  05EF  1903               	skipnz
  3210  05F0  2DC6               	goto	l4250
  3211  05F1  2DF2               	goto	l4262
  3212  05F2                     l4262:	
  3213                           
  3214                           ;main.c: 419: Drive1m();
  3215  05F2  120A  118A  2606  120A  118A  	fcall	_Drive1m
  3216  05F7                     l4264:	
  3217                           
  3218                           ;main.c: 420: }
  3219                           ;main.c: 423: if (IR_Wall == 1){
  3220  05F7  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  3221  05F8  2DFF               	goto	l4268
  3222                           
  3223                           ;main.c: 424: n = 20;
  3224  05F9  3014               	movlw	20
  3225  05FA  1283               	bcf	3,5	;RP0=0, select bank0
  3226  05FB  1303               	bcf	3,6	;RP1=0, select bank0
  3227  05FC  00DA               	movwf	??_TravelPath
  3228  05FD  085A               	movf	??_TravelPath,w
  3229  05FE  00DC               	movwf	TravelPath@n
  3230  05FF                     l4268:	
  3231  05FF  3001               	movlw	1
  3232  0600  1283               	bcf	3,5	;RP0=0, select bank0
  3233  0601  1303               	bcf	3,6	;RP1=0, select bank0
  3234  0602  00DA               	movwf	??_TravelPath
  3235  0603  085A               	movf	??_TravelPath,w
  3236  0604  07DC               	addwf	TravelPath@n,f
  3237  0605  2CF5               	goto	l4270
  3238  0606                     __end_of_TravelPath:	
  3239                           
  3240                           	psect	text8
  3241  0BC4                     __ptext8:	
  3242 ;; *************** function _Turn90 *****************
  3243 ;; Defined at:
  3244 ;;		line 331 in file "main.c"
  3245 ;; Parameters:    Size  Location     Type
  3246 ;;  direction       1    wreg     unsigned char 
  3247 ;; Auto vars:     Size  Location     Type
  3248 ;;  direction       1   13[BANK0 ] unsigned char 
  3249 ;; Return value:  Size  Location     Type
  3250 ;;                  1    wreg      void 
  3251 ;; Registers used:
  3252 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3253 ;; Tracked objects:
  3254 ;;		On entry : 0/0
  3255 ;;		On exit  : 0/0
  3256 ;;		Unchanged: 0/0
  3257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3258 ;;      Params:         0       0       0       0       0
  3259 ;;      Locals:         0       1       0       0       0
  3260 ;;      Temps:          0       3       0       0       0
  3261 ;;      Totals:         0       4       0       0       0
  3262 ;;Total ram usage:        4 bytes
  3263 ;; Hardware stack levels used:    1
  3264 ;; Hardware stack levels required when called:    3
  3265 ;; This function calls:
  3266 ;;		_Drive
  3267 ;;		_DriveDirect
  3268 ;;		_getSensorData
  3269 ;; This function is called by:
  3270 ;;		_TravelPath
  3271 ;;		_re_route
  3272 ;; This function uses a non-reentrant model
  3273 ;;
  3274                           
  3275                           
  3276                           ;psect for function _Turn90
  3277  0BC4                     _Turn90:	
  3278                           
  3279                           ;incstack = 0
  3280                           ; Regs used in _Turn90: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3281                           ;Turn90@direction stored from wreg
  3282  0BC4  1283               	bcf	3,5	;RP0=0, select bank0
  3283  0BC5  1303               	bcf	3,6	;RP1=0, select bank0
  3284  0BC6  00D8               	movwf	Turn90@direction
  3285                           
  3286                           ;main.c: 333: angle = 0;
  3287  0BC7  01A6               	clrf	_angle
  3288  0BC8  01A7               	clrf	_angle+1
  3289                           
  3290                           ;main.c: 335: if (direction == 1){
  3291  0BC9  0358               	decf	Turn90@direction,w
  3292  0BCA  1D03               	btfss	3,2
  3293  0BCB  2C07               	goto	l3896
  3294                           
  3295                           ;main.c: 337: if (orientation == 0)
  3296  0BCC  0869               	movf	_orientation,w
  3297  0BCD  1D03               	btfss	3,2
  3298  0BCE  2BD4               	goto	l3888
  3299                           
  3300                           ;main.c: 338: orientation = 3;
  3301  0BCF  3003               	movlw	3
  3302  0BD0  00D5               	movwf	??_Turn90
  3303  0BD1  0855               	movf	??_Turn90,w
  3304  0BD2  00E9               	movwf	_orientation
  3305  0BD3  2BD6               	goto	l3890
  3306  0BD4                     l3888:	
  3307                           
  3308                           ;main.c: 339: else orientation--;
  3309  0BD4  3001               	movlw	1
  3310  0BD5  02E9               	subwf	_orientation,f
  3311  0BD6                     l3890:	
  3312                           
  3313                           ;main.c: 341: Drive(0,150,0x00,0x01);
  3314  0BD6  3096               	movlw	150
  3315  0BD7  00D5               	movwf	??_Turn90
  3316  0BD8  0855               	movf	??_Turn90,w
  3317  0BD9  00CC               	movwf	Drive@speedL
  3318  0BDA  01CD               	clrf	Drive@radH
  3319  0BDB  01CE               	clrf	Drive@radL
  3320  0BDC  0ACE               	incf	Drive@radL,f
  3321  0BDD  3000               	movlw	0
  3322  0BDE  120A  158A  2240  120A  158A  	fcall	_Drive
  3323  0BE3                     l3894:	
  3324                           ;main.c: 342: while (angle < 86){
  3325                           
  3326  0BE3  1283               	bcf	3,5	;RP0=0, select bank0
  3327  0BE4  1303               	bcf	3,6	;RP1=0, select bank0
  3328  0BE5  0827               	movf	_angle+1,w
  3329  0BE6  3A80               	xorlw	128
  3330  0BE7  00FF               	movwf	127
  3331  0BE8  3080               	movlw	128
  3332  0BE9  027F               	subwf	127,w
  3333  0BEA  1D03               	skipz
  3334  0BEB  2BEE               	goto	u2635
  3335  0BEC  3056               	movlw	86
  3336  0BED  0226               	subwf	_angle,w
  3337  0BEE                     u2635:	
  3338  0BEE  1803               	btfsc	3,0
  3339  0BEF  2C07               	goto	l3896
  3340                           
  3341                           ;main.c: 343: angle = angle + getSensorData(20,2);
  3342  0BF0  3002               	movlw	2
  3343  0BF1  1283               	bcf	3,5	;RP0=0, select bank0
  3344  0BF2  1303               	bcf	3,6	;RP1=0, select bank0
  3345  0BF3  00D5               	movwf	??_Turn90
  3346  0BF4  0855               	movf	??_Turn90,w
  3347  0BF5  00CD               	movwf	getSensorData@bytes
  3348  0BF6  3014               	movlw	20
  3349  0BF7  120A  158A  22B9  120A  158A  	fcall	_getSensorData
  3350  0BFC  1283               	bcf	3,5	;RP0=0, select bank0
  3351  0BFD  1303               	bcf	3,6	;RP1=0, select bank0
  3352  0BFE  0826               	movf	_angle,w
  3353  0BFF  074D               	addwf	?_getSensorData,w
  3354  0C00  00A6               	movwf	_angle
  3355  0C01  0827               	movf	_angle+1,w
  3356  0C02  1803               	skipnc
  3357  0C03  0A27               	incf	_angle+1,w
  3358  0C04  074E               	addwf	?_getSensorData+1,w
  3359  0C05  00A7               	movwf	_angle+1
  3360  0C06  2BE3               	goto	l3894
  3361  0C07                     l3896:	
  3362                           
  3363                           ;main.c: 344: }
  3364                           ;main.c: 345: }
  3365                           ;main.c: 347: if (direction == 0){
  3366  0C07  1283               	bcf	3,5	;RP0=0, select bank0
  3367  0C08  1303               	bcf	3,6	;RP1=0, select bank0
  3368  0C09  0858               	movf	Turn90@direction,w
  3369  0C0A  1D03               	btfss	3,2
  3370  0C0B  2C4C               	goto	l3910
  3371                           
  3372                           ;main.c: 349: if (orientation == 3)
  3373  0C0C  3003               	movlw	3
  3374  0C0D  0669               	xorwf	_orientation,w
  3375  0C0E  1D03               	btfss	3,2
  3376  0C0F  2C12               	goto	l3902
  3377                           
  3378                           ;main.c: 350: orientation = 0;
  3379  0C10  01E9               	clrf	_orientation
  3380  0C11  2C16               	goto	l3904
  3381  0C12                     l3902:	
  3382                           
  3383                           ;main.c: 351: else orientation++;
  3384  0C12  3001               	movlw	1
  3385  0C13  00D5               	movwf	??_Turn90
  3386  0C14  0855               	movf	??_Turn90,w
  3387  0C15  07E9               	addwf	_orientation,f
  3388  0C16                     l3904:	
  3389                           
  3390                           ;main.c: 353: Drive(0,150,0xFF,0xFF);
  3391  0C16  3096               	movlw	150
  3392  0C17  00D5               	movwf	??_Turn90
  3393  0C18  0855               	movf	??_Turn90,w
  3394  0C19  00CC               	movwf	Drive@speedL
  3395  0C1A  30FF               	movlw	255
  3396  0C1B  00D6               	movwf	??_Turn90+1
  3397  0C1C  0856               	movf	??_Turn90+1,w
  3398  0C1D  00CD               	movwf	Drive@radH
  3399  0C1E  30FF               	movlw	255
  3400  0C1F  00D7               	movwf	??_Turn90+2
  3401  0C20  0857               	movf	??_Turn90+2,w
  3402  0C21  00CE               	movwf	Drive@radL
  3403  0C22  3000               	movlw	0
  3404  0C23  120A  158A  2240  120A  158A  	fcall	_Drive
  3405  0C28                     l3908:	
  3406                           ;main.c: 354: while (angle > -86){
  3407                           
  3408  0C28  1283               	bcf	3,5	;RP0=0, select bank0
  3409  0C29  1303               	bcf	3,6	;RP1=0, select bank0
  3410  0C2A  0827               	movf	_angle+1,w
  3411  0C2B  3A80               	xorlw	128
  3412  0C2C  00FF               	movwf	127
  3413  0C2D  307F               	movlw	127
  3414  0C2E  027F               	subwf	127,w
  3415  0C2F  1D03               	skipz
  3416  0C30  2C33               	goto	u2665
  3417  0C31  30AB               	movlw	171
  3418  0C32  0226               	subwf	_angle,w
  3419  0C33                     u2665:	
  3420  0C33  1C03               	btfss	3,0
  3421  0C34  2C4C               	goto	l3910
  3422                           
  3423                           ;main.c: 355: angle = angle + getSensorData(20,2);
  3424  0C35  3002               	movlw	2
  3425  0C36  1283               	bcf	3,5	;RP0=0, select bank0
  3426  0C37  1303               	bcf	3,6	;RP1=0, select bank0
  3427  0C38  00D5               	movwf	??_Turn90
  3428  0C39  0855               	movf	??_Turn90,w
  3429  0C3A  00CD               	movwf	getSensorData@bytes
  3430  0C3B  3014               	movlw	20
  3431  0C3C  120A  158A  22B9  120A  158A  	fcall	_getSensorData
  3432  0C41  1283               	bcf	3,5	;RP0=0, select bank0
  3433  0C42  1303               	bcf	3,6	;RP1=0, select bank0
  3434  0C43  0826               	movf	_angle,w
  3435  0C44  074D               	addwf	?_getSensorData,w
  3436  0C45  00A6               	movwf	_angle
  3437  0C46  0827               	movf	_angle+1,w
  3438  0C47  1803               	skipnc
  3439  0C48  0A27               	incf	_angle+1,w
  3440  0C49  074E               	addwf	?_getSensorData+1,w
  3441  0C4A  00A7               	movwf	_angle+1
  3442  0C4B  2C28               	goto	l3908
  3443  0C4C                     l3910:	
  3444                           
  3445                           ;main.c: 356: }
  3446                           ;main.c: 357: }
  3447                           ;main.c: 358: DriveDirect(0,0);
  3448  0C4C  3000               	movlw	0
  3449  0C4D  1283               	bcf	3,5	;RP0=0, select bank0
  3450  0C4E  1303               	bcf	3,6	;RP1=0, select bank0
  3451  0C4F  00CC               	movwf	DriveDirect@VelocityRight
  3452  0C50  00CD               	movwf	DriveDirect@VelocityRight+1
  3453  0C51  3000               	movlw	0
  3454  0C52  00CE               	movwf	DriveDirect@VelocityLeft
  3455  0C53  00CF               	movwf	DriveDirect@VelocityLeft+1
  3456  0C54  120A  158A  2337  120A  158A  	fcall	_DriveDirect
  3457                           
  3458                           ;main.c: 359: _delay((unsigned long)((100)*(20000000/4000.0)));
  3459  0C59  3003               	movlw	3
  3460  0C5A  1283               	bcf	3,5	;RP0=0, select bank0
  3461  0C5B  1303               	bcf	3,6	;RP1=0, select bank0
  3462  0C5C  00D7               	movwf	??_Turn90+2
  3463  0C5D  308A               	movlw	138
  3464  0C5E  00D6               	movwf	??_Turn90+1
  3465  0C5F  3056               	movlw	86
  3466  0C60  00D5               	movwf	??_Turn90
  3467  0C61                     u3687:	
  3468  0C61  0BD5               	decfsz	??_Turn90,f
  3469  0C62  2C61               	goto	u3687
  3470  0C63  0BD6               	decfsz	??_Turn90+1,f
  3471  0C64  2C61               	goto	u3687
  3472  0C65  0BD7               	decfsz	??_Turn90+2,f
  3473  0C66  2C61               	goto	u3687
  3474  0C67  2C68               	nop2
  3475  0C68  0008               	return
  3476  0C69                     __end_of_Turn90:	
  3477                           
  3478                           	psect	text9
  3479  0A40                     __ptext9:	
  3480 ;; *************** function _Drive *****************
  3481 ;; Defined at:
  3482 ;;		line 45 in file "ser.c"
  3483 ;; Parameters:    Size  Location     Type
  3484 ;;  speedH          1    wreg     unsigned char 
  3485 ;;  speedL          1    1[BANK0 ] unsigned char 
  3486 ;;  radH            1    2[BANK0 ] unsigned char 
  3487 ;;  radL            1    3[BANK0 ] unsigned char 
  3488 ;; Auto vars:     Size  Location     Type
  3489 ;;  speedH          1    4[BANK0 ] unsigned char 
  3490 ;; Return value:  Size  Location     Type
  3491 ;;                  1    wreg      void 
  3492 ;; Registers used:
  3493 ;;		wreg, status,2, status,0, pclath, cstack
  3494 ;; Tracked objects:
  3495 ;;		On entry : 0/0
  3496 ;;		On exit  : 0/0
  3497 ;;		Unchanged: 0/0
  3498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3499 ;;      Params:         0       3       0       0       0
  3500 ;;      Locals:         0       1       0       0       0
  3501 ;;      Temps:          0       0       0       0       0
  3502 ;;      Totals:         0       4       0       0       0
  3503 ;;Total ram usage:        4 bytes
  3504 ;; Hardware stack levels used:    1
  3505 ;; Hardware stack levels required when called:    2
  3506 ;; This function calls:
  3507 ;;		_ser_putch
  3508 ;; This function is called by:
  3509 ;;		_Turn90
  3510 ;; This function uses a non-reentrant model
  3511 ;;
  3512                           
  3513                           
  3514                           ;psect for function _Drive
  3515  0A40                     _Drive:	
  3516                           
  3517                           ;incstack = 0
  3518                           ; Regs used in _Drive: [wreg+status,2+status,0+pclath+cstack]
  3519                           ;Drive@speedH stored from wreg
  3520  0A40  1283               	bcf	3,5	;RP0=0, select bank0
  3521  0A41  1303               	bcf	3,6	;RP1=0, select bank0
  3522  0A42  00CF               	movwf	Drive@speedH
  3523                           
  3524                           ;ser.c: 46: ser_putch(137);
  3525  0A43  3089               	movlw	137
  3526  0A44  120A  158A  2173  120A  158A  	fcall	_ser_putch
  3527                           
  3528                           ;ser.c: 47: ser_putch(speedH);
  3529  0A49  1283               	bcf	3,5	;RP0=0, select bank0
  3530  0A4A  1303               	bcf	3,6	;RP1=0, select bank0
  3531  0A4B  084F               	movf	Drive@speedH,w
  3532  0A4C  120A  158A  2173  120A  158A  	fcall	_ser_putch
  3533                           
  3534                           ;ser.c: 48: ser_putch(speedL);
  3535  0A51  1283               	bcf	3,5	;RP0=0, select bank0
  3536  0A52  1303               	bcf	3,6	;RP1=0, select bank0
  3537  0A53  084C               	movf	Drive@speedL,w
  3538  0A54  120A  158A  2173  120A  158A  	fcall	_ser_putch
  3539                           
  3540                           ;ser.c: 49: ser_putch(radH);
  3541  0A59  1283               	bcf	3,5	;RP0=0, select bank0
  3542  0A5A  1303               	bcf	3,6	;RP1=0, select bank0
  3543  0A5B  084D               	movf	Drive@radH,w
  3544  0A5C  120A  158A  2173  120A  158A  	fcall	_ser_putch
  3545                           
  3546                           ;ser.c: 50: ser_putch(radL);
  3547  0A61  1283               	bcf	3,5	;RP0=0, select bank0
  3548  0A62  1303               	bcf	3,6	;RP1=0, select bank0
  3549  0A63  084E               	movf	Drive@radL,w
  3550  0A64  120A  158A  2173   	fcall	_ser_putch
  3551  0A67  0008               	return
  3552  0A68                     __end_of_Drive:	
  3553                           
  3554                           	psect	text10
  3555  0606                     __ptext10:	
  3556 ;; *************** function _Drive1m *****************
  3557 ;; Defined at:
  3558 ;;		line 254 in file "main.c"
  3559 ;; Parameters:    Size  Location     Type
  3560 ;;		None
  3561 ;; Auto vars:     Size  Location     Type
  3562 ;;  omni_IR         1   14[BANK0 ] unsigned char 
  3563 ;;  n               1   13[BANK0 ] unsigned char 
  3564 ;; Return value:  Size  Location     Type
  3565 ;;                  1    wreg      void 
  3566 ;; Registers used:
  3567 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3568 ;; Tracked objects:
  3569 ;;		On entry : 0/0
  3570 ;;		On exit  : 0/0
  3571 ;;		Unchanged: 0/0
  3572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3573 ;;      Params:         0       0       0       0       0
  3574 ;;      Locals:         0       2       0       0       0
  3575 ;;      Temps:          0       3       0       0       0
  3576 ;;      Totals:         0       5       0       0       0
  3577 ;;Total ram usage:        5 bytes
  3578 ;; Hardware stack levels used:    1
  3579 ;; Hardware stack levels required when called:    3
  3580 ;; This function calls:
  3581 ;;		_DriveDirect
  3582 ;;		_getSensorData
  3583 ;;		_ser_putch
  3584 ;; This function is called by:
  3585 ;;		_TravelPath
  3586 ;; This function uses a non-reentrant model
  3587 ;;
  3588                           
  3589                           
  3590                           ;psect for function _Drive1m
  3591  0606                     _Drive1m:	
  3592                           
  3593                           ;main.c: 262: distance = 0;
  3594                           
  3595                           ;incstack = 0
  3596                           ; Regs used in _Drive1m: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3597  0606  1283               	bcf	3,5	;RP0=0, select bank0
  3598  0607  1303               	bcf	3,6	;RP1=0, select bank0
  3599  0608  01A8               	clrf	_distance
  3600  0609  01A9               	clrf	_distance+1
  3601                           
  3602                           ;main.c: 263: DriveDirect(250,250);
  3603  060A  30FA               	movlw	250
  3604  060B  00CC               	movwf	DriveDirect@VelocityRight
  3605  060C  3000               	movlw	0
  3606  060D  00CD               	movwf	DriveDirect@VelocityRight+1
  3607  060E  30FA               	movlw	250
  3608  060F  00CE               	movwf	DriveDirect@VelocityLeft
  3609  0610  3000               	movlw	0
  3610  0611  00CF               	movwf	DriveDirect@VelocityLeft+1
  3611  0612  120A  158A  2337  120A  118A  	fcall	_DriveDirect
  3612                           
  3613                           ;main.c: 264: RB2 = 1;
  3614  0617  1283               	bcf	3,5	;RP0=0, select bank0
  3615  0618  1303               	bcf	3,6	;RP1=0, select bank0
  3616  0619  1506               	bsf	6,2	;volatile
  3617                           
  3618                           ;main.c: 265: RB3 = 1;
  3619  061A  1586               	bsf	6,3	;volatile
  3620  061B                     l3854:	
  3621                           ;main.c: 268: while (distance < 1000){
  3622                           
  3623  061B  1283               	bcf	3,5	;RP0=0, select bank0
  3624  061C  1303               	bcf	3,6	;RP1=0, select bank0
  3625  061D  0829               	movf	_distance+1,w
  3626  061E  3A80               	xorlw	128
  3627  061F  00FF               	movwf	127
  3628  0620  3083               	movlw	131
  3629  0621  027F               	subwf	127,w
  3630  0622  1D03               	skipz
  3631  0623  2E26               	goto	u2585
  3632  0624  30E8               	movlw	232
  3633  0625  0228               	subwf	_distance,w
  3634  0626                     u2585:	
  3635  0626  1803               	btfsc	3,0
  3636  0627  2EB0               	goto	l3856
  3637                           
  3638                           ;main.c: 271: distance = distance + getSensorData(19,2);
  3639  0628  3002               	movlw	2
  3640  0629  1283               	bcf	3,5	;RP0=0, select bank0
  3641  062A  1303               	bcf	3,6	;RP1=0, select bank0
  3642  062B  00D5               	movwf	??_Drive1m
  3643  062C  0855               	movf	??_Drive1m,w
  3644  062D  00CD               	movwf	getSensorData@bytes
  3645  062E  3013               	movlw	19
  3646  062F  120A  158A  22B9  120A  118A  	fcall	_getSensorData
  3647  0634  1283               	bcf	3,5	;RP0=0, select bank0
  3648  0635  1303               	bcf	3,6	;RP1=0, select bank0
  3649  0636  0828               	movf	_distance,w
  3650  0637  074D               	addwf	?_getSensorData,w
  3651  0638  00A8               	movwf	_distance
  3652  0639  0829               	movf	_distance+1,w
  3653  063A  1803               	skipnc
  3654  063B  0A29               	incf	_distance+1,w
  3655  063C  074E               	addwf	?_getSensorData+1,w
  3656  063D  00A9               	movwf	_distance+1
  3657                           
  3658                           ;main.c: 273: if ((getSensorData(13,1)) == 1){
  3659  063E  01CD               	clrf	getSensorData@bytes
  3660  063F  0ACD               	incf	getSensorData@bytes,f
  3661  0640  300D               	movlw	13
  3662  0641  120A  158A  22B9  120A  118A  	fcall	_getSensorData
  3663  0646  1283               	bcf	3,5	;RP0=0, select bank0
  3664  0647  1303               	bcf	3,6	;RP1=0, select bank0
  3665  0648  034D               	decf	?_getSensorData,w
  3666  0649  044E               	iorwf	?_getSensorData+1,w
  3667  064A  1D03               	btfss	3,2
  3668  064B  2E1B               	goto	l3854
  3669                           
  3670                           ;main.c: 275: if((getSensorData(17,1)) != 242){
  3671  064C  01CD               	clrf	getSensorData@bytes
  3672  064D  0ACD               	incf	getSensorData@bytes,f
  3673  064E  3011               	movlw	17
  3674  064F  120A  158A  22B9  120A  118A  	fcall	_getSensorData
  3675  0654  30F2               	movlw	242
  3676  0655  1283               	bcf	3,5	;RP0=0, select bank0
  3677  0656  1303               	bcf	3,6	;RP1=0, select bank0
  3678  0657  064D               	xorwf	?_getSensorData,w
  3679  0658  044E               	iorwf	?_getSensorData+1,w
  3680  0659  1903               	btfsc	3,2
  3681  065A  2E61               	goto	l3834
  3682                           
  3683                           ;main.c: 276: IR_Wall = 1;
  3684  065B  1470               	bsf	_IR_Wall/(0+8),_IR_Wall& (0+7)
  3685                           
  3686                           ;main.c: 277: distance = 1001;
  3687  065C  30E9               	movlw	233
  3688  065D  00A8               	movwf	_distance
  3689  065E  3003               	movlw	3
  3690  065F  00A9               	movwf	_distance+1
  3691                           
  3692                           ;main.c: 278: RB3 = 0;
  3693  0660  1186               	bcf	6,3	;volatile
  3694  0661                     l3834:	
  3695                           
  3696                           ;main.c: 279: }
  3697                           ;main.c: 282: unsigned char omni_IR = (getSensorData(17,1));
  3698  0661  01CD               	clrf	getSensorData@bytes
  3699  0662  0ACD               	incf	getSensorData@bytes,f
  3700  0663  3011               	movlw	17
  3701  0664  120A  158A  22B9  120A  118A  	fcall	_getSensorData
  3702  0669  1283               	bcf	3,5	;RP0=0, select bank0
  3703  066A  1303               	bcf	3,6	;RP1=0, select bank0
  3704  066B  084D               	movf	?_getSensorData,w
  3705  066C  00D5               	movwf	??_Drive1m
  3706  066D  0855               	movf	??_Drive1m,w
  3707  066E  00D9               	movwf	Drive1m@omni_IR
  3708                           
  3709                           ;main.c: 283: if (omni_IR == 250 || omni_IR == 246){
  3710  066F  30FA               	movlw	250
  3711  0670  0659               	xorwf	Drive1m@omni_IR,w
  3712  0671  1903               	btfsc	3,2
  3713  0672  2E77               	goto	l3840
  3714  0673  30F6               	movlw	246
  3715  0674  0659               	xorwf	Drive1m@omni_IR,w
  3716  0675  1D03               	btfss	3,2
  3717  0676  2E1B               	goto	l3854
  3718  0677                     l3840:	
  3719                           
  3720                           ;main.c: 285: targets++;
  3721  0677  3001               	movlw	1
  3722  0678  00D5               	movwf	??_Drive1m
  3723  0679  0855               	movf	??_Drive1m,w
  3724  067A  07C0               	addwf	_targets,f
  3725                           
  3726                           ;main.c: 287: switch(targets){
  3727  067B  2E97               	goto	l3850
  3728  067C                     l3842:	
  3729                           ;main.c: 288: case 1: ser_putch(141);
  3730                           
  3731  067C  308D               	movlw	141
  3732  067D  120A  158A  2173  120A  118A  	fcall	_ser_putch
  3733                           
  3734                           ;main.c: 289: ser_putch(5);
  3735  0682  3005               	movlw	5
  3736  0683  120A  158A  2173  120A  118A  	fcall	_ser_putch
  3737                           
  3738                           ;main.c: 290: break;
  3739  0688  2EA1               	goto	l3852
  3740  0689                     l3844:	
  3741                           ;main.c: 291: case 2: ser_putch(141);
  3742                           
  3743  0689  308D               	movlw	141
  3744  068A  120A  158A  2173  120A  118A  	fcall	_ser_putch
  3745                           
  3746                           ;main.c: 292: ser_putch(3);
  3747  068F  3003               	movlw	3
  3748  0690  120A  158A  2173  120A  118A  	fcall	_ser_putch
  3749                           
  3750                           ;main.c: 293: targets_found = 1;
  3751  0695  16F0               	bsf	_targets_found/(0+8),_targets_found& (0+7)
  3752                           
  3753                           ;main.c: 295: }
  3754                           
  3755                           ;main.c: 294: break;
  3756  0696  2EA1               	goto	l3852
  3757  0697                     l3850:	
  3758  0697  1283               	bcf	3,5	;RP0=0, select bank0
  3759  0698  1303               	bcf	3,6	;RP1=0, select bank0
  3760  0699  0840               	movf	_targets,w
  3761                           
  3762                           ; Switch size 1, requested type "space"
  3763                           ; Number of cases is 2, Range of values is 1 to 2
  3764                           ; switch strategies available:
  3765                           ; Name         Instructions Cycles
  3766                           ; simple_byte            7     4 (average)
  3767                           ; direct_byte           17    11 (fixed)
  3768                           ; jumptable            263     9 (fixed)
  3769                           ;	Chosen strategy is simple_byte
  3770  069A  3A01               	xorlw	1	; case 1
  3771  069B  1903               	skipnz
  3772  069C  2E7C               	goto	l3842
  3773  069D  3A03               	xorlw	3	; case 2
  3774  069E  1903               	skipnz
  3775  069F  2E89               	goto	l3844
  3776  06A0  2EA1               	goto	l3852
  3777  06A1                     l3852:	
  3778                           
  3779                           ;main.c: 297: _delay((unsigned long)((2000)*(20000000/4000.0)));
  3780  06A1  3033               	movlw	51
  3781  06A2  1283               	bcf	3,5	;RP0=0, select bank0
  3782  06A3  1303               	bcf	3,6	;RP1=0, select bank0
  3783  06A4  00D7               	movwf	??_Drive1m+2
  3784  06A5  30BC               	movlw	188
  3785  06A6  00D6               	movwf	??_Drive1m+1
  3786  06A7  3010               	movlw	16
  3787  06A8  00D5               	movwf	??_Drive1m
  3788  06A9                     u3697:	
  3789  06A9  0BD5               	decfsz	??_Drive1m,f
  3790  06AA  2EA9               	goto	u3697
  3791  06AB  0BD6               	decfsz	??_Drive1m+1,f
  3792  06AC  2EA9               	goto	u3697
  3793  06AD  0BD7               	decfsz	??_Drive1m+2,f
  3794  06AE  2EA9               	goto	u3697
  3795  06AF  2E1B               	goto	l3854
  3796  06B0                     l3856:	
  3797                           
  3798                           ;main.c: 299: }
  3799                           ;main.c: 301: }
  3800                           ;main.c: 302: }
  3801                           ;main.c: 305: DriveDirect(0,0);
  3802  06B0  3000               	movlw	0
  3803  06B1  1283               	bcf	3,5	;RP0=0, select bank0
  3804  06B2  1303               	bcf	3,6	;RP1=0, select bank0
  3805  06B3  00CC               	movwf	DriveDirect@VelocityRight
  3806  06B4  00CD               	movwf	DriveDirect@VelocityRight+1
  3807  06B5  3000               	movlw	0
  3808  06B6  00CE               	movwf	DriveDirect@VelocityLeft
  3809  06B7  00CF               	movwf	DriveDirect@VelocityLeft+1
  3810  06B8  120A  158A  2337  120A  118A  	fcall	_DriveDirect
  3811                           
  3812                           ;main.c: 307: if(IR_Wall == 0){
  3813  06BD  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  3814  06BE  2ED2               	goto	l3872
  3815  06BF  2EEF               	goto	l3876
  3816  06C0                     l3862:	
  3817                           ;main.c: 309: case 0: y--;
  3818                           
  3819                           ;main.c: 308: switch(orientation){
  3820                           
  3821  06C0  3001               	movlw	1
  3822  06C1  1283               	bcf	3,5	;RP0=0, select bank0
  3823  06C2  1303               	bcf	3,6	;RP1=0, select bank0
  3824  06C3  02C5               	subwf	_y,f
  3825                           
  3826                           ;main.c: 310: break;
  3827  06C4  2EE2               	goto	l3874
  3828  06C5                     l3864:	
  3829                           ;main.c: 311: case 1: x++;
  3830                           
  3831  06C5  3001               	movlw	1
  3832  06C6  00D5               	movwf	??_Drive1m
  3833  06C7  0855               	movf	??_Drive1m,w
  3834  06C8  07EB               	addwf	_x,f
  3835                           
  3836                           ;main.c: 312: break;
  3837  06C9  2EE2               	goto	l3874
  3838  06CA                     l3866:	
  3839                           ;main.c: 313: case 2: y++;
  3840                           
  3841  06CA  3001               	movlw	1
  3842  06CB  00D5               	movwf	??_Drive1m
  3843  06CC  0855               	movf	??_Drive1m,w
  3844  06CD  07C5               	addwf	_y,f
  3845                           
  3846                           ;main.c: 314: break;
  3847  06CE  2EE2               	goto	l3874
  3848  06CF                     l3868:	
  3849                           ;main.c: 315: case 3: x--;
  3850                           
  3851  06CF  3001               	movlw	1
  3852  06D0  02EB               	subwf	_x,f
  3853                           
  3854                           ;main.c: 317: }
  3855                           
  3856                           ;main.c: 316: break;
  3857  06D1  2EE2               	goto	l3874
  3858  06D2                     l3872:	
  3859  06D2  1283               	bcf	3,5	;RP0=0, select bank0
  3860  06D3  1303               	bcf	3,6	;RP1=0, select bank0
  3861  06D4  0869               	movf	_orientation,w
  3862                           
  3863                           ; Switch size 1, requested type "space"
  3864                           ; Number of cases is 4, Range of values is 0 to 3
  3865                           ; switch strategies available:
  3866                           ; Name         Instructions Cycles
  3867                           ; simple_byte           13     7 (average)
  3868                           ; direct_byte           20     8 (fixed)
  3869                           ; jumptable            260     6 (fixed)
  3870                           ;	Chosen strategy is simple_byte
  3871  06D5  3A00               	xorlw	0	; case 0
  3872  06D6  1903               	skipnz
  3873  06D7  2EC0               	goto	l3862
  3874  06D8  3A01               	xorlw	1	; case 1
  3875  06D9  1903               	skipnz
  3876  06DA  2EC5               	goto	l3864
  3877  06DB  3A03               	xorlw	3	; case 2
  3878  06DC  1903               	skipnz
  3879  06DD  2ECA               	goto	l3866
  3880  06DE  3A01               	xorlw	1	; case 3
  3881  06DF  1903               	skipnz
  3882  06E0  2ECF               	goto	l3868
  3883  06E1  2EE2               	goto	l3874
  3884  06E2                     l3874:	
  3885                           
  3886                           ;main.c: 318: _delay((unsigned long)((100)*(20000000/4000.0)));
  3887  06E2  3003               	movlw	3
  3888  06E3  00D7               	movwf	??_Drive1m+2
  3889  06E4  308A               	movlw	138
  3890  06E5  00D6               	movwf	??_Drive1m+1
  3891  06E6  3056               	movlw	86
  3892  06E7  00D5               	movwf	??_Drive1m
  3893  06E8                     u3707:	
  3894  06E8  0BD5               	decfsz	??_Drive1m,f
  3895  06E9  2EE8               	goto	u3707
  3896  06EA  0BD6               	decfsz	??_Drive1m+1,f
  3897  06EB  2EE8               	goto	u3707
  3898  06EC  0BD7               	decfsz	??_Drive1m+2,f
  3899  06ED  2EE8               	goto	u3707
  3900  06EE  2EEF               	nop2
  3901  06EF                     l3876:	
  3902                           
  3903                           ;main.c: 319: }
  3904                           ;main.c: 324: if (targets_found == 1){
  3905  06EF  1EF0               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  3906  06F0  0008               	return
  3907                           
  3908                           ;main.c: 325: char n = 20;
  3909  06F1  3014               	movlw	20
  3910  06F2  1283               	bcf	3,5	;RP0=0, select bank0
  3911  06F3  1303               	bcf	3,6	;RP1=0, select bank0
  3912  06F4  00D5               	movwf	??_Drive1m
  3913  06F5  0855               	movf	??_Drive1m,w
  3914  06F6  00D8               	movwf	Drive1m@n
  3915  06F7  0008               	return
  3916  06F8                     __end_of_Drive1m:	
  3917                           
  3918                           	psect	text11
  3919  0AB9                     __ptext11:	
  3920 ;; *************** function _getSensorData *****************
  3921 ;; Defined at:
  3922 ;;		line 85 in file "ser.c"
  3923 ;; Parameters:    Size  Location     Type
  3924 ;;  packetID        1    wreg     unsigned char 
  3925 ;;  bytes           1    2[BANK0 ] unsigned char 
  3926 ;; Auto vars:     Size  Location     Type
  3927 ;;  packetID        1    6[BANK0 ] unsigned char 
  3928 ;;  sensor          2    7[BANK0 ] int 
  3929 ;; Return value:  Size  Location     Type
  3930 ;;                  2    2[BANK0 ] int 
  3931 ;; Registers used:
  3932 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3933 ;; Tracked objects:
  3934 ;;		On entry : 0/0
  3935 ;;		On exit  : 0/0
  3936 ;;		Unchanged: 0/0
  3937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3938 ;;      Params:         0       2       0       0       0
  3939 ;;      Locals:         0       3       0       0       0
  3940 ;;      Temps:          0       2       0       0       0
  3941 ;;      Totals:         0       7       0       0       0
  3942 ;;Total ram usage:        7 bytes
  3943 ;; Hardware stack levels used:    1
  3944 ;; Hardware stack levels required when called:    2
  3945 ;; This function calls:
  3946 ;;		_ser_getch
  3947 ;;		_ser_putch
  3948 ;; This function is called by:
  3949 ;;		_Drive1m
  3950 ;;		_Turn90
  3951 ;;		_re_route
  3952 ;; This function uses a non-reentrant model
  3953 ;;
  3954                           
  3955                           
  3956                           ;psect for function _getSensorData
  3957  0AB9                     _getSensorData:	
  3958                           
  3959                           ;incstack = 0
  3960                           ; Regs used in _getSensorData: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3961                           ;getSensorData@packetID stored from wreg
  3962  0AB9  1283               	bcf	3,5	;RP0=0, select bank0
  3963  0ABA  1303               	bcf	3,6	;RP1=0, select bank0
  3964  0ABB  00D1               	movwf	getSensorData@packetID
  3965                           
  3966                           ;ser.c: 86: ser_putch(142);
  3967  0ABC  308E               	movlw	142
  3968  0ABD  120A  158A  2173  120A  158A  	fcall	_ser_putch
  3969                           
  3970                           ;ser.c: 87: ser_putch(packetID);
  3971  0AC2  1283               	bcf	3,5	;RP0=0, select bank0
  3972  0AC3  1303               	bcf	3,6	;RP1=0, select bank0
  3973  0AC4  0851               	movf	getSensorData@packetID,w
  3974  0AC5  120A  158A  2173  120A  158A  	fcall	_ser_putch
  3975                           
  3976                           ;ser.c: 89: if (bytes == 2)
  3977  0ACA  3002               	movlw	2
  3978  0ACB  1283               	bcf	3,5	;RP0=0, select bank0
  3979  0ACC  1303               	bcf	3,6	;RP1=0, select bank0
  3980  0ACD  064D               	xorwf	getSensorData@bytes,w
  3981  0ACE  1D03               	btfss	3,2
  3982  0ACF  2ADB               	goto	l3784
  3983                           
  3984                           ;ser.c: 90: highByte = ser_getch();
  3985  0AD0  120A  158A  2169  120A  158A  	fcall	_ser_getch
  3986  0AD5  1283               	bcf	3,5	;RP0=0, select bank0
  3987  0AD6  1303               	bcf	3,6	;RP1=0, select bank0
  3988  0AD7  00CF               	movwf	??_getSensorData
  3989  0AD8  084F               	movf	??_getSensorData,w
  3990  0AD9  00CA               	movwf	_highByte
  3991  0ADA  2ADC               	goto	l3786
  3992  0ADB                     l3784:	
  3993                           
  3994                           ;ser.c: 91: else
  3995                           ;ser.c: 92: highByte = 0;
  3996  0ADB  01CA               	clrf	_highByte
  3997  0ADC                     l3786:	
  3998                           
  3999                           ;ser.c: 94: lowByte = ser_getch();
  4000  0ADC  120A  158A  2169   	fcall	_ser_getch
  4001  0ADF  1283               	bcf	3,5	;RP0=0, select bank0
  4002  0AE0  1303               	bcf	3,6	;RP1=0, select bank0
  4003  0AE1  00CF               	movwf	??_getSensorData
  4004  0AE2  084F               	movf	??_getSensorData,w
  4005  0AE3  00B8               	movwf	_lowByte
  4006                           
  4007                           ;ser.c: 96: signed int sensor = (256*highByte + lowByte);
  4008  0AE4  084A               	movf	_highByte,w
  4009  0AE5  00CF               	movwf	??_getSensorData
  4010  0AE6  01D0               	clrf	??_getSensorData+1
  4011  0AE7  084F               	movf	??_getSensorData,w
  4012  0AE8  00D0               	movwf	??_getSensorData+1
  4013  0AE9  01CF               	clrf	??_getSensorData
  4014  0AEA  0838               	movf	_lowByte,w
  4015  0AEB  074F               	addwf	??_getSensorData,w
  4016  0AEC  00D2               	movwf	getSensorData@sensor
  4017  0AED  3000               	movlw	0
  4018  0AEE  1803               	skipnc
  4019  0AEF  3001               	movlw	1
  4020  0AF0  0750               	addwf	??_getSensorData+1,w
  4021  0AF1  00D3               	movwf	getSensorData@sensor+1
  4022                           
  4023                           ;ser.c: 98: return sensor;
  4024  0AF2  0853               	movf	getSensorData@sensor+1,w
  4025  0AF3  00CE               	movwf	?_getSensorData+1
  4026  0AF4  0852               	movf	getSensorData@sensor,w
  4027  0AF5  00CD               	movwf	?_getSensorData
  4028  0AF6  0008               	return
  4029  0AF7                     __end_of_getSensorData:	
  4030                           
  4031                           	psect	text12
  4032  0969                     __ptext12:	
  4033 ;; *************** function _ser_getch *****************
  4034 ;; Defined at:
  4035 ;;		line 35 in file "ser.c"
  4036 ;; Parameters:    Size  Location     Type
  4037 ;;		None
  4038 ;; Auto vars:     Size  Location     Type
  4039 ;;  rxbyte          1    1[BANK0 ] unsigned char 
  4040 ;; Return value:  Size  Location     Type
  4041 ;;                  1    wreg      unsigned char 
  4042 ;; Registers used:
  4043 ;;		wreg
  4044 ;; Tracked objects:
  4045 ;;		On entry : 0/0
  4046 ;;		On exit  : 0/0
  4047 ;;		Unchanged: 0/0
  4048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4049 ;;      Params:         0       0       0       0       0
  4050 ;;      Locals:         0       1       0       0       0
  4051 ;;      Temps:          0       1       0       0       0
  4052 ;;      Totals:         0       2       0       0       0
  4053 ;;Total ram usage:        2 bytes
  4054 ;; Hardware stack levels used:    1
  4055 ;; Hardware stack levels required when called:    1
  4056 ;; This function calls:
  4057 ;;		Nothing
  4058 ;; This function is called by:
  4059 ;;		_getSensorData
  4060 ;; This function uses a non-reentrant model
  4061 ;;
  4062                           
  4063                           
  4064                           ;psect for function _ser_getch
  4065  0969                     _ser_getch:	
  4066  0969                     l847:	
  4067                           ;ser.c: 36: while(!RCIF);
  4068                           
  4069                           ;incstack = 0
  4070                           ; Regs used in _ser_getch: [wreg]
  4071                           
  4072  0969  1283               	bcf	3,5	;RP0=0, select bank0
  4073  096A  1303               	bcf	3,6	;RP1=0, select bank0
  4074  096B  1E8C               	btfss	12,5	;volatile
  4075  096C  2969               	goto	l847
  4076                           
  4077                           ;ser.c: 37: unsigned char rxbyte = RCREG;
  4078  096D  081A               	movf	26,w	;volatile
  4079  096E  00CB               	movwf	??_ser_getch
  4080  096F  084B               	movf	??_ser_getch,w
  4081  0970  00CC               	movwf	ser_getch@rxbyte
  4082                           
  4083                           ;ser.c: 38: return rxbyte;
  4084  0971  084C               	movf	ser_getch@rxbyte,w
  4085  0972  0008               	return
  4086  0973                     __end_of_ser_getch:	
  4087                           
  4088                           	psect	text13
  4089  0B37                     __ptext13:	
  4090 ;; *************** function _DriveDirect *****************
  4091 ;; Defined at:
  4092 ;;		line 54 in file "ser.c"
  4093 ;; Parameters:    Size  Location     Type
  4094 ;;  VelocityRigh    2    1[BANK0 ] int 
  4095 ;;  VelocityLeft    2    3[BANK0 ] int 
  4096 ;; Auto vars:     Size  Location     Type
  4097 ;;  data            2    8[BANK0 ] unsigned int 
  4098 ;;  data            2    6[BANK0 ] unsigned int 
  4099 ;; Return value:  Size  Location     Type
  4100 ;;                  1    wreg      void 
  4101 ;; Registers used:
  4102 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4103 ;; Tracked objects:
  4104 ;;		On entry : 0/0
  4105 ;;		On exit  : 0/0
  4106 ;;		Unchanged: 0/0
  4107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4108 ;;      Params:         0       4       0       0       0
  4109 ;;      Locals:         0       4       0       0       0
  4110 ;;      Temps:          0       1       0       0       0
  4111 ;;      Totals:         0       9       0       0       0
  4112 ;;Total ram usage:        9 bytes
  4113 ;; Hardware stack levels used:    1
  4114 ;; Hardware stack levels required when called:    2
  4115 ;; This function calls:
  4116 ;;		_ser_putch
  4117 ;; This function is called by:
  4118 ;;		_Drive1m
  4119 ;;		_Turn90
  4120 ;;		_re_route
  4121 ;;		_wallFollow
  4122 ;; This function uses a non-reentrant model
  4123 ;;
  4124                           
  4125                           
  4126                           ;psect for function _DriveDirect
  4127  0B37                     _DriveDirect:	
  4128                           
  4129                           ;ser.c: 55: RightSpeedH = 0;
  4130                           
  4131                           ;incstack = 0
  4132                           ; Regs used in _DriveDirect: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4133  0B37  1283               	bcf	3,5	;RP0=0, select bank0
  4134  0B38  1303               	bcf	3,6	;RP1=0, select bank0
  4135  0B39  01B4               	clrf	_RightSpeedH
  4136                           
  4137                           ;ser.c: 56: LeftSpeedH = 0;
  4138  0B3A  01B0               	clrf	_LeftSpeedH
  4139                           
  4140                           ;ser.c: 58: if(VelocityRight > 255){
  4141  0B3B  084D               	movf	DriveDirect@VelocityRight+1,w
  4142  0B3C  3A80               	xorlw	128
  4143  0B3D  00FF               	movwf	127
  4144  0B3E  3081               	movlw	129
  4145  0B3F  027F               	subwf	127,w
  4146  0B40  1D03               	skipz
  4147  0B41  2B44               	goto	u2465
  4148  0B42  3000               	movlw	0
  4149  0B43  024C               	subwf	DriveDirect@VelocityRight,w
  4150  0B44                     u2465:	
  4151  0B44  1C03               	skipc
  4152  0B45  2B67               	goto	l3742
  4153                           
  4154                           ;ser.c: 59: unsigned int data = VelocityRight;
  4155  0B46  1283               	bcf	3,5	;RP0=0, select bank0
  4156  0B47  1303               	bcf	3,6	;RP1=0, select bank0
  4157  0B48  084D               	movf	DriveDirect@VelocityRight+1,w
  4158  0B49  00D2               	movwf	DriveDirect@data+1
  4159  0B4A  084C               	movf	DriveDirect@VelocityRight,w
  4160  0B4B  00D1               	movwf	DriveDirect@data
  4161                           
  4162                           ;ser.c: 60: for (RightSpeedH = 0; data > 255; RightSpeedH++){
  4163  0B4C  01B4               	clrf	_RightSpeedH
  4164  0B4D  3001               	movlw	1
  4165  0B4E  0252               	subwf	DriveDirect@data+1,w
  4166  0B4F  3000               	movlw	0
  4167  0B50  1903               	skipnz
  4168  0B51  0251               	subwf	DriveDirect@data,w
  4169  0B52  1C03               	btfss	3,0
  4170  0B53  2B67               	goto	l3742
  4171  0B54                     l3738:	
  4172                           
  4173                           ;ser.c: 61: data = data - 256;
  4174  0B54  0851               	movf	DriveDirect@data,w
  4175  0B55  3E00               	addlw	0
  4176  0B56  00D1               	movwf	DriveDirect@data
  4177  0B57  0852               	movf	DriveDirect@data+1,w
  4178  0B58  1803               	skipnc
  4179  0B59  3E01               	addlw	1
  4180  0B5A  3EFF               	addlw	255
  4181  0B5B  00D2               	movwf	DriveDirect@data+1
  4182  0B5C  3001               	movlw	1
  4183  0B5D  00D0               	movwf	??_DriveDirect
  4184  0B5E  0850               	movf	??_DriveDirect,w
  4185  0B5F  07B4               	addwf	_RightSpeedH,f
  4186  0B60  3001               	movlw	1
  4187  0B61  0252               	subwf	DriveDirect@data+1,w
  4188  0B62  3000               	movlw	0
  4189  0B63  1903               	skipnz
  4190  0B64  0251               	subwf	DriveDirect@data,w
  4191  0B65  1803               	skipnc
  4192  0B66  2B54               	goto	l3738
  4193  0B67                     l3742:	
  4194                           
  4195                           ;ser.c: 62: }
  4196                           ;ser.c: 63: }
  4197                           ;ser.c: 64: RightSpeedL = VelocityRight;
  4198  0B67  1283               	bcf	3,5	;RP0=0, select bank0
  4199  0B68  1303               	bcf	3,6	;RP1=0, select bank0
  4200  0B69  084C               	movf	DriveDirect@VelocityRight,w
  4201  0B6A  00D0               	movwf	??_DriveDirect
  4202  0B6B  0850               	movf	??_DriveDirect,w
  4203  0B6C  00B5               	movwf	_RightSpeedL
  4204                           
  4205                           ;ser.c: 67: if(VelocityLeft > 255){
  4206  0B6D  084F               	movf	DriveDirect@VelocityLeft+1,w
  4207  0B6E  3A80               	xorlw	128
  4208  0B6F  00FF               	movwf	127
  4209  0B70  3081               	movlw	129
  4210  0B71  027F               	subwf	127,w
  4211  0B72  1D03               	skipz
  4212  0B73  2B76               	goto	u2495
  4213  0B74  3000               	movlw	0
  4214  0B75  024E               	subwf	DriveDirect@VelocityLeft,w
  4215  0B76                     u2495:	
  4216  0B76  1C03               	skipc
  4217  0B77  2B99               	goto	l3758
  4218                           
  4219                           ;ser.c: 68: unsigned int data = VelocityLeft;
  4220  0B78  1283               	bcf	3,5	;RP0=0, select bank0
  4221  0B79  1303               	bcf	3,6	;RP1=0, select bank0
  4222  0B7A  084F               	movf	DriveDirect@VelocityLeft+1,w
  4223  0B7B  00D4               	movwf	DriveDirect@data_467+1
  4224  0B7C  084E               	movf	DriveDirect@VelocityLeft,w
  4225  0B7D  00D3               	movwf	DriveDirect@data_467
  4226                           
  4227                           ;ser.c: 69: for (LeftSpeedH = 0; data > 255; LeftSpeedH++){
  4228  0B7E  01B0               	clrf	_LeftSpeedH
  4229  0B7F  3001               	movlw	1
  4230  0B80  0254               	subwf	DriveDirect@data_467+1,w
  4231  0B81  3000               	movlw	0
  4232  0B82  1903               	skipnz
  4233  0B83  0253               	subwf	DriveDirect@data_467,w
  4234  0B84  1C03               	btfss	3,0
  4235  0B85  2B99               	goto	l3758
  4236  0B86                     l3754:	
  4237                           
  4238                           ;ser.c: 70: data = data - 256;
  4239  0B86  0853               	movf	DriveDirect@data_467,w
  4240  0B87  3E00               	addlw	0
  4241  0B88  00D3               	movwf	DriveDirect@data_467
  4242  0B89  0854               	movf	DriveDirect@data_467+1,w
  4243  0B8A  1803               	skipnc
  4244  0B8B  3E01               	addlw	1
  4245  0B8C  3EFF               	addlw	255
  4246  0B8D  00D4               	movwf	DriveDirect@data_467+1
  4247  0B8E  3001               	movlw	1
  4248  0B8F  00D0               	movwf	??_DriveDirect
  4249  0B90  0850               	movf	??_DriveDirect,w
  4250  0B91  07B0               	addwf	_LeftSpeedH,f
  4251  0B92  3001               	movlw	1
  4252  0B93  0254               	subwf	DriveDirect@data_467+1,w
  4253  0B94  3000               	movlw	0
  4254  0B95  1903               	skipnz
  4255  0B96  0253               	subwf	DriveDirect@data_467,w
  4256  0B97  1803               	skipnc
  4257  0B98  2B86               	goto	l3754
  4258  0B99                     l3758:	
  4259                           
  4260                           ;ser.c: 71: }
  4261                           ;ser.c: 72: }
  4262                           ;ser.c: 73: LeftSpeedL = VelocityLeft;
  4263  0B99  1283               	bcf	3,5	;RP0=0, select bank0
  4264  0B9A  1303               	bcf	3,6	;RP1=0, select bank0
  4265  0B9B  084E               	movf	DriveDirect@VelocityLeft,w
  4266  0B9C  00D0               	movwf	??_DriveDirect
  4267  0B9D  0850               	movf	??_DriveDirect,w
  4268  0B9E  00B1               	movwf	_LeftSpeedL
  4269                           
  4270                           ;ser.c: 76: ser_putch(145);
  4271  0B9F  3091               	movlw	145
  4272  0BA0  120A  158A  2173  120A  158A  	fcall	_ser_putch
  4273                           
  4274                           ;ser.c: 77: ser_putch(RightSpeedH);
  4275  0BA5  1283               	bcf	3,5	;RP0=0, select bank0
  4276  0BA6  1303               	bcf	3,6	;RP1=0, select bank0
  4277  0BA7  0834               	movf	_RightSpeedH,w
  4278  0BA8  120A  158A  2173  120A  158A  	fcall	_ser_putch
  4279                           
  4280                           ;ser.c: 78: ser_putch(RightSpeedL);
  4281  0BAD  1283               	bcf	3,5	;RP0=0, select bank0
  4282  0BAE  1303               	bcf	3,6	;RP1=0, select bank0
  4283  0BAF  0835               	movf	_RightSpeedL,w
  4284  0BB0  120A  158A  2173  120A  158A  	fcall	_ser_putch
  4285                           
  4286                           ;ser.c: 79: ser_putch(LeftSpeedH);
  4287  0BB5  1283               	bcf	3,5	;RP0=0, select bank0
  4288  0BB6  1303               	bcf	3,6	;RP1=0, select bank0
  4289  0BB7  0830               	movf	_LeftSpeedH,w
  4290  0BB8  120A  158A  2173  120A  158A  	fcall	_ser_putch
  4291                           
  4292                           ;ser.c: 80: ser_putch(LeftSpeedL);
  4293  0BBD  1283               	bcf	3,5	;RP0=0, select bank0
  4294  0BBE  1303               	bcf	3,6	;RP1=0, select bank0
  4295  0BBF  0831               	movf	_LeftSpeedL,w
  4296  0BC0  120A  158A  2173   	fcall	_ser_putch
  4297  0BC3  0008               	return
  4298  0BC4                     __end_of_DriveDirect:	
  4299                           
  4300                           	psect	text14
  4301  0973                     __ptext14:	
  4302 ;; *************** function _ser_putch *****************
  4303 ;; Defined at:
  4304 ;;		line 30 in file "ser.c"
  4305 ;; Parameters:    Size  Location     Type
  4306 ;;  c               1    wreg     unsigned char 
  4307 ;; Auto vars:     Size  Location     Type
  4308 ;;  c               1    0[BANK0 ] unsigned char 
  4309 ;; Return value:  Size  Location     Type
  4310 ;;                  1    wreg      void 
  4311 ;; Registers used:
  4312 ;;		wreg
  4313 ;; Tracked objects:
  4314 ;;		On entry : 0/0
  4315 ;;		On exit  : 0/0
  4316 ;;		Unchanged: 0/0
  4317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4318 ;;      Params:         0       0       0       0       0
  4319 ;;      Locals:         0       1       0       0       0
  4320 ;;      Temps:          0       0       0       0       0
  4321 ;;      Totals:         0       1       0       0       0
  4322 ;;Total ram usage:        1 bytes
  4323 ;; Hardware stack levels used:    1
  4324 ;; Hardware stack levels required when called:    1
  4325 ;; This function calls:
  4326 ;;		Nothing
  4327 ;; This function is called by:
  4328 ;;		_Drive1m
  4329 ;;		_main
  4330 ;;		_Drive
  4331 ;;		_DriveDirect
  4332 ;;		_getSensorData
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           
  4337                           ;psect for function _ser_putch
  4338  0973                     _ser_putch:	
  4339                           
  4340                           ;incstack = 0
  4341                           ; Regs used in _ser_putch: [wreg]
  4342                           ;ser_putch@c stored from wreg
  4343  0973  1283               	bcf	3,5	;RP0=0, select bank0
  4344  0974  1303               	bcf	3,6	;RP1=0, select bank0
  4345  0975  00CB               	movwf	ser_putch@c
  4346  0976                     l841:	
  4347                           ;ser.c: 31: while(!TRMT);
  4348                           
  4349  0976  1683               	bsf	3,5	;RP0=1, select bank1
  4350  0977  1303               	bcf	3,6	;RP1=0, select bank1
  4351  0978  1C98               	btfss	24,1	;volatile
  4352  0979  2976               	goto	l841
  4353                           
  4354                           ;ser.c: 32: TXREG=c;
  4355  097A  1283               	bcf	3,5	;RP0=0, select bank0
  4356  097B  1303               	bcf	3,6	;RP1=0, select bank0
  4357  097C  084B               	movf	ser_putch@c,w
  4358  097D  0099               	movwf	25	;volatile
  4359  097E  0008               	return
  4360  097F                     __end_of_ser_putch:	
  4361                           
  4362                           	psect	text15
  4363  0C69                     __ptext15:	
  4364 ;; *************** function _PathTo *****************
  4365 ;; Defined at:
  4366 ;;		line 46 in file "main.c"
  4367 ;; Parameters:    Size  Location     Type
  4368 ;;  x_target        1    wreg     unsigned char 
  4369 ;;  y_target        1    5[BANK0 ] unsigned char 
  4370 ;; Auto vars:     Size  Location     Type
  4371 ;;  x_target        1   13[BANK0 ] unsigned char 
  4372 ;;  sum             1   14[BANK0 ] unsigned char 
  4373 ;;  loop            2   15[BANK0 ] int 
  4374 ;; Return value:  Size  Location     Type
  4375 ;;                  1    wreg      void 
  4376 ;; Registers used:
  4377 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4378 ;; Tracked objects:
  4379 ;;		On entry : 0/0
  4380 ;;		On exit  : 0/0
  4381 ;;		Unchanged: 0/0
  4382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4383 ;;      Params:         0       1       0       0       0
  4384 ;;      Locals:         0       4       0       0       0
  4385 ;;      Temps:          0       7       0       0       0
  4386 ;;      Totals:         0      12       0       0       0
  4387 ;;Total ram usage:       12 bytes
  4388 ;; Hardware stack levels used:    1
  4389 ;; Hardware stack levels required when called:    3
  4390 ;; This function calls:
  4391 ;;		___bmul
  4392 ;;		_lcdSetCursor
  4393 ;;		_lcdWriteData
  4394 ;;		_lcdWriteString
  4395 ;; This function is called by:
  4396 ;;		_re_route
  4397 ;;		_main
  4398 ;; This function uses a non-reentrant model
  4399 ;;
  4400                           
  4401                           
  4402                           ;psect for function _PathTo
  4403  0C69                     _PathTo:	
  4404                           
  4405                           ;incstack = 0
  4406                           ; Regs used in _PathTo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4407                           ;PathTo@x_target stored from wreg
  4408  0C69  1283               	bcf	3,5	;RP0=0, select bank0
  4409  0C6A  1303               	bcf	3,6	;RP1=0, select bank0
  4410  0C6B  00D8               	movwf	PathTo@x_target
  4411                           
  4412                           ;main.c: 50: for (r = 0; r <= 3; r++){
  4413  0C6C  01BB               	clrf	_r
  4414  0C6D  3004               	movlw	4
  4415  0C6E  023B               	subwf	_r,w
  4416  0C6F  1803               	btfsc	3,0
  4417  0C70  2CAE               	goto	l3950
  4418  0C71                     l3934:	
  4419                           
  4420                           ;main.c: 51: for (c = 0; c <= 4; c++){
  4421  0C71  01B6               	clrf	_c
  4422  0C72  3005               	movlw	5
  4423  0C73  0236               	subwf	_c,w
  4424  0C74  1803               	btfsc	3,0
  4425  0C75  2CA6               	goto	l3946
  4426  0C76                     l3940:	
  4427                           
  4428                           ;main.c: 52: mazeGrid[r][c] = mazeGridDefault[r][c];
  4429  0C76  3005               	movlw	5
  4430  0C77  00D1               	movwf	??_PathTo
  4431  0C78  0851               	movf	??_PathTo,w
  4432  0C79  00CB               	movwf	___bmul@multiplicand
  4433  0C7A  083B               	movf	_r,w
  4434  0C7B  120A  158A  21AE  120A  158A  	fcall	___bmul
  4435  0C80  3EB4               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  4436  0C81  1283               	bcf	3,5	;RP0=0, select bank0
  4437  0C82  1303               	bcf	3,6	;RP1=0, select bank0
  4438  0C83  0736               	addwf	_c,w
  4439  0C84  00D2               	movwf	??_PathTo+1
  4440  0C85  0852               	movf	??_PathTo+1,w
  4441  0C86  0084               	movwf	4
  4442  0C87  1383               	bcf	3,7	;select IRP bank1
  4443  0C88  0800               	movf	0,w
  4444  0C89  00D3               	movwf	??_PathTo+2
  4445  0C8A  3005               	movlw	5
  4446  0C8B  00D4               	movwf	??_PathTo+3
  4447  0C8C  0854               	movf	??_PathTo+3,w
  4448  0C8D  00CB               	movwf	___bmul@multiplicand
  4449  0C8E  083B               	movf	_r,w
  4450  0C8F  120A  158A  21AE  120A  158A  	fcall	___bmul
  4451  0C94  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  4452  0C95  1283               	bcf	3,5	;RP0=0, select bank0
  4453  0C96  1303               	bcf	3,6	;RP1=0, select bank0
  4454  0C97  0736               	addwf	_c,w
  4455  0C98  00D5               	movwf	??_PathTo+4
  4456  0C99  0855               	movf	??_PathTo+4,w
  4457  0C9A  0084               	movwf	4
  4458  0C9B  0853               	movf	??_PathTo+2,w
  4459  0C9C  1383               	bcf	3,7	;select IRP bank1
  4460  0C9D  0080               	movwf	0
  4461  0C9E  3001               	movlw	1
  4462  0C9F  00D1               	movwf	??_PathTo
  4463  0CA0  0851               	movf	??_PathTo,w
  4464  0CA1  07B6               	addwf	_c,f
  4465  0CA2  3005               	movlw	5
  4466  0CA3  0236               	subwf	_c,w
  4467  0CA4  1C03               	skipc
  4468  0CA5  2C76               	goto	l3940
  4469  0CA6                     l3946:	
  4470  0CA6  3001               	movlw	1
  4471  0CA7  00D1               	movwf	??_PathTo
  4472  0CA8  0851               	movf	??_PathTo,w
  4473  0CA9  07BB               	addwf	_r,f
  4474  0CAA  3004               	movlw	4
  4475  0CAB  023B               	subwf	_r,w
  4476  0CAC  1C03               	skipc
  4477  0CAD  2C71               	goto	l3934
  4478  0CAE                     l3950:	
  4479                           
  4480                           ;main.c: 53: }
  4481                           ;main.c: 54: }
  4482                           ;main.c: 56: pathCountShortest = 20;
  4483  0CAE  3014               	movlw	20
  4484  0CAF  00D1               	movwf	??_PathTo
  4485  0CB0  0851               	movf	??_PathTo,w
  4486  0CB1  00EA               	movwf	_pathCountShortest
  4487                           
  4488                           ;main.c: 57: for (r = 0; r <= 1; r++){
  4489  0CB2  01BB               	clrf	_r
  4490  0CB3  3002               	movlw	2
  4491  0CB4  023B               	subwf	_r,w
  4492  0CB5  1803               	btfsc	3,0
  4493  0CB6  2CDE               	goto	l3974
  4494  0CB7                     l3958:	
  4495                           
  4496                           ;main.c: 58: for (c = 0; c <= 15; c++){
  4497  0CB7  01B6               	clrf	_c
  4498  0CB8  3010               	movlw	16
  4499  0CB9  0236               	subwf	_c,w
  4500  0CBA  1803               	btfsc	3,0
  4501  0CBB  2CD6               	goto	l3970
  4502  0CBC                     l3964:	
  4503                           
  4504                           ;main.c: 59: pathShortest[r][c] = 0;
  4505  0CBC  083B               	movf	_r,w
  4506  0CBD  00D1               	movwf	??_PathTo
  4507  0CBE  3004               	movlw	4
  4508  0CBF                     u2755:	
  4509  0CBF  1003               	clrc
  4510  0CC0  0DD1               	rlf	??_PathTo,f
  4511  0CC1  3EFF               	addlw	-1
  4512  0CC2  1D03               	skipz
  4513  0CC3  2CBF               	goto	u2755
  4514  0CC4  30C8               	movlw	(low (_pathShortest| 0))& (0+255)
  4515  0CC5  0751               	addwf	??_PathTo,w
  4516  0CC6  00D2               	movwf	??_PathTo+1
  4517  0CC7  0836               	movf	_c,w
  4518  0CC8  0752               	addwf	??_PathTo+1,w
  4519  0CC9  00D3               	movwf	??_PathTo+2
  4520  0CCA  0853               	movf	??_PathTo+2,w
  4521  0CCB  0084               	movwf	4
  4522  0CCC  1383               	bcf	3,7	;select IRP bank1
  4523  0CCD  0180               	clrf	0
  4524  0CCE  3001               	movlw	1
  4525  0CCF  00D1               	movwf	??_PathTo
  4526  0CD0  0851               	movf	??_PathTo,w
  4527  0CD1  07B6               	addwf	_c,f
  4528  0CD2  3010               	movlw	16
  4529  0CD3  0236               	subwf	_c,w
  4530  0CD4  1C03               	skipc
  4531  0CD5  2CBC               	goto	l3964
  4532  0CD6                     l3970:	
  4533  0CD6  3001               	movlw	1
  4534  0CD7  00D1               	movwf	??_PathTo
  4535  0CD8  0851               	movf	??_PathTo,w
  4536  0CD9  07BB               	addwf	_r,f
  4537  0CDA  3002               	movlw	2
  4538  0CDB  023B               	subwf	_r,w
  4539  0CDC  1C03               	skipc
  4540  0CDD  2CB7               	goto	l3958
  4541  0CDE                     l3974:	
  4542                           
  4543                           ;main.c: 60: }
  4544                           ;main.c: 61: }
  4545                           ;main.c: 63: x_goto = x_target;
  4546  0CDE  0858               	movf	PathTo@x_target,w
  4547  0CDF  00D1               	movwf	??_PathTo
  4548  0CE0  0851               	movf	??_PathTo,w
  4549  0CE1  00C1               	movwf	_x_goto
  4550                           
  4551                           ;main.c: 64: y_goto = y_target;
  4552  0CE2  0850               	movf	PathTo@y_target,w
  4553  0CE3  00D1               	movwf	??_PathTo
  4554  0CE4  0851               	movf	??_PathTo,w
  4555  0CE5  00C6               	movwf	_y_goto
  4556                           
  4557                           ;main.c: 66: x_path = x;
  4558  0CE6  086B               	movf	_x,w
  4559  0CE7  00D1               	movwf	??_PathTo
  4560  0CE8  0851               	movf	??_PathTo,w
  4561  0CE9  00C3               	movwf	_x_path
  4562                           
  4563                           ;main.c: 67: y_path = y;
  4564  0CEA  0845               	movf	_y,w
  4565  0CEB  00D1               	movwf	??_PathTo
  4566  0CEC  0851               	movf	??_PathTo,w
  4567  0CED  00C8               	movwf	_y_path
  4568                           
  4569                           ;main.c: 68: orientation_path = orientation;
  4570  0CEE  0869               	movf	_orientation,w
  4571  0CEF  00D1               	movwf	??_PathTo
  4572  0CF0  0851               	movf	??_PathTo,w
  4573  0CF1  00B9               	movwf	_orientation_path
  4574                           
  4575                           ;main.c: 70: pathCount = 0;
  4576  0CF2  01BA               	clrf	_pathCount
  4577                           
  4578                           ;main.c: 73: lcdSetCursor(0b10000000);
  4579  0CF3  3080               	movlw	128
  4580  0CF4  120A  158A  2160  120A  158A  	fcall	_lcdSetCursor
  4581                           
  4582                           ;main.c: 74: lcdWriteString("Working...");
  4583  0CF9  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  4584  0CFA  120A  158A  21FE  120A  158A  	fcall	_lcdWriteString
  4585                           
  4586                           ;main.c: 76: for (int loop = 0; loop <= 2000; loop++){
  4587  0CFF  1283               	bcf	3,5	;RP0=0, select bank0
  4588  0D00  1303               	bcf	3,6	;RP1=0, select bank0
  4589  0D01  01DA               	clrf	PathTo@loop
  4590  0D02  01DB               	clrf	PathTo@loop+1
  4591  0D03  085B               	movf	PathTo@loop+1,w
  4592  0D04  3A80               	xorlw	128
  4593  0D05  00FF               	movwf	127
  4594  0D06  3087               	movlw	135
  4595  0D07  027F               	subwf	127,w
  4596  0D08  1D03               	skipz
  4597  0D09  2D0C               	goto	u2785
  4598  0D0A  30D1               	movlw	209
  4599  0D0B  025A               	subwf	PathTo@loop,w
  4600  0D0C                     u2785:	
  4601  0D0C  1803               	btfsc	3,0
  4602  0D0D  2FBF               	goto	l4154
  4603  0D0E                     l180:	
  4604                           
  4605                           ;main.c: 78: reset_flag = 0;
  4606  0D0E  11F0               	bcf	_reset_flag/(0+8),_reset_flag& (0+7)
  4607                           
  4608                           ;main.c: 80: path[0][pathCount] = x_path;
  4609  0D0F  1283               	bcf	3,5	;RP0=0, select bank0
  4610  0D10  1303               	bcf	3,6	;RP1=0, select bank0
  4611  0D11  0843               	movf	_x_path,w
  4612  0D12  00D1               	movwf	??_PathTo
  4613  0D13  083A               	movf	_pathCount,w
  4614  0D14  3ED0               	addlw	(low (_path| (0+256)))& (0+255)
  4615  0D15  0084               	movwf	4
  4616  0D16  0851               	movf	??_PathTo,w
  4617  0D17  1783               	bsf	3,7	;select IRP bank3
  4618  0D18  0080               	movwf	0
  4619                           
  4620                           ;main.c: 81: path[1][pathCount] = y_path;
  4621  0D19  0848               	movf	_y_path,w
  4622  0D1A  00D1               	movwf	??_PathTo
  4623  0D1B  083A               	movf	_pathCount,w
  4624  0D1C  3EE0               	addlw	(low ((_path| (0+256)+16)))& (0+255)
  4625  0D1D  0084               	movwf	4
  4626  0D1E  0851               	movf	??_PathTo,w
  4627  0D1F  0080               	movwf	0
  4628                           
  4629                           ;main.c: 86: left = gridWalls[0][(mazeGrid[y_path][x_path])];
  4630  0D20  3005               	movlw	5
  4631  0D21  00D1               	movwf	??_PathTo
  4632  0D22  0851               	movf	??_PathTo,w
  4633  0D23  00CB               	movwf	___bmul@multiplicand
  4634  0D24  0848               	movf	_y_path,w
  4635  0D25  120A  158A  21AE  120A  158A  	fcall	___bmul
  4636  0D2A  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  4637  0D2B  1283               	bcf	3,5	;RP0=0, select bank0
  4638  0D2C  1303               	bcf	3,6	;RP1=0, select bank0
  4639  0D2D  0743               	addwf	_x_path,w
  4640  0D2E  00D2               	movwf	??_PathTo+1
  4641  0D2F  0852               	movf	??_PathTo+1,w
  4642  0D30  0084               	movwf	4
  4643  0D31  1383               	bcf	3,7	;select IRP bank1
  4644  0D32  0800               	movf	0,w
  4645  0D33  3E90               	addlw	(low (_gridWalls| (0+256)))& (0+255)
  4646  0D34  0084               	movwf	4
  4647  0D35  1170               	bcf	_left/(0+8),_left& (0+7)
  4648  0D36  1783               	bsf	3,7	;select IRP bank3
  4649  0D37  1800               	btfsc	0,0
  4650  0D38  1570               	bsf	_left/(0+8),_left& (0+7)
  4651                           
  4652                           ;main.c: 87: up = gridWalls[1][(mazeGrid[y_path][x_path])];
  4653  0D39  3005               	movlw	5
  4654  0D3A  1283               	bcf	3,5	;RP0=0, select bank0
  4655  0D3B  1303               	bcf	3,6	;RP1=0, select bank0
  4656  0D3C  00D1               	movwf	??_PathTo
  4657  0D3D  0851               	movf	??_PathTo,w
  4658  0D3E  00CB               	movwf	___bmul@multiplicand
  4659  0D3F  0848               	movf	_y_path,w
  4660  0D40  120A  158A  21AE  120A  158A  	fcall	___bmul
  4661  0D45  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  4662  0D46  1283               	bcf	3,5	;RP0=0, select bank0
  4663  0D47  1303               	bcf	3,6	;RP1=0, select bank0
  4664  0D48  0743               	addwf	_x_path,w
  4665  0D49  00D2               	movwf	??_PathTo+1
  4666  0D4A  0852               	movf	??_PathTo+1,w
  4667  0D4B  0084               	movwf	4
  4668  0D4C  1383               	bcf	3,7	;select IRP bank1
  4669  0D4D  0800               	movf	0,w
  4670  0D4E  3EA0               	addlw	(low ((_gridWalls| (0+256)+16)))& (0+255)
  4671  0D4F  0084               	movwf	4
  4672  0D50  1370               	bcf	_up/(0+8),_up& (0+7)
  4673  0D51  1783               	bsf	3,7	;select IRP bank3
  4674  0D52  1800               	btfsc	0,0
  4675  0D53  1770               	bsf	_up/(0+8),_up& (0+7)
  4676                           
  4677                           ;main.c: 88: right = gridWalls[2][(mazeGrid[y_path][x_path])];
  4678  0D54  3005               	movlw	5
  4679  0D55  1283               	bcf	3,5	;RP0=0, select bank0
  4680  0D56  1303               	bcf	3,6	;RP1=0, select bank0
  4681  0D57  00D1               	movwf	??_PathTo
  4682  0D58  0851               	movf	??_PathTo,w
  4683  0D59  00CB               	movwf	___bmul@multiplicand
  4684  0D5A  0848               	movf	_y_path,w
  4685  0D5B  120A  158A  21AE  120A  158A  	fcall	___bmul
  4686  0D60  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  4687  0D61  1283               	bcf	3,5	;RP0=0, select bank0
  4688  0D62  1303               	bcf	3,6	;RP1=0, select bank0
  4689  0D63  0743               	addwf	_x_path,w
  4690  0D64  00D2               	movwf	??_PathTo+1
  4691  0D65  0852               	movf	??_PathTo+1,w
  4692  0D66  0084               	movwf	4
  4693  0D67  1383               	bcf	3,7	;select IRP bank1
  4694  0D68  0800               	movf	0,w
  4695  0D69  3EB0               	addlw	(low ((_gridWalls| (0+256)+32)))& (0+255)
  4696  0D6A  0084               	movwf	4
  4697  0D6B  1270               	bcf	_right/(0+8),_right& (0+7)
  4698  0D6C  1783               	bsf	3,7	;select IRP bank3
  4699  0D6D  1800               	btfsc	0,0
  4700  0D6E  1670               	bsf	_right/(0+8),_right& (0+7)
  4701                           
  4702                           ;main.c: 89: down = gridWalls[3][(mazeGrid[y_path][x_path])];
  4703  0D6F  3005               	movlw	5
  4704  0D70  1283               	bcf	3,5	;RP0=0, select bank0
  4705  0D71  1303               	bcf	3,6	;RP1=0, select bank0
  4706  0D72  00D1               	movwf	??_PathTo
  4707  0D73  0851               	movf	??_PathTo,w
  4708  0D74  00CB               	movwf	___bmul@multiplicand
  4709  0D75  0848               	movf	_y_path,w
  4710  0D76  120A  158A  21AE  120A  158A  	fcall	___bmul
  4711  0D7B  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  4712  0D7C  1283               	bcf	3,5	;RP0=0, select bank0
  4713  0D7D  1303               	bcf	3,6	;RP1=0, select bank0
  4714  0D7E  0743               	addwf	_x_path,w
  4715  0D7F  00D2               	movwf	??_PathTo+1
  4716  0D80  0852               	movf	??_PathTo+1,w
  4717  0D81  0084               	movwf	4
  4718  0D82  1383               	bcf	3,7	;select IRP bank1
  4719  0D83  0800               	movf	0,w
  4720  0D84  3EC0               	addlw	(low ((_gridWalls| (0+256)+48)))& (0+255)
  4721  0D85  0084               	movwf	4
  4722  0D86  10F0               	bcf	_down/(0+8),_down& (0+7)
  4723  0D87  1783               	bsf	3,7	;select IRP bank3
  4724  0D88  1800               	btfsc	0,0
  4725  0D89  14F0               	bsf	_down/(0+8),_down& (0+7)
  4726                           
  4727                           ;main.c: 93: if (pathCount != 0){
  4728  0D8A  1283               	bcf	3,5	;RP0=0, select bank0
  4729  0D8B  1303               	bcf	3,6	;RP1=0, select bank0
  4730  0D8C  083A               	movf	_pathCount,w
  4731  0D8D  1D03               	btfss	3,2
  4732  0D8E  2D98               	goto	l4004
  4733  0D8F  2DA6               	goto	l4006
  4734  0D90                     l184:	
  4735                           ;main.c: 95: case 0: down = 1;
  4736                           
  4737                           ;main.c: 94: switch(orientation_path){
  4738                           
  4739  0D90  14F0               	bsf	_down/(0+8),_down& (0+7)
  4740                           
  4741                           ;main.c: 96: break;
  4742  0D91  2DA6               	goto	l4006
  4743  0D92                     l186:	
  4744                           ;main.c: 97: case 1: left = 1;
  4745                           
  4746  0D92  1570               	bsf	_left/(0+8),_left& (0+7)
  4747                           
  4748                           ;main.c: 98: break;
  4749  0D93  2DA6               	goto	l4006
  4750  0D94                     l187:	
  4751                           ;main.c: 99: case 2: up = 1;
  4752                           
  4753  0D94  1770               	bsf	_up/(0+8),_up& (0+7)
  4754                           
  4755                           ;main.c: 100: break;
  4756  0D95  2DA6               	goto	l4006
  4757  0D96                     l188:	
  4758                           ;main.c: 101: case 3: right = 1;
  4759                           
  4760  0D96  1670               	bsf	_right/(0+8),_right& (0+7)
  4761                           
  4762                           ;main.c: 103: }
  4763                           
  4764                           ;main.c: 102: break;
  4765  0D97  2DA6               	goto	l4006
  4766  0D98                     l4004:	
  4767  0D98  0839               	movf	_orientation_path,w
  4768                           
  4769                           ; Switch size 1, requested type "space"
  4770                           ; Number of cases is 4, Range of values is 0 to 3
  4771                           ; switch strategies available:
  4772                           ; Name         Instructions Cycles
  4773                           ; simple_byte           13     7 (average)
  4774                           ; direct_byte           20     8 (fixed)
  4775                           ; jumptable            260     6 (fixed)
  4776                           ;	Chosen strategy is simple_byte
  4777  0D99  3A00               	xorlw	0	; case 0
  4778  0D9A  1903               	skipnz
  4779  0D9B  2D90               	goto	l184
  4780  0D9C  3A01               	xorlw	1	; case 1
  4781  0D9D  1903               	skipnz
  4782  0D9E  2D92               	goto	l186
  4783  0D9F  3A03               	xorlw	3	; case 2
  4784  0DA0  1903               	skipnz
  4785  0DA1  2D94               	goto	l187
  4786  0DA2  3A01               	xorlw	1	; case 3
  4787  0DA3  1903               	skipnz
  4788  0DA4  2D96               	goto	l188
  4789  0DA5  2DA6               	goto	l4006
  4790  0DA6                     l4006:	
  4791                           
  4792                           ;main.c: 104: }
  4793                           ;main.c: 108: char sum = (left + up + down + right);
  4794  0DA6  3000               	movlw	0
  4795  0DA7  1970               	btfsc	_left/(0+8),_left& (0+7)
  4796  0DA8  3001               	movlw	1
  4797  0DA9  1B70               	btfsc	_up/(0+8),_up& (0+7)
  4798  0DAA  3E01               	addlw	1
  4799  0DAB  18F0               	btfsc	_down/(0+8),_down& (0+7)
  4800  0DAC  3E01               	addlw	1
  4801  0DAD  1A70               	btfsc	_right/(0+8),_right& (0+7)
  4802  0DAE  3E01               	addlw	1
  4803  0DAF  00D1               	movwf	??_PathTo
  4804  0DB0  0851               	movf	??_PathTo,w
  4805  0DB1  00D9               	movwf	PathTo@sum
  4806                           
  4807                           ;main.c: 109: if(sum <= 2){
  4808  0DB2  3003               	movlw	3
  4809  0DB3  0259               	subwf	PathTo@sum,w
  4810  0DB4  1803               	skipnc
  4811  0DB5  2DD1               	goto	l189
  4812                           
  4813                           ;main.c: 110: x_int = x_path;
  4814  0DB6  0843               	movf	_x_path,w
  4815  0DB7  00D1               	movwf	??_PathTo
  4816  0DB8  0851               	movf	??_PathTo,w
  4817  0DB9  00C2               	movwf	_x_int
  4818                           
  4819                           ;main.c: 111: y_int = y_path;
  4820  0DBA  0848               	movf	_y_path,w
  4821  0DBB  00D1               	movwf	??_PathTo
  4822  0DBC  0851               	movf	??_PathTo,w
  4823  0DBD  00C7               	movwf	_y_int
  4824                           
  4825                           ;main.c: 117: if (left == 0)
  4826  0DBE  1970               	btfsc	_left/(0+8),_left& (0+7)
  4827  0DBF  2DC2               	goto	l190
  4828                           
  4829                           ;main.c: 118: intersection_orientation = 3;
  4830  0DC0  3003               	movlw	3
  4831  0DC1  2DCE               	goto	L5
  4832  0DC2                     l190:	
  4833                           
  4834                           ;main.c: 119: else if (up == 0)
  4835  0DC2  1B70               	btfsc	_up/(0+8),_up& (0+7)
  4836  0DC3  2DC6               	goto	l192
  4837                           
  4838                           ;main.c: 120: intersection_orientation = 0;
  4839  0DC4  01B7               	clrf	_intersection_orientation
  4840  0DC5  2DD1               	goto	l189
  4841  0DC6                     l192:	
  4842                           
  4843                           ;main.c: 121: else if (right == 0)
  4844  0DC6  1A70               	btfsc	_right/(0+8),_right& (0+7)
  4845  0DC7  2DCB               	goto	l194
  4846                           
  4847                           ;main.c: 122: intersection_orientation = 1;
  4848  0DC8  01B7               	clrf	_intersection_orientation
  4849  0DC9  0AB7               	incf	_intersection_orientation,f
  4850  0DCA  2DD1               	goto	l189
  4851  0DCB                     l194:	
  4852                           
  4853                           ;main.c: 123: else if (down == 0)
  4854  0DCB  18F0               	btfsc	_down/(0+8),_down& (0+7)
  4855  0DCC  2DD1               	goto	l189
  4856                           
  4857                           ;main.c: 124: intersection_orientation = 2;
  4858  0DCD  3002               	movlw	2
  4859  0DCE                     L5:	
  4860  0DCE  00D1               	movwf	??_PathTo
  4861  0DCF  0851               	movf	??_PathTo,w
  4862  0DD0  00B7               	movwf	_intersection_orientation
  4863  0DD1                     l189:	
  4864                           
  4865                           ;main.c: 125: }
  4866                           ;main.c: 132: if ((x_path == x_target)){
  4867  0DD1  0843               	movf	_x_path,w
  4868  0DD2  0658               	xorwf	PathTo@x_target,w
  4869  0DD3  1D03               	skipz
  4870  0DD4  2ECF               	goto	l4086
  4871                           
  4872                           ;main.c: 133: if (y_path == y_target){
  4873  0DD5  0848               	movf	_y_path,w
  4874  0DD6  0650               	xorwf	PathTo@y_target,w
  4875  0DD7  1D03               	skipz
  4876  0DD8  2ECF               	goto	l4086
  4877                           
  4878                           ;main.c: 137: if(pathCount < pathCountShortest){
  4879  0DD9  086A               	movf	_pathCountShortest,w
  4880  0DDA  023A               	subwf	_pathCount,w
  4881  0DDB  1803               	skipnc
  4882  0DDC  2E87               	goto	l4058
  4883                           
  4884                           ;main.c: 138: pathCountShortest = pathCount;
  4885  0DDD  083A               	movf	_pathCount,w
  4886  0DDE  00D1               	movwf	??_PathTo
  4887  0DDF  0851               	movf	??_PathTo,w
  4888  0DE0  00EA               	movwf	_pathCountShortest
  4889                           
  4890                           ;main.c: 139: for (r = 0; r <= 1; r++){
  4891  0DE1  01BB               	clrf	_r
  4892  0DE2                     L13:	
  4893  0DE2  3002               	movlw	2
  4894  0DE3  023B               	subwf	_r,w
  4895  0DE4  1803               	btfsc	3,0
  4896  0DE5  2E87               	goto	l4058
  4897                           
  4898                           ;main.c: 140: for (c = 0; c <= 15; c++){
  4899  0DE6  01B6               	clrf	_c
  4900  0DE7  3010               	movlw	16
  4901  0DE8  0236               	subwf	_c,w
  4902  0DE9  1803               	btfsc	3,0
  4903  0DEA  2E19               	goto	l4044
  4904  0DEB                     l4038:	
  4905                           
  4906                           ;main.c: 141: pathShortest[r][c] = path[r][c];
  4907  0DEB  083B               	movf	_r,w
  4908  0DEC  00D1               	movwf	??_PathTo
  4909  0DED  3004               	movlw	4
  4910  0DEE                     u2945:	
  4911  0DEE  1003               	clrc
  4912  0DEF  0DD1               	rlf	??_PathTo,f
  4913  0DF0  3EFF               	addlw	-1
  4914  0DF1  1D03               	skipz
  4915  0DF2  2DEE               	goto	u2945
  4916  0DF3  30D0               	movlw	(low (_path| (0+256)))& (0+255)
  4917  0DF4  0751               	addwf	??_PathTo,w
  4918  0DF5  00D2               	movwf	??_PathTo+1
  4919  0DF6  0836               	movf	_c,w
  4920  0DF7  0752               	addwf	??_PathTo+1,w
  4921  0DF8  00D3               	movwf	??_PathTo+2
  4922  0DF9  0853               	movf	??_PathTo+2,w
  4923  0DFA  0084               	movwf	4
  4924  0DFB  1783               	bsf	3,7	;select IRP bank3
  4925  0DFC  0800               	movf	0,w
  4926  0DFD  00D4               	movwf	??_PathTo+3
  4927  0DFE  083B               	movf	_r,w
  4928  0DFF  00D5               	movwf	??_PathTo+4
  4929  0E00  3004               	movlw	4
  4930  0E01                     u2955:	
  4931  0E01  1003               	clrc
  4932  0E02  0DD5               	rlf	??_PathTo+4,f
  4933  0E03  3EFF               	addlw	-1
  4934  0E04  1D03               	skipz
  4935  0E05  2E01               	goto	u2955
  4936  0E06  30C8               	movlw	(low (_pathShortest| 0))& (0+255)
  4937  0E07  0755               	addwf	??_PathTo+4,w
  4938  0E08  00D6               	movwf	??_PathTo+5
  4939  0E09  0836               	movf	_c,w
  4940  0E0A  0756               	addwf	??_PathTo+5,w
  4941  0E0B  00D7               	movwf	??_PathTo+6
  4942  0E0C  0857               	movf	??_PathTo+6,w
  4943  0E0D  0084               	movwf	4
  4944  0E0E  0854               	movf	??_PathTo+3,w
  4945  0E0F  1383               	bcf	3,7	;select IRP bank1
  4946  0E10  0080               	movwf	0
  4947  0E11  3001               	movlw	1
  4948  0E12  00D1               	movwf	??_PathTo
  4949  0E13  0851               	movf	??_PathTo,w
  4950  0E14  07B6               	addwf	_c,f
  4951  0E15  3010               	movlw	16
  4952  0E16  0236               	subwf	_c,w
  4953  0E17  1C03               	skipc
  4954  0E18  2DEB               	goto	l4038
  4955  0E19                     l4044:	
  4956  0E19  3001               	movlw	1
  4957  0E1A  00D1               	movwf	??_PathTo
  4958  0E1B  0851               	movf	??_PathTo,w
  4959  0E1C  07BB               	addwf	_r,f
  4960  0E1D  2DE2               	goto	L13
  4961  0E1E                     l4048:	
  4962                           ;main.c: 151: case 0: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 4);
  4963                           
  4964                           ;main.c: 142: }
  4965                           ;main.c: 143: }
  4966                           ;main.c: 144: }
  4967                           ;main.c: 150: switch(intersection_orientation){
  4968                           
  4969  0E1E  3005               	movlw	5
  4970  0E1F  00D1               	movwf	??_PathTo
  4971  0E20  0851               	movf	??_PathTo,w
  4972  0E21  00CB               	movwf	___bmul@multiplicand
  4973  0E22  0847               	movf	_y_int,w
  4974  0E23  120A  158A  21AE  120A  158A  	fcall	___bmul
  4975  0E28  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  4976  0E29  1283               	bcf	3,5	;RP0=0, select bank0
  4977  0E2A  1303               	bcf	3,6	;RP1=0, select bank0
  4978  0E2B  0742               	addwf	_x_int,w
  4979  0E2C  00D2               	movwf	??_PathTo+1
  4980  0E2D  0852               	movf	??_PathTo+1,w
  4981  0E2E  0084               	movwf	4
  4982  0E2F  1383               	bcf	3,7	;select IRP bank1
  4983  0E30  0800               	movf	0,w
  4984  0E31  3E04               	addlw	4
  4985  0E32  2E71               	goto	L15
  4986  0E33                     l4050:	
  4987                           ;main.c: 153: case 1: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 2);
  4988                           
  4989                           ;main.c: 152: break;
  4990                           
  4991  0E33  3005               	movlw	5
  4992  0E34  00D1               	movwf	??_PathTo
  4993  0E35  0851               	movf	??_PathTo,w
  4994  0E36  00CB               	movwf	___bmul@multiplicand
  4995  0E37  0847               	movf	_y_int,w
  4996  0E38  120A  158A  21AE  120A  158A  	fcall	___bmul
  4997  0E3D  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  4998  0E3E  1283               	bcf	3,5	;RP0=0, select bank0
  4999  0E3F  1303               	bcf	3,6	;RP1=0, select bank0
  5000  0E40  0742               	addwf	_x_int,w
  5001  0E41  00D2               	movwf	??_PathTo+1
  5002  0E42  0852               	movf	??_PathTo+1,w
  5003  0E43  0084               	movwf	4
  5004  0E44  1383               	bcf	3,7	;select IRP bank1
  5005  0E45  0800               	movf	0,w
  5006  0E46  3E02               	addlw	2
  5007  0E47  2E71               	goto	L15
  5008  0E48                     l4052:	
  5009                           ;main.c: 155: case 2: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 1);
  5010                           
  5011                           ;main.c: 154: break;
  5012                           
  5013  0E48  3005               	movlw	5
  5014  0E49  00D1               	movwf	??_PathTo
  5015  0E4A  0851               	movf	??_PathTo,w
  5016  0E4B  00CB               	movwf	___bmul@multiplicand
  5017  0E4C  0847               	movf	_y_int,w
  5018  0E4D  120A  158A  21AE  120A  158A  	fcall	___bmul
  5019  0E52  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5020  0E53  1283               	bcf	3,5	;RP0=0, select bank0
  5021  0E54  1303               	bcf	3,6	;RP1=0, select bank0
  5022  0E55  0742               	addwf	_x_int,w
  5023  0E56  00D2               	movwf	??_PathTo+1
  5024  0E57  0852               	movf	??_PathTo+1,w
  5025  0E58  0084               	movwf	4
  5026  0E59  1383               	bcf	3,7	;select IRP bank1
  5027  0E5A  0800               	movf	0,w
  5028  0E5B  3E01               	addlw	1
  5029  0E5C  2E71               	goto	L15
  5030  0E5D                     l4054:	
  5031                           ;main.c: 157: case 3: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 8);
  5032                           
  5033                           ;main.c: 156: break;
  5034                           
  5035  0E5D  3005               	movlw	5
  5036  0E5E  00D1               	movwf	??_PathTo
  5037  0E5F  0851               	movf	??_PathTo,w
  5038  0E60  00CB               	movwf	___bmul@multiplicand
  5039  0E61  0847               	movf	_y_int,w
  5040  0E62  120A  158A  21AE  120A  158A  	fcall	___bmul
  5041  0E67  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5042  0E68  1283               	bcf	3,5	;RP0=0, select bank0
  5043  0E69  1303               	bcf	3,6	;RP1=0, select bank0
  5044  0E6A  0742               	addwf	_x_int,w
  5045  0E6B  00D2               	movwf	??_PathTo+1
  5046  0E6C  0852               	movf	??_PathTo+1,w
  5047  0E6D  0084               	movwf	4
  5048  0E6E  1383               	bcf	3,7	;select IRP bank1
  5049  0E6F  0800               	movf	0,w
  5050  0E70  3E08               	addlw	8
  5051  0E71                     L15:	
  5052  0E71  00D3               	movwf	??_PathTo+2
  5053  0E72  3005               	movlw	5
  5054  0E73  00D4               	movwf	??_PathTo+3
  5055  0E74  0854               	movf	??_PathTo+3,w
  5056  0E75  00CB               	movwf	___bmul@multiplicand
  5057  0E76  0847               	movf	_y_int,w
  5058  0E77  120A  158A  21AE  120A  158A  	fcall	___bmul
  5059  0E7C  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5060  0E7D  1283               	bcf	3,5	;RP0=0, select bank0
  5061  0E7E  1303               	bcf	3,6	;RP1=0, select bank0
  5062  0E7F  0742               	addwf	_x_int,w
  5063  0E80  00D5               	movwf	??_PathTo+4
  5064  0E81  0855               	movf	??_PathTo+4,w
  5065  0E82  0084               	movwf	4
  5066  0E83  0853               	movf	??_PathTo+2,w
  5067  0E84  1383               	bcf	3,7	;select IRP bank1
  5068  0E85  0080               	movwf	0
  5069                           
  5070                           ;main.c: 159: }
  5071                           
  5072                           ;main.c: 158: break;
  5073  0E86  2E95               	goto	l4060
  5074  0E87                     l4058:	
  5075  0E87  0837               	movf	_intersection_orientation,w
  5076                           
  5077                           ; Switch size 1, requested type "space"
  5078                           ; Number of cases is 4, Range of values is 0 to 3
  5079                           ; switch strategies available:
  5080                           ; Name         Instructions Cycles
  5081                           ; simple_byte           13     7 (average)
  5082                           ; direct_byte           20     8 (fixed)
  5083                           ; jumptable            260     6 (fixed)
  5084                           ;	Chosen strategy is simple_byte
  5085  0E88  3A00               	xorlw	0	; case 0
  5086  0E89  1903               	skipnz
  5087  0E8A  2E1E               	goto	l4048
  5088  0E8B  3A01               	xorlw	1	; case 1
  5089  0E8C  1903               	skipnz
  5090  0E8D  2E33               	goto	l4050
  5091  0E8E  3A03               	xorlw	3	; case 2
  5092  0E8F  1903               	skipnz
  5093  0E90  2E48               	goto	l4052
  5094  0E91  3A01               	xorlw	1	; case 3
  5095  0E92  1903               	skipnz
  5096  0E93  2E5D               	goto	l4054
  5097  0E94  2E95               	goto	l4060
  5098  0E95                     l4060:	
  5099                           
  5100                           ;main.c: 162: x_path = x;
  5101  0E95  086B               	movf	_x,w
  5102  0E96  00D1               	movwf	??_PathTo
  5103  0E97  0851               	movf	??_PathTo,w
  5104  0E98  00C3               	movwf	_x_path
  5105                           
  5106                           ;main.c: 163: y_path = y;
  5107  0E99  0845               	movf	_y,w
  5108  0E9A  00D1               	movwf	??_PathTo
  5109  0E9B  0851               	movf	??_PathTo,w
  5110  0E9C  00C8               	movwf	_y_path
  5111                           
  5112                           ;main.c: 164: orientation_path = orientation;
  5113  0E9D  0869               	movf	_orientation,w
  5114  0E9E  00D1               	movwf	??_PathTo
  5115  0E9F  0851               	movf	??_PathTo,w
  5116  0EA0  00B9               	movwf	_orientation_path
  5117                           
  5118                           ;main.c: 165: pathCount = 0;
  5119  0EA1  01BA               	clrf	_pathCount
  5120                           
  5121                           ;main.c: 166: reset_flag = 1;
  5122  0EA2  15F0               	bsf	_reset_flag/(0+8),_reset_flag& (0+7)
  5123                           
  5124                           ;main.c: 169: for (r = 0; r <= 1; r++){
  5125  0EA3  01BB               	clrf	_r
  5126  0EA4  3002               	movlw	2
  5127  0EA5  023B               	subwf	_r,w
  5128  0EA6  1803               	btfsc	3,0
  5129  0EA7  2ECF               	goto	l4086
  5130  0EA8                     l4070:	
  5131                           
  5132                           ;main.c: 170: for (c = 0; c <= 15; c++){
  5133  0EA8  01B6               	clrf	_c
  5134  0EA9  3010               	movlw	16
  5135  0EAA  0236               	subwf	_c,w
  5136  0EAB  1803               	btfsc	3,0
  5137  0EAC  2EC7               	goto	l4082
  5138  0EAD                     l4076:	
  5139                           
  5140                           ;main.c: 171: path[r][c] = 0;
  5141  0EAD  083B               	movf	_r,w
  5142  0EAE  00D1               	movwf	??_PathTo
  5143  0EAF  3004               	movlw	4
  5144  0EB0                     u3005:	
  5145  0EB0  1003               	clrc
  5146  0EB1  0DD1               	rlf	??_PathTo,f
  5147  0EB2  3EFF               	addlw	-1
  5148  0EB3  1D03               	skipz
  5149  0EB4  2EB0               	goto	u3005
  5150  0EB5  30D0               	movlw	(low (_path| (0+256)))& (0+255)
  5151  0EB6  0751               	addwf	??_PathTo,w
  5152  0EB7  00D2               	movwf	??_PathTo+1
  5153  0EB8  0836               	movf	_c,w
  5154  0EB9  0752               	addwf	??_PathTo+1,w
  5155  0EBA  00D3               	movwf	??_PathTo+2
  5156  0EBB  0853               	movf	??_PathTo+2,w
  5157  0EBC  0084               	movwf	4
  5158  0EBD  1783               	bsf	3,7	;select IRP bank3
  5159  0EBE  0180               	clrf	0
  5160  0EBF  3001               	movlw	1
  5161  0EC0  00D1               	movwf	??_PathTo
  5162  0EC1  0851               	movf	??_PathTo,w
  5163  0EC2  07B6               	addwf	_c,f
  5164  0EC3  3010               	movlw	16
  5165  0EC4  0236               	subwf	_c,w
  5166  0EC5  1C03               	skipc
  5167  0EC6  2EAD               	goto	l4076
  5168  0EC7                     l4082:	
  5169  0EC7  3001               	movlw	1
  5170  0EC8  00D1               	movwf	??_PathTo
  5171  0EC9  0851               	movf	??_PathTo,w
  5172  0ECA  07BB               	addwf	_r,f
  5173  0ECB  3002               	movlw	2
  5174  0ECC  023B               	subwf	_r,w
  5175  0ECD  1C03               	skipc
  5176  0ECE  2EA8               	goto	l4070
  5177  0ECF                     l4086:	
  5178                           
  5179                           ;main.c: 172: }
  5180                           ;main.c: 173: }
  5181                           ;main.c: 174: }
  5182                           ;main.c: 175: }
  5183                           ;main.c: 181: if((sum == 4) || (pathCount >= 15)){
  5184  0ECF  3004               	movlw	4
  5185  0ED0  0659               	xorwf	PathTo@sum,w
  5186  0ED1  1903               	btfsc	3,2
  5187  0ED2  2F41               	goto	l4100
  5188  0ED3  300F               	movlw	15
  5189  0ED4  023A               	subwf	_pathCount,w
  5190  0ED5  1803               	btfsc	3,0
  5191  0ED6  2F41               	goto	l4100
  5192  0ED7  2F89               	goto	l214
  5193  0ED8                     l4090:	
  5194                           ;main.c: 185: case 0: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 4);
  5195                           
  5196                           ;main.c: 184: switch(intersection_orientation){
  5197                           
  5198  0ED8  3005               	movlw	5
  5199  0ED9  00D1               	movwf	??_PathTo
  5200  0EDA  0851               	movf	??_PathTo,w
  5201  0EDB  00CB               	movwf	___bmul@multiplicand
  5202  0EDC  0847               	movf	_y_int,w
  5203  0EDD  120A  158A  21AE  120A  158A  	fcall	___bmul
  5204  0EE2  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5205  0EE3  1283               	bcf	3,5	;RP0=0, select bank0
  5206  0EE4  1303               	bcf	3,6	;RP1=0, select bank0
  5207  0EE5  0742               	addwf	_x_int,w
  5208  0EE6  00D2               	movwf	??_PathTo+1
  5209  0EE7  0852               	movf	??_PathTo+1,w
  5210  0EE8  0084               	movwf	4
  5211  0EE9  1383               	bcf	3,7	;select IRP bank1
  5212  0EEA  0800               	movf	0,w
  5213  0EEB  3E04               	addlw	4
  5214  0EEC  2F2B               	goto	L16
  5215  0EED                     l4092:	
  5216                           ;main.c: 187: case 1: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 2);
  5217                           
  5218                           ;main.c: 186: break;
  5219                           
  5220  0EED  3005               	movlw	5
  5221  0EEE  00D1               	movwf	??_PathTo
  5222  0EEF  0851               	movf	??_PathTo,w
  5223  0EF0  00CB               	movwf	___bmul@multiplicand
  5224  0EF1  0847               	movf	_y_int,w
  5225  0EF2  120A  158A  21AE  120A  158A  	fcall	___bmul
  5226  0EF7  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5227  0EF8  1283               	bcf	3,5	;RP0=0, select bank0
  5228  0EF9  1303               	bcf	3,6	;RP1=0, select bank0
  5229  0EFA  0742               	addwf	_x_int,w
  5230  0EFB  00D2               	movwf	??_PathTo+1
  5231  0EFC  0852               	movf	??_PathTo+1,w
  5232  0EFD  0084               	movwf	4
  5233  0EFE  1383               	bcf	3,7	;select IRP bank1
  5234  0EFF  0800               	movf	0,w
  5235  0F00  3E02               	addlw	2
  5236  0F01  2F2B               	goto	L16
  5237  0F02                     l4094:	
  5238                           ;main.c: 189: case 2: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 1);
  5239                           
  5240                           ;main.c: 188: break;
  5241                           
  5242  0F02  3005               	movlw	5
  5243  0F03  00D1               	movwf	??_PathTo
  5244  0F04  0851               	movf	??_PathTo,w
  5245  0F05  00CB               	movwf	___bmul@multiplicand
  5246  0F06  0847               	movf	_y_int,w
  5247  0F07  120A  158A  21AE  120A  158A  	fcall	___bmul
  5248  0F0C  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5249  0F0D  1283               	bcf	3,5	;RP0=0, select bank0
  5250  0F0E  1303               	bcf	3,6	;RP1=0, select bank0
  5251  0F0F  0742               	addwf	_x_int,w
  5252  0F10  00D2               	movwf	??_PathTo+1
  5253  0F11  0852               	movf	??_PathTo+1,w
  5254  0F12  0084               	movwf	4
  5255  0F13  1383               	bcf	3,7	;select IRP bank1
  5256  0F14  0800               	movf	0,w
  5257  0F15  3E01               	addlw	1
  5258  0F16  2F2B               	goto	L16
  5259  0F17                     l4096:	
  5260                           ;main.c: 191: case 3: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 8);
  5261                           
  5262                           ;main.c: 190: break;
  5263                           
  5264  0F17  3005               	movlw	5
  5265  0F18  00D1               	movwf	??_PathTo
  5266  0F19  0851               	movf	??_PathTo,w
  5267  0F1A  00CB               	movwf	___bmul@multiplicand
  5268  0F1B  0847               	movf	_y_int,w
  5269  0F1C  120A  158A  21AE  120A  158A  	fcall	___bmul
  5270  0F21  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5271  0F22  1283               	bcf	3,5	;RP0=0, select bank0
  5272  0F23  1303               	bcf	3,6	;RP1=0, select bank0
  5273  0F24  0742               	addwf	_x_int,w
  5274  0F25  00D2               	movwf	??_PathTo+1
  5275  0F26  0852               	movf	??_PathTo+1,w
  5276  0F27  0084               	movwf	4
  5277  0F28  1383               	bcf	3,7	;select IRP bank1
  5278  0F29  0800               	movf	0,w
  5279  0F2A  3E08               	addlw	8
  5280  0F2B                     L16:	
  5281  0F2B  00D3               	movwf	??_PathTo+2
  5282  0F2C  3005               	movlw	5
  5283  0F2D  00D4               	movwf	??_PathTo+3
  5284  0F2E  0854               	movf	??_PathTo+3,w
  5285  0F2F  00CB               	movwf	___bmul@multiplicand
  5286  0F30  0847               	movf	_y_int,w
  5287  0F31  120A  158A  21AE  120A  158A  	fcall	___bmul
  5288  0F36  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5289  0F37  1283               	bcf	3,5	;RP0=0, select bank0
  5290  0F38  1303               	bcf	3,6	;RP1=0, select bank0
  5291  0F39  0742               	addwf	_x_int,w
  5292  0F3A  00D5               	movwf	??_PathTo+4
  5293  0F3B  0855               	movf	??_PathTo+4,w
  5294  0F3C  0084               	movwf	4
  5295  0F3D  0853               	movf	??_PathTo+2,w
  5296  0F3E  1383               	bcf	3,7	;select IRP bank1
  5297  0F3F  0080               	movwf	0
  5298                           
  5299                           ;main.c: 193: }
  5300                           
  5301                           ;main.c: 192: break;
  5302  0F40  2F4F               	goto	l4102
  5303  0F41                     l4100:	
  5304  0F41  0837               	movf	_intersection_orientation,w
  5305                           
  5306                           ; Switch size 1, requested type "space"
  5307                           ; Number of cases is 4, Range of values is 0 to 3
  5308                           ; switch strategies available:
  5309                           ; Name         Instructions Cycles
  5310                           ; simple_byte           13     7 (average)
  5311                           ; direct_byte           20     8 (fixed)
  5312                           ; jumptable            260     6 (fixed)
  5313                           ;	Chosen strategy is simple_byte
  5314  0F42  3A00               	xorlw	0	; case 0
  5315  0F43  1903               	skipnz
  5316  0F44  2ED8               	goto	l4090
  5317  0F45  3A01               	xorlw	1	; case 1
  5318  0F46  1903               	skipnz
  5319  0F47  2EED               	goto	l4092
  5320  0F48  3A03               	xorlw	3	; case 2
  5321  0F49  1903               	skipnz
  5322  0F4A  2F02               	goto	l4094
  5323  0F4B  3A01               	xorlw	1	; case 3
  5324  0F4C  1903               	skipnz
  5325  0F4D  2F17               	goto	l4096
  5326  0F4E  2F4F               	goto	l4102
  5327  0F4F                     l4102:	
  5328                           
  5329                           ;main.c: 196: x_path = x;
  5330  0F4F  086B               	movf	_x,w
  5331  0F50  00D1               	movwf	??_PathTo
  5332  0F51  0851               	movf	??_PathTo,w
  5333  0F52  00C3               	movwf	_x_path
  5334                           
  5335                           ;main.c: 197: y_path = y;
  5336  0F53  0845               	movf	_y,w
  5337  0F54  00D1               	movwf	??_PathTo
  5338  0F55  0851               	movf	??_PathTo,w
  5339  0F56  00C8               	movwf	_y_path
  5340                           
  5341                           ;main.c: 198: orientation_path = orientation;
  5342  0F57  0869               	movf	_orientation,w
  5343  0F58  00D1               	movwf	??_PathTo
  5344  0F59  0851               	movf	??_PathTo,w
  5345  0F5A  00B9               	movwf	_orientation_path
  5346                           
  5347                           ;main.c: 199: pathCount = 0;
  5348  0F5B  01BA               	clrf	_pathCount
  5349                           
  5350                           ;main.c: 200: reset_flag = 1;
  5351  0F5C  15F0               	bsf	_reset_flag/(0+8),_reset_flag& (0+7)
  5352                           
  5353                           ;main.c: 202: for (r = 0; r <= 1; r++){
  5354  0F5D  01BB               	clrf	_r
  5355  0F5E  3002               	movlw	2
  5356  0F5F  023B               	subwf	_r,w
  5357  0F60  1803               	btfsc	3,0
  5358  0F61  2F89               	goto	l214
  5359  0F62                     l4112:	
  5360                           
  5361                           ;main.c: 203: for (c = 0; c <= 15; c++){
  5362  0F62  01B6               	clrf	_c
  5363  0F63  3010               	movlw	16
  5364  0F64  0236               	subwf	_c,w
  5365  0F65  1803               	btfsc	3,0
  5366  0F66  2F81               	goto	l4124
  5367  0F67                     l4118:	
  5368                           
  5369                           ;main.c: 204: path[r][c] = 0;
  5370  0F67  083B               	movf	_r,w
  5371  0F68  00D1               	movwf	??_PathTo
  5372  0F69  3004               	movlw	4
  5373  0F6A                     u3075:	
  5374  0F6A  1003               	clrc
  5375  0F6B  0DD1               	rlf	??_PathTo,f
  5376  0F6C  3EFF               	addlw	-1
  5377  0F6D  1D03               	skipz
  5378  0F6E  2F6A               	goto	u3075
  5379  0F6F  30D0               	movlw	(low (_path| (0+256)))& (0+255)
  5380  0F70  0751               	addwf	??_PathTo,w
  5381  0F71  00D2               	movwf	??_PathTo+1
  5382  0F72  0836               	movf	_c,w
  5383  0F73  0752               	addwf	??_PathTo+1,w
  5384  0F74  00D3               	movwf	??_PathTo+2
  5385  0F75  0853               	movf	??_PathTo+2,w
  5386  0F76  0084               	movwf	4
  5387  0F77  1783               	bsf	3,7	;select IRP bank3
  5388  0F78  0180               	clrf	0
  5389  0F79  3001               	movlw	1
  5390  0F7A  00D1               	movwf	??_PathTo
  5391  0F7B  0851               	movf	??_PathTo,w
  5392  0F7C  07B6               	addwf	_c,f
  5393  0F7D  3010               	movlw	16
  5394  0F7E  0236               	subwf	_c,w
  5395  0F7F  1C03               	skipc
  5396  0F80  2F67               	goto	l4118
  5397  0F81                     l4124:	
  5398  0F81  3001               	movlw	1
  5399  0F82  00D1               	movwf	??_PathTo
  5400  0F83  0851               	movf	??_PathTo,w
  5401  0F84  07BB               	addwf	_r,f
  5402  0F85  3002               	movlw	2
  5403  0F86  023B               	subwf	_r,w
  5404  0F87  1C03               	skipc
  5405  0F88  2F62               	goto	l4112
  5406  0F89                     l214:	
  5407                           
  5408                           ;main.c: 205: }
  5409                           ;main.c: 206: }
  5410                           ;main.c: 207: }
  5411                           ;main.c: 216: if (reset_flag != 1){
  5412  0F89  19F0               	btfsc	_reset_flag/(0+8),_reset_flag& (0+7)
  5413  0F8A  2FAE               	goto	l227
  5414                           
  5415                           ;main.c: 219: if(left == 0){
  5416  0F8B  1970               	btfsc	_left/(0+8),_left& (0+7)
  5417  0F8C  2F91               	goto	l228
  5418                           
  5419                           ;main.c: 220: x_path--;
  5420  0F8D  3001               	movlw	1
  5421  0F8E  02C3               	subwf	_x_path,f
  5422                           
  5423                           ;main.c: 221: orientation_path = 3;
  5424  0F8F  3003               	movlw	3
  5425  0F90  2FA7               	goto	L17
  5426  0F91                     l228:	
  5427                           ;main.c: 223: }
  5428                           
  5429                           ;main.c: 222: pathCount++;
  5430                           
  5431                           
  5432                           ;main.c: 224: else if(up == 0){
  5433  0F91  1B70               	btfsc	_up/(0+8),_up& (0+7)
  5434  0F92  2F97               	goto	l230
  5435                           
  5436                           ;main.c: 225: y_path--;
  5437  0F93  3001               	movlw	1
  5438  0F94  02C8               	subwf	_y_path,f
  5439                           
  5440                           ;main.c: 226: orientation_path = 0;
  5441  0F95  01B9               	clrf	_orientation_path
  5442  0F96  2FAA               	goto	l4150
  5443  0F97                     l230:	
  5444                           ;main.c: 228: }
  5445                           
  5446                           ;main.c: 227: pathCount++;
  5447                           
  5448                           
  5449                           ;main.c: 229: else if(right == 0){
  5450  0F97  1A70               	btfsc	_right/(0+8),_right& (0+7)
  5451  0F98  2FA0               	goto	l232
  5452                           
  5453                           ;main.c: 230: x_path++;
  5454  0F99  3001               	movlw	1
  5455  0F9A  00D1               	movwf	??_PathTo
  5456  0F9B  0851               	movf	??_PathTo,w
  5457  0F9C  07C3               	addwf	_x_path,f
  5458                           
  5459                           ;main.c: 231: orientation_path = 1;
  5460  0F9D  01B9               	clrf	_orientation_path
  5461  0F9E  0AB9               	incf	_orientation_path,f
  5462  0F9F  2FAA               	goto	l4150
  5463  0FA0                     l232:	
  5464                           ;main.c: 233: }
  5465                           
  5466                           ;main.c: 232: pathCount++;
  5467                           
  5468                           
  5469                           ;main.c: 234: else if(down == 0){
  5470  0FA0  18F0               	btfsc	_down/(0+8),_down& (0+7)
  5471  0FA1  2FAE               	goto	l227
  5472                           
  5473                           ;main.c: 235: y_path++;
  5474  0FA2  3001               	movlw	1
  5475  0FA3  00D1               	movwf	??_PathTo
  5476  0FA4  0851               	movf	??_PathTo,w
  5477  0FA5  07C8               	addwf	_y_path,f
  5478                           
  5479                           ;main.c: 236: orientation_path = 2;
  5480  0FA6  3002               	movlw	2
  5481  0FA7                     L17:	
  5482  0FA7  00D1               	movwf	??_PathTo
  5483  0FA8  0851               	movf	??_PathTo,w
  5484  0FA9  00B9               	movwf	_orientation_path
  5485  0FAA                     l4150:	
  5486                           
  5487                           ;main.c: 237: pathCount++;
  5488  0FAA  3001               	movlw	1
  5489  0FAB  00D1               	movwf	??_PathTo
  5490  0FAC  0851               	movf	??_PathTo,w
  5491  0FAD  07BA               	addwf	_pathCount,f
  5492  0FAE                     l227:	
  5493  0FAE  3001               	movlw	1
  5494  0FAF  07DA               	addwf	PathTo@loop,f
  5495  0FB0  1803               	skipnc
  5496  0FB1  0ADB               	incf	PathTo@loop+1,f
  5497  0FB2  3000               	movlw	0
  5498  0FB3  07DB               	addwf	PathTo@loop+1,f
  5499  0FB4  085B               	movf	PathTo@loop+1,w
  5500  0FB5  3A80               	xorlw	128
  5501  0FB6  00FF               	movwf	127
  5502  0FB7  3087               	movlw	135
  5503  0FB8  027F               	subwf	127,w
  5504  0FB9  1D03               	skipz
  5505  0FBA  2FBD               	goto	u3155
  5506  0FBB  30D1               	movlw	209
  5507  0FBC  025A               	subwf	PathTo@loop,w
  5508  0FBD                     u3155:	
  5509  0FBD  1C03               	skipc
  5510  0FBE  2D0E               	goto	l180
  5511  0FBF                     l4154:	
  5512                           
  5513                           ;main.c: 238: }
  5514                           ;main.c: 239: }
  5515                           ;main.c: 240: }
  5516                           ;main.c: 242: lcdSetCursor(0b10000000);
  5517  0FBF  3080               	movlw	128
  5518  0FC0  120A  158A  2160  120A  158A  	fcall	_lcdSetCursor
  5519                           
  5520                           ;main.c: 243: for (c = 0; c <= 15; c++){
  5521  0FC5  1283               	bcf	3,5	;RP0=0, select bank0
  5522  0FC6  1303               	bcf	3,6	;RP1=0, select bank0
  5523  0FC7  01B6               	clrf	_c
  5524  0FC8  3010               	movlw	16
  5525  0FC9  0236               	subwf	_c,w
  5526  0FCA  1803               	btfsc	3,0
  5527  0FCB  2FE1               	goto	l4168
  5528  0FCC                     l4162:	
  5529                           
  5530                           ;main.c: 244: lcdWriteData(pathShortest[0][c]+48);
  5531  0FCC  0836               	movf	_c,w
  5532  0FCD  3EC8               	addlw	(low (_pathShortest| 0))& (0+255)
  5533  0FCE  0084               	movwf	4
  5534  0FCF  1383               	bcf	3,7	;select IRP bank1
  5535  0FD0  0800               	movf	0,w
  5536  0FD1  3E30               	addlw	48
  5537  0FD2  120A  158A  21C1  120A  158A  	fcall	_lcdWriteData
  5538  0FD7  3001               	movlw	1
  5539  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  5540  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  5541  0FDA  00D1               	movwf	??_PathTo
  5542  0FDB  0851               	movf	??_PathTo,w
  5543  0FDC  07B6               	addwf	_c,f
  5544  0FDD  3010               	movlw	16
  5545  0FDE  0236               	subwf	_c,w
  5546  0FDF  1C03               	skipc
  5547  0FE0  2FCC               	goto	l4162
  5548  0FE1                     l4168:	
  5549                           
  5550                           ;main.c: 245: }
  5551                           ;main.c: 246: lcdSetCursor(0x40);
  5552  0FE1  3040               	movlw	64
  5553  0FE2  120A  158A  2160  120A  158A  	fcall	_lcdSetCursor
  5554                           
  5555                           ;main.c: 247: for (c = 0; c<=15; c++){
  5556  0FE7  1283               	bcf	3,5	;RP0=0, select bank0
  5557  0FE8  1303               	bcf	3,6	;RP1=0, select bank0
  5558  0FE9  01B6               	clrf	_c
  5559  0FEA                     L14:	
  5560  0FEA  3010               	movlw	16
  5561  0FEB  0236               	subwf	_c,w
  5562  0FEC  1803               	btfsc	3,0
  5563  0FED  0008               	return
  5564                           
  5565                           ;main.c: 248: lcdWriteData(pathShortest[1][c]+48);
  5566  0FEE  0836               	movf	_c,w
  5567  0FEF  3ED8               	addlw	(low ((_pathShortest| 0+16)))& (0+255)
  5568  0FF0  0084               	movwf	4
  5569  0FF1  1383               	bcf	3,7	;select IRP bank1
  5570  0FF2  0800               	movf	0,w
  5571  0FF3  3E30               	addlw	48
  5572  0FF4  120A  158A  21C1  120A  158A  	fcall	_lcdWriteData
  5573  0FF9  3001               	movlw	1
  5574  0FFA  1283               	bcf	3,5	;RP0=0, select bank0
  5575  0FFB  1303               	bcf	3,6	;RP1=0, select bank0
  5576  0FFC  00D1               	movwf	??_PathTo
  5577  0FFD  0851               	movf	??_PathTo,w
  5578  0FFE  07B6               	addwf	_c,f
  5579  0FFF  2FEA               	goto	L14
  5580  1000                     __end_of_PathTo:	
  5581                           
  5582                           	psect	text16
  5583  09FE                     __ptext16:	
  5584 ;; *************** function _lcdWriteString *****************
  5585 ;; Defined at:
  5586 ;;		line 32 in file "LCD.c"
  5587 ;; Parameters:    Size  Location     Type
  5588 ;;  s               1    wreg     PTR unsigned char 
  5589 ;;		 -> STR_1(11), 
  5590 ;; Auto vars:     Size  Location     Type
  5591 ;;  s               1    4[BANK0 ] PTR unsigned char 
  5592 ;;		 -> STR_1(11), 
  5593 ;; Return value:  Size  Location     Type
  5594 ;;                  1    wreg      void 
  5595 ;; Registers used:
  5596 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5597 ;; Tracked objects:
  5598 ;;		On entry : 0/0
  5599 ;;		On exit  : 0/0
  5600 ;;		Unchanged: 0/0
  5601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5602 ;;      Params:         0       0       0       0       0
  5603 ;;      Locals:         0       1       0       0       0
  5604 ;;      Temps:          0       1       0       0       0
  5605 ;;      Totals:         0       2       0       0       0
  5606 ;;Total ram usage:        2 bytes
  5607 ;; Hardware stack levels used:    1
  5608 ;; Hardware stack levels required when called:    2
  5609 ;; This function calls:
  5610 ;;		_lcdWriteData
  5611 ;; This function is called by:
  5612 ;;		_PathTo
  5613 ;; This function uses a non-reentrant model
  5614 ;;
  5615                           
  5616                           
  5617                           ;psect for function _lcdWriteString
  5618  09FE                     _lcdWriteString:	
  5619                           
  5620                           ;incstack = 0
  5621                           ; Regs used in _lcdWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5622                           ;lcdWriteString@s stored from wreg
  5623  09FE  1283               	bcf	3,5	;RP0=0, select bank0
  5624  09FF  1303               	bcf	3,6	;RP1=0, select bank0
  5625  0A00  00CF               	movwf	lcdWriteString@s
  5626  0A01                     l3814:	
  5627                           ;LCD.c: 34: while(*s) lcdWriteData(*s++);
  5628                           
  5629  0A01  084F               	movf	lcdWriteString@s,w
  5630  0A02  0084               	movwf	4
  5631  0A03  120A  158A  2000  120A  158A  	fcall	stringdir
  5632  0A08  3A00               	xorlw	0
  5633  0A09  1903               	btfsc	3,2
  5634  0A0A  0008               	return
  5635  0A0B  084F               	movf	lcdWriteString@s,w
  5636  0A0C  0084               	movwf	4
  5637  0A0D  120A  158A  2000  120A  158A  	fcall	stringdir
  5638  0A12  120A  158A  21C1  120A  158A  	fcall	_lcdWriteData
  5639  0A17  3001               	movlw	1
  5640  0A18  1283               	bcf	3,5	;RP0=0, select bank0
  5641  0A19  1303               	bcf	3,6	;RP1=0, select bank0
  5642  0A1A  00CE               	movwf	??_lcdWriteString
  5643  0A1B  084E               	movf	??_lcdWriteString,w
  5644  0A1C  07CF               	addwf	lcdWriteString@s,f
  5645  0A1D  2A01               	goto	l3814
  5646  0A1E                     __end_of_lcdWriteString:	
  5647                           
  5648                           	psect	text17
  5649  09C1                     __ptext17:	
  5650 ;; *************** function _lcdWriteData *****************
  5651 ;; Defined at:
  5652 ;;		line 16 in file "LCD.c"
  5653 ;; Parameters:    Size  Location     Type
  5654 ;;  databyte        1    wreg     unsigned char 
  5655 ;; Auto vars:     Size  Location     Type
  5656 ;;  databyte        1    2[BANK0 ] unsigned char 
  5657 ;; Return value:  Size  Location     Type
  5658 ;;                  1    wreg      void 
  5659 ;; Registers used:
  5660 ;;		wreg
  5661 ;; Tracked objects:
  5662 ;;		On entry : 0/0
  5663 ;;		On exit  : 0/0
  5664 ;;		Unchanged: 0/0
  5665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5666 ;;      Params:         0       0       0       0       0
  5667 ;;      Locals:         0       1       0       0       0
  5668 ;;      Temps:          0       2       0       0       0
  5669 ;;      Totals:         0       3       0       0       0
  5670 ;;Total ram usage:        3 bytes
  5671 ;; Hardware stack levels used:    1
  5672 ;; Hardware stack levels required when called:    1
  5673 ;; This function calls:
  5674 ;;		Nothing
  5675 ;; This function is called by:
  5676 ;;		_PathTo
  5677 ;;		_lcdWriteString
  5678 ;;		_lcdWriteToDigitBCD
  5679 ;; This function uses a non-reentrant model
  5680 ;;
  5681                           
  5682                           
  5683                           ;psect for function _lcdWriteData
  5684  09C1                     _lcdWriteData:	
  5685                           
  5686                           ;incstack = 0
  5687                           ; Regs used in _lcdWriteData: [wreg]
  5688                           ;lcdWriteData@databyte stored from wreg
  5689  09C1  1283               	bcf	3,5	;RP0=0, select bank0
  5690  09C2  1303               	bcf	3,6	;RP1=0, select bank0
  5691  09C3  00CD               	movwf	lcdWriteData@databyte
  5692                           
  5693                           ;LCD.c: 17: RE2 = 0;
  5694  09C4  1109               	bcf	9,2	;volatile
  5695                           
  5696                           ;LCD.c: 18: RE1 = 0;
  5697  09C5  1089               	bcf	9,1	;volatile
  5698                           
  5699                           ;LCD.c: 19: RE0 = 1;
  5700  09C6  1409               	bsf	9,0	;volatile
  5701                           
  5702                           ;LCD.c: 20: PORTD = databyte;
  5703  09C7  084D               	movf	lcdWriteData@databyte,w
  5704  09C8  0088               	movwf	8	;volatile
  5705                           
  5706                           ;LCD.c: 21: RE2 = 1;
  5707  09C9  1509               	bsf	9,2	;volatile
  5708                           
  5709                           ;LCD.c: 22: RE2 = 0;
  5710  09CA  1109               	bcf	9,2	;volatile
  5711                           
  5712                           ;LCD.c: 23: _delay((unsigned long)((1)*(20000000/4000.0)));
  5713  09CB  3007               	movlw	7
  5714  09CC  00CC               	movwf	??_lcdWriteData+1
  5715  09CD  307D               	movlw	125
  5716  09CE  00CB               	movwf	??_lcdWriteData
  5717  09CF                     u3717:	
  5718  09CF  0BCB               	decfsz	??_lcdWriteData,f
  5719  09D0  29CF               	goto	u3717
  5720  09D1  0BCC               	decfsz	??_lcdWriteData+1,f
  5721  09D2  29CF               	goto	u3717
  5722  09D3  0008               	return
  5723  09D4                     __end_of_lcdWriteData:	
  5724                           
  5725                           	psect	text18
  5726  0960                     __ptext18:	
  5727 ;; *************** function _lcdSetCursor *****************
  5728 ;; Defined at:
  5729 ;;		line 27 in file "LCD.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;  address         1    wreg     unsigned char 
  5732 ;; Auto vars:     Size  Location     Type
  5733 ;;  address         1    3[BANK0 ] unsigned char 
  5734 ;; Return value:  Size  Location     Type
  5735 ;;                  1    wreg      void 
  5736 ;; Registers used:
  5737 ;;		wreg, status,2, status,0, pclath, cstack
  5738 ;; Tracked objects:
  5739 ;;		On entry : 0/0
  5740 ;;		On exit  : 0/0
  5741 ;;		Unchanged: 0/0
  5742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5743 ;;      Params:         0       0       0       0       0
  5744 ;;      Locals:         0       1       0       0       0
  5745 ;;      Temps:          0       0       0       0       0
  5746 ;;      Totals:         0       1       0       0       0
  5747 ;;Total ram usage:        1 bytes
  5748 ;; Hardware stack levels used:    1
  5749 ;; Hardware stack levels required when called:    2
  5750 ;; This function calls:
  5751 ;;		_lcdWriteControl
  5752 ;; This function is called by:
  5753 ;;		_PathTo
  5754 ;; This function uses a non-reentrant model
  5755 ;;
  5756                           
  5757                           
  5758                           ;psect for function _lcdSetCursor
  5759  0960                     _lcdSetCursor:	
  5760                           
  5761                           ;incstack = 0
  5762                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  5763                           ;lcdSetCursor@address stored from wreg
  5764  0960  1283               	bcf	3,5	;RP0=0, select bank0
  5765  0961  1303               	bcf	3,6	;RP1=0, select bank0
  5766  0962  00CE               	movwf	lcdSetCursor@address
  5767                           
  5768                           ;LCD.c: 28: address |= 0b10000000;
  5769  0963  17CE               	bsf	lcdSetCursor@address,7
  5770                           
  5771                           ;LCD.c: 29: lcdWriteControl(address);
  5772  0964  084E               	movf	lcdSetCursor@address,w
  5773  0965  120A  158A  21D4   	fcall	_lcdWriteControl
  5774  0968  0008               	return
  5775  0969                     __end_of_lcdSetCursor:	
  5776                           
  5777                           	psect	text19
  5778  09D4                     __ptext19:	
  5779 ;; *************** function _lcdWriteControl *****************
  5780 ;; Defined at:
  5781 ;;		line 5 in file "LCD.c"
  5782 ;; Parameters:    Size  Location     Type
  5783 ;;  databyte        1    wreg     unsigned char 
  5784 ;; Auto vars:     Size  Location     Type
  5785 ;;  databyte        1    2[BANK0 ] unsigned char 
  5786 ;; Return value:  Size  Location     Type
  5787 ;;                  1    wreg      void 
  5788 ;; Registers used:
  5789 ;;		wreg
  5790 ;; Tracked objects:
  5791 ;;		On entry : 0/0
  5792 ;;		On exit  : 0/0
  5793 ;;		Unchanged: 0/0
  5794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5795 ;;      Params:         0       0       0       0       0
  5796 ;;      Locals:         0       1       0       0       0
  5797 ;;      Temps:          0       2       0       0       0
  5798 ;;      Totals:         0       3       0       0       0
  5799 ;;Total ram usage:        3 bytes
  5800 ;; Hardware stack levels used:    1
  5801 ;; Hardware stack levels required when called:    1
  5802 ;; This function calls:
  5803 ;;		Nothing
  5804 ;; This function is called by:
  5805 ;;		_lcdSetCursor
  5806 ;;		_setupLCD
  5807 ;; This function uses a non-reentrant model
  5808 ;;
  5809                           
  5810                           
  5811                           ;psect for function _lcdWriteControl
  5812  09D4                     _lcdWriteControl:	
  5813                           
  5814                           ;incstack = 0
  5815                           ; Regs used in _lcdWriteControl: [wreg]
  5816                           ;lcdWriteControl@databyte stored from wreg
  5817  09D4  1283               	bcf	3,5	;RP0=0, select bank0
  5818  09D5  1303               	bcf	3,6	;RP1=0, select bank0
  5819  09D6  00CD               	movwf	lcdWriteControl@databyte
  5820                           
  5821                           ;LCD.c: 6: RE2 = 0;
  5822  09D7  1109               	bcf	9,2	;volatile
  5823                           
  5824                           ;LCD.c: 7: RE1 = 0;
  5825  09D8  1089               	bcf	9,1	;volatile
  5826                           
  5827                           ;LCD.c: 8: RE0 = 0;
  5828  09D9  1009               	bcf	9,0	;volatile
  5829                           
  5830                           ;LCD.c: 9: PORTD = databyte;
  5831  09DA  084D               	movf	lcdWriteControl@databyte,w
  5832  09DB  0088               	movwf	8	;volatile
  5833                           
  5834                           ;LCD.c: 10: RE2 = 1;
  5835  09DC  1509               	bsf	9,2	;volatile
  5836                           
  5837                           ;LCD.c: 11: RE2 = 0;
  5838  09DD  1109               	bcf	9,2	;volatile
  5839                           
  5840                           ;LCD.c: 12: _delay((unsigned long)((2)*(20000000/4000.0)));
  5841  09DE  300D               	movlw	13
  5842  09DF  00CC               	movwf	??_lcdWriteControl+1
  5843  09E0  30FB               	movlw	251
  5844  09E1  00CB               	movwf	??_lcdWriteControl
  5845  09E2                     u3727:	
  5846  09E2  0BCB               	decfsz	??_lcdWriteControl,f
  5847  09E3  29E2               	goto	u3727
  5848  09E4  0BCC               	decfsz	??_lcdWriteControl+1,f
  5849  09E5  29E2               	goto	u3727
  5850  09E6  29E7               	nop2
  5851  09E7  0008               	return
  5852  09E8                     __end_of_lcdWriteControl:	
  5853                           
  5854                           	psect	text20
  5855  09AE                     __ptext20:	
  5856 ;; *************** function ___bmul *****************
  5857 ;; Defined at:
  5858 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
  5859 ;; Parameters:    Size  Location     Type
  5860 ;;  multiplier      1    wreg     unsigned char 
  5861 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  5862 ;; Auto vars:     Size  Location     Type
  5863 ;;  multiplier      1    3[BANK0 ] unsigned char 
  5864 ;;  product         1    2[BANK0 ] unsigned char 
  5865 ;; Return value:  Size  Location     Type
  5866 ;;                  1    wreg      unsigned char 
  5867 ;; Registers used:
  5868 ;;		wreg, status,2, status,0
  5869 ;; Tracked objects:
  5870 ;;		On entry : 0/0
  5871 ;;		On exit  : 0/0
  5872 ;;		Unchanged: 0/0
  5873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5874 ;;      Params:         0       1       0       0       0
  5875 ;;      Locals:         0       2       0       0       0
  5876 ;;      Temps:          0       1       0       0       0
  5877 ;;      Totals:         0       4       0       0       0
  5878 ;;Total ram usage:        4 bytes
  5879 ;; Hardware stack levels used:    1
  5880 ;; Hardware stack levels required when called:    1
  5881 ;; This function calls:
  5882 ;;		Nothing
  5883 ;; This function is called by:
  5884 ;;		_PathTo
  5885 ;;		_re_route
  5886 ;; This function uses a non-reentrant model
  5887 ;;
  5888                           
  5889                           
  5890                           ;psect for function ___bmul
  5891  09AE                     ___bmul:	
  5892                           
  5893                           ;incstack = 0
  5894                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5895                           ;___bmul@multiplier stored from wreg
  5896  09AE  1283               	bcf	3,5	;RP0=0, select bank0
  5897  09AF  1303               	bcf	3,6	;RP1=0, select bank0
  5898  09B0  00CE               	movwf	___bmul@multiplier
  5899  09B1  01CD               	clrf	___bmul@product
  5900  09B2                     l3916:	
  5901  09B2  1C4E               	btfss	___bmul@multiplier,0
  5902  09B3  29B8               	goto	l3920
  5903  09B4  084B               	movf	___bmul@multiplicand,w
  5904  09B5  00CC               	movwf	??___bmul
  5905  09B6  084C               	movf	??___bmul,w
  5906  09B7  07CD               	addwf	___bmul@product,f
  5907  09B8                     l3920:	
  5908  09B8  1003               	clrc
  5909  09B9  0DCB               	rlf	___bmul@multiplicand,f
  5910  09BA  1003               	clrc
  5911  09BB  0CCE               	rrf	___bmul@multiplier,f
  5912  09BC  084E               	movf	___bmul@multiplier,w
  5913  09BD  1D03               	btfss	3,2
  5914  09BE  29B2               	goto	l3916
  5915  09BF  084D               	movf	___bmul@product,w
  5916  09C0  0008               	return
  5917  09C1                     __end_of___bmul:	
  5918                           
  5919                           	psect	text21
  5920  0A1E                     __ptext21:	
  5921 ;; *************** function _isr *****************
  5922 ;; Defined at:
  5923 ;;		line 458 in file "main.c"
  5924 ;; Parameters:    Size  Location     Type
  5925 ;;		None
  5926 ;; Auto vars:     Size  Location     Type
  5927 ;;		None
  5928 ;; Return value:  Size  Location     Type
  5929 ;;                  1    wreg      void 
  5930 ;; Registers used:
  5931 ;;		wreg, status,2, status,0
  5932 ;; Tracked objects:
  5933 ;;		On entry : 0/0
  5934 ;;		On exit  : 0/0
  5935 ;;		Unchanged: 0/0
  5936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5937 ;;      Params:         0       0       0       0       0
  5938 ;;      Locals:         0       0       0       0       0
  5939 ;;      Temps:          5       0       0       0       0
  5940 ;;      Totals:         5       0       0       0       0
  5941 ;;Total ram usage:        5 bytes
  5942 ;; Hardware stack levels used:    1
  5943 ;; This function calls:
  5944 ;;		Nothing
  5945 ;; This function is called by:
  5946 ;;		Interrupt level 1
  5947 ;; This function uses a non-reentrant model
  5948 ;;
  5949                           
  5950                           
  5951                           ;psect for function _isr
  5952  0A1E                     _isr:	
  5953                           
  5954                           ;main.c: 459: if(TMR0IF){
  5955  0A1E  1D0B               	btfss	11,2	;volatile
  5956  0A1F  2A35               	goto	i1l329
  5957                           
  5958                           ;main.c: 460: TMR0IF = 0;
  5959  0A20  110B               	bcf	11,2	;volatile
  5960                           
  5961                           ;main.c: 461: TMR0 = 100;
  5962  0A21  3064               	movlw	100
  5963  0A22  0081               	movwf	1	;volatile
  5964                           
  5965                           ;main.c: 462: time_count++;
  5966  0A23  3001               	movlw	1
  5967  0A24  07AC               	addwf	_time_count,f	;volatile
  5968  0A25  1803               	skipnc
  5969  0A26  0AAD               	incf	_time_count+1,f	;volatile
  5970  0A27  3000               	movlw	0
  5971  0A28  07AD               	addwf	_time_count+1,f	;volatile
  5972                           
  5973                           ;main.c: 464: if(!RB0)
  5974  0A29  1806               	btfsc	6,0	;volatile
  5975  0A2A  2A2F               	goto	i1l3252
  5976                           
  5977                           ;main.c: 465: PB8Counter++;
  5978  0A2B  3001               	movlw	1
  5979  0A2C  00F1               	movwf	??_isr
  5980  0A2D  0871               	movf	??_isr,w
  5981  0A2E  07B3               	addwf	_PB8Counter,f
  5982  0A2F                     i1l3252:	
  5983                           
  5984                           ;main.c: 466: if(!RB1)
  5985  0A2F  1886               	btfsc	6,1	;volatile
  5986  0A30  2A35               	goto	i1l329
  5987                           
  5988                           ;main.c: 467: PB7Counter++;
  5989  0A31  3001               	movlw	1
  5990  0A32  00F1               	movwf	??_isr
  5991  0A33  0871               	movf	??_isr,w
  5992  0A34  07B2               	addwf	_PB7Counter,f
  5993  0A35                     i1l329:	
  5994  0A35  0875               	movf	??_isr+4,w
  5995  0A36  00FF               	movwf	127
  5996  0A37  0874               	movf	??_isr+3,w
  5997  0A38  008A               	movwf	10
  5998  0A39  0873               	movf	??_isr+2,w
  5999  0A3A  0084               	movwf	4
  6000  0A3B  0E72               	swapf	(??_isr+1)^(0+-128),w
  6001  0A3C  0083               	movwf	3
  6002  0A3D  0EFE               	swapf	126,f
  6003  0A3E  0E7E               	swapf	126,w
  6004  0A3F  0009               	retfie
  6005  0A40                     __end_of_isr:	
  6006  007E                     btemp	set	126	;btemp
  6007  007E                     wtemp	set	126
  6008  007E                     wtemp0	set	126
  6009  0080                     wtemp1	set	128
  6010  0082                     wtemp2	set	130
  6011  0084                     wtemp3	set	132
  6012  0086                     wtemp4	set	134
  6013  0088                     wtemp5	set	136
  6014  007F                     wtemp6	set	127
  6015  007E                     ttemp	set	126
  6016  007E                     ttemp0	set	126
  6017  0081                     ttemp1	set	129
  6018  0084                     ttemp2	set	132
  6019  0087                     ttemp3	set	135
  6020  007F                     ttemp4	set	127
  6021  007E                     ltemp	set	126
  6022  007E                     ltemp0	set	126
  6023  0082                     ltemp1	set	130
  6024  0086                     ltemp2	set	134
  6025  0080                     ltemp3	set	128
  6026                           
  6027                           	psect	intentry
  6028  0004                     __pintentry:	
  6029                           ;incstack = 0
  6030                           ; Regs used in _isr: [wreg+status,2+status,0]
  6031                           
  6032  0004                     interrupt_function:	
  6033  007E                     saved_w	set	btemp
  6034  0004  00FE               	movwf	btemp
  6035  0005  0E03               	swapf	3,w
  6036  0006  00F2               	movwf	??_isr+1
  6037  0007  0804               	movf	4,w
  6038  0008  00F3               	movwf	??_isr+2
  6039  0009  080A               	movf	10,w
  6040  000A  00F4               	movwf	??_isr+3
  6041  000B  1283               	bcf	3,5	;RP0=0, select bank0
  6042  000C  1303               	bcf	3,6	;RP1=0, select bank0
  6043  000D  087F               	movf	btemp+1,w
  6044  000E  00F5               	movwf	??_isr+4
  6045  000F  120A  158A  2A1E   	ljmp	_isr


Data Sizes:
    Strings     11
    Constant    0
    Data        111
    BSS         115
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     26      76
    BANK1            80      0      76
    BANK3            96      0      96
    BANK2            96      6       6

Pointer List with Targets:

    lcdWriteString@s	PTR unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_re_route
    _setupLCD->_lcdWriteControl
    _re_route->_TravelPath
    _TravelPath->_Drive1m
    _Turn90->_DriveDirect
    _Drive->_ser_putch
    _Drive1m->_DriveDirect
    _getSensorData->_ser_getch
    _DriveDirect->_ser_putch
    _PathTo->_lcdWriteString
    _lcdWriteString->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   21339
                                             23 BANK0      3     3      0
                                              0 BANK2      6     6      0
                             _PathTo
                         _TravelPath
                           _re_route
                           _ser_init
                          _ser_putch
                           _setupADC
                           _setupLCD
                           _setupSPI
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _spi_transfer                                         3     3      0      44
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      31
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _re_route                                             5     5      0   13327
                                             18 BANK0      5     5      0
                        _DriveDirect
                             _PathTo
                         _TravelPath
                             _Turn90
                             ___bmul
                      _getSensorData
 ---------------------------------------------------------------------------------
 (2) _TravelPath                                           3     3      0    5012
                                             15 BANK0      3     3      0
                            _Drive1m
                             _Turn90
 ---------------------------------------------------------------------------------
 (2) _Turn90                                               4     4      0    2678
                                             10 BANK0      4     4      0
                              _Drive
                        _DriveDirect
                      _getSensorData
 ---------------------------------------------------------------------------------
 (3) _Drive                                                4     1      3     545
                                              1 BANK0      4     1      3
                          _ser_putch
 ---------------------------------------------------------------------------------
 (3) _Drive1m                                              5     5      0    2170
                                             10 BANK0      5     5      0
                        _DriveDirect
                      _getSensorData
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _getSensorData                                        7     5      2     616
                                              2 BANK0      7     5      2
                          _ser_getch
                          _ser_putch
 ---------------------------------------------------------------------------------
 (3) _ser_getch                                            2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _DriveDirect                                          9     5      4    1455
                                              1 BANK0      9     5      4
                          _ser_putch
 ---------------------------------------------------------------------------------
 (1) _ser_putch                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _PathTo                                              12    11      1    2380
                                              5 BANK0     12    11      1
                             ___bmul
                       _lcdSetCursor
                       _lcdWriteData
                     _lcdWriteString
 ---------------------------------------------------------------------------------
 (3) _lcdWriteString                                       2     2      0     126
                                              3 BANK0      2     2      0
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (4) _lcdWriteData                                         3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _lcdSetCursor                                         1     1      0      65
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1    1186
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PathTo
     ___bmul
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteData
     _lcdWriteString
       _lcdWriteData
   _TravelPath
     _Drive1m
       _DriveDirect
         _ser_putch
       _getSensorData
         _ser_getch
         _ser_putch
       _ser_putch
     _Turn90
       _Drive
         _ser_putch
       _DriveDirect
         _ser_putch
       _getSensorData
         _ser_getch
         _ser_putch
   _re_route
     _DriveDirect
       _ser_putch
     _PathTo
       ___bmul
       _lcdSetCursor
         _lcdWriteControl
       _lcdWriteData
       _lcdWriteString
         _lcdWriteData
     _TravelPath
       _Drive1m
         _DriveDirect
           _ser_putch
         _getSensorData
           _ser_getch
           _ser_putch
         _ser_putch
       _Turn90
         _Drive
           _ser_putch
         _DriveDirect
           _ser_putch
         _getSensorData
           _ser_getch
           _ser_putch
     _Turn90
       _Drive
         _ser_putch
       _DriveDirect
         _ser_putch
       _getSensorData
         _ser_getch
         _ser_putch
     ___bmul
     _getSensorData
       _ser_getch
       _ser_putch
   _ser_init
   _ser_putch
   _setupADC
   _setupLCD
     _lcdWriteControl
   _setupSPI
   _spi_transfer

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      60       9      100.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      6       6      11        6.3%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      4C       7       95.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1A      4C       5       95.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0     108      12        0.0%
ABS                  0      0     108       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri Oct 07 12:36:00 2016

                       _c 0036                         _r 003B                         _x 006B  
         ??_getSensorData 004F                         _y 0045                         pc 0002  
          ___bmul@product 004D               __CFG_CP$OFF 0000                        _GO 00FA  
                      _up 0386                        fsr 0004               Drive@speedH 004F  
             Drive@speedL 004C                       l230 0F97                       l214 0F89  
                     l232 0FA0                       l227 0FAE                       l228 0F91  
                     l180 0D0E                       l340 049D                       l190 0DC2  
                     l342 04C5                       l192 0DC6                       l184 0D90  
                     l336 0450                       l194 0DCB                       l186 0D92  
                     l338 0475                       l187 0D94                       l188 0D96  
                     l189 0DD1                       l841 0976                       l847 0969  
                     l977 0995                       _GIE 005F                       _RB0 0030  
                     _RB1 0031                       _RB2 0032             ??_DriveDirect 0050  
                     _RB3 0033                       _RC2 003A                       _RE0 0048  
                     _RE1 0049                       _RE2 004A              __CFG_CPD$OFF 0000  
                     _isr 0A1E                       fsr0 0004                       indf 0000  
            __CFG_FOSC$HS 0000            ??_lcdWriteData 004B              __CFG_LVP$OFF 0000  
                    l4100 0F41                      l4004 0D98                      l4102 0F4F  
                    l4006 0DA6                      l4112 0F62                      l4200 0528  
                    l4050 0E33                      l4210 0548                      l4202 0535  
                    l4124 0F81                      l4052 0E48                      l4060 0E95  
                    l4044 0E19                      l4212 054F                      l4220 0567  
                    l4204 0536                      l4150 0FAA                      l4118 0F67  
                    l4070 0EA8                      l4054 0E5D                      l4038 0DEB  
                    l4230 0587                      l4222 0574                      l4048 0E1E  
                    l4232 058E                      l4240 05A6                      l4208 0541  
                    l4224 0575                      l4162 0FCC                      l4090 0ED8  
                    l4082 0EC7                      l4058 0E87                      l4154 0FBF  
                    l4250 05C6                      l4242 05B3                      l4092 0EED  
                    l4076 0EAD                      l4252 05CD                      l4260 05E5  
                    l4228 0580                      l4244 05B4                      l4094 0F02  
                    l4086 0ECF                      l4262 05F2                      l4190 0509  
                    l4270 04F5                      l4168 0FE1                      l4096 0F17  
                    l4248 05BF                      l4264 05F7                      l4192 0510  
                    l4280 073A                      l4274 06F9                      l4268 05FF  
                    l4188 0502                      l4276 0710                      l4284 0764  
                    l4700 0465                      l3814 0A01                      l3742 0B67  
                    l3902 0C12                      l3910 0C4C                      l4294 0791  
                    l4278 0725                      l4286 0774                      l3920 09B8  
                    l3840 0677                      l3904 0C16                      l4296 07B5  
                    l3754 0B86                      l3738 0B54                      l3842 067C  
                    l3850 0697                      l3834 0661                      l3916 09B2  
                    l3940 0C76                      l3844 0689                      l3852 06A1  
                    l3908 0C28                      l4724 04DD                      l4716 04B5  
                    l4708 048D                      l3950 0CAE                      l3934 0C71  
                    l3758 0B99                      l3862 06C0                      l3854 061B  
                    l3784 0ADB                      l3864 06C5                      l3872 06D2  
                    l3856 06B0                      l4728 04ED                      l3970 0CD6  
                    l3946 0CA6                      l3786 0ADC                      l3866 06CA  
                    l3874 06E2                      l3890 0BD6                      l4682 0428  
                    l4666 03DC                      l3964 0CBC                      l3868 06CF  
                    l3876 06EF                      l4692 0440                      l3974 0CDE  
                    l3958 0CB7                      l3894 0BE3                      l3888 0BD4  
                    l3896 0C07                      ?_isr 0071                      STR_1 0806  
                    u3005 0EB0                      u3155 0FBD                      u3075 0F6A  
                    u2465 0B44                      u3265 079C                      u2635 0BEE  
                    u2495 0B76                      u3607 03F7                      u2585 0626  
                    u2665 0C33                      u3617 0412                      u2755 0CBF  
                    u3707 06E8                      u3627 09FB                      _PEIE 005E  
                    u3717 09CF                      u3637 07CB                      u3727 09E2  
                    u3647 051C                      u3567 0067                      u2945 0DEE  
                    u2785 0D0C                      u3657 055B                      u3577 009E  
                    u2955 0E01                      u3667 059A                      u3587 00B3  
                    _RCIF 0065                      u3677 05D9                      u3597 00C8  
                    u3687 0C61                      u3697 06A9                      _TMR0 0001  
                    _TRMT 04C1              __CFG_WRT$OFF 0000                      _radH 003C  
                    _radL 003D                      _main 005F                      _left 0382  
                    _down 0381                      _path 01D0                      _loop 002A  
                    btemp 007E                      ltemp 007E                      start 0012  
                    ttemp 007E                      wtemp 007E         ___bmul@multiplier 004E  
         __end_of_Drive1m 06F8                     ??_isr 0071                PathTo@loop 005A  
                   ?_main 0071             __CFG_WDTE$OFF 0000                     i1l329 0A35  
                   _RCREG 001A                     _RCSTA 0018                     _SPBRG 0099  
                   _PORTA 0005                     _PORTB 0006                     _PORTC 0007  
                   _PORTD 0008                     _PORTE 0009                     _TRISA 0085  
                   _TRISB 0086                     _TRISC 0087                     _TRISD 0088  
                   _TRISE 0089                     _SSPIF 0063                     _TXREG 0019  
                   _TXSTA 0098  _intersection_orientation 0037                     _Drive 0A40  
                   _angle 0026       __end_of_DriveDirect 0BC4                     _right 0384  
                   _x_int 0042                     _y_int 0047            __pbitbssCOMMON 0380  
          __CFG_BOREN$OFF 0000                     pclath 000A                     ltemp0 007E  
                   ltemp1 0082                     ltemp2 0086                     ltemp3 0080  
              _LeftSpeedH 0030                _LeftSpeedL 0031                     ttemp0 007E  
                   ttemp1 0081                     ttemp2 0084                     ttemp3 0087  
                   ttemp4 007F                     status 0003                     wtemp0 007E  
                   wtemp1 0080                     wtemp2 0082                     wtemp3 0084  
                   wtemp4 0086                     wtemp5 0088                     wtemp6 007F  
         __initialization 0015              __end_of_main 04F1  __size_of_lcdWriteControl 0014  
                  ??_main 0062      __end_of_lcdSetCursor 0969          ??_lcdWriteString 004E  
                  ?_Drive 004C                    _ADCON0 001F                    _ADCON1 009F  
                  _ADRESH 001E                    _ADRESL 009E                    i1l3252 0A2F  
                  _TMR0IE 005D                    _TMR0IF 005A                    _SSPCON 0014  
                  _SSPBUF 0013                 ??_Drive1m 0055            __CFG_PWRTE$OFF 0000  
                  _PathTo 0C69                    _adcRAW 0076                    _Turn90 0BC4  
                  ___bmul 09AE      __end_of_lcdWriteData 09D4           lcdWriteString@s 004F  
                  _speedH 003E                    _speedL 003F                    _x_goto 0041  
                  _x_path 0043                    _y_goto 0046                    _y_path 0048  
        __end_of_re_route 07E2               _DriveDirect 0B37          __end_of_ser_init 098E  
        __end_of_setupADC 09FE          __end_of_setupLCD 0AB9          __end_of_setupSPI 07FB  
                  saved_w 007E           Turn90@direction 0058                _TravelPath 04F1  
 __end_of__initialization 005B       ___bmul@multiplicand 004B             __end_of_Drive 0A68  
          __pcstackCOMMON 0071              __pidataBANK0 0951              __pidataBANK1 0A68  
            __pidataBANK3 0AF7            PathTo@x_target 0058            PathTo@y_target 0050  
         DriveDirect@data 0051                   ??_Drive 004F         ??_lcdWriteControl 004B  
              __pbssBANK0 0020                __pbssBANK1 00C8                __pbssBANK3 01D0  
       _pathCountShortest 006A       lcdSetCursor@address 004E                   ?_PathTo 0050  
              __pmaintext 005F                   ?_Turn90 0071                   ?___bmul 004B  
              __pintentry 0004     __size_of_lcdSetCursor 0009     __end_of_getSensorData 0AF7  
      __size_of_ser_getch 000A        __size_of_ser_putch 000C               ?_TravelPath 0071  
             _RightSpeedH 0034               _RightSpeedL 0035                   _IR_Wall 0380  
                 _SSPSTAT 0094                __stringtab 0800                   _Drive1m 0606  
 DriveDirect@VelocityLeft 004E     __size_of_lcdWriteData 0013                 ?_re_route 0071  
            _lcdSetCursor 0960                 ?_ser_init 0071           __size_of_PathTo 0397  
               ?_setupADC 0071                 ?_setupLCD 0071                 ?_setupSPI 0071  
         __size_of_Turn90 00A5           __size_of___bmul 0013                   __ptext1 098E  
                 __ptext2 07E2                   __ptext3 0A90                   __ptext4 09E8  
                 __ptext5 097F                   __ptext6 06F8                   __ptext7 04F1  
                 __ptext8 0BC4                   __ptext9 0A40              __size_of_isr 0022  
                 _lowByte 0038          _orientation_path 0039                   _targets 0040  
                 clrloop0 0959              _lcdWriteData 09C1      end_of_initialization 005B  
       __end_of_ser_getch 0973         __end_of_ser_putch 097F                ??_re_route 005D  
              _reset_flag 0383                ??_ser_init 004B                ??_setupADC 004B  
              ??_setupLCD 004E                ??_setupSPI 004B       __size_of_TravelPath 0115  
              _time_count 002C              ?_DriveDirect 004C                 Drive@radH 004D  
               Drive@radL 004E               TravelPath@n 005C             ?_spi_transfer 0071  
         ser_getch@rxbyte 004C                main@fourth 0114                main@second 0112  
          __end_of_PathTo 1000                 PathTo@sum 0059            __end_of_Turn90 0C69  
          __end_of___bmul 09C1       DriveDirect@data_467 0053           _lcdWriteControl 09D4  
     start_initialization 0015               __end_of_isr 0A40            ??_spi_transfer 004B  
 __size_of_lcdWriteString 0020                  ??_PathTo 0051                  ??_Turn90 0055  
                ??___bmul 004C                init_fetch0 099D               __pdataBANK0 0065  
             __pdataBANK1 00A0               __pdataBANK3 0190               __pbssCOMMON 0076  
               ___latbits 0002             __pcstackBANK0 004B             __pcstackBANK2 0110  
            ??_TravelPath 005A                  ?_Drive1m 0071   __end_of_lcdWriteControl 09E8  
       __size_of_re_route 00EA         __size_of_ser_init 000F         __size_of_setupADC 0016  
       __size_of_setupLCD 0029        __end_of_TravelPath 0606         __size_of_setupSPI 0019  
               __pstrings 0800              _pathShortest 00C8                 _gridWalls 0190  
          __size_of_Drive 0028      __size_of_DriveDirect 008D             _targets_found 0385  
         main@controlByte 0110                 _pathCount 003A   lcdWriteControl@databyte 004D  
       interrupt_function 0004    __size_of_getSensorData 003E                ser_putch@c 004B  
   getSensorData@packetID 0051                 clear_ram0 0958                 _ser_getch 0969  
               _ser_putch 0973                 _timerLoop 002E                  Drive1m@n 0058  
           _VelocityRight 00EA      __end_of_spi_transfer 099D               __stringbase 0805  
        spi_transfer@data 004D                 main@fifth 0115                 main@first 0111  
        spi_transfer@temp 004C                _ADC_ADJUST 0078                 main@third 0113  
                _Distance 0024      lcdWriteData@databyte 004D            _lcdWriteString 09FE  
DriveDirect@VelocityRight 004C          __size_of_Drive1m 00F2          _ADJUSTED_SPEED_L 0020  
        _ADJUSTED_SPEED_R 0022                ?_ser_getch 0071          ?_lcdWriteControl 0071  
         _mazeGridDefault 00B4                ?_ser_putch 0071             _getSensorData 0AB9  
      __end_of__stringtab 0806                  __ptext10 0606                  __ptext11 0AB9  
                __ptext20 09AE                  __ptext12 0969                  __ptext21 0A1E  
                __ptext13 0B37                  __ptext14 0973                  __ptext15 0C69  
                __ptext16 09FE                  __ptext17 09C1                  __ptext18 0960  
                __ptext19 09D4                  _highByte 004A    __end_of_lcdWriteString 0A1E  
                _distance 0028                  _mazeGrid 00A0             __size_of_main 0492  
                _re_route 06F8                  _ser_init 097F                  _setupADC 09E8  
                _setupLCD 0A90                  _setupSPI 07E2                _PB7Counter 0032  
                _x_target 0044                _PB8Counter 0033                  _y_target 0049  
            _VelocityLeft 00E8            ?_getSensorData 004D                  init_ram0 09A1  
         ?_lcdWriteString 0071            Drive1m@omni_IR 0059                  intlevel1 0000  
           ?_lcdSetCursor 0071                 stringcode 0800               ??_ser_getch 004B  
             ??_ser_putch 004B       getSensorData@sensor 0052     __size_of_spi_transfer 000F  
             _orientation 0069                _OPTION_REG 0081                  stringdir 0800  
                stringtab 0800        getSensorData@bytes 004D             ?_lcdWriteData 0071  
            _spi_transfer 098E            ??_lcdSetCursor 004E           _CURRENT_SPEED_L 0065  
         _CURRENT_SPEED_R 0067  
