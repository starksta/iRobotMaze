

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Fri Oct 07 14:38:44 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	intentry,global,class=CODE,delta=2
    51                           	dabs	1,0x7E,2
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  0091                     	;# 
    97  0092                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0098                     	;# 
   101  0099                     	;# 
   102  009C                     	;# 
   103  009D                     	;# 
   104  009E                     	;# 
   105  009F                     	;# 
   106  010C                     	;# 
   107  010D                     	;# 
   108  010E                     	;# 
   109  010F                     	;# 
   110  018C                     	;# 
   111  018D                     	;# 
   112  0000                     	;# 
   113  0001                     	;# 
   114  0002                     	;# 
   115  0003                     	;# 
   116  0004                     	;# 
   117  0005                     	;# 
   118  0006                     	;# 
   119  0007                     	;# 
   120  0008                     	;# 
   121  0009                     	;# 
   122  000A                     	;# 
   123  000B                     	;# 
   124  000C                     	;# 
   125  000D                     	;# 
   126  000E                     	;# 
   127  000E                     	;# 
   128  000F                     	;# 
   129  0010                     	;# 
   130  0011                     	;# 
   131  0012                     	;# 
   132  0013                     	;# 
   133  0014                     	;# 
   134  0015                     	;# 
   135  0015                     	;# 
   136  0016                     	;# 
   137  0017                     	;# 
   138  0018                     	;# 
   139  0019                     	;# 
   140  001A                     	;# 
   141  001B                     	;# 
   142  001B                     	;# 
   143  001C                     	;# 
   144  001D                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  0081                     	;# 
   148  0085                     	;# 
   149  0086                     	;# 
   150  0087                     	;# 
   151  0088                     	;# 
   152  0089                     	;# 
   153  008C                     	;# 
   154  008D                     	;# 
   155  008E                     	;# 
   156  0091                     	;# 
   157  0092                     	;# 
   158  0093                     	;# 
   159  0094                     	;# 
   160  0098                     	;# 
   161  0099                     	;# 
   162  009C                     	;# 
   163  009D                     	;# 
   164  009E                     	;# 
   165  009F                     	;# 
   166  010C                     	;# 
   167  010D                     	;# 
   168  010E                     	;# 
   169  010F                     	;# 
   170  018C                     	;# 
   171  018D                     	;# 
   172  0000                     	;# 
   173  0001                     	;# 
   174  0002                     	;# 
   175  0003                     	;# 
   176  0004                     	;# 
   177  0005                     	;# 
   178  0006                     	;# 
   179  0007                     	;# 
   180  0008                     	;# 
   181  0009                     	;# 
   182  000A                     	;# 
   183  000B                     	;# 
   184  000C                     	;# 
   185  000D                     	;# 
   186  000E                     	;# 
   187  000E                     	;# 
   188  000F                     	;# 
   189  0010                     	;# 
   190  0011                     	;# 
   191  0012                     	;# 
   192  0013                     	;# 
   193  0014                     	;# 
   194  0015                     	;# 
   195  0015                     	;# 
   196  0016                     	;# 
   197  0017                     	;# 
   198  0018                     	;# 
   199  0019                     	;# 
   200  001A                     	;# 
   201  001B                     	;# 
   202  001B                     	;# 
   203  001C                     	;# 
   204  001D                     	;# 
   205  001E                     	;# 
   206  001F                     	;# 
   207  0081                     	;# 
   208  0085                     	;# 
   209  0086                     	;# 
   210  0087                     	;# 
   211  0088                     	;# 
   212  0089                     	;# 
   213  008C                     	;# 
   214  008D                     	;# 
   215  008E                     	;# 
   216  0091                     	;# 
   217  0092                     	;# 
   218  0093                     	;# 
   219  0094                     	;# 
   220  0098                     	;# 
   221  0099                     	;# 
   222  009C                     	;# 
   223  009D                     	;# 
   224  009E                     	;# 
   225  009F                     	;# 
   226  010C                     	;# 
   227  010D                     	;# 
   228  010E                     	;# 
   229  010F                     	;# 
   230  018C                     	;# 
   231  018D                     	;# 
   232  0000                     	;# 
   233  0001                     	;# 
   234  0002                     	;# 
   235  0003                     	;# 
   236  0004                     	;# 
   237  0005                     	;# 
   238  0006                     	;# 
   239  0007                     	;# 
   240  0008                     	;# 
   241  0009                     	;# 
   242  000A                     	;# 
   243  000B                     	;# 
   244  000C                     	;# 
   245  000D                     	;# 
   246  000E                     	;# 
   247  000E                     	;# 
   248  000F                     	;# 
   249  0010                     	;# 
   250  0011                     	;# 
   251  0012                     	;# 
   252  0013                     	;# 
   253  0014                     	;# 
   254  0015                     	;# 
   255  0015                     	;# 
   256  0016                     	;# 
   257  0017                     	;# 
   258  0018                     	;# 
   259  0019                     	;# 
   260  001A                     	;# 
   261  001B                     	;# 
   262  001B                     	;# 
   263  001C                     	;# 
   264  001D                     	;# 
   265  001E                     	;# 
   266  001F                     	;# 
   267  0081                     	;# 
   268  0085                     	;# 
   269  0086                     	;# 
   270  0087                     	;# 
   271  0088                     	;# 
   272  0089                     	;# 
   273  008C                     	;# 
   274  008D                     	;# 
   275  008E                     	;# 
   276  0091                     	;# 
   277  0092                     	;# 
   278  0093                     	;# 
   279  0094                     	;# 
   280  0098                     	;# 
   281  0099                     	;# 
   282  009C                     	;# 
   283  009D                     	;# 
   284  009E                     	;# 
   285  009F                     	;# 
   286  010C                     	;# 
   287  010D                     	;# 
   288  010E                     	;# 
   289  010F                     	;# 
   290  018C                     	;# 
   291  018D                     	;# 
   292  0000                     	;# 
   293  0001                     	;# 
   294  0002                     	;# 
   295  0003                     	;# 
   296  0004                     	;# 
   297  0005                     	;# 
   298  0006                     	;# 
   299  0007                     	;# 
   300  0008                     	;# 
   301  0009                     	;# 
   302  000A                     	;# 
   303  000B                     	;# 
   304  000C                     	;# 
   305  000D                     	;# 
   306  000E                     	;# 
   307  000E                     	;# 
   308  000F                     	;# 
   309  0010                     	;# 
   310  0011                     	;# 
   311  0012                     	;# 
   312  0013                     	;# 
   313  0014                     	;# 
   314  0015                     	;# 
   315  0015                     	;# 
   316  0016                     	;# 
   317  0017                     	;# 
   318  0018                     	;# 
   319  0019                     	;# 
   320  001A                     	;# 
   321  001B                     	;# 
   322  001B                     	;# 
   323  001C                     	;# 
   324  001D                     	;# 
   325  001E                     	;# 
   326  001F                     	;# 
   327  0081                     	;# 
   328  0085                     	;# 
   329  0086                     	;# 
   330  0087                     	;# 
   331  0088                     	;# 
   332  0089                     	;# 
   333  008C                     	;# 
   334  008D                     	;# 
   335  008E                     	;# 
   336  0091                     	;# 
   337  0092                     	;# 
   338  0093                     	;# 
   339  0094                     	;# 
   340  0098                     	;# 
   341  0099                     	;# 
   342  009C                     	;# 
   343  009D                     	;# 
   344  009E                     	;# 
   345  009F                     	;# 
   346  010C                     	;# 
   347  010D                     	;# 
   348  010E                     	;# 
   349  010F                     	;# 
   350  018C                     	;# 
   351  018D                     	;# 
   352  0000                     	;# 
   353  0001                     	;# 
   354  0002                     	;# 
   355  0003                     	;# 
   356  0004                     	;# 
   357  0005                     	;# 
   358  0006                     	;# 
   359  0007                     	;# 
   360  0008                     	;# 
   361  0009                     	;# 
   362  000A                     	;# 
   363  000B                     	;# 
   364  000C                     	;# 
   365  000D                     	;# 
   366  000E                     	;# 
   367  000E                     	;# 
   368  000F                     	;# 
   369  0010                     	;# 
   370  0011                     	;# 
   371  0012                     	;# 
   372  0013                     	;# 
   373  0014                     	;# 
   374  0015                     	;# 
   375  0015                     	;# 
   376  0016                     	;# 
   377  0017                     	;# 
   378  0018                     	;# 
   379  0019                     	;# 
   380  001A                     	;# 
   381  001B                     	;# 
   382  001B                     	;# 
   383  001C                     	;# 
   384  001D                     	;# 
   385  001E                     	;# 
   386  001F                     	;# 
   387  0081                     	;# 
   388  0085                     	;# 
   389  0086                     	;# 
   390  0087                     	;# 
   391  0088                     	;# 
   392  0089                     	;# 
   393  008C                     	;# 
   394  008D                     	;# 
   395  008E                     	;# 
   396  0091                     	;# 
   397  0092                     	;# 
   398  0093                     	;# 
   399  0094                     	;# 
   400  0098                     	;# 
   401  0099                     	;# 
   402  009C                     	;# 
   403  009D                     	;# 
   404  009E                     	;# 
   405  009F                     	;# 
   406  010C                     	;# 
   407  010D                     	;# 
   408  010E                     	;# 
   409  010F                     	;# 
   410  018C                     	;# 
   411  018D                     	;# 
   412                           
   413                           	psect	idataBANK0
   414  17B2                     __pidataBANK0:	
   415                           
   416                           ;initializer for _orientation
   417  17B2  3403               	retlw	3
   418                           
   419                           ;initializer for _pathCountShortest
   420  17B3  3414               	retlw	20
   421                           
   422                           ;initializer for _x
   423  17B4  3401               	retlw	1
   424                           
   425                           ;initializer for _CURRENT_SPEED_L
   426  17B5  34FA               	retlw	250
   427  17B6  3400               	retlw	0
   428                           
   429                           ;initializer for _CURRENT_SPEED_R
   430  17B7  34FA               	retlw	250
   431  17B8  3400               	retlw	0
   432                           
   433                           	psect	idataBANK1
   434  0922                     __pidataBANK1:	
   435                           
   436                           ;initializer for _mazeGrid
   437  0922  340C               	retlw	12
   438  0923  3407               	retlw	7
   439  0924  340E               	retlw	14
   440  0925  340D               	retlw	13
   441  0926  3406               	retlw	6
   442  0927  3409               	retlw	9
   443  0928  3405               	retlw	5
   444  0929  3400               	retlw	0
   445  092A  3405               	retlw	5
   446  092B  3402               	retlw	2
   447  092C  340C               	retlw	12
   448  092D  3406               	retlw	6
   449  092E  340A               	retlw	10
   450  092F  340E               	retlw	14
   451  0930  340A               	retlw	10
   452  0931  340B               	retlw	11
   453  0932  3409               	retlw	9
   454  0933  3401               	retlw	1
   455  0934  3401               	retlw	1
   456  0935  3403               	retlw	3
   457                           
   458                           ;initializer for _mazeGridDefault
   459  0936  340C               	retlw	12
   460  0937  3407               	retlw	7
   461  0938  340E               	retlw	14
   462  0939  340D               	retlw	13
   463  093A  3406               	retlw	6
   464  093B  3409               	retlw	9
   465  093C  3405               	retlw	5
   466  093D  3400               	retlw	0
   467  093E  3405               	retlw	5
   468  093F  3402               	retlw	2
   469  0940  340C               	retlw	12
   470  0941  3406               	retlw	6
   471  0942  340A               	retlw	10
   472  0943  340E               	retlw	14
   473  0944  340A               	retlw	10
   474  0945  340B               	retlw	11
   475  0946  3409               	retlw	9
   476  0947  3401               	retlw	1
   477  0948  3401               	retlw	1
   478  0949  3403               	retlw	3
   479                           
   480                           	psect	idataBANK2
   481  09C6                     __pidataBANK2:	
   482                           
   483                           ;initializer for _gridWalls
   484  09C6  3400               	retlw	0
   485  09C7  3400               	retlw	0
   486  09C8  3400               	retlw	0
   487  09C9  3400               	retlw	0
   488  09CA  3400               	retlw	0
   489  09CB  3400               	retlw	0
   490  09CC  3400               	retlw	0
   491  09CD  3400               	retlw	0
   492  09CE  3401               	retlw	1
   493  09CF  3401               	retlw	1
   494  09D0  3401               	retlw	1
   495  09D1  3401               	retlw	1
   496  09D2  3401               	retlw	1
   497  09D3  3401               	retlw	1
   498  09D4  3401               	retlw	1
   499  09D5  3401               	retlw	1
   500  09D6  3400               	retlw	0
   501  09D7  3400               	retlw	0
   502  09D8  3400               	retlw	0
   503  09D9  3400               	retlw	0
   504  09DA  3401               	retlw	1
   505  09DB  3401               	retlw	1
   506  09DC  3401               	retlw	1
   507  09DD  3401               	retlw	1
   508  09DE  3400               	retlw	0
   509  09DF  3400               	retlw	0
   510  09E0  3400               	retlw	0
   511  09E1  3400               	retlw	0
   512  09E2  3401               	retlw	1
   513  09E3  3401               	retlw	1
   514  09E4  3401               	retlw	1
   515  09E5  3401               	retlw	1
   516  09E6  3400               	retlw	0
   517  09E7  3400               	retlw	0
   518  09E8  3401               	retlw	1
   519  09E9  3401               	retlw	1
   520  09EA  3400               	retlw	0
   521  09EB  3400               	retlw	0
   522  09EC  3401               	retlw	1
   523  09ED  3401               	retlw	1
   524  09EE  3400               	retlw	0
   525  09EF  3400               	retlw	0
   526  09F0  3401               	retlw	1
   527  09F1  3401               	retlw	1
   528  09F2  3400               	retlw	0
   529  09F3  3400               	retlw	0
   530  09F4  3401               	retlw	1
   531  09F5  3401               	retlw	1
   532  09F6  3400               	retlw	0
   533  09F7  3401               	retlw	1
   534  09F8  3400               	retlw	0
   535  09F9  3401               	retlw	1
   536  09FA  3400               	retlw	0
   537  09FB  3401               	retlw	1
   538  09FC  3400               	retlw	0
   539  09FD  3401               	retlw	1
   540  09FE  3400               	retlw	0
   541  09FF  3401               	retlw	1
   542  0A00  3400               	retlw	0
   543  0A01  3401               	retlw	1
   544  0A02  3400               	retlw	0
   545  0A03  3401               	retlw	1
   546  0A04  3400               	retlw	0
   547  0A05  3401               	retlw	1
   548  001F                     _ADCON0	set	31
   549  0005                     _PORTA	set	5
   550  0006                     _PORTB	set	6
   551  0007                     _PORTC	set	7
   552  0008                     _PORTD	set	8
   553  0009                     _PORTE	set	9
   554  001A                     _RCREG	set	26
   555  0018                     _RCSTA	set	24
   556  0013                     _SSPBUF	set	19
   557  0014                     _SSPCON	set	20
   558  0001                     _TMR0	set	1
   559  0019                     _TXREG	set	25
   560  001E                     _ADRESH	set	30
   561  005F                     _GIE	set	95
   562  00FA                     _GO	set	250
   563  005E                     _PEIE	set	94
   564  0030                     _RB0	set	48
   565  0031                     _RB1	set	49
   566  0032                     _RB2	set	50
   567  0033                     _RB3	set	51
   568  003A                     _RC2	set	58
   569  0065                     _RCIF	set	101
   570  0048                     _RE0	set	72
   571  0049                     _RE1	set	73
   572  004A                     _RE2	set	74
   573  0063                     _SSPIF	set	99
   574  005D                     _TMR0IE	set	93
   575  005A                     _TMR0IF	set	90
   576  009F                     _ADCON1	set	159
   577  009E                     _ADRESL	set	158
   578  0081                     _OPTION_REG	set	129
   579  0099                     _SPBRG	set	153
   580  0094                     _SSPSTAT	set	148
   581  0085                     _TRISA	set	133
   582  0086                     _TRISB	set	134
   583  0087                     _TRISC	set	135
   584  0088                     _TRISD	set	136
   585  0089                     _TRISE	set	137
   586  0098                     _TXSTA	set	152
   587  04C1                     _TRMT	set	1217
   588                           
   589                           	psect	strings
   590  0800                     __pstrings:	
   591  0800                     stringtab:	
   592  0800                     __stringtab:	
   593  0800                     stringcode:	
   594                           ;	String table - string pointers are 1 byte each
   595                           
   596  0800                     stringdir:	
   597  0800  3008               	movlw	high stringdir
   598  0801  008A               	movwf	10
   599  0802  0804               	movf	4,w
   600  0803  0A84               	incf	4,f
   601  0804  0782               	addwf	2,f
   602  0805                     __stringbase:	
   603  0805  3400               	retlw	0
   604  0806                     __end_of__stringtab:	
   605  0806                     STR_1:	
   606  0806  3457               	retlw	87	;'W'
   607  0807  346F               	retlw	111	;'o'
   608  0808  3472               	retlw	114	;'r'
   609  0809  346B               	retlw	107	;'k'
   610  080A  3469               	retlw	105	;'i'
   611  080B  346E               	retlw	110	;'n'
   612  080C  3467               	retlw	103	;'g'
   613  080D  342E               	retlw	46	;'.'
   614  080E  342E               	retlw	46	;'.'
   615  080F  342E               	retlw	46	;'.'
   616  0810  3400               	retlw	0
   617                           
   618                           ; #config settings
   619  0000                     
   620                           	psect	cinit
   621  0015                     start_initialization:	
   622  0015                     __initialization:	
   623                           
   624                           ; Initialize objects allocated to BANK2
   625  0015  1783               	bsf	3,7	;select IRP bank2
   626  0016  3050               	movlw	low (__pdataBANK2+64)
   627  0017  00FD               	movwf	btemp+-1
   628  0018  3009               	movlw	high __pidataBANK2
   629  0019  00FE               	movwf	btemp
   630  001A  30C6               	movlw	low __pidataBANK2
   631  001B  00FF               	movwf	btemp+1
   632  001C  3010               	movlw	low __pdataBANK2
   633  001D  0084               	movwf	4
   634  001E  160A  118A  27F3  120A  118A  	fcall	init_ram0
   635                           
   636                           ; Initialize objects allocated to BANK1
   637  0023  1383               	bcf	3,7	;select IRP bank0
   638  0024  30C8               	movlw	low (__pdataBANK1+40)
   639  0025  00FD               	movwf	btemp+-1
   640  0026  3009               	movlw	high __pidataBANK1
   641  0027  00FE               	movwf	btemp
   642  0028  3022               	movlw	low __pidataBANK1
   643  0029  00FF               	movwf	btemp+1
   644  002A  30A0               	movlw	low __pdataBANK1
   645  002B  0084               	movwf	4
   646  002C  160A  118A  27F3  120A  118A  	fcall	init_ram0
   647                           
   648                           ; Initialize objects allocated to BANK0
   649  0031  306D               	movlw	low (__pdataBANK0+7)
   650  0032  00FD               	movwf	btemp+-1
   651  0033  3017               	movlw	high __pidataBANK0
   652  0034  00FE               	movwf	btemp
   653  0035  30B2               	movlw	low __pidataBANK0
   654  0036  00FF               	movwf	btemp+1
   655  0037  3066               	movlw	low __pdataBANK0
   656  0038  0084               	movwf	4
   657  0039  160A  118A  27F3  120A  118A  	fcall	init_ram0
   658                           
   659                           ; Clear objects allocated to BANK3
   660  003E  1783               	bsf	3,7	;select IRP bank2
   661  003F  3090               	movlw	low __pbssBANK3
   662  0040  0084               	movwf	4
   663  0041  30D0               	movlw	low (__pbssBANK3+64)
   664  0042  160A  118A  27B9  120A  118A  	fcall	clear_ram0
   665                           
   666                           ; Clear objects allocated to BANK1
   667  0047  1383               	bcf	3,7	;select IRP bank0
   668  0048  30C8               	movlw	low __pbssBANK1
   669  0049  0084               	movwf	4
   670  004A  30D6               	movlw	low (__pbssBANK1+14)
   671  004B  160A  118A  27B9  120A  118A  	fcall	clear_ram0
   672                           
   673                           ; Clear objects allocated to BANK0
   674  0050  3045               	movlw	low __pbssBANK0
   675  0051  0084               	movwf	4
   676  0052  3066               	movlw	low (__pbssBANK0+33)
   677  0053  160A  118A  27B9   	fcall	clear_ram0
   678                           
   679                           ; Clear objects allocated to COMMON
   680  0056  01F6               	clrf	__pbssCOMMON& (0+127)
   681  0057  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   682  0058  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   683  0059  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   684                           
   685                           ; Clear objects allocated to BITCOMMON
   686  005A  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   687  005B                     end_of_initialization:	
   688                           ;End of C runtime variable initialization code
   689                           
   690  005B                     __end_of__initialization:	
   691  005B  0183               	clrf	3
   692  005C  120A  118A  285F   	ljmp	_main	;jump to C main() function
   693                           
   694                           	psect	bitbssCOMMON
   695  0380                     __pbitbssCOMMON:	
   696  0380                     _IR_Wall:	
   697  0380                     	ds	1
   698  0381                     _down:	
   699  0381                     	ds	1
   700  0382                     _left:	
   701  0382                     	ds	1
   702  0383                     _reset_flag:	
   703  0383                     	ds	1
   704  0384                     _right:	
   705  0384                     	ds	1
   706  0385                     _targets_found:	
   707  0385                     	ds	1
   708  0386                     _up:	
   709  0386                     	ds	1
   710                           
   711                           	psect	bssCOMMON
   712  0076                     __pbssCOMMON:	
   713  0076                     _angle:	
   714  0076                     	ds	2
   715  0078                     _lowByte:	
   716  0078                     	ds	1
   717  0079                     _highByte:	
   718  0079                     	ds	1
   719                           
   720                           	psect	bssBANK0
   721  0045                     __pbssBANK0:	
   722  0045                     _adcRAW:	
   723  0045                     	ds	2
   724  0047                     _distance:	
   725  0047                     	ds	2
   726  0049                     _loop:	
   727  0049                     	ds	2
   728  004B                     _LeftSpeedH:	
   729  004B                     	ds	1
   730  004C                     _LeftSpeedL:	
   731  004C                     	ds	1
   732  004D                     _PB7Counter:	
   733  004D                     	ds	1
   734  004E                     _PB8Counter:	
   735  004E                     	ds	1
   736  004F                     _RightSpeedH:	
   737  004F                     	ds	1
   738  0050                     _RightSpeedL:	
   739  0050                     	ds	1
   740  0051                     _c:	
   741  0051                     	ds	1
   742  0052                     _intersection_orientation:	
   743  0052                     	ds	1
   744  0053                     _orientation_path:	
   745  0053                     	ds	1
   746  0054                     _pathCount:	
   747  0054                     	ds	1
   748  0055                     _r:	
   749  0055                     	ds	1
   750  0056                     _radH:	
   751  0056                     	ds	1
   752  0057                     _radL:	
   753  0057                     	ds	1
   754  0058                     _speedH:	
   755  0058                     	ds	1
   756  0059                     _speedL:	
   757  0059                     	ds	1
   758  005A                     _targets:	
   759  005A                     	ds	1
   760  005B                     _x_goto:	
   761  005B                     	ds	1
   762  005C                     _x_int:	
   763  005C                     	ds	1
   764  005D                     _x_path:	
   765  005D                     	ds	1
   766  005E                     _x_target:	
   767  005E                     	ds	1
   768  005F                     _y:	
   769  005F                     	ds	1
   770  0060                     _y_goto:	
   771  0060                     	ds	1
   772  0061                     _y_int:	
   773  0061                     	ds	1
   774  0062                     _y_path:	
   775  0062                     	ds	1
   776  0063                     _y_target:	
   777  0063                     	ds	1
   778  0064                     _ADC_ADJUST:	
   779  0064                     	ds	2
   780                           
   781                           	psect	dataBANK0
   782  0066                     __pdataBANK0:	
   783  0066                     _orientation:	
   784  0066                     	ds	1
   785  0067                     _pathCountShortest:	
   786  0067                     	ds	1
   787  0068                     _x:	
   788  0068                     	ds	1
   789  0069                     _CURRENT_SPEED_L:	
   790  0069                     	ds	2
   791  006B                     _CURRENT_SPEED_R:	
   792  006B                     	ds	2
   793                           
   794                           	psect	bssBANK1
   795  00C8                     __pbssBANK1:	
   796  00C8                     _ADJUSTED_SPEED_L:	
   797  00C8                     	ds	2
   798  00CA                     _ADJUSTED_SPEED_R:	
   799  00CA                     	ds	2
   800  00CC                     _Distance:	
   801  00CC                     	ds	2
   802  00CE                     _VelocityLeft:	
   803  00CE                     	ds	2
   804  00D0                     _VelocityRight:	
   805  00D0                     	ds	2
   806  00D2                     _time_count:	
   807  00D2                     	ds	2
   808  00D4                     _timerLoop:	
   809  00D4                     	ds	2
   810                           
   811                           	psect	dataBANK1
   812  00A0                     __pdataBANK1:	
   813  00A0                     _mazeGrid:	
   814  00A0                     	ds	20
   815  00B4                     _mazeGridDefault:	
   816  00B4                     	ds	20
   817                           
   818                           	psect	bssBANK3
   819  0190                     __pbssBANK3:	
   820  0190                     _path:	
   821  0190                     	ds	32
   822  01B0                     _pathShortest:	
   823  01B0                     	ds	32
   824                           
   825                           	psect	dataBANK2
   826  0110                     __pdataBANK2:	
   827  0110                     _gridWalls:	
   828  0110                     	ds	64
   829                           
   830                           	psect	inittext
   831  17EF                     init_fetch0:	
   832                           ;	Called with low address in FSR and high address in W
   833                           
   834  17EF  087E               	movf	126,w
   835  17F0  008A               	movwf	10
   836  17F1  087F               	movf	127,w
   837  17F2  0082               	movwf	2
   838  17F3                     init_ram0:	
   839                           ;Called with:
   840                           ;	high address of idata address in btemp 
   841                           ;	low address of idata address in btemp+1 
   842                           ;	low address of data in FSR
   843                           ;	high address + 1 of data in btemp-1
   844                           
   845  17F3  27EF  160A  118A   	fcall	init_fetch0
   846  17F6  0080               	movwf	0
   847  17F7  0A84               	incf	4,f
   848  17F8  0804               	movf	4,w
   849  17F9  067D               	xorwf	125,w
   850  17FA  1903               	btfsc	3,2
   851  17FB  3400               	retlw	0
   852  17FC  0AFF               	incf	127,f
   853  17FD  1903               	btfsc	3,2
   854  17FE  0AFE               	incf	126,f
   855  17FF  2FF3               	goto	init_ram0
   856                           
   857                           	psect	clrtext
   858  17B9                     clear_ram0:	
   859                           ;	Called with FSR containing the base address, and
   860                           ;	W with the last address+1
   861                           
   862  17B9  0064               	clrwdt	;clear the watchdog before getting into this loop
   863  17BA                     clrloop0:	
   864  17BA  0180               	clrf	0	;clear RAM location pointed to by FSR
   865  17BB  0A84               	incf	4,f	;increment pointer
   866  17BC  0604               	xorwf	4,w	;XOR with final address
   867  17BD  1903               	btfsc	3,2	;have we reached the end yet?
   868  17BE  3400               	retlw	0	;all done for this memory range, return
   869  17BF  0604               	xorwf	4,w	;XOR again to restore value
   870  17C0  2FBA               	goto	clrloop0	;do the next byte
   871                           
   872                           	psect	cstackBANK1
   873  00D6                     __pcstackBANK1:	
   874  00D6                     main@controlByte:	
   875                           
   876                           ; 1 bytes @ 0x0
   877  00D6                     	ds	1
   878  00D7                     main@first:	
   879                           
   880                           ; 1 bytes @ 0x1
   881  00D7                     	ds	1
   882  00D8                     main@second:	
   883                           
   884                           ; 1 bytes @ 0x2
   885  00D8                     	ds	1
   886  00D9                     main@third:	
   887                           
   888                           ; 1 bytes @ 0x3
   889  00D9                     	ds	1
   890  00DA                     main@fourth:	
   891                           
   892                           ; 1 bytes @ 0x4
   893  00DA                     	ds	1
   894  00DB                     main@fifth:	
   895                           
   896                           ; 1 bytes @ 0x5
   897  00DB                     	ds	1
   898                           
   899                           	psect	cstackCOMMON
   900  0071                     __pcstackCOMMON:	
   901  0071                     ?_ADCMain:	
   902  0071                     ?_lcdSetCursor:	
   903                           ; 1 bytes @ 0x0
   904                           
   905  0071                     ?_lcdWriteString:	
   906                           ; 1 bytes @ 0x0
   907                           
   908  0071                     ?_ser_putch:	
   909                           ; 1 bytes @ 0x0
   910                           
   911  0071                     ?_ser_init:	
   912                           ; 1 bytes @ 0x0
   913                           
   914  0071                     ?_setupSPI:	
   915                           ; 1 bytes @ 0x0
   916                           
   917  0071                     ?_setupLCD:	
   918                           ; 1 bytes @ 0x0
   919                           
   920  0071                     ?_setupADC:	
   921                           ; 1 bytes @ 0x0
   922                           
   923  0071                     ?_spi_transfer:	
   924                           ; 1 bytes @ 0x0
   925                           
   926  0071                     ?_wallFollow:	
   927                           ; 1 bytes @ 0x0
   928                           
   929  0071                     ?_Drive1m:	
   930                           ; 1 bytes @ 0x0
   931                           
   932  0071                     ?_Turn90:	
   933                           ; 1 bytes @ 0x0
   934                           
   935  0071                     ?_TravelPath:	
   936                           ; 1 bytes @ 0x0
   937                           
   938  0071                     ?_re_route:	
   939                           ; 1 bytes @ 0x0
   940                           
   941  0071                     ?_isr:	
   942                           ; 1 bytes @ 0x0
   943                           
   944  0071                     ??_isr:	
   945                           ; 1 bytes @ 0x0
   946                           
   947  0071                     ?_main:	
   948                           ; 1 bytes @ 0x0
   949                           
   950  0071                     ?_lcdWriteControl:	
   951                           ; 1 bytes @ 0x0
   952                           
   953  0071                     ?_lcdWriteData:	
   954                           ; 1 bytes @ 0x0
   955                           
   956  0071                     ?_ser_getch:	
   957                           ; 1 bytes @ 0x0
   958                           
   959  0071                     ?_getADC:	
   960                           ; 1 bytes @ 0x0
   961                           
   962                           
   963                           ; 2 bytes @ 0x0
   964  0071                     	ds	5
   965                           
   966                           	psect	cstackBANK0
   967  0020                     __pcstackBANK0:	
   968  0020                     ??_ser_putch:	
   969  0020                     ??_ser_init:	
   970                           ; 1 bytes @ 0x0
   971                           
   972  0020                     ??_setupSPI:	
   973                           ; 1 bytes @ 0x0
   974                           
   975  0020                     ??_setupADC:	
   976                           ; 1 bytes @ 0x0
   977                           
   978  0020                     ??_spi_transfer:	
   979                           ; 1 bytes @ 0x0
   980                           
   981  0020                     ??_getADC:	
   982                           ; 1 bytes @ 0x0
   983                           
   984  0020                     ??_lcdWriteControl:	
   985                           ; 1 bytes @ 0x0
   986                           
   987  0020                     ??_lcdWriteData:	
   988                           ; 1 bytes @ 0x0
   989                           
   990  0020                     ??_ser_getch:	
   991                           ; 1 bytes @ 0x0
   992                           
   993  0020                     ?___bmul:	
   994                           ; 1 bytes @ 0x0
   995                           
   996  0020                     ?___wmul:	
   997                           ; 1 bytes @ 0x0
   998                           
   999  0020                     ?___lwdiv:	
  1000                           ; 2 bytes @ 0x0
  1001                           
  1002  0020                     ser_putch@c:	
  1003                           ; 2 bytes @ 0x0
  1004                           
  1005  0020                     ___bmul@multiplicand:	
  1006                           ; 1 bytes @ 0x0
  1007                           
  1008  0020                     ___wmul@multiplier:	
  1009                           ; 1 bytes @ 0x0
  1010                           
  1011  0020                     ___lwdiv@divisor:	
  1012                           ; 2 bytes @ 0x0
  1013                           
  1014                           
  1015                           ; 2 bytes @ 0x0
  1016  0020                     	ds	1
  1017  0021                     ?_DriveDirect:	
  1018  0021                     ?_Drive:	
  1019                           ; 1 bytes @ 0x1
  1020                           
  1021  0021                     ??___bmul:	
  1022                           ; 1 bytes @ 0x1
  1023                           
  1024  0021                     ser_getch@rxbyte:	
  1025                           ; 1 bytes @ 0x1
  1026                           
  1027  0021                     Drive@speedL:	
  1028                           ; 1 bytes @ 0x1
  1029                           
  1030  0021                     spi_transfer@temp:	
  1031                           ; 1 bytes @ 0x1
  1032                           
  1033  0021                     DriveDirect@VelocityRight:	
  1034                           ; 1 bytes @ 0x1
  1035                           
  1036                           
  1037                           ; 2 bytes @ 0x1
  1038  0021                     	ds	1
  1039  0022                     ?_getSensorData:	
  1040  0022                     lcdWriteControl@databyte:	
  1041                           ; 2 bytes @ 0x2
  1042                           
  1043  0022                     lcdWriteData@databyte:	
  1044                           ; 1 bytes @ 0x2
  1045                           
  1046  0022                     Drive@radH:	
  1047                           ; 1 bytes @ 0x2
  1048                           
  1049  0022                     getSensorData@bytes:	
  1050                           ; 1 bytes @ 0x2
  1051                           
  1052  0022                     spi_transfer@data:	
  1053                           ; 1 bytes @ 0x2
  1054                           
  1055  0022                     ___bmul@product:	
  1056                           ; 1 bytes @ 0x2
  1057                           
  1058  0022                     ___wmul@multiplicand:	
  1059                           ; 1 bytes @ 0x2
  1060                           
  1061  0022                     ___lwdiv@dividend:	
  1062                           ; 2 bytes @ 0x2
  1063                           
  1064                           
  1065                           ; 2 bytes @ 0x2
  1066  0022                     	ds	1
  1067  0023                     ??_lcdSetCursor:	
  1068  0023                     ??_lcdWriteString:	
  1069                           ; 1 bytes @ 0x3
  1070                           
  1071  0023                     ??_setupLCD:	
  1072                           ; 1 bytes @ 0x3
  1073                           
  1074  0023                     ?_lcdWriteToDigitBCD:	
  1075                           ; 1 bytes @ 0x3
  1076                           
  1077  0023                     lcdSetCursor@address:	
  1078                           ; 1 bytes @ 0x3
  1079                           
  1080  0023                     Drive@radL:	
  1081                           ; 1 bytes @ 0x3
  1082                           
  1083  0023                     ___bmul@multiplier:	
  1084                           ; 1 bytes @ 0x3
  1085                           
  1086  0023                     lcdWriteToDigitBCD@data:	
  1087                           ; 1 bytes @ 0x3
  1088                           
  1089  0023                     DriveDirect@VelocityLeft:	
  1090                           ; 2 bytes @ 0x3
  1091                           
  1092                           
  1093                           ; 2 bytes @ 0x3
  1094  0023                     	ds	1
  1095  0024                     ??_getSensorData:	
  1096  0024                     ??_Drive:	
  1097                           ; 1 bytes @ 0x4
  1098                           
  1099  0024                     ??___wmul:	
  1100                           ; 1 bytes @ 0x4
  1101                           
  1102  0024                     ??___lwdiv:	
  1103                           ; 1 bytes @ 0x4
  1104                           
  1105  0024                     lcdWriteString@s:	
  1106                           ; 1 bytes @ 0x4
  1107                           
  1108  0024                     Drive@speedH:	
  1109                           ; 1 bytes @ 0x4
  1110                           
  1111  0024                     ___wmul@product:	
  1112                           ; 1 bytes @ 0x4
  1113                           
  1114                           
  1115                           ; 2 bytes @ 0x4
  1116  0024                     	ds	1
  1117  0025                     ??_DriveDirect:	
  1118  0025                     ?_PathTo:	
  1119                           ; 1 bytes @ 0x5
  1120                           
  1121  0025                     ??_lcdWriteToDigitBCD:	
  1122                           ; 1 bytes @ 0x5
  1123                           
  1124  0025                     PathTo@y_target:	
  1125                           ; 1 bytes @ 0x5
  1126                           
  1127  0025                     ___lwdiv@counter:	
  1128                           ; 1 bytes @ 0x5
  1129                           
  1130  0025                     lcdWriteToDigitBCD@TensDigit:	
  1131                           ; 1 bytes @ 0x5
  1132                           
  1133                           
  1134                           ; 2 bytes @ 0x5
  1135  0025                     	ds	1
  1136  0026                     ??_PathTo:	
  1137  0026                     getSensorData@packetID:	
  1138                           ; 1 bytes @ 0x6
  1139                           
  1140  0026                     DriveDirect@data:	
  1141                           ; 1 bytes @ 0x6
  1142                           
  1143  0026                     ___lwdiv@quotient:	
  1144                           ; 2 bytes @ 0x6
  1145                           
  1146                           
  1147                           ; 2 bytes @ 0x6
  1148  0026                     	ds	1
  1149  0027                     lcdWriteToDigitBCD@HunsDigit:	
  1150  0027                     getSensorData@sensor:	
  1151                           ; 2 bytes @ 0x7
  1152                           
  1153                           
  1154                           ; 2 bytes @ 0x7
  1155  0027                     	ds	1
  1156  0028                     DriveDirect@data_467:	
  1157                           
  1158                           ; 2 bytes @ 0x8
  1159  0028                     	ds	1
  1160  0029                     lcdWriteToDigitBCD@ThouDigit:	
  1161                           
  1162                           ; 2 bytes @ 0x9
  1163  0029                     	ds	1
  1164  002A                     ??_Turn90:	
  1165                           
  1166                           ; 1 bytes @ 0xA
  1167  002A                     	ds	1
  1168  002B                     lcdWriteToDigitBCD@TenThouDigit:	
  1169                           
  1170                           ; 2 bytes @ 0xB
  1171  002B                     	ds	2
  1172  002D                     PathTo@x_target:	
  1173  002D                     Turn90@direction:	
  1174                           ; 1 bytes @ 0xD
  1175                           
  1176  002D                     lcdWriteToDigitBCD@OnesDigit:	
  1177                           ; 1 bytes @ 0xD
  1178                           
  1179                           
  1180                           ; 2 bytes @ 0xD
  1181  002D                     	ds	1
  1182  002E                     PathTo@sum:	
  1183                           
  1184                           ; 1 bytes @ 0xE
  1185  002E                     	ds	1
  1186  002F                     ??_ADCMain:	
  1187  002F                     ??_wallFollow:	
  1188                           ; 1 bytes @ 0xF
  1189                           
  1190  002F                     PathTo@loop:	
  1191                           ; 1 bytes @ 0xF
  1192                           
  1193                           
  1194                           ; 2 bytes @ 0xF
  1195  002F                     	ds	4
  1196  0033                     wallFollow@setADCdist:	
  1197                           
  1198                           ; 2 bytes @ 0x13
  1199  0033                     	ds	2
  1200  0035                     ??_Drive1m:	
  1201                           
  1202                           ; 1 bytes @ 0x15
  1203  0035                     	ds	3
  1204  0038                     Drive1m@n:	
  1205                           
  1206                           ; 1 bytes @ 0x18
  1207  0038                     	ds	1
  1208  0039                     Drive1m@omni_IR:	
  1209                           
  1210                           ; 1 bytes @ 0x19
  1211  0039                     	ds	1
  1212  003A                     ??_TravelPath:	
  1213                           
  1214                           ; 1 bytes @ 0x1A
  1215  003A                     	ds	2
  1216  003C                     TravelPath@n:	
  1217                           
  1218                           ; 1 bytes @ 0x1C
  1219  003C                     	ds	1
  1220  003D                     ??_re_route:	
  1221                           
  1222                           ; 1 bytes @ 0x1D
  1223  003D                     	ds	5
  1224  0042                     ??_main:	
  1225                           
  1226                           ; 1 bytes @ 0x22
  1227  0042                     	ds	3
  1228                           
  1229                           	psect	maintext
  1230  005F                     __pmaintext:	
  1231 ;;
  1232 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1233 ;;
  1234 ;; *************** function _main *****************
  1235 ;; Defined at:
  1236 ;;		line 470 in file "main.c"
  1237 ;; Parameters:    Size  Location     Type
  1238 ;;		None
  1239 ;; Auto vars:     Size  Location     Type
  1240 ;;  fifth           1    5[BANK1 ] unsigned char 
  1241 ;;  fourth          1    4[BANK1 ] unsigned char 
  1242 ;;  third           1    3[BANK1 ] unsigned char 
  1243 ;;  second          1    2[BANK1 ] unsigned char 
  1244 ;;  first           1    1[BANK1 ] unsigned char 
  1245 ;;  controlByte     1    0[BANK1 ] unsigned char 
  1246 ;; Return value:  Size  Location     Type
  1247 ;;                  1    wreg      void 
  1248 ;; Registers used:
  1249 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1250 ;; Tracked objects:
  1251 ;;		On entry : B00/0
  1252 ;;		On exit  : 0/0
  1253 ;;		Unchanged: 0/0
  1254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1255 ;;      Params:         0       0       0       0       0
  1256 ;;      Locals:         0       0       6       0       0
  1257 ;;      Temps:          0       3       0       0       0
  1258 ;;      Totals:         0       3       6       0       0
  1259 ;;Total ram usage:        9 bytes
  1260 ;; Hardware stack levels required when called:    8
  1261 ;; This function calls:
  1262 ;;		_PathTo
  1263 ;;		_TravelPath
  1264 ;;		_re_route
  1265 ;;		_ser_init
  1266 ;;		_ser_putch
  1267 ;;		_setupADC
  1268 ;;		_setupLCD
  1269 ;;		_setupSPI
  1270 ;;		_spi_transfer
  1271 ;; This function is called by:
  1272 ;;		Startup code after reset
  1273 ;; This function uses a non-reentrant model
  1274 ;;
  1275                           
  1276                           
  1277                           ;psect for function _main
  1278  005F                     _main:	
  1279                           
  1280                           ;main.c: 472: _delay((unsigned long)((5000)*(20000000/4000.0)));
  1281                           
  1282                           ;incstack = 0
  1283                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1284  005F  307F               	movlw	127
  1285  0060  1283               	bcf	3,5	;RP0=0, select bank0
  1286  0061  1303               	bcf	3,6	;RP1=0, select bank0
  1287  0062  00C4               	movwf	??_main+2
  1288  0063  30D4               	movlw	212
  1289  0064  00C3               	movwf	??_main+1
  1290  0065  30AE               	movlw	174
  1291  0066  00C2               	movwf	??_main
  1292  0067                     u3437:	
  1293  0067  0BC2               	decfsz	??_main,f
  1294  0068  2867               	goto	u3437
  1295  0069  0BC3               	decfsz	??_main+1,f
  1296  006A  2867               	goto	u3437
  1297  006B  0BC4               	decfsz	??_main+2,f
  1298  006C  2867               	goto	u3437
  1299  006D  286E               	nop2
  1300                           
  1301                           ;main.c: 474: ser_init();
  1302  006E  160A  118A  27E0  120A  118A  	fcall	_ser_init
  1303                           
  1304                           ;main.c: 475: setupSPI();
  1305  0073  120A  158A  2078  120A  118A  	fcall	_setupSPI
  1306                           
  1307                           ;main.c: 476: setupLCD();
  1308  0078  120A  118A  27C7  120A  118A  	fcall	_setupLCD
  1309                           
  1310                           ;main.c: 477: setupADC();
  1311  007D  120A  158A  2062  120A  118A  	fcall	_setupADC
  1312                           
  1313                           ;main.c: 479: TRISB = 0b00000011;
  1314  0082  3003               	movlw	3
  1315  0083  1683               	bsf	3,5	;RP0=1, select bank1
  1316  0084  1303               	bcf	3,6	;RP1=0, select bank1
  1317  0085  0086               	movwf	6	;volatile
  1318                           
  1319                           ;main.c: 480: PORTB = 0b11111100;
  1320  0086  30FC               	movlw	252
  1321  0087  1283               	bcf	3,5	;RP0=0, select bank0
  1322  0088  1303               	bcf	3,6	;RP1=0, select bank0
  1323  0089  0086               	movwf	6	;volatile
  1324                           
  1325                           ;main.c: 482: unsigned char controlByte = 0b00001101;
  1326  008A  300D               	movlw	13
  1327  008B  00C2               	movwf	??_main
  1328  008C  0842               	movf	??_main,w
  1329  008D  1683               	bsf	3,5	;RP0=1, select bank1
  1330  008E  1303               	bcf	3,6	;RP1=0, select bank1
  1331  008F  00D6               	movwf	main@controlByte^(0+128)
  1332                           
  1333                           ;main.c: 483: spi_transfer(controlByte);
  1334  0090  0856               	movf	main@controlByte^(0+128),w
  1335  0091  120A  118A  27F0  120A  118A  	fcall	_spi_transfer
  1336                           
  1337                           ;main.c: 485: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1338  0096  301A               	movlw	26
  1339  0097  1283               	bcf	3,5	;RP0=0, select bank0
  1340  0098  1303               	bcf	3,6	;RP1=0, select bank0
  1341  0099  00C4               	movwf	??_main+2
  1342  009A  305E               	movlw	94
  1343  009B  00C3               	movwf	??_main+1
  1344  009C  3086               	movlw	134
  1345  009D  00C2               	movwf	??_main
  1346  009E                     u3447:	
  1347  009E  0BC2               	decfsz	??_main,f
  1348  009F  289E               	goto	u3447
  1349  00A0  0BC3               	decfsz	??_main+1,f
  1350  00A1  289E               	goto	u3447
  1351  00A2  0BC4               	decfsz	??_main+2,f
  1352  00A3  289E               	goto	u3447
  1353  00A4  0000               	nop
  1354                           
  1355                           ;main.c: 486: ser_putch(128);
  1356  00A5  3080               	movlw	128
  1357  00A6  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1358                           
  1359                           ;main.c: 487: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1360  00AB  301A               	movlw	26
  1361  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  1362  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  1363  00AE  00C4               	movwf	??_main+2
  1364  00AF  305E               	movlw	94
  1365  00B0  00C3               	movwf	??_main+1
  1366  00B1  3086               	movlw	134
  1367  00B2  00C2               	movwf	??_main
  1368  00B3                     u3457:	
  1369  00B3  0BC2               	decfsz	??_main,f
  1370  00B4  28B3               	goto	u3457
  1371  00B5  0BC3               	decfsz	??_main+1,f
  1372  00B6  28B3               	goto	u3457
  1373  00B7  0BC4               	decfsz	??_main+2,f
  1374  00B8  28B3               	goto	u3457
  1375  00B9  0000               	nop
  1376                           
  1377                           ;main.c: 488: ser_putch(132);
  1378  00BA  3084               	movlw	132
  1379  00BB  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1380                           
  1381                           ;main.c: 489: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1382  00C0  301A               	movlw	26
  1383  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  1384  00C2  1303               	bcf	3,6	;RP1=0, select bank0
  1385  00C3  00C4               	movwf	??_main+2
  1386  00C4  305E               	movlw	94
  1387  00C5  00C3               	movwf	??_main+1
  1388  00C6  3086               	movlw	134
  1389  00C7  00C2               	movwf	??_main
  1390  00C8                     u3467:	
  1391  00C8  0BC2               	decfsz	??_main,f
  1392  00C9  28C8               	goto	u3467
  1393  00CA  0BC3               	decfsz	??_main+1,f
  1394  00CB  28C8               	goto	u3467
  1395  00CC  0BC4               	decfsz	??_main+2,f
  1396  00CD  28C8               	goto	u3467
  1397  00CE  0000               	nop
  1398                           
  1399                           ;main.c: 492: x = 1;
  1400  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  1401  00D0  1303               	bcf	3,6	;RP1=0, select bank0
  1402  00D1  01E8               	clrf	_x
  1403  00D2  0AE8               	incf	_x,f
  1404                           
  1405                           ;main.c: 493: y = 0;
  1406  00D3  01DF               	clrf	_y
  1407                           
  1408                           ;main.c: 494: orientation = 3;
  1409  00D4  3003               	movlw	3
  1410  00D5  00C2               	movwf	??_main
  1411  00D6  0842               	movf	??_main,w
  1412  00D7  00E6               	movwf	_orientation
  1413                           
  1414                           ;main.c: 498: ser_putch(140);
  1415  00D8  308C               	movlw	140
  1416  00D9  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1417                           
  1418                           ;main.c: 499: ser_putch(2);
  1419  00DE  3002               	movlw	2
  1420  00DF  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1421                           
  1422                           ;main.c: 500: ser_putch(10);
  1423  00E4  300A               	movlw	10
  1424  00E5  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1425                           
  1426                           ;main.c: 501: ser_putch(67);
  1427  00EA  3043               	movlw	67
  1428  00EB  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1429                           
  1430                           ;main.c: 502: ser_putch(32);
  1431  00F0  3020               	movlw	32
  1432  00F1  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1433                           
  1434                           ;main.c: 503: ser_putch(77);
  1435  00F6  304D               	movlw	77
  1436  00F7  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1437                           
  1438                           ;main.c: 504: ser_putch(16);
  1439  00FC  3010               	movlw	16
  1440  00FD  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1441                           
  1442                           ;main.c: 505: ser_putch(77);
  1443  0102  304D               	movlw	77
  1444  0103  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1445                           
  1446                           ;main.c: 506: ser_putch(16);
  1447  0108  3010               	movlw	16
  1448  0109  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1449                           
  1450                           ;main.c: 507: ser_putch(77);
  1451  010E  304D               	movlw	77
  1452  010F  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1453                           
  1454                           ;main.c: 508: ser_putch(16);
  1455  0114  3010               	movlw	16
  1456  0115  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1457                           
  1458                           ;main.c: 509: ser_putch(77);
  1459  011A  304D               	movlw	77
  1460  011B  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1461                           
  1462                           ;main.c: 510: ser_putch(16);
  1463  0120  3010               	movlw	16
  1464  0121  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1465                           
  1466                           ;main.c: 511: ser_putch(76);
  1467  0126  304C               	movlw	76
  1468  0127  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1469                           
  1470                           ;main.c: 512: ser_putch(16);
  1471  012C  3010               	movlw	16
  1472  012D  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1473                           
  1474                           ;main.c: 513: ser_putch(74);
  1475  0132  304A               	movlw	74
  1476  0133  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1477                           
  1478                           ;main.c: 514: ser_putch(16);
  1479  0138  3010               	movlw	16
  1480  0139  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1481                           
  1482                           ;main.c: 515: ser_putch(72);
  1483  013E  3048               	movlw	72
  1484  013F  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1485                           
  1486                           ;main.c: 516: ser_putch(32);
  1487  0144  3020               	movlw	32
  1488  0145  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1489                           
  1490                           ;main.c: 517: ser_putch(79);
  1491  014A  304F               	movlw	79
  1492  014B  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1493                           
  1494                           ;main.c: 518: ser_putch(16);
  1495  0150  3010               	movlw	16
  1496  0151  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1497                           
  1498                           ;main.c: 519: ser_putch(84);
  1499  0156  3054               	movlw	84
  1500  0157  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1501                           
  1502                           ;main.c: 520: ser_putch(48);
  1503  015C  3030               	movlw	48
  1504  015D  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1505                           
  1506                           ;main.c: 523: char first = 16;
  1507  0162  3010               	movlw	16
  1508  0163  1283               	bcf	3,5	;RP0=0, select bank0
  1509  0164  1303               	bcf	3,6	;RP1=0, select bank0
  1510  0165  00C2               	movwf	??_main
  1511  0166  0842               	movf	??_main,w
  1512  0167  1683               	bsf	3,5	;RP0=1, select bank1
  1513  0168  1303               	bcf	3,6	;RP1=0, select bank1
  1514  0169  00D7               	movwf	main@first^(0+128)
  1515                           
  1516                           ;main.c: 524: char second = 8;
  1517  016A  3008               	movlw	8
  1518  016B  1283               	bcf	3,5	;RP0=0, select bank0
  1519  016C  1303               	bcf	3,6	;RP1=0, select bank0
  1520  016D  00C2               	movwf	??_main
  1521  016E  0842               	movf	??_main,w
  1522  016F  1683               	bsf	3,5	;RP0=1, select bank1
  1523  0170  1303               	bcf	3,6	;RP1=0, select bank1
  1524  0171  00D8               	movwf	main@second^(0+128)
  1525                           
  1526                           ;main.c: 525: char third = 12;
  1527  0172  300C               	movlw	12
  1528  0173  1283               	bcf	3,5	;RP0=0, select bank0
  1529  0174  1303               	bcf	3,6	;RP1=0, select bank0
  1530  0175  00C2               	movwf	??_main
  1531  0176  0842               	movf	??_main,w
  1532  0177  1683               	bsf	3,5	;RP0=1, select bank1
  1533  0178  1303               	bcf	3,6	;RP1=0, select bank1
  1534  0179  00D9               	movwf	main@third^(0+128)
  1535                           
  1536                           ;main.c: 526: char fourth = 36;
  1537  017A  3024               	movlw	36
  1538  017B  1283               	bcf	3,5	;RP0=0, select bank0
  1539  017C  1303               	bcf	3,6	;RP1=0, select bank0
  1540  017D  00C2               	movwf	??_main
  1541  017E  0842               	movf	??_main,w
  1542  017F  1683               	bsf	3,5	;RP0=1, select bank1
  1543  0180  1303               	bcf	3,6	;RP1=0, select bank1
  1544  0181  00DA               	movwf	main@fourth^(0+128)
  1545                           
  1546                           ;main.c: 527: char fifth = 32;
  1547  0182  3020               	movlw	32
  1548  0183  1283               	bcf	3,5	;RP0=0, select bank0
  1549  0184  1303               	bcf	3,6	;RP1=0, select bank0
  1550  0185  00C2               	movwf	??_main
  1551  0186  0842               	movf	??_main,w
  1552  0187  1683               	bsf	3,5	;RP0=1, select bank1
  1553  0188  1303               	bcf	3,6	;RP1=0, select bank1
  1554  0189  00DB               	movwf	main@fifth^(0+128)
  1555                           
  1556                           ;main.c: 531: ser_putch(140);
  1557  018A  308C               	movlw	140
  1558  018B  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1559                           
  1560                           ;main.c: 532: ser_putch(3);
  1561  0190  3003               	movlw	3
  1562  0191  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1563                           
  1564                           ;main.c: 533: ser_putch(16);
  1565  0196  3010               	movlw	16
  1566  0197  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1567                           
  1568                           ;main.c: 534: ser_putch(62);
  1569  019C  303E               	movlw	62
  1570  019D  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1571                           
  1572                           ;main.c: 535: ser_putch(first);
  1573  01A2  1683               	bsf	3,5	;RP0=1, select bank1
  1574  01A3  1303               	bcf	3,6	;RP1=0, select bank1
  1575  01A4  0857               	movf	main@first^(0+128),w
  1576  01A5  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1577                           
  1578                           ;main.c: 536: ser_putch(69);
  1579  01AA  3045               	movlw	69
  1580  01AB  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1581                           
  1582                           ;main.c: 537: ser_putch(second);
  1583  01B0  1683               	bsf	3,5	;RP0=1, select bank1
  1584  01B1  1303               	bcf	3,6	;RP1=0, select bank1
  1585  01B2  0858               	movf	main@second^(0+128),w
  1586  01B3  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1587                           
  1588                           ;main.c: 538: ser_putch(62);
  1589  01B8  303E               	movlw	62
  1590  01B9  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1591                           
  1592                           ;main.c: 539: ser_putch(third);
  1593  01BE  1683               	bsf	3,5	;RP0=1, select bank1
  1594  01BF  1303               	bcf	3,6	;RP1=0, select bank1
  1595  01C0  0859               	movf	main@third^(0+128),w
  1596  01C1  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1597                           
  1598                           ;main.c: 540: ser_putch(65);
  1599  01C6  3041               	movlw	65
  1600  01C7  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1601                           
  1602                           ;main.c: 541: ser_putch(fourth);
  1603  01CC  1683               	bsf	3,5	;RP0=1, select bank1
  1604  01CD  1303               	bcf	3,6	;RP1=0, select bank1
  1605  01CE  085A               	movf	main@fourth^(0+128),w
  1606  01CF  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1607                           
  1608                           ;main.c: 542: ser_putch(62);
  1609  01D4  303E               	movlw	62
  1610  01D5  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1611                           
  1612                           ;main.c: 543: ser_putch(fifth);
  1613  01DA  1683               	bsf	3,5	;RP0=1, select bank1
  1614  01DB  1303               	bcf	3,6	;RP1=0, select bank1
  1615  01DC  085B               	movf	main@fifth^(0+128),w
  1616  01DD  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1617                           
  1618                           ;main.c: 545: ser_putch(65);
  1619  01E2  3041               	movlw	65
  1620  01E3  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1621                           
  1622                           ;main.c: 546: ser_putch(first);
  1623  01E8  1683               	bsf	3,5	;RP0=1, select bank1
  1624  01E9  1303               	bcf	3,6	;RP1=0, select bank1
  1625  01EA  0857               	movf	main@first^(0+128),w
  1626  01EB  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1627                           
  1628                           ;main.c: 547: ser_putch(62);
  1629  01F0  303E               	movlw	62
  1630  01F1  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1631                           
  1632                           ;main.c: 548: ser_putch(second);
  1633  01F6  1683               	bsf	3,5	;RP0=1, select bank1
  1634  01F7  1303               	bcf	3,6	;RP1=0, select bank1
  1635  01F8  0858               	movf	main@second^(0+128),w
  1636  01F9  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1637                           
  1638                           ;main.c: 549: ser_putch(65);
  1639  01FE  3041               	movlw	65
  1640  01FF  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1641                           
  1642                           ;main.c: 550: ser_putch(third);
  1643  0204  1683               	bsf	3,5	;RP0=1, select bank1
  1644  0205  1303               	bcf	3,6	;RP1=0, select bank1
  1645  0206  0859               	movf	main@third^(0+128),w
  1646  0207  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1647                           
  1648                           ;main.c: 551: ser_putch(69);
  1649  020C  3045               	movlw	69
  1650  020D  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1651                           
  1652                           ;main.c: 552: ser_putch(fourth);
  1653  0212  1683               	bsf	3,5	;RP0=1, select bank1
  1654  0213  1303               	bcf	3,6	;RP1=0, select bank1
  1655  0214  085A               	movf	main@fourth^(0+128),w
  1656  0215  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1657                           
  1658                           ;main.c: 553: ser_putch(65);
  1659  021A  3041               	movlw	65
  1660  021B  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1661                           
  1662                           ;main.c: 554: ser_putch(fifth);
  1663  0220  1683               	bsf	3,5	;RP0=1, select bank1
  1664  0221  1303               	bcf	3,6	;RP1=0, select bank1
  1665  0222  085B               	movf	main@fifth^(0+128),w
  1666  0223  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1667                           
  1668                           ;main.c: 556: ser_putch(69);
  1669  0228  3045               	movlw	69
  1670  0229  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1671                           
  1672                           ;main.c: 557: ser_putch(first);
  1673  022E  1683               	bsf	3,5	;RP0=1, select bank1
  1674  022F  1303               	bcf	3,6	;RP1=0, select bank1
  1675  0230  0857               	movf	main@first^(0+128),w
  1676  0231  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1677                           
  1678                           ;main.c: 558: ser_putch(65);
  1679  0236  3041               	movlw	65
  1680  0237  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1681                           
  1682                           ;main.c: 559: ser_putch(second);
  1683  023C  1683               	bsf	3,5	;RP0=1, select bank1
  1684  023D  1303               	bcf	3,6	;RP1=0, select bank1
  1685  023E  0858               	movf	main@second^(0+128),w
  1686  023F  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1687                           
  1688                           ;main.c: 560: ser_putch(69);
  1689  0244  3045               	movlw	69
  1690  0245  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1691                           
  1692                           ;main.c: 561: ser_putch(third);
  1693  024A  1683               	bsf	3,5	;RP0=1, select bank1
  1694  024B  1303               	bcf	3,6	;RP1=0, select bank1
  1695  024C  0859               	movf	main@third^(0+128),w
  1696  024D  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1697                           
  1698                           ;main.c: 562: ser_putch(60);
  1699  0252  303C               	movlw	60
  1700  0253  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1701                           
  1702                           ;main.c: 563: ser_putch(fourth);
  1703  0258  1683               	bsf	3,5	;RP0=1, select bank1
  1704  0259  1303               	bcf	3,6	;RP1=0, select bank1
  1705  025A  085A               	movf	main@fourth^(0+128),w
  1706  025B  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1707                           
  1708                           ;main.c: 564: ser_putch(48);
  1709  0260  3030               	movlw	48
  1710  0261  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1711                           
  1712                           ;main.c: 565: ser_putch(fifth);
  1713  0266  1683               	bsf	3,5	;RP0=1, select bank1
  1714  0267  1303               	bcf	3,6	;RP1=0, select bank1
  1715  0268  085B               	movf	main@fifth^(0+128),w
  1716  0269  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1717                           
  1718                           ;main.c: 567: ser_putch(65);
  1719  026E  3041               	movlw	65
  1720  026F  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1721                           
  1722                           ;main.c: 568: ser_putch(16);
  1723  0274  3010               	movlw	16
  1724  0275  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1725                           
  1726                           ;main.c: 571: ser_putch(140);
  1727  027A  308C               	movlw	140
  1728  027B  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1729                           
  1730                           ;main.c: 572: ser_putch(4);
  1731  0280  3004               	movlw	4
  1732  0281  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1733                           
  1734                           ;main.c: 573: ser_putch(3);
  1735  0286  3003               	movlw	3
  1736  0287  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1737                           
  1738                           ;main.c: 574: ser_putch(60);
  1739  028C  303C               	movlw	60
  1740  028D  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1741                           
  1742                           ;main.c: 575: ser_putch(12);
  1743  0292  300C               	movlw	12
  1744  0293  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1745                           
  1746                           ;main.c: 576: ser_putch(65);
  1747  0298  3041               	movlw	65
  1748  0299  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1749                           
  1750                           ;main.c: 577: ser_putch(12);
  1751  029E  300C               	movlw	12
  1752  029F  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1753                           
  1754                           ;main.c: 578: ser_putch(69);
  1755  02A4  3045               	movlw	69
  1756  02A5  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1757                           
  1758                           ;main.c: 579: ser_putch(96);
  1759  02AA  3060               	movlw	96
  1760  02AB  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1761                           
  1762                           ;main.c: 583: ser_putch(140);
  1763  02B0  308C               	movlw	140
  1764  02B1  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1765                           
  1766                           ;main.c: 584: ser_putch(5);
  1767  02B6  3005               	movlw	5
  1768  02B7  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1769                           
  1770                           ;main.c: 585: ser_putch(11);
  1771  02BC  300B               	movlw	11
  1772  02BD  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1773                           
  1774                           ;main.c: 586: ser_putch(70);
  1775  02C2  3046               	movlw	70
  1776  02C3  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1777                           
  1778                           ;main.c: 587: ser_putch(12);
  1779  02C8  300C               	movlw	12
  1780  02C9  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1781                           
  1782                           ;main.c: 588: ser_putch(67);
  1783  02CE  3043               	movlw	67
  1784  02CF  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1785                           
  1786                           ;main.c: 589: ser_putch(12);
  1787  02D4  300C               	movlw	12
  1788  02D5  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1789                           
  1790                           ;main.c: 590: ser_putch(62);
  1791  02DA  303E               	movlw	62
  1792  02DB  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1793                           
  1794                           ;main.c: 591: ser_putch(96);
  1795  02E0  3060               	movlw	96
  1796  02E1  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1797                           
  1798                           ;main.c: 592: ser_putch(70);
  1799  02E6  3046               	movlw	70
  1800  02E7  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1801                           
  1802                           ;main.c: 593: ser_putch(12);
  1803  02EC  300C               	movlw	12
  1804  02ED  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1805                           
  1806                           ;main.c: 594: ser_putch(67);
  1807  02F2  3043               	movlw	67
  1808  02F3  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1809                           
  1810                           ;main.c: 595: ser_putch(12);
  1811  02F8  300C               	movlw	12
  1812  02F9  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1813                           
  1814                           ;main.c: 596: ser_putch(61);
  1815  02FE  303D               	movlw	61
  1816  02FF  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1817                           
  1818                           ;main.c: 597: ser_putch(96);
  1819  0304  3060               	movlw	96
  1820  0305  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1821                           
  1822                           ;main.c: 598: ser_putch(70);
  1823  030A  3046               	movlw	70
  1824  030B  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1825                           
  1826                           ;main.c: 599: ser_putch(12);
  1827  0310  300C               	movlw	12
  1828  0311  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1829                           
  1830                           ;main.c: 600: ser_putch(67);
  1831  0316  3043               	movlw	67
  1832  0317  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1833                           
  1834                           ;main.c: 601: ser_putch(12);
  1835  031C  300C               	movlw	12
  1836  031D  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1837                           
  1838                           ;main.c: 602: ser_putch(60);
  1839  0322  303C               	movlw	60
  1840  0323  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1841                           
  1842                           ;main.c: 603: ser_putch(96);
  1843  0328  3060               	movlw	96
  1844  0329  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1845                           
  1846                           ;main.c: 604: ser_putch(70);
  1847  032E  3046               	movlw	70
  1848  032F  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1849                           
  1850                           ;main.c: 605: ser_putch(12);
  1851  0334  300C               	movlw	12
  1852  0335  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1853                           
  1854                           ;main.c: 606: ser_putch(60);
  1855  033A  303C               	movlw	60
  1856  033B  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1857                           
  1858                           ;main.c: 607: ser_putch(20);
  1859  0340  3014               	movlw	20
  1860  0341  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1861                           
  1862                           ;main.c: 610: ser_putch(140);
  1863  0346  308C               	movlw	140
  1864  0347  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1865                           
  1866                           ;main.c: 611: ser_putch(6);
  1867  034C  3006               	movlw	6
  1868  034D  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1869                           
  1870                           ;main.c: 612: ser_putch(11);
  1871  0352  300B               	movlw	11
  1872  0353  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1873                           
  1874                           ;main.c: 613: ser_putch(55);
  1875  0358  3037               	movlw	55
  1876  0359  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1877                           
  1878                           ;main.c: 614: ser_putch(22);
  1879  035E  3016               	movlw	22
  1880  035F  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1881                           
  1882                           ;main.c: 615: ser_putch(55);
  1883  0364  3037               	movlw	55
  1884  0365  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1885                           
  1886                           ;main.c: 616: ser_putch(22);
  1887  036A  3016               	movlw	22
  1888  036B  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1889                           
  1890                           ;main.c: 617: ser_putch(0);
  1891  0370  3000               	movlw	0
  1892  0371  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1893                           
  1894                           ;main.c: 618: ser_putch(2);
  1895  0376  3002               	movlw	2
  1896  0377  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1897                           
  1898                           ;main.c: 619: ser_putch(58);
  1899  037C  303A               	movlw	58
  1900  037D  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1901                           
  1902                           ;main.c: 620: ser_putch(18);
  1903  0382  3012               	movlw	18
  1904  0383  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1905                           
  1906                           ;main.c: 621: ser_putch(48);
  1907  0388  3030               	movlw	48
  1908  0389  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1909                           
  1910                           ;main.c: 622: ser_putch(24);
  1911  038E  3018               	movlw	24
  1912  038F  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1913                           
  1914                           ;main.c: 623: ser_putch(0);
  1915  0394  3000               	movlw	0
  1916  0395  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1917                           
  1918                           ;main.c: 624: ser_putch(10);
  1919  039A  300A               	movlw	10
  1920  039B  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1921                           
  1922                           ;main.c: 625: ser_putch(55);
  1923  03A0  3037               	movlw	55
  1924  03A1  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1925                           
  1926                           ;main.c: 626: ser_putch(22);
  1927  03A6  3016               	movlw	22
  1928  03A7  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1929                           
  1930                           ;main.c: 627: ser_putch(55);
  1931  03AC  3037               	movlw	55
  1932  03AD  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1933                           
  1934                           ;main.c: 628: ser_putch(22);
  1935  03B2  3016               	movlw	22
  1936  03B3  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1937                           
  1938                           ;main.c: 629: ser_putch(0);
  1939  03B8  3000               	movlw	0
  1940  03B9  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1941                           
  1942                           ;main.c: 630: ser_putch(2);
  1943  03BE  3002               	movlw	2
  1944  03BF  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1945                           
  1946                           ;main.c: 631: ser_putch(53);
  1947  03C4  3035               	movlw	53
  1948  03C5  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1949                           
  1950                           ;main.c: 632: ser_putch(18);
  1951  03CA  3012               	movlw	18
  1952  03CB  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1953                           
  1954                           ;main.c: 633: ser_putch(54);
  1955  03D0  3036               	movlw	54
  1956  03D1  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1957                           
  1958                           ;main.c: 634: ser_putch(24);
  1959  03D6  3018               	movlw	24
  1960  03D7  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1961  03DC                     l4645:	
  1962                           ;main.c: 642: while(1){
  1963                           
  1964                           
  1965                           ;main.c: 644: if(PB7Counter >= 10 && !RB1== 0){
  1966  03DC  300A               	movlw	10
  1967  03DD  1283               	bcf	3,5	;RP0=0, select bank0
  1968  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  1969  03DF  024D               	subwf	_PB7Counter,w
  1970  03E0  1803               	btfsc	3,0
  1971  03E1  1C86               	btfss	6,1	;volatile
  1972  03E2  2C28               	goto	l4661
  1973                           
  1974                           ;main.c: 647: ser_putch(141);
  1975  03E3  308D               	movlw	141
  1976  03E4  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1977                           
  1978                           ;main.c: 648: ser_putch(6);
  1979  03E9  3006               	movlw	6
  1980  03EA  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  1981                           
  1982                           ;main.c: 649: _delay((unsigned long)((3000)*(20000000/4000.0)));
  1983  03EF  304D               	movlw	77
  1984  03F0  1283               	bcf	3,5	;RP0=0, select bank0
  1985  03F1  1303               	bcf	3,6	;RP1=0, select bank0
  1986  03F2  00C4               	movwf	??_main+2
  1987  03F3  3019               	movlw	25
  1988  03F4  00C3               	movwf	??_main+1
  1989  03F5  309A               	movlw	154
  1990  03F6  00C2               	movwf	??_main
  1991  03F7                     u3477:	
  1992  03F7  0BC2               	decfsz	??_main,f
  1993  03F8  2BF7               	goto	u3477
  1994  03F9  0BC3               	decfsz	??_main+1,f
  1995  03FA  2BF7               	goto	u3477
  1996  03FB  0BC4               	decfsz	??_main+2,f
  1997  03FC  2BF7               	goto	u3477
  1998  03FD  2BFE               	nop2
  1999                           
  2000                           ;main.c: 650: ser_putch(141);
  2001  03FE  308D               	movlw	141
  2002  03FF  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  2003                           
  2004                           ;main.c: 651: ser_putch(6);
  2005  0404  3006               	movlw	6
  2006  0405  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  2007                           
  2008                           ;main.c: 652: _delay((unsigned long)((3000)*(20000000/4000.0)));
  2009  040A  304D               	movlw	77
  2010  040B  1283               	bcf	3,5	;RP0=0, select bank0
  2011  040C  1303               	bcf	3,6	;RP1=0, select bank0
  2012  040D  00C4               	movwf	??_main+2
  2013  040E  3019               	movlw	25
  2014  040F  00C3               	movwf	??_main+1
  2015  0410  309A               	movlw	154
  2016  0411  00C2               	movwf	??_main
  2017  0412                     u3487:	
  2018  0412  0BC2               	decfsz	??_main,f
  2019  0413  2C12               	goto	u3487
  2020  0414  0BC3               	decfsz	??_main+1,f
  2021  0415  2C12               	goto	u3487
  2022  0416  0BC4               	decfsz	??_main+2,f
  2023  0417  2C12               	goto	u3487
  2024  0418  2C19               	nop2
  2025                           
  2026                           ;main.c: 653: ser_putch(141);
  2027  0419  308D               	movlw	141
  2028  041A  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  2029                           
  2030                           ;main.c: 654: ser_putch(5);
  2031  041F  3005               	movlw	5
  2032  0420  160A  118A  27D4  120A  118A  	fcall	_ser_putch
  2033                           
  2034                           ;main.c: 659: PB7Counter=0;
  2035  0425  1283               	bcf	3,5	;RP0=0, select bank0
  2036  0426  1303               	bcf	3,6	;RP1=0, select bank0
  2037  0427  01CD               	clrf	_PB7Counter
  2038  0428                     l4661:	
  2039                           
  2040                           ;main.c: 663: }
  2041                           ;main.c: 667: if(PB8Counter >= 10 && !RB0 == 0){
  2042  0428  300A               	movlw	10
  2043  0429  024E               	subwf	_PB8Counter,w
  2044  042A  1803               	btfsc	3,0
  2045  042B  1C06               	btfss	6,0	;volatile
  2046  042C  2BDC               	goto	l4645
  2047                           
  2048                           ;main.c: 670: PathTo(2,0);
  2049  042D  01A5               	clrf	PathTo@y_target
  2050  042E  3002               	movlw	2
  2051  042F  120A  118A  247C  120A  118A  	fcall	_PathTo
  2052                           
  2053                           ;main.c: 671: TravelPath();
  2054  0434  120A  158A  26EB  120A  118A  	fcall	_TravelPath
  2055                           
  2056                           ;main.c: 672: if (IR_Wall == 1)
  2057  0439  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2058  043A  2C40               	goto	l4671
  2059                           
  2060                           ;main.c: 673: re_route();
  2061  043B  120A  158A  24FC  120A  118A  	fcall	_re_route
  2062  0440                     l4671:	
  2063                           
  2064                           ;main.c: 674: if (targets_found == 1){
  2065  0440  1EF0               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  2066  0441  2C50               	goto	l325
  2067                           
  2068                           ;main.c: 675: PathTo(1,0);
  2069  0442  1283               	bcf	3,5	;RP0=0, select bank0
  2070  0443  1303               	bcf	3,6	;RP1=0, select bank0
  2071  0444  01A5               	clrf	PathTo@y_target
  2072  0445  3001               	movlw	1
  2073  0446  120A  118A  247C  120A  118A  	fcall	_PathTo
  2074                           
  2075                           ;main.c: 676: TravelPath();
  2076  044B  120A  158A  26EB  120A  118A  	fcall	_TravelPath
  2077  0450                     l325:	
  2078                           
  2079                           ;main.c: 677: }
  2080                           ;main.c: 679: PathTo(0,3);
  2081  0450  3003               	movlw	3
  2082  0451  1283               	bcf	3,5	;RP0=0, select bank0
  2083  0452  1303               	bcf	3,6	;RP1=0, select bank0
  2084  0453  00C2               	movwf	??_main
  2085  0454  0842               	movf	??_main,w
  2086  0455  00A5               	movwf	PathTo@y_target
  2087  0456  3000               	movlw	0
  2088  0457  120A  118A  247C  120A  118A  	fcall	_PathTo
  2089                           
  2090                           ;main.c: 680: TravelPath();
  2091  045C  120A  158A  26EB  120A  118A  	fcall	_TravelPath
  2092                           
  2093                           ;main.c: 681: if (IR_Wall == 1)
  2094  0461  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2095  0462  2C68               	goto	l4679
  2096                           
  2097                           ;main.c: 682: re_route();
  2098  0463  120A  158A  24FC  120A  118A  	fcall	_re_route
  2099  0468                     l4679:	
  2100                           
  2101                           ;main.c: 683: if (targets_found == 1){
  2102  0468  1EF0               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  2103  0469  2C78               	goto	l4683
  2104                           
  2105                           ;main.c: 684: PathTo(1,0);
  2106  046A  1283               	bcf	3,5	;RP0=0, select bank0
  2107  046B  1303               	bcf	3,6	;RP1=0, select bank0
  2108  046C  01A5               	clrf	PathTo@y_target
  2109  046D  3001               	movlw	1
  2110  046E  120A  118A  247C  120A  118A  	fcall	_PathTo
  2111                           
  2112                           ;main.c: 685: TravelPath();
  2113  0473  120A  158A  26EB  120A  118A  	fcall	_TravelPath
  2114  0478                     l4683:	
  2115                           
  2116                           ;main.c: 686: }
  2117                           ;main.c: 689: PB8Counter = 0;
  2118  0478  1283               	bcf	3,5	;RP0=0, select bank0
  2119  0479  1303               	bcf	3,6	;RP1=0, select bank0
  2120  047A  01CE               	clrf	_PB8Counter
  2121  047B  2BDC               	goto	l4645
  2122  047C                     __end_of_main:	
  2123                           
  2124                           	psect	text1
  2125  07F0                     __ptext1:	
  2126 ;; *************** function _spi_transfer *****************
  2127 ;; Defined at:
  2128 ;;		line 22 in file "SPI.c"
  2129 ;; Parameters:    Size  Location     Type
  2130 ;;  data            1    wreg     unsigned char 
  2131 ;; Auto vars:     Size  Location     Type
  2132 ;;  data            1    2[BANK0 ] unsigned char 
  2133 ;;  temp            1    1[BANK0 ] unsigned char 
  2134 ;; Return value:  Size  Location     Type
  2135 ;;                  1    wreg      unsigned char 
  2136 ;; Registers used:
  2137 ;;		wreg, status,2
  2138 ;; Tracked objects:
  2139 ;;		On entry : 0/0
  2140 ;;		On exit  : 0/0
  2141 ;;		Unchanged: 0/0
  2142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2143 ;;      Params:         0       0       0       0       0
  2144 ;;      Locals:         0       2       0       0       0
  2145 ;;      Temps:          0       1       0       0       0
  2146 ;;      Totals:         0       3       0       0       0
  2147 ;;Total ram usage:        3 bytes
  2148 ;; Hardware stack levels used:    1
  2149 ;; Hardware stack levels required when called:    1
  2150 ;; This function calls:
  2151 ;;		Nothing
  2152 ;; This function is called by:
  2153 ;;		_main
  2154 ;;		_stepCCW
  2155 ;;		_stepCW
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159                           
  2160                           ;psect for function _spi_transfer
  2161  07F0                     _spi_transfer:	
  2162                           
  2163                           ;incstack = 0
  2164                           ; Regs used in _spi_transfer: [wreg+status,2]
  2165                           ;spi_transfer@data stored from wreg
  2166  07F0  1283               	bcf	3,5	;RP0=0, select bank0
  2167  07F1  1303               	bcf	3,6	;RP1=0, select bank0
  2168  07F2  00A2               	movwf	spi_transfer@data
  2169                           
  2170                           ;SPI.c: 23: unsigned char temp = 0;
  2171  07F3  01A1               	clrf	spi_transfer@temp
  2172                           
  2173                           ;SPI.c: 25: SSPIF = 0;
  2174  07F4  118C               	bcf	12,3	;volatile
  2175                           
  2176                           ;SPI.c: 26: SSPBUF = data;
  2177  07F5  0822               	movf	spi_transfer@data,w
  2178  07F6  0093               	movwf	19	;volatile
  2179  07F7                     l964:	
  2180                           ;SPI.c: 28: while (SSPIF == 0);
  2181                           
  2182  07F7  1D8C               	btfss	12,3	;volatile
  2183  07F8  2FF7               	goto	l964
  2184                           
  2185                           ;SPI.c: 29: temp = SSPBUF;
  2186  07F9  0813               	movf	19,w	;volatile
  2187  07FA  00A0               	movwf	??_spi_transfer
  2188  07FB  0820               	movf	??_spi_transfer,w
  2189  07FC  00A1               	movwf	spi_transfer@temp
  2190                           
  2191                           ;SPI.c: 30: SSPIF = 0;
  2192  07FD  118C               	bcf	12,3	;volatile
  2193  07FE  0008               	return
  2194  07FF                     __end_of_spi_transfer:	
  2195                           ;SPI.c: 32: return temp;
  2196                           ;	Return value of _spi_transfer is never used
  2197                           
  2198                           
  2199                           	psect	text2
  2200  0878                     __ptext2:	
  2201 ;; *************** function _setupSPI *****************
  2202 ;; Defined at:
  2203 ;;		line 4 in file "SPI.c"
  2204 ;; Parameters:    Size  Location     Type
  2205 ;;		None
  2206 ;; Auto vars:     Size  Location     Type
  2207 ;;		None
  2208 ;; Return value:  Size  Location     Type
  2209 ;;                  1    wreg      void 
  2210 ;; Registers used:
  2211 ;;		wreg
  2212 ;; Tracked objects:
  2213 ;;		On entry : 0/0
  2214 ;;		On exit  : 0/0
  2215 ;;		Unchanged: 0/0
  2216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2217 ;;      Params:         0       0       0       0       0
  2218 ;;      Locals:         0       0       0       0       0
  2219 ;;      Temps:          0       0       0       0       0
  2220 ;;      Totals:         0       0       0       0       0
  2221 ;;Total ram usage:        0 bytes
  2222 ;; Hardware stack levels used:    1
  2223 ;; Hardware stack levels required when called:    1
  2224 ;; This function calls:
  2225 ;;		Nothing
  2226 ;; This function is called by:
  2227 ;;		_main
  2228 ;; This function uses a non-reentrant model
  2229 ;;
  2230                           
  2231                           
  2232                           ;psect for function _setupSPI
  2233  0878                     _setupSPI:	
  2234                           
  2235                           ;SPI.c: 6: TRISB = 0b00000011;
  2236                           
  2237                           ;incstack = 0
  2238                           ; Regs used in _setupSPI: [wreg]
  2239  0878  3003               	movlw	3
  2240  0879  1683               	bsf	3,5	;RP0=1, select bank1
  2241  087A  1303               	bcf	3,6	;RP1=0, select bank1
  2242  087B  0086               	movwf	6	;volatile
  2243                           
  2244                           ;SPI.c: 8: SSPSTAT = 0b01000000;
  2245  087C  3040               	movlw	64
  2246  087D  0094               	movwf	20	;volatile
  2247                           
  2248                           ;SPI.c: 9: SSPCON = 0b00100000;
  2249  087E  3020               	movlw	32
  2250  087F  1283               	bcf	3,5	;RP0=0, select bank0
  2251  0880  1303               	bcf	3,6	;RP1=0, select bank0
  2252  0881  0094               	movwf	20	;volatile
  2253                           
  2254                           ;SPI.c: 10: TRISC = 0b10000000;
  2255  0882  3080               	movlw	128
  2256  0883  1683               	bsf	3,5	;RP0=1, select bank1
  2257  0884  1303               	bcf	3,6	;RP1=0, select bank1
  2258  0885  0087               	movwf	7	;volatile
  2259                           
  2260                           ;SPI.c: 11: PORTC = 0b00000011;
  2261  0886  3003               	movlw	3
  2262  0887  1283               	bcf	3,5	;RP0=0, select bank0
  2263  0888  1303               	bcf	3,6	;RP1=0, select bank0
  2264  0889  0087               	movwf	7	;volatile
  2265                           
  2266                           ;SPI.c: 14: OPTION_REG = 0b00000100;
  2267  088A  3004               	movlw	4
  2268  088B  1683               	bsf	3,5	;RP0=1, select bank1
  2269  088C  1303               	bcf	3,6	;RP1=0, select bank1
  2270  088D  0081               	movwf	1	;volatile
  2271                           
  2272                           ;SPI.c: 16: TMR0IE = 1;
  2273  088E  168B               	bsf	11,5	;volatile
  2274                           
  2275                           ;SPI.c: 18: (GIE = 1);
  2276  088F  178B               	bsf	11,7	;volatile
  2277  0890  0008               	return
  2278  0891                     __end_of_setupSPI:	
  2279                           
  2280                           	psect	text3
  2281  07C7                     __ptext3:	
  2282 ;; *************** function _setupLCD *****************
  2283 ;; Defined at:
  2284 ;;		line 86 in file "LCD.c"
  2285 ;; Parameters:    Size  Location     Type
  2286 ;;		None
  2287 ;; Auto vars:     Size  Location     Type
  2288 ;;		None
  2289 ;; Return value:  Size  Location     Type
  2290 ;;                  1    wreg      void 
  2291 ;; Registers used:
  2292 ;;		wreg, status,2, status,0, pclath, cstack
  2293 ;; Tracked objects:
  2294 ;;		On entry : 0/0
  2295 ;;		On exit  : 0/0
  2296 ;;		Unchanged: 0/0
  2297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2298 ;;      Params:         0       0       0       0       0
  2299 ;;      Locals:         0       0       0       0       0
  2300 ;;      Temps:          0       0       0       0       0
  2301 ;;      Totals:         0       0       0       0       0
  2302 ;;Total ram usage:        0 bytes
  2303 ;; Hardware stack levels used:    1
  2304 ;; Hardware stack levels required when called:    2
  2305 ;; This function calls:
  2306 ;;		_lcdWriteControl
  2307 ;; This function is called by:
  2308 ;;		_main
  2309 ;; This function uses a non-reentrant model
  2310 ;;
  2311                           
  2312                           
  2313                           ;psect for function _setupLCD
  2314  07C7                     _setupLCD:	
  2315                           
  2316                           ;LCD.c: 88: ADCON1 = 0b00000010;
  2317                           
  2318                           ;incstack = 0
  2319                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  2320  07C7  3002               	movlw	2
  2321  07C8  1683               	bsf	3,5	;RP0=1, select bank1
  2322  07C9  1303               	bcf	3,6	;RP1=0, select bank1
  2323  07CA  009F               	movwf	31	;volatile
  2324                           
  2325                           ;LCD.c: 90: PORTD = 0;
  2326  07CB  1283               	bcf	3,5	;RP0=0, select bank0
  2327  07CC  1303               	bcf	3,6	;RP1=0, select bank0
  2328  07CD  0188               	clrf	8	;volatile
  2329                           
  2330                           ;LCD.c: 91: PORTE = 0;
  2331  07CE  0189               	clrf	9	;volatile
  2332                           
  2333                           ;LCD.c: 93: TRISD = 0b00000000;
  2334  07CF  1683               	bsf	3,5	;RP0=1, select bank1
  2335  07D0  1303               	bcf	3,6	;RP1=0, select bank1
  2336  07D1  0188               	clrf	8	;volatile
  2337                           
  2338                           ;LCD.c: 94: TRISE = 0b00000000;
  2339  07D2  0189               	clrf	9	;volatile
  2340                           
  2341                           ;LCD.c: 97: lcdWriteControl(0b00000001);
  2342  07D3  3001               	movlw	1
  2343  07D4  120A  158A  2039  120A  118A  	fcall	_lcdWriteControl
  2344                           
  2345                           ;LCD.c: 98: lcdWriteControl(0b00111000);
  2346  07D9  3038               	movlw	56
  2347  07DA  120A  158A  2039  120A  118A  	fcall	_lcdWriteControl
  2348                           
  2349                           ;LCD.c: 99: lcdWriteControl(0b00001100);
  2350  07DF  300C               	movlw	12
  2351  07E0  120A  158A  2039  120A  118A  	fcall	_lcdWriteControl
  2352                           
  2353                           ;LCD.c: 100: lcdWriteControl(0b00000110);
  2354  07E5  3006               	movlw	6
  2355  07E6  120A  158A  2039  120A  118A  	fcall	_lcdWriteControl
  2356                           
  2357                           ;LCD.c: 101: lcdWriteControl(0b00000010);
  2358  07EB  3002               	movlw	2
  2359  07EC  120A  158A  2039   	fcall	_lcdWriteControl
  2360  07EF  0008               	return
  2361  07F0                     __end_of_setupLCD:	
  2362                           
  2363                           	psect	text4
  2364  0862                     __ptext4:	
  2365 ;; *************** function _setupADC *****************
  2366 ;; Defined at:
  2367 ;;		line 5 in file "ADC.c"
  2368 ;; Parameters:    Size  Location     Type
  2369 ;;		None
  2370 ;; Auto vars:     Size  Location     Type
  2371 ;;		None
  2372 ;; Return value:  Size  Location     Type
  2373 ;;                  1    wreg      void 
  2374 ;; Registers used:
  2375 ;;		wreg, status,2
  2376 ;; Tracked objects:
  2377 ;;		On entry : 0/0
  2378 ;;		On exit  : 0/0
  2379 ;;		Unchanged: 0/0
  2380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2381 ;;      Params:         0       0       0       0       0
  2382 ;;      Locals:         0       0       0       0       0
  2383 ;;      Temps:          0       1       0       0       0
  2384 ;;      Totals:         0       1       0       0       0
  2385 ;;Total ram usage:        1 bytes
  2386 ;; Hardware stack levels used:    1
  2387 ;; Hardware stack levels required when called:    1
  2388 ;; This function calls:
  2389 ;;		Nothing
  2390 ;; This function is called by:
  2391 ;;		_main
  2392 ;; This function uses a non-reentrant model
  2393 ;;
  2394                           
  2395                           
  2396                           ;psect for function _setupADC
  2397  0862                     _setupADC:	
  2398                           
  2399                           ;ADC.c: 6: PORTA = 0;
  2400                           
  2401                           ;incstack = 0
  2402                           ; Regs used in _setupADC: [wreg+status,2]
  2403  0862  1283               	bcf	3,5	;RP0=0, select bank0
  2404  0863  1303               	bcf	3,6	;RP1=0, select bank0
  2405  0864  0185               	clrf	5	;volatile
  2406                           
  2407                           ;ADC.c: 7: TRISA = 0b11111111;
  2408  0865  30FF               	movlw	255
  2409  0866  1683               	bsf	3,5	;RP0=1, select bank1
  2410  0867  1303               	bcf	3,6	;RP1=0, select bank1
  2411  0868  0085               	movwf	5	;volatile
  2412                           
  2413                           ;ADC.c: 10: ADCON0 = 0b10001001;
  2414  0869  3089               	movlw	137
  2415  086A  1283               	bcf	3,5	;RP0=0, select bank0
  2416  086B  1303               	bcf	3,6	;RP1=0, select bank0
  2417  086C  009F               	movwf	31	;volatile
  2418                           
  2419                           ;ADC.c: 11: ADCON1 = 0b00000010;
  2420  086D  3002               	movlw	2
  2421  086E  1683               	bsf	3,5	;RP0=1, select bank1
  2422  086F  1303               	bcf	3,6	;RP1=0, select bank1
  2423  0870  009F               	movwf	31	;volatile
  2424                           
  2425                           ;ADC.c: 13: _delay((unsigned long)((50)*(20000000/4000000.0)));
  2426  0871  3053               	movlw	83
  2427  0872  1283               	bcf	3,5	;RP0=0, select bank0
  2428  0873  1303               	bcf	3,6	;RP1=0, select bank0
  2429  0874  00A0               	movwf	??_setupADC
  2430  0875                     u3497:	
  2431  0875  0BA0               	decfsz	??_setupADC,f
  2432  0876  2875               	goto	u3497
  2433  0877  0008               	return
  2434  0878                     __end_of_setupADC:	
  2435                           
  2436                           	psect	text5
  2437  17E0                     __ptext5:	
  2438 ;; *************** function _ser_init *****************
  2439 ;; Defined at:
  2440 ;;		line 5 in file "ser.c"
  2441 ;; Parameters:    Size  Location     Type
  2442 ;;		None
  2443 ;; Auto vars:     Size  Location     Type
  2444 ;;		None
  2445 ;; Return value:  Size  Location     Type
  2446 ;;                  1    wreg      void 
  2447 ;; Registers used:
  2448 ;;		wreg
  2449 ;; Tracked objects:
  2450 ;;		On entry : 0/0
  2451 ;;		On exit  : 0/0
  2452 ;;		Unchanged: 0/0
  2453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2454 ;;      Params:         0       0       0       0       0
  2455 ;;      Locals:         0       0       0       0       0
  2456 ;;      Temps:          0       0       0       0       0
  2457 ;;      Totals:         0       0       0       0       0
  2458 ;;Total ram usage:        0 bytes
  2459 ;; Hardware stack levels used:    1
  2460 ;; Hardware stack levels required when called:    1
  2461 ;; This function calls:
  2462 ;;		Nothing
  2463 ;; This function is called by:
  2464 ;;		_main
  2465 ;; This function uses a non-reentrant model
  2466 ;;
  2467                           
  2468                           
  2469                           ;psect for function _ser_init
  2470  17E0                     _ser_init:	
  2471                           
  2472                           ;ser.c: 7: TXSTA = 0b00100100;
  2473                           
  2474                           ;incstack = 0
  2475                           ; Regs used in _ser_init: [wreg]
  2476  17E0  3024               	movlw	36
  2477  17E1  1683               	bsf	3,5	;RP0=1, select bank1
  2478  17E2  1303               	bcf	3,6	;RP1=0, select bank1
  2479  17E3  0098               	movwf	24	;volatile
  2480                           
  2481                           ;ser.c: 8: RCSTA = 0b10011000;
  2482  17E4  3098               	movlw	152
  2483  17E5  1283               	bcf	3,5	;RP0=0, select bank0
  2484  17E6  1303               	bcf	3,6	;RP1=0, select bank0
  2485  17E7  0098               	movwf	24	;volatile
  2486                           
  2487                           ;ser.c: 24: SPBRG = 20;
  2488  17E8  3014               	movlw	20
  2489  17E9  1683               	bsf	3,5	;RP0=1, select bank1
  2490  17EA  1303               	bcf	3,6	;RP1=0, select bank1
  2491  17EB  0099               	movwf	25	;volatile
  2492                           
  2493                           ;ser.c: 26: PEIE = 1;
  2494  17EC  170B               	bsf	11,6	;volatile
  2495                           
  2496                           ;ser.c: 27: (GIE = 1);
  2497  17ED  178B               	bsf	11,7	;volatile
  2498  17EE  0008               	return
  2499  17EF                     __end_of_ser_init:	
  2500                           
  2501                           	psect	text6
  2502  0CFC                     __ptext6:	
  2503 ;; *************** function _re_route *****************
  2504 ;; Defined at:
  2505 ;;		line 428 in file "main.c"
  2506 ;; Parameters:    Size  Location     Type
  2507 ;;		None
  2508 ;; Auto vars:     Size  Location     Type
  2509 ;;		None
  2510 ;; Return value:  Size  Location     Type
  2511 ;;                  1    wreg      void 
  2512 ;; Registers used:
  2513 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2514 ;; Tracked objects:
  2515 ;;		On entry : 0/0
  2516 ;;		On exit  : 0/0
  2517 ;;		Unchanged: 0/0
  2518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2519 ;;      Params:         0       0       0       0       0
  2520 ;;      Locals:         0       0       0       0       0
  2521 ;;      Temps:          0       5       0       0       0
  2522 ;;      Totals:         0       5       0       0       0
  2523 ;;Total ram usage:        5 bytes
  2524 ;; Hardware stack levels used:    1
  2525 ;; Hardware stack levels required when called:    7
  2526 ;; This function calls:
  2527 ;;		_DriveDirect
  2528 ;;		_PathTo
  2529 ;;		_TravelPath
  2530 ;;		_Turn90
  2531 ;;		___bmul
  2532 ;;		_getSensorData
  2533 ;; This function is called by:
  2534 ;;		_main
  2535 ;; This function uses a non-reentrant model
  2536 ;;
  2537                           
  2538                           
  2539                           ;psect for function _re_route
  2540  0CFC                     _re_route:	
  2541                           
  2542                           ;main.c: 429: switch(orientation){
  2543                           
  2544                           ;incstack = 0
  2545                           ; Regs used in _re_route: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2546  0CFC  2D68               	goto	l4301
  2547  0CFD                     l4291:	
  2548                           ;main.c: 430: case 0: (mazeGridDefault[y][x]) = ((mazeGridDefault[y][x]) + 4);
  2549                           
  2550  0CFD  3005               	movlw	5
  2551  0CFE  1283               	bcf	3,5	;RP0=0, select bank0
  2552  0CFF  1303               	bcf	3,6	;RP1=0, select bank0
  2553  0D00  00BD               	movwf	??_re_route
  2554  0D01  083D               	movf	??_re_route,w
  2555  0D02  00A0               	movwf	___bmul@multiplicand
  2556  0D03  085F               	movf	_y,w
  2557  0D04  120A  158A  2013  120A  158A  	fcall	___bmul
  2558  0D09  3EB4               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2559  0D0A  1283               	bcf	3,5	;RP0=0, select bank0
  2560  0D0B  1303               	bcf	3,6	;RP1=0, select bank0
  2561  0D0C  0768               	addwf	_x,w
  2562  0D0D  00BE               	movwf	??_re_route+1
  2563  0D0E  083E               	movf	??_re_route+1,w
  2564  0D0F  0084               	movwf	4
  2565  0D10  1383               	bcf	3,7	;select IRP bank1
  2566  0D11  0800               	movf	0,w
  2567  0D12  3E04               	addlw	4
  2568  0D13  2D52               	goto	L4
  2569  0D14                     l4293:	
  2570                           ;main.c: 432: case 1: (mazeGridDefault[y][x]) = ((mazeGridDefault[y][x]) + 2);
  2571                           
  2572                           ;main.c: 431: break;
  2573                           
  2574  0D14  3005               	movlw	5
  2575  0D15  00BD               	movwf	??_re_route
  2576  0D16  083D               	movf	??_re_route,w
  2577  0D17  00A0               	movwf	___bmul@multiplicand
  2578  0D18  085F               	movf	_y,w
  2579  0D19  120A  158A  2013  120A  158A  	fcall	___bmul
  2580  0D1E  3EB4               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2581  0D1F  1283               	bcf	3,5	;RP0=0, select bank0
  2582  0D20  1303               	bcf	3,6	;RP1=0, select bank0
  2583  0D21  0768               	addwf	_x,w
  2584  0D22  00BE               	movwf	??_re_route+1
  2585  0D23  083E               	movf	??_re_route+1,w
  2586  0D24  0084               	movwf	4
  2587  0D25  1383               	bcf	3,7	;select IRP bank1
  2588  0D26  0800               	movf	0,w
  2589  0D27  3E02               	addlw	2
  2590  0D28  2D52               	goto	L4
  2591  0D29                     l4295:	
  2592                           ;main.c: 434: case 2: (mazeGridDefault[y][x]) = ((mazeGridDefault[y][x]) + 1);
  2593                           
  2594                           ;main.c: 433: break;
  2595                           
  2596  0D29  3005               	movlw	5
  2597  0D2A  00BD               	movwf	??_re_route
  2598  0D2B  083D               	movf	??_re_route,w
  2599  0D2C  00A0               	movwf	___bmul@multiplicand
  2600  0D2D  085F               	movf	_y,w
  2601  0D2E  120A  158A  2013  120A  158A  	fcall	___bmul
  2602  0D33  3EB4               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2603  0D34  1283               	bcf	3,5	;RP0=0, select bank0
  2604  0D35  1303               	bcf	3,6	;RP1=0, select bank0
  2605  0D36  0768               	addwf	_x,w
  2606  0D37  00BE               	movwf	??_re_route+1
  2607  0D38  083E               	movf	??_re_route+1,w
  2608  0D39  0084               	movwf	4
  2609  0D3A  1383               	bcf	3,7	;select IRP bank1
  2610  0D3B  0800               	movf	0,w
  2611  0D3C  3E01               	addlw	1
  2612  0D3D  2D52               	goto	L4
  2613  0D3E                     l4297:	
  2614                           ;main.c: 436: case 3: (mazeGridDefault[y][x]) = ((mazeGridDefault[y][x]) + 8);
  2615                           
  2616                           ;main.c: 435: break;
  2617                           
  2618  0D3E  3005               	movlw	5
  2619  0D3F  00BD               	movwf	??_re_route
  2620  0D40  083D               	movf	??_re_route,w
  2621  0D41  00A0               	movwf	___bmul@multiplicand
  2622  0D42  085F               	movf	_y,w
  2623  0D43  120A  158A  2013  120A  158A  	fcall	___bmul
  2624  0D48  3EB4               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2625  0D49  1283               	bcf	3,5	;RP0=0, select bank0
  2626  0D4A  1303               	bcf	3,6	;RP1=0, select bank0
  2627  0D4B  0768               	addwf	_x,w
  2628  0D4C  00BE               	movwf	??_re_route+1
  2629  0D4D  083E               	movf	??_re_route+1,w
  2630  0D4E  0084               	movwf	4
  2631  0D4F  1383               	bcf	3,7	;select IRP bank1
  2632  0D50  0800               	movf	0,w
  2633  0D51  3E08               	addlw	8
  2634  0D52                     L4:	
  2635  0D52  00BF               	movwf	??_re_route+2
  2636  0D53  3005               	movlw	5
  2637  0D54  00C0               	movwf	??_re_route+3
  2638  0D55  0840               	movf	??_re_route+3,w
  2639  0D56  00A0               	movwf	___bmul@multiplicand
  2640  0D57  085F               	movf	_y,w
  2641  0D58  120A  158A  2013  120A  158A  	fcall	___bmul
  2642  0D5D  3EB4               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2643  0D5E  1283               	bcf	3,5	;RP0=0, select bank0
  2644  0D5F  1303               	bcf	3,6	;RP1=0, select bank0
  2645  0D60  0768               	addwf	_x,w
  2646  0D61  00C1               	movwf	??_re_route+4
  2647  0D62  0841               	movf	??_re_route+4,w
  2648  0D63  0084               	movwf	4
  2649  0D64  083F               	movf	??_re_route+2,w
  2650  0D65  1383               	bcf	3,7	;select IRP bank1
  2651  0D66  0080               	movwf	0
  2652                           
  2653                           ;main.c: 438: }
  2654                           
  2655                           ;main.c: 437: break;
  2656  0D67  2D78               	goto	l4303
  2657  0D68                     l4301:	
  2658  0D68  1283               	bcf	3,5	;RP0=0, select bank0
  2659  0D69  1303               	bcf	3,6	;RP1=0, select bank0
  2660  0D6A  0866               	movf	_orientation,w
  2661                           
  2662                           ; Switch size 1, requested type "space"
  2663                           ; Number of cases is 4, Range of values is 0 to 3
  2664                           ; switch strategies available:
  2665                           ; Name         Instructions Cycles
  2666                           ; simple_byte           13     7 (average)
  2667                           ; direct_byte           20     8 (fixed)
  2668                           ; jumptable            260     6 (fixed)
  2669                           ;	Chosen strategy is simple_byte
  2670  0D6B  3A00               	xorlw	0	; case 0
  2671  0D6C  1903               	skipnz
  2672  0D6D  2CFD               	goto	l4291
  2673  0D6E  3A01               	xorlw	1	; case 1
  2674  0D6F  1903               	skipnz
  2675  0D70  2D14               	goto	l4293
  2676  0D71  3A03               	xorlw	3	; case 2
  2677  0D72  1903               	skipnz
  2678  0D73  2D29               	goto	l4295
  2679  0D74  3A01               	xorlw	1	; case 3
  2680  0D75  1903               	skipnz
  2681  0D76  2D3E               	goto	l4297
  2682  0D77  2D78               	goto	l4303
  2683  0D78                     l4303:	
  2684                           
  2685                           ;main.c: 440: Turn90(0);
  2686  0D78  3000               	movlw	0
  2687  0D79  120A  158A  2373  120A  158A  	fcall	_Turn90
  2688                           
  2689                           ;main.c: 441: Turn90(0);
  2690  0D7E  3000               	movlw	0
  2691  0D7F  120A  158A  2373  120A  158A  	fcall	_Turn90
  2692                           
  2693                           ;main.c: 442: distance = 0;
  2694  0D84  1283               	bcf	3,5	;RP0=0, select bank0
  2695  0D85  1303               	bcf	3,6	;RP1=0, select bank0
  2696  0D86  01C7               	clrf	_distance
  2697  0D87  01C8               	clrf	_distance+1
  2698                           
  2699                           ;main.c: 443: DriveDirect(250,250);
  2700  0D88  30FA               	movlw	250
  2701  0D89  00A1               	movwf	DriveDirect@VelocityRight
  2702  0D8A  3000               	movlw	0
  2703  0D8B  00A2               	movwf	DriveDirect@VelocityRight+1
  2704  0D8C  30FA               	movlw	250
  2705  0D8D  00A3               	movwf	DriveDirect@VelocityLeft
  2706  0D8E  3000               	movlw	0
  2707  0D8F  00A4               	movwf	DriveDirect@VelocityLeft+1
  2708  0D90  120A  158A  224B  120A  158A  	fcall	_DriveDirect
  2709  0D95                     l4311:	
  2710                           ;main.c: 444: while (distance < 500){
  2711                           
  2712  0D95  1283               	bcf	3,5	;RP0=0, select bank0
  2713  0D96  1303               	bcf	3,6	;RP1=0, select bank0
  2714  0D97  0848               	movf	_distance+1,w
  2715  0D98  3A80               	xorlw	128
  2716  0D99  00FF               	movwf	127
  2717  0D9A  3081               	movlw	129
  2718  0D9B  027F               	subwf	127,w
  2719  0D9C  1D03               	skipz
  2720  0D9D  2DA0               	goto	u3315
  2721  0D9E  30F4               	movlw	244
  2722  0D9F  0247               	subwf	_distance,w
  2723  0DA0                     u3315:	
  2724  0DA0  1803               	btfsc	3,0
  2725  0DA1  2DB9               	goto	l4313
  2726                           
  2727                           ;main.c: 445: distance = distance + getSensorData(19,2);
  2728  0DA2  3002               	movlw	2
  2729  0DA3  1283               	bcf	3,5	;RP0=0, select bank0
  2730  0DA4  1303               	bcf	3,6	;RP1=0, select bank0
  2731  0DA5  00BD               	movwf	??_re_route
  2732  0DA6  083D               	movf	??_re_route,w
  2733  0DA7  00A2               	movwf	getSensorData@bytes
  2734  0DA8  3013               	movlw	19
  2735  0DA9  120A  158A  214A  120A  158A  	fcall	_getSensorData
  2736  0DAE  1283               	bcf	3,5	;RP0=0, select bank0
  2737  0DAF  1303               	bcf	3,6	;RP1=0, select bank0
  2738  0DB0  0847               	movf	_distance,w
  2739  0DB1  0722               	addwf	?_getSensorData,w
  2740  0DB2  00C7               	movwf	_distance
  2741  0DB3  0848               	movf	_distance+1,w
  2742  0DB4  1803               	skipnc
  2743  0DB5  0A48               	incf	_distance+1,w
  2744  0DB6  0723               	addwf	?_getSensorData+1,w
  2745  0DB7  00C8               	movwf	_distance+1
  2746  0DB8  2D95               	goto	l4311
  2747  0DB9                     l4313:	
  2748                           
  2749                           ;main.c: 446: }
  2750                           ;main.c: 447: DriveDirect(0,0);
  2751  0DB9  3000               	movlw	0
  2752  0DBA  1283               	bcf	3,5	;RP0=0, select bank0
  2753  0DBB  1303               	bcf	3,6	;RP1=0, select bank0
  2754  0DBC  00A1               	movwf	DriveDirect@VelocityRight
  2755  0DBD  00A2               	movwf	DriveDirect@VelocityRight+1
  2756  0DBE  3000               	movlw	0
  2757  0DBF  00A3               	movwf	DriveDirect@VelocityLeft
  2758  0DC0  00A4               	movwf	DriveDirect@VelocityLeft+1
  2759  0DC1  120A  158A  224B  120A  158A  	fcall	_DriveDirect
  2760                           
  2761                           ;main.c: 448: IR_Wall = 0;
  2762  0DC6  1070               	bcf	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2763                           
  2764                           ;main.c: 450: _delay((unsigned long)((1000)*(20000000/4000.0)));
  2765  0DC7  301A               	movlw	26
  2766  0DC8  1283               	bcf	3,5	;RP0=0, select bank0
  2767  0DC9  1303               	bcf	3,6	;RP1=0, select bank0
  2768  0DCA  00BF               	movwf	??_re_route+2
  2769  0DCB  305E               	movlw	94
  2770  0DCC  00BE               	movwf	??_re_route+1
  2771  0DCD  3086               	movlw	134
  2772  0DCE  00BD               	movwf	??_re_route
  2773  0DCF                     u3507:	
  2774  0DCF  0BBD               	decfsz	??_re_route,f
  2775  0DD0  2DCF               	goto	u3507
  2776  0DD1  0BBE               	decfsz	??_re_route+1,f
  2777  0DD2  2DCF               	goto	u3507
  2778  0DD3  0BBF               	decfsz	??_re_route+2,f
  2779  0DD4  2DCF               	goto	u3507
  2780  0DD5  0000               	nop
  2781                           
  2782                           ;main.c: 451: PathTo(x_goto,y_goto);
  2783  0DD6  1283               	bcf	3,5	;RP0=0, select bank0
  2784  0DD7  1303               	bcf	3,6	;RP1=0, select bank0
  2785  0DD8  0860               	movf	_y_goto,w
  2786  0DD9  00BD               	movwf	??_re_route
  2787  0DDA  083D               	movf	??_re_route,w
  2788  0DDB  00A5               	movwf	PathTo@y_target
  2789  0DDC  085B               	movf	_x_goto,w
  2790  0DDD  120A  118A  247C  120A  158A  	fcall	_PathTo
  2791                           
  2792                           ;main.c: 452: TravelPath();
  2793  0DE2  120A  158A  26EB   	fcall	_TravelPath
  2794  0DE5  0008               	return
  2795  0DE6                     __end_of_re_route:	
  2796                           
  2797                           	psect	text7
  2798  0EEB                     __ptext7:	
  2799 ;; *************** function _TravelPath *****************
  2800 ;; Defined at:
  2801 ;;		line 361 in file "main.c"
  2802 ;; Parameters:    Size  Location     Type
  2803 ;;		None
  2804 ;; Auto vars:     Size  Location     Type
  2805 ;;  n               1   28[BANK0 ] unsigned char 
  2806 ;; Return value:  Size  Location     Type
  2807 ;;                  1    wreg      void 
  2808 ;; Registers used:
  2809 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2810 ;; Tracked objects:
  2811 ;;		On entry : 0/0
  2812 ;;		On exit  : 0/0
  2813 ;;		Unchanged: 0/0
  2814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2815 ;;      Params:         0       0       0       0       0
  2816 ;;      Locals:         0       1       0       0       0
  2817 ;;      Temps:          0       2       0       0       0
  2818 ;;      Totals:         0       3       0       0       0
  2819 ;;Total ram usage:        3 bytes
  2820 ;; Hardware stack levels used:    1
  2821 ;; Hardware stack levels required when called:    6
  2822 ;; This function calls:
  2823 ;;		_Drive1m
  2824 ;;		_Turn90
  2825 ;; This function is called by:
  2826 ;;		_re_route
  2827 ;;		_main
  2828 ;; This function uses a non-reentrant model
  2829 ;;
  2830                           
  2831                           
  2832                           ;psect for function _TravelPath
  2833  0EEB                     _TravelPath:	
  2834                           
  2835                           ;main.c: 363: for (char n = 1; n <= (pathCountShortest); n++){
  2836                           
  2837                           ;incstack = 0
  2838                           ; Regs used in _TravelPath: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2839  0EEB  1283               	bcf	3,5	;RP0=0, select bank0
  2840  0EEC  1303               	bcf	3,6	;RP1=0, select bank0
  2841  0EED  01BC               	clrf	TravelPath@n
  2842  0EEE  0ABC               	incf	TravelPath@n,f
  2843  0EEF                     l4287:	
  2844  0EEF  083C               	movf	TravelPath@n,w
  2845  0EF0  0267               	subwf	_pathCountShortest,w
  2846  0EF1  1C03               	btfss	3,0
  2847  0EF2  0008               	return
  2848                           
  2849                           ;main.c: 365: if (pathShortest[0][n] > x){
  2850  0EF3  083C               	movf	TravelPath@n,w
  2851  0EF4  3EB0               	addlw	(low (_pathShortest| (0+256)))& (0+255)
  2852  0EF5  0084               	movwf	4
  2853  0EF6  1783               	bsf	3,7	;select IRP bank3
  2854  0EF7  0800               	movf	0,w
  2855  0EF8  0268               	subwf	_x,w
  2856  0EF9  1C03               	btfss	3,0
  2857  0EFA  2F22               	goto	l4217
  2858  0EFB  2F30               	goto	l4221
  2859  0EFC                     l4205:	
  2860                           ;main.c: 367: case 0: Turn90(0);
  2861                           
  2862                           ;main.c: 366: switch (orientation){
  2863                           
  2864  0EFC  3000               	movlw	0
  2865  0EFD  120A  158A  2373  120A  158A  	fcall	_Turn90
  2866                           
  2867                           ;main.c: 368: break;
  2868  0F02  2FEC               	goto	l4279
  2869  0F03                     l4207:	
  2870                           ;main.c: 369: case 2: Turn90(1);
  2871                           
  2872  0F03  3001               	movlw	1
  2873  0F04  120A  158A  2373  120A  158A  	fcall	_Turn90
  2874                           
  2875                           ;main.c: 370: break;
  2876  0F09  2FEC               	goto	l4279
  2877  0F0A                     l4209:	
  2878                           ;main.c: 371: case 3: Turn90(1);
  2879                           
  2880  0F0A  3001               	movlw	1
  2881  0F0B  120A  158A  2373  120A  158A  	fcall	_Turn90
  2882                           
  2883                           ;main.c: 372: _delay((unsigned long)((5)*(20000000/4000.0)));
  2884  0F10  3021               	movlw	33
  2885  0F11  1283               	bcf	3,5	;RP0=0, select bank0
  2886  0F12  1303               	bcf	3,6	;RP1=0, select bank0
  2887  0F13  00BB               	movwf	??_TravelPath+1
  2888  0F14  3076               	movlw	118
  2889  0F15  00BA               	movwf	??_TravelPath
  2890  0F16                     u3517:	
  2891  0F16  0BBA               	decfsz	??_TravelPath,f
  2892  0F17  2F16               	goto	u3517
  2893  0F18  0BBB               	decfsz	??_TravelPath+1,f
  2894  0F19  2F16               	goto	u3517
  2895  0F1A  0000               	nop
  2896                           
  2897                           ;main.c: 373: Turn90(1);
  2898  0F1B  3001               	movlw	1
  2899  0F1C  120A  158A  2373  120A  158A  	fcall	_Turn90
  2900                           
  2901                           ;main.c: 375: }
  2902                           
  2903                           ;main.c: 374: break;
  2904  0F21  2FEC               	goto	l4279
  2905  0F22                     l4217:	
  2906  0F22  1283               	bcf	3,5	;RP0=0, select bank0
  2907  0F23  1303               	bcf	3,6	;RP1=0, select bank0
  2908  0F24  0866               	movf	_orientation,w
  2909                           
  2910                           ; Switch size 1, requested type "space"
  2911                           ; Number of cases is 3, Range of values is 0 to 3
  2912                           ; switch strategies available:
  2913                           ; Name         Instructions Cycles
  2914                           ; simple_byte           10     6 (average)
  2915                           ; direct_byte           20     8 (fixed)
  2916                           ; jumptable            260     6 (fixed)
  2917                           ;	Chosen strategy is simple_byte
  2918  0F25  3A00               	xorlw	0	; case 0
  2919  0F26  1903               	skipnz
  2920  0F27  2EFC               	goto	l4205
  2921  0F28  3A02               	xorlw	2	; case 2
  2922  0F29  1903               	skipnz
  2923  0F2A  2F03               	goto	l4207
  2924  0F2B  3A01               	xorlw	1	; case 3
  2925  0F2C  1903               	skipnz
  2926  0F2D  2F0A               	goto	l4209
  2927  0F2E  2F2F               	goto	l4219
  2928  0F2F                     l4219:	
  2929  0F2F  2FEC               	goto	l4279
  2930  0F30                     l4221:	
  2931                           ;main.c: 377: }
  2932                           
  2933                           ;main.c: 376: Drive1m();
  2934                           
  2935                           
  2936                           ;main.c: 379: else if (pathShortest[0][n] < x){
  2937  0F30  1283               	bcf	3,5	;RP0=0, select bank0
  2938  0F31  1303               	bcf	3,6	;RP1=0, select bank0
  2939  0F32  083C               	movf	TravelPath@n,w
  2940  0F33  3EB0               	addlw	(low (_pathShortest| (0+256)))& (0+255)
  2941  0F34  0084               	movwf	4
  2942  0F35  0868               	movf	_x,w
  2943  0F36  1783               	bsf	3,7	;select IRP bank3
  2944  0F37  0200               	subwf	0,w
  2945  0F38  1C03               	btfss	3,0
  2946  0F39  2F61               	goto	l4237
  2947  0F3A  2F6F               	goto	l4241
  2948  0F3B                     l4225:	
  2949                           ;main.c: 381: case 0: Turn90(1);
  2950                           
  2951                           ;main.c: 380: switch (orientation){
  2952                           
  2953  0F3B  3001               	movlw	1
  2954  0F3C  120A  158A  2373  120A  158A  	fcall	_Turn90
  2955                           
  2956                           ;main.c: 382: break;
  2957  0F41  2FEC               	goto	l4279
  2958  0F42                     l4227:	
  2959                           ;main.c: 383: case 2: Turn90(0);
  2960                           
  2961  0F42  3000               	movlw	0
  2962  0F43  120A  158A  2373  120A  158A  	fcall	_Turn90
  2963                           
  2964                           ;main.c: 384: break;
  2965  0F48  2FEC               	goto	l4279
  2966  0F49                     l4229:	
  2967                           ;main.c: 385: case 1: Turn90(1);
  2968                           
  2969  0F49  3001               	movlw	1
  2970  0F4A  120A  158A  2373  120A  158A  	fcall	_Turn90
  2971                           
  2972                           ;main.c: 386: _delay((unsigned long)((5)*(20000000/4000.0)));
  2973  0F4F  3021               	movlw	33
  2974  0F50  1283               	bcf	3,5	;RP0=0, select bank0
  2975  0F51  1303               	bcf	3,6	;RP1=0, select bank0
  2976  0F52  00BB               	movwf	??_TravelPath+1
  2977  0F53  3076               	movlw	118
  2978  0F54  00BA               	movwf	??_TravelPath
  2979  0F55                     u3527:	
  2980  0F55  0BBA               	decfsz	??_TravelPath,f
  2981  0F56  2F55               	goto	u3527
  2982  0F57  0BBB               	decfsz	??_TravelPath+1,f
  2983  0F58  2F55               	goto	u3527
  2984  0F59  0000               	nop
  2985                           
  2986                           ;main.c: 387: Turn90(1);
  2987  0F5A  3001               	movlw	1
  2988  0F5B  120A  158A  2373  120A  158A  	fcall	_Turn90
  2989                           
  2990                           ;main.c: 389: }
  2991                           
  2992                           ;main.c: 388: break;
  2993  0F60  2FEC               	goto	l4279
  2994  0F61                     l4237:	
  2995  0F61  1283               	bcf	3,5	;RP0=0, select bank0
  2996  0F62  1303               	bcf	3,6	;RP1=0, select bank0
  2997  0F63  0866               	movf	_orientation,w
  2998                           
  2999                           ; Switch size 1, requested type "space"
  3000                           ; Number of cases is 3, Range of values is 0 to 2
  3001                           ; switch strategies available:
  3002                           ; Name         Instructions Cycles
  3003                           ; simple_byte           10     6 (average)
  3004                           ; direct_byte           17     8 (fixed)
  3005                           ; jumptable            260     6 (fixed)
  3006                           ;	Chosen strategy is simple_byte
  3007  0F64  3A00               	xorlw	0	; case 0
  3008  0F65  1903               	skipnz
  3009  0F66  2F3B               	goto	l4225
  3010  0F67  3A01               	xorlw	1	; case 1
  3011  0F68  1903               	skipnz
  3012  0F69  2F49               	goto	l4229
  3013  0F6A  3A03               	xorlw	3	; case 2
  3014  0F6B  1903               	skipnz
  3015  0F6C  2F42               	goto	l4227
  3016  0F6D  2F6E               	goto	l4239
  3017  0F6E                     l4239:	
  3018  0F6E  2FEC               	goto	l4279
  3019  0F6F                     l4241:	
  3020                           ;main.c: 391: }
  3021                           
  3022                           ;main.c: 390: Drive1m();
  3023                           
  3024                           
  3025                           ;main.c: 393: else if(pathShortest[1][n] > y){
  3026  0F6F  1283               	bcf	3,5	;RP0=0, select bank0
  3027  0F70  1303               	bcf	3,6	;RP1=0, select bank0
  3028  0F71  083C               	movf	TravelPath@n,w
  3029  0F72  3EC0               	addlw	(low ((_pathShortest| (0+256)+16)))& (0+255)
  3030  0F73  0084               	movwf	4
  3031  0F74  1783               	bsf	3,7	;select IRP bank3
  3032  0F75  0800               	movf	0,w
  3033  0F76  025F               	subwf	_y,w
  3034  0F77  1C03               	btfss	3,0
  3035  0F78  2FA0               	goto	l4257
  3036  0F79  2FAE               	goto	l4261
  3037  0F7A                     l4245:	
  3038                           ;main.c: 395: case 1: Turn90(0);
  3039                           
  3040                           ;main.c: 394: switch(orientation){
  3041                           
  3042  0F7A  3000               	movlw	0
  3043  0F7B  120A  158A  2373  120A  158A  	fcall	_Turn90
  3044                           
  3045                           ;main.c: 396: break;
  3046  0F80  2FEC               	goto	l4279
  3047  0F81                     l4247:	
  3048                           ;main.c: 397: case 3: Turn90(1);
  3049                           
  3050  0F81  3001               	movlw	1
  3051  0F82  120A  158A  2373  120A  158A  	fcall	_Turn90
  3052                           
  3053                           ;main.c: 398: break;
  3054  0F87  2FEC               	goto	l4279
  3055  0F88                     l4249:	
  3056                           ;main.c: 399: case 0: Turn90(1);
  3057                           
  3058  0F88  3001               	movlw	1
  3059  0F89  120A  158A  2373  120A  158A  	fcall	_Turn90
  3060                           
  3061                           ;main.c: 400: _delay((unsigned long)((5)*(20000000/4000.0)));
  3062  0F8E  3021               	movlw	33
  3063  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  3064  0F90  1303               	bcf	3,6	;RP1=0, select bank0
  3065  0F91  00BB               	movwf	??_TravelPath+1
  3066  0F92  3076               	movlw	118
  3067  0F93  00BA               	movwf	??_TravelPath
  3068  0F94                     u3537:	
  3069  0F94  0BBA               	decfsz	??_TravelPath,f
  3070  0F95  2F94               	goto	u3537
  3071  0F96  0BBB               	decfsz	??_TravelPath+1,f
  3072  0F97  2F94               	goto	u3537
  3073  0F98  0000               	nop
  3074                           
  3075                           ;main.c: 401: Turn90(1);
  3076  0F99  3001               	movlw	1
  3077  0F9A  120A  158A  2373  120A  158A  	fcall	_Turn90
  3078                           
  3079                           ;main.c: 403: }
  3080                           
  3081                           ;main.c: 402: break;
  3082  0F9F  2FEC               	goto	l4279
  3083  0FA0                     l4257:	
  3084  0FA0  1283               	bcf	3,5	;RP0=0, select bank0
  3085  0FA1  1303               	bcf	3,6	;RP1=0, select bank0
  3086  0FA2  0866               	movf	_orientation,w
  3087                           
  3088                           ; Switch size 1, requested type "space"
  3089                           ; Number of cases is 3, Range of values is 0 to 3
  3090                           ; switch strategies available:
  3091                           ; Name         Instructions Cycles
  3092                           ; simple_byte           10     6 (average)
  3093                           ; direct_byte           20     8 (fixed)
  3094                           ; jumptable            260     6 (fixed)
  3095                           ;	Chosen strategy is simple_byte
  3096  0FA3  3A00               	xorlw	0	; case 0
  3097  0FA4  1903               	skipnz
  3098  0FA5  2F88               	goto	l4249
  3099  0FA6  3A01               	xorlw	1	; case 1
  3100  0FA7  1903               	skipnz
  3101  0FA8  2F7A               	goto	l4245
  3102  0FA9  3A02               	xorlw	2	; case 3
  3103  0FAA  1903               	skipnz
  3104  0FAB  2F81               	goto	l4247
  3105  0FAC  2FAD               	goto	l4259
  3106  0FAD                     l4259:	
  3107  0FAD  2FEC               	goto	l4279
  3108  0FAE                     l4261:	
  3109                           ;main.c: 405: }
  3110                           
  3111                           ;main.c: 404: Drive1m();
  3112                           
  3113                           
  3114                           ;main.c: 407: else if (pathShortest[1][n] < y){
  3115  0FAE  1283               	bcf	3,5	;RP0=0, select bank0
  3116  0FAF  1303               	bcf	3,6	;RP1=0, select bank0
  3117  0FB0  083C               	movf	TravelPath@n,w
  3118  0FB1  3EC0               	addlw	(low ((_pathShortest| (0+256)+16)))& (0+255)
  3119  0FB2  0084               	movwf	4
  3120  0FB3  085F               	movf	_y,w
  3121  0FB4  1783               	bsf	3,7	;select IRP bank3
  3122  0FB5  0200               	subwf	0,w
  3123  0FB6  1C03               	btfss	3,0
  3124  0FB7  2FDF               	goto	l4277
  3125  0FB8  2FF1               	goto	l4281
  3126  0FB9                     l4265:	
  3127                           ;main.c: 409: case 1: Turn90(1);
  3128                           
  3129                           ;main.c: 408: switch (orientation){
  3130                           
  3131  0FB9  3001               	movlw	1
  3132  0FBA  120A  158A  2373  120A  158A  	fcall	_Turn90
  3133                           
  3134                           ;main.c: 410: break;
  3135  0FBF  2FEC               	goto	l4279
  3136  0FC0                     l4267:	
  3137                           ;main.c: 411: case 3: Turn90(0);
  3138                           
  3139  0FC0  3000               	movlw	0
  3140  0FC1  120A  158A  2373  120A  158A  	fcall	_Turn90
  3141                           
  3142                           ;main.c: 412: break;
  3143  0FC6  2FEC               	goto	l4279
  3144  0FC7                     l4269:	
  3145                           ;main.c: 413: case 2: Turn90(1);
  3146                           
  3147  0FC7  3001               	movlw	1
  3148  0FC8  120A  158A  2373  120A  158A  	fcall	_Turn90
  3149                           
  3150                           ;main.c: 414: _delay((unsigned long)((5)*(20000000/4000.0)));
  3151  0FCD  3021               	movlw	33
  3152  0FCE  1283               	bcf	3,5	;RP0=0, select bank0
  3153  0FCF  1303               	bcf	3,6	;RP1=0, select bank0
  3154  0FD0  00BB               	movwf	??_TravelPath+1
  3155  0FD1  3076               	movlw	118
  3156  0FD2  00BA               	movwf	??_TravelPath
  3157  0FD3                     u3547:	
  3158  0FD3  0BBA               	decfsz	??_TravelPath,f
  3159  0FD4  2FD3               	goto	u3547
  3160  0FD5  0BBB               	decfsz	??_TravelPath+1,f
  3161  0FD6  2FD3               	goto	u3547
  3162  0FD7  0000               	nop
  3163                           
  3164                           ;main.c: 415: Turn90(1);
  3165  0FD8  3001               	movlw	1
  3166  0FD9  120A  158A  2373  120A  158A  	fcall	_Turn90
  3167                           
  3168                           ;main.c: 417: }
  3169                           
  3170                           ;main.c: 416: break;
  3171  0FDE  2FEC               	goto	l4279
  3172  0FDF                     l4277:	
  3173  0FDF  1283               	bcf	3,5	;RP0=0, select bank0
  3174  0FE0  1303               	bcf	3,6	;RP1=0, select bank0
  3175  0FE1  0866               	movf	_orientation,w
  3176                           
  3177                           ; Switch size 1, requested type "space"
  3178                           ; Number of cases is 3, Range of values is 1 to 3
  3179                           ; switch strategies available:
  3180                           ; Name         Instructions Cycles
  3181                           ; simple_byte           10     6 (average)
  3182                           ; direct_byte           20    11 (fixed)
  3183                           ; jumptable            263     9 (fixed)
  3184                           ;	Chosen strategy is simple_byte
  3185  0FE2  3A01               	xorlw	1	; case 1
  3186  0FE3  1903               	skipnz
  3187  0FE4  2FB9               	goto	l4265
  3188  0FE5  3A03               	xorlw	3	; case 2
  3189  0FE6  1903               	skipnz
  3190  0FE7  2FC7               	goto	l4269
  3191  0FE8  3A01               	xorlw	1	; case 3
  3192  0FE9  1903               	skipnz
  3193  0FEA  2FC0               	goto	l4267
  3194  0FEB  2FEC               	goto	l4279
  3195  0FEC                     l4279:	
  3196                           
  3197                           ;main.c: 418: Drive1m();
  3198  0FEC  120A  158A  2414  120A  158A  	fcall	_Drive1m
  3199  0FF1                     l4281:	
  3200                           
  3201                           ;main.c: 419: }
  3202                           ;main.c: 422: if (IR_Wall == 1){
  3203  0FF1  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  3204  0FF2  2FF9               	goto	l4285
  3205                           
  3206                           ;main.c: 423: n = 20;
  3207  0FF3  3014               	movlw	20
  3208  0FF4  1283               	bcf	3,5	;RP0=0, select bank0
  3209  0FF5  1303               	bcf	3,6	;RP1=0, select bank0
  3210  0FF6  00BA               	movwf	??_TravelPath
  3211  0FF7  083A               	movf	??_TravelPath,w
  3212  0FF8  00BC               	movwf	TravelPath@n
  3213  0FF9                     l4285:	
  3214  0FF9  3001               	movlw	1
  3215  0FFA  1283               	bcf	3,5	;RP0=0, select bank0
  3216  0FFB  1303               	bcf	3,6	;RP1=0, select bank0
  3217  0FFC  00BA               	movwf	??_TravelPath
  3218  0FFD  083A               	movf	??_TravelPath,w
  3219  0FFE  07BC               	addwf	TravelPath@n,f
  3220  0FFF  2EEF               	goto	l4287
  3221  1000                     __end_of_TravelPath:	
  3222                           
  3223                           	psect	text8
  3224  0B73                     __ptext8:	
  3225 ;; *************** function _Turn90 *****************
  3226 ;; Defined at:
  3227 ;;		line 330 in file "main.c"
  3228 ;; Parameters:    Size  Location     Type
  3229 ;;  direction       1    wreg     unsigned char 
  3230 ;; Auto vars:     Size  Location     Type
  3231 ;;  direction       1   13[BANK0 ] unsigned char 
  3232 ;; Return value:  Size  Location     Type
  3233 ;;                  1    wreg      void 
  3234 ;; Registers used:
  3235 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3236 ;; Tracked objects:
  3237 ;;		On entry : 0/0
  3238 ;;		On exit  : 0/0
  3239 ;;		Unchanged: 0/0
  3240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3241 ;;      Params:         0       0       0       0       0
  3242 ;;      Locals:         0       1       0       0       0
  3243 ;;      Temps:          0       3       0       0       0
  3244 ;;      Totals:         0       4       0       0       0
  3245 ;;Total ram usage:        4 bytes
  3246 ;; Hardware stack levels used:    1
  3247 ;; Hardware stack levels required when called:    3
  3248 ;; This function calls:
  3249 ;;		_Drive
  3250 ;;		_DriveDirect
  3251 ;;		_getSensorData
  3252 ;; This function is called by:
  3253 ;;		_TravelPath
  3254 ;;		_re_route
  3255 ;; This function uses a non-reentrant model
  3256 ;;
  3257                           
  3258                           
  3259                           ;psect for function _Turn90
  3260  0B73                     _Turn90:	
  3261                           
  3262                           ;incstack = 0
  3263                           ; Regs used in _Turn90: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3264                           ;Turn90@direction stored from wreg
  3265  0B73  1283               	bcf	3,5	;RP0=0, select bank0
  3266  0B74  1303               	bcf	3,6	;RP1=0, select bank0
  3267  0B75  00AD               	movwf	Turn90@direction
  3268                           
  3269                           ;main.c: 332: angle = 0;
  3270  0B76  01F6               	clrf	_angle
  3271  0B77  01F7               	clrf	_angle+1
  3272                           
  3273                           ;main.c: 334: if (direction == 1){
  3274  0B78  032D               	decf	Turn90@direction,w
  3275  0B79  1D03               	btfss	3,2
  3276  0B7A  2BB4               	goto	l3941
  3277                           
  3278                           ;main.c: 336: if (orientation == 0)
  3279  0B7B  0866               	movf	_orientation,w
  3280  0B7C  1D03               	btfss	3,2
  3281  0B7D  2B83               	goto	l3933
  3282                           
  3283                           ;main.c: 337: orientation = 3;
  3284  0B7E  3003               	movlw	3
  3285  0B7F  00AA               	movwf	??_Turn90
  3286  0B80  082A               	movf	??_Turn90,w
  3287  0B81  00E6               	movwf	_orientation
  3288  0B82  2B85               	goto	l3935
  3289  0B83                     l3933:	
  3290                           
  3291                           ;main.c: 338: else orientation--;
  3292  0B83  3001               	movlw	1
  3293  0B84  02E6               	subwf	_orientation,f
  3294  0B85                     l3935:	
  3295                           
  3296                           ;main.c: 340: Drive(0,150,0x00,0x01);
  3297  0B85  3096               	movlw	150
  3298  0B86  00AA               	movwf	??_Turn90
  3299  0B87  082A               	movf	??_Turn90,w
  3300  0B88  00A1               	movwf	Drive@speedL
  3301  0B89  01A2               	clrf	Drive@radH
  3302  0B8A  01A3               	clrf	Drive@radL
  3303  0B8B  0AA3               	incf	Drive@radL,f
  3304  0B8C  3000               	movlw	0
  3305  0B8D  120A  158A  20FA  120A  158A  	fcall	_Drive
  3306  0B92                     l3939:	
  3307                           ;main.c: 341: while (angle < 86){
  3308                           
  3309  0B92  0877               	movf	_angle+1,w
  3310  0B93  3A80               	xorlw	128
  3311  0B94  00FF               	movwf	127
  3312  0B95  3080               	movlw	128
  3313  0B96  027F               	subwf	127,w
  3314  0B97  1D03               	skipz
  3315  0B98  2B9B               	goto	u2725
  3316  0B99  3056               	movlw	86
  3317  0B9A  0276               	subwf	_angle,w
  3318  0B9B                     u2725:	
  3319  0B9B  1803               	btfsc	3,0
  3320  0B9C  2BB4               	goto	l3941
  3321                           
  3322                           ;main.c: 342: angle = angle + getSensorData(20,2);
  3323  0B9D  3002               	movlw	2
  3324  0B9E  1283               	bcf	3,5	;RP0=0, select bank0
  3325  0B9F  1303               	bcf	3,6	;RP1=0, select bank0
  3326  0BA0  00AA               	movwf	??_Turn90
  3327  0BA1  082A               	movf	??_Turn90,w
  3328  0BA2  00A2               	movwf	getSensorData@bytes
  3329  0BA3  3014               	movlw	20
  3330  0BA4  120A  158A  214A  120A  158A  	fcall	_getSensorData
  3331  0BA9  0876               	movf	_angle,w
  3332  0BAA  1283               	bcf	3,5	;RP0=0, select bank0
  3333  0BAB  1303               	bcf	3,6	;RP1=0, select bank0
  3334  0BAC  0722               	addwf	?_getSensorData,w
  3335  0BAD  00F6               	movwf	_angle
  3336  0BAE  0877               	movf	_angle+1,w
  3337  0BAF  1803               	skipnc
  3338  0BB0  0A77               	incf	_angle+1,w
  3339  0BB1  0723               	addwf	?_getSensorData+1,w
  3340  0BB2  00F7               	movwf	_angle+1
  3341  0BB3  2B92               	goto	l3939
  3342  0BB4                     l3941:	
  3343                           
  3344                           ;main.c: 343: }
  3345                           ;main.c: 344: }
  3346                           ;main.c: 346: if (direction == 0){
  3347  0BB4  1283               	bcf	3,5	;RP0=0, select bank0
  3348  0BB5  1303               	bcf	3,6	;RP1=0, select bank0
  3349  0BB6  082D               	movf	Turn90@direction,w
  3350  0BB7  1D03               	btfss	3,2
  3351  0BB8  2BF7               	goto	l3955
  3352                           
  3353                           ;main.c: 348: if (orientation == 3)
  3354  0BB9  3003               	movlw	3
  3355  0BBA  0666               	xorwf	_orientation,w
  3356  0BBB  1D03               	btfss	3,2
  3357  0BBC  2BBF               	goto	l3947
  3358                           
  3359                           ;main.c: 349: orientation = 0;
  3360  0BBD  01E6               	clrf	_orientation
  3361  0BBE  2BC3               	goto	l3949
  3362  0BBF                     l3947:	
  3363                           
  3364                           ;main.c: 350: else orientation++;
  3365  0BBF  3001               	movlw	1
  3366  0BC0  00AA               	movwf	??_Turn90
  3367  0BC1  082A               	movf	??_Turn90,w
  3368  0BC2  07E6               	addwf	_orientation,f
  3369  0BC3                     l3949:	
  3370                           
  3371                           ;main.c: 352: Drive(0,150,0xFF,0xFF);
  3372  0BC3  3096               	movlw	150
  3373  0BC4  00AA               	movwf	??_Turn90
  3374  0BC5  082A               	movf	??_Turn90,w
  3375  0BC6  00A1               	movwf	Drive@speedL
  3376  0BC7  30FF               	movlw	255
  3377  0BC8  00AB               	movwf	??_Turn90+1
  3378  0BC9  082B               	movf	??_Turn90+1,w
  3379  0BCA  00A2               	movwf	Drive@radH
  3380  0BCB  30FF               	movlw	255
  3381  0BCC  00AC               	movwf	??_Turn90+2
  3382  0BCD  082C               	movf	??_Turn90+2,w
  3383  0BCE  00A3               	movwf	Drive@radL
  3384  0BCF  3000               	movlw	0
  3385  0BD0  120A  158A  20FA  120A  158A  	fcall	_Drive
  3386  0BD5                     l3953:	
  3387                           ;main.c: 353: while (angle > -86){
  3388                           
  3389  0BD5  0877               	movf	_angle+1,w
  3390  0BD6  3A80               	xorlw	128
  3391  0BD7  00FF               	movwf	127
  3392  0BD8  307F               	movlw	127
  3393  0BD9  027F               	subwf	127,w
  3394  0BDA  1D03               	skipz
  3395  0BDB  2BDE               	goto	u2755
  3396  0BDC  30AB               	movlw	171
  3397  0BDD  0276               	subwf	_angle,w
  3398  0BDE                     u2755:	
  3399  0BDE  1C03               	btfss	3,0
  3400  0BDF  2BF7               	goto	l3955
  3401                           
  3402                           ;main.c: 354: angle = angle + getSensorData(20,2);
  3403  0BE0  3002               	movlw	2
  3404  0BE1  1283               	bcf	3,5	;RP0=0, select bank0
  3405  0BE2  1303               	bcf	3,6	;RP1=0, select bank0
  3406  0BE3  00AA               	movwf	??_Turn90
  3407  0BE4  082A               	movf	??_Turn90,w
  3408  0BE5  00A2               	movwf	getSensorData@bytes
  3409  0BE6  3014               	movlw	20
  3410  0BE7  120A  158A  214A  120A  158A  	fcall	_getSensorData
  3411  0BEC  0876               	movf	_angle,w
  3412  0BED  1283               	bcf	3,5	;RP0=0, select bank0
  3413  0BEE  1303               	bcf	3,6	;RP1=0, select bank0
  3414  0BEF  0722               	addwf	?_getSensorData,w
  3415  0BF0  00F6               	movwf	_angle
  3416  0BF1  0877               	movf	_angle+1,w
  3417  0BF2  1803               	skipnc
  3418  0BF3  0A77               	incf	_angle+1,w
  3419  0BF4  0723               	addwf	?_getSensorData+1,w
  3420  0BF5  00F7               	movwf	_angle+1
  3421  0BF6  2BD5               	goto	l3953
  3422  0BF7                     l3955:	
  3423                           
  3424                           ;main.c: 355: }
  3425                           ;main.c: 356: }
  3426                           ;main.c: 357: DriveDirect(0,0);
  3427  0BF7  3000               	movlw	0
  3428  0BF8  1283               	bcf	3,5	;RP0=0, select bank0
  3429  0BF9  1303               	bcf	3,6	;RP1=0, select bank0
  3430  0BFA  00A1               	movwf	DriveDirect@VelocityRight
  3431  0BFB  00A2               	movwf	DriveDirect@VelocityRight+1
  3432  0BFC  3000               	movlw	0
  3433  0BFD  00A3               	movwf	DriveDirect@VelocityLeft
  3434  0BFE  00A4               	movwf	DriveDirect@VelocityLeft+1
  3435  0BFF  120A  158A  224B  120A  158A  	fcall	_DriveDirect
  3436                           
  3437                           ;main.c: 358: _delay((unsigned long)((100)*(20000000/4000.0)));
  3438  0C04  3003               	movlw	3
  3439  0C05  1283               	bcf	3,5	;RP0=0, select bank0
  3440  0C06  1303               	bcf	3,6	;RP1=0, select bank0
  3441  0C07  00AC               	movwf	??_Turn90+2
  3442  0C08  308A               	movlw	138
  3443  0C09  00AB               	movwf	??_Turn90+1
  3444  0C0A  3056               	movlw	86
  3445  0C0B  00AA               	movwf	??_Turn90
  3446  0C0C                     u3557:	
  3447  0C0C  0BAA               	decfsz	??_Turn90,f
  3448  0C0D  2C0C               	goto	u3557
  3449  0C0E  0BAB               	decfsz	??_Turn90+1,f
  3450  0C0F  2C0C               	goto	u3557
  3451  0C10  0BAC               	decfsz	??_Turn90+2,f
  3452  0C11  2C0C               	goto	u3557
  3453  0C12  2C13               	nop2
  3454  0C13  0008               	return
  3455  0C14                     __end_of_Turn90:	
  3456                           
  3457                           	psect	text9
  3458  08FA                     __ptext9:	
  3459 ;; *************** function _Drive *****************
  3460 ;; Defined at:
  3461 ;;		line 45 in file "ser.c"
  3462 ;; Parameters:    Size  Location     Type
  3463 ;;  speedH          1    wreg     unsigned char 
  3464 ;;  speedL          1    1[BANK0 ] unsigned char 
  3465 ;;  radH            1    2[BANK0 ] unsigned char 
  3466 ;;  radL            1    3[BANK0 ] unsigned char 
  3467 ;; Auto vars:     Size  Location     Type
  3468 ;;  speedH          1    4[BANK0 ] unsigned char 
  3469 ;; Return value:  Size  Location     Type
  3470 ;;                  1    wreg      void 
  3471 ;; Registers used:
  3472 ;;		wreg, status,2, status,0, pclath, cstack
  3473 ;; Tracked objects:
  3474 ;;		On entry : 0/0
  3475 ;;		On exit  : 0/0
  3476 ;;		Unchanged: 0/0
  3477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3478 ;;      Params:         0       3       0       0       0
  3479 ;;      Locals:         0       1       0       0       0
  3480 ;;      Temps:          0       0       0       0       0
  3481 ;;      Totals:         0       4       0       0       0
  3482 ;;Total ram usage:        4 bytes
  3483 ;; Hardware stack levels used:    1
  3484 ;; Hardware stack levels required when called:    2
  3485 ;; This function calls:
  3486 ;;		_ser_putch
  3487 ;; This function is called by:
  3488 ;;		_Turn90
  3489 ;; This function uses a non-reentrant model
  3490 ;;
  3491                           
  3492                           
  3493                           ;psect for function _Drive
  3494  08FA                     _Drive:	
  3495                           
  3496                           ;incstack = 0
  3497                           ; Regs used in _Drive: [wreg+status,2+status,0+pclath+cstack]
  3498                           ;Drive@speedH stored from wreg
  3499  08FA  1283               	bcf	3,5	;RP0=0, select bank0
  3500  08FB  1303               	bcf	3,6	;RP1=0, select bank0
  3501  08FC  00A4               	movwf	Drive@speedH
  3502                           
  3503                           ;ser.c: 46: ser_putch(137);
  3504  08FD  3089               	movlw	137
  3505  08FE  160A  118A  27D4  120A  158A  	fcall	_ser_putch
  3506                           
  3507                           ;ser.c: 47: ser_putch(speedH);
  3508  0903  1283               	bcf	3,5	;RP0=0, select bank0
  3509  0904  1303               	bcf	3,6	;RP1=0, select bank0
  3510  0905  0824               	movf	Drive@speedH,w
  3511  0906  160A  118A  27D4  120A  158A  	fcall	_ser_putch
  3512                           
  3513                           ;ser.c: 48: ser_putch(speedL);
  3514  090B  1283               	bcf	3,5	;RP0=0, select bank0
  3515  090C  1303               	bcf	3,6	;RP1=0, select bank0
  3516  090D  0821               	movf	Drive@speedL,w
  3517  090E  160A  118A  27D4  120A  158A  	fcall	_ser_putch
  3518                           
  3519                           ;ser.c: 49: ser_putch(radH);
  3520  0913  1283               	bcf	3,5	;RP0=0, select bank0
  3521  0914  1303               	bcf	3,6	;RP1=0, select bank0
  3522  0915  0822               	movf	Drive@radH,w
  3523  0916  160A  118A  27D4  120A  158A  	fcall	_ser_putch
  3524                           
  3525                           ;ser.c: 50: ser_putch(radL);
  3526  091B  1283               	bcf	3,5	;RP0=0, select bank0
  3527  091C  1303               	bcf	3,6	;RP1=0, select bank0
  3528  091D  0823               	movf	Drive@radL,w
  3529  091E  160A  118A  27D4   	fcall	_ser_putch
  3530  0921  0008               	return
  3531  0922                     __end_of_Drive:	
  3532                           
  3533                           	psect	text10
  3534  0C14                     __ptext10:	
  3535 ;; *************** function _Drive1m *****************
  3536 ;; Defined at:
  3537 ;;		line 253 in file "main.c"
  3538 ;; Parameters:    Size  Location     Type
  3539 ;;		None
  3540 ;; Auto vars:     Size  Location     Type
  3541 ;;  omni_IR         1   25[BANK0 ] unsigned char 
  3542 ;;  n               1   24[BANK0 ] unsigned char 
  3543 ;; Return value:  Size  Location     Type
  3544 ;;                  1    wreg      void 
  3545 ;; Registers used:
  3546 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3547 ;; Tracked objects:
  3548 ;;		On entry : 0/0
  3549 ;;		On exit  : 0/0
  3550 ;;		Unchanged: 0/0
  3551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3552 ;;      Params:         0       0       0       0       0
  3553 ;;      Locals:         0       2       0       0       0
  3554 ;;      Temps:          0       3       0       0       0
  3555 ;;      Totals:         0       5       0       0       0
  3556 ;;Total ram usage:        5 bytes
  3557 ;; Hardware stack levels used:    1
  3558 ;; Hardware stack levels required when called:    5
  3559 ;; This function calls:
  3560 ;;		_DriveDirect
  3561 ;;		_getSensorData
  3562 ;;		_ser_putch
  3563 ;;		_wallFollow
  3564 ;; This function is called by:
  3565 ;;		_TravelPath
  3566 ;; This function uses a non-reentrant model
  3567 ;;
  3568                           
  3569                           
  3570                           ;psect for function _Drive1m
  3571  0C14                     _Drive1m:	
  3572                           
  3573                           ;main.c: 261: distance = 0;
  3574                           
  3575                           ;incstack = 0
  3576                           ; Regs used in _Drive1m: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3577  0C14  1283               	bcf	3,5	;RP0=0, select bank0
  3578  0C15  1303               	bcf	3,6	;RP1=0, select bank0
  3579  0C16  01C7               	clrf	_distance
  3580  0C17  01C8               	clrf	_distance+1
  3581                           
  3582                           ;main.c: 263: RB2 = 1;
  3583  0C18  1506               	bsf	6,2	;volatile
  3584                           
  3585                           ;main.c: 264: RB3 = 1;
  3586  0C19  1586               	bsf	6,3	;volatile
  3587  0C1A                     l3899:	
  3588                           ;main.c: 267: while (distance < 1000){
  3589                           
  3590  0C1A  1283               	bcf	3,5	;RP0=0, select bank0
  3591  0C1B  1303               	bcf	3,6	;RP1=0, select bank0
  3592  0C1C  0848               	movf	_distance+1,w
  3593  0C1D  3A80               	xorlw	128
  3594  0C1E  00FF               	movwf	127
  3595  0C1F  3083               	movlw	131
  3596  0C20  027F               	subwf	127,w
  3597  0C21  1D03               	skipz
  3598  0C22  2C25               	goto	u2675
  3599  0C23  30E8               	movlw	232
  3600  0C24  0247               	subwf	_distance,w
  3601  0C25                     u2675:	
  3602  0C25  1803               	btfsc	3,0
  3603  0C26  2CB4               	goto	l3901
  3604                           
  3605                           ;main.c: 269: wallFollow();
  3606  0C27  120A  158A  25E6  120A  158A  	fcall	_wallFollow
  3607                           
  3608                           ;main.c: 270: distance = distance + getSensorData(19,2);
  3609  0C2C  3002               	movlw	2
  3610  0C2D  1283               	bcf	3,5	;RP0=0, select bank0
  3611  0C2E  1303               	bcf	3,6	;RP1=0, select bank0
  3612  0C2F  00B5               	movwf	??_Drive1m
  3613  0C30  0835               	movf	??_Drive1m,w
  3614  0C31  00A2               	movwf	getSensorData@bytes
  3615  0C32  3013               	movlw	19
  3616  0C33  120A  158A  214A  120A  158A  	fcall	_getSensorData
  3617  0C38  1283               	bcf	3,5	;RP0=0, select bank0
  3618  0C39  1303               	bcf	3,6	;RP1=0, select bank0
  3619  0C3A  0847               	movf	_distance,w
  3620  0C3B  0722               	addwf	?_getSensorData,w
  3621  0C3C  00C7               	movwf	_distance
  3622  0C3D  0848               	movf	_distance+1,w
  3623  0C3E  1803               	skipnc
  3624  0C3F  0A48               	incf	_distance+1,w
  3625  0C40  0723               	addwf	?_getSensorData+1,w
  3626  0C41  00C8               	movwf	_distance+1
  3627                           
  3628                           ;main.c: 272: if ((getSensorData(13,1)) == 1){
  3629  0C42  01A2               	clrf	getSensorData@bytes
  3630  0C43  0AA2               	incf	getSensorData@bytes,f
  3631  0C44  300D               	movlw	13
  3632  0C45  120A  158A  214A  120A  158A  	fcall	_getSensorData
  3633  0C4A  1283               	bcf	3,5	;RP0=0, select bank0
  3634  0C4B  1303               	bcf	3,6	;RP1=0, select bank0
  3635  0C4C  0322               	decf	?_getSensorData,w
  3636  0C4D  0423               	iorwf	?_getSensorData+1,w
  3637  0C4E  1D03               	btfss	3,2
  3638  0C4F  2C1A               	goto	l3899
  3639                           
  3640                           ;main.c: 274: if((getSensorData(17,1)) != 242){
  3641  0C50  01A2               	clrf	getSensorData@bytes
  3642  0C51  0AA2               	incf	getSensorData@bytes,f
  3643  0C52  3011               	movlw	17
  3644  0C53  120A  158A  214A  120A  158A  	fcall	_getSensorData
  3645  0C58  30F2               	movlw	242
  3646  0C59  1283               	bcf	3,5	;RP0=0, select bank0
  3647  0C5A  1303               	bcf	3,6	;RP1=0, select bank0
  3648  0C5B  0622               	xorwf	?_getSensorData,w
  3649  0C5C  0423               	iorwf	?_getSensorData+1,w
  3650  0C5D  1903               	btfsc	3,2
  3651  0C5E  2C65               	goto	l3879
  3652                           
  3653                           ;main.c: 275: IR_Wall = 1;
  3654  0C5F  1470               	bsf	_IR_Wall/(0+8),_IR_Wall& (0+7)
  3655                           
  3656                           ;main.c: 276: distance = 1001;
  3657  0C60  30E9               	movlw	233
  3658  0C61  00C7               	movwf	_distance
  3659  0C62  3003               	movlw	3
  3660  0C63  00C8               	movwf	_distance+1
  3661                           
  3662                           ;main.c: 277: RB3 = 0;
  3663  0C64  1186               	bcf	6,3	;volatile
  3664  0C65                     l3879:	
  3665                           
  3666                           ;main.c: 278: }
  3667                           ;main.c: 281: unsigned char omni_IR = (getSensorData(17,1));
  3668  0C65  01A2               	clrf	getSensorData@bytes
  3669  0C66  0AA2               	incf	getSensorData@bytes,f
  3670  0C67  3011               	movlw	17
  3671  0C68  120A  158A  214A  120A  158A  	fcall	_getSensorData
  3672  0C6D  1283               	bcf	3,5	;RP0=0, select bank0
  3673  0C6E  1303               	bcf	3,6	;RP1=0, select bank0
  3674  0C6F  0822               	movf	?_getSensorData,w
  3675  0C70  00B5               	movwf	??_Drive1m
  3676  0C71  0835               	movf	??_Drive1m,w
  3677  0C72  00B9               	movwf	Drive1m@omni_IR
  3678                           
  3679                           ;main.c: 282: if (omni_IR == 250 || omni_IR == 246){
  3680  0C73  30FA               	movlw	250
  3681  0C74  0639               	xorwf	Drive1m@omni_IR,w
  3682  0C75  1903               	btfsc	3,2
  3683  0C76  2C7B               	goto	l3885
  3684  0C77  30F6               	movlw	246
  3685  0C78  0639               	xorwf	Drive1m@omni_IR,w
  3686  0C79  1D03               	btfss	3,2
  3687  0C7A  2C1A               	goto	l3899
  3688  0C7B                     l3885:	
  3689                           
  3690                           ;main.c: 284: targets++;
  3691  0C7B  3001               	movlw	1
  3692  0C7C  00B5               	movwf	??_Drive1m
  3693  0C7D  0835               	movf	??_Drive1m,w
  3694  0C7E  07DA               	addwf	_targets,f
  3695                           
  3696                           ;main.c: 286: switch(targets){
  3697  0C7F  2C9B               	goto	l3895
  3698  0C80                     l3887:	
  3699                           ;main.c: 287: case 1: ser_putch(141);
  3700                           
  3701  0C80  308D               	movlw	141
  3702  0C81  160A  118A  27D4  120A  158A  	fcall	_ser_putch
  3703                           
  3704                           ;main.c: 288: ser_putch(5);
  3705  0C86  3005               	movlw	5
  3706  0C87  160A  118A  27D4  120A  158A  	fcall	_ser_putch
  3707                           
  3708                           ;main.c: 289: break;
  3709  0C8C  2CA5               	goto	l3897
  3710  0C8D                     l3889:	
  3711                           ;main.c: 290: case 2: ser_putch(141);
  3712                           
  3713  0C8D  308D               	movlw	141
  3714  0C8E  160A  118A  27D4  120A  158A  	fcall	_ser_putch
  3715                           
  3716                           ;main.c: 291: ser_putch(3);
  3717  0C93  3003               	movlw	3
  3718  0C94  160A  118A  27D4  120A  158A  	fcall	_ser_putch
  3719                           
  3720                           ;main.c: 292: targets_found = 1;
  3721  0C99  16F0               	bsf	_targets_found/(0+8),_targets_found& (0+7)
  3722                           
  3723                           ;main.c: 294: }
  3724                           
  3725                           ;main.c: 293: break;
  3726  0C9A  2CA5               	goto	l3897
  3727  0C9B                     l3895:	
  3728  0C9B  1283               	bcf	3,5	;RP0=0, select bank0
  3729  0C9C  1303               	bcf	3,6	;RP1=0, select bank0
  3730  0C9D  085A               	movf	_targets,w
  3731                           
  3732                           ; Switch size 1, requested type "space"
  3733                           ; Number of cases is 2, Range of values is 1 to 2
  3734                           ; switch strategies available:
  3735                           ; Name         Instructions Cycles
  3736                           ; simple_byte            7     4 (average)
  3737                           ; direct_byte           17    11 (fixed)
  3738                           ; jumptable            263     9 (fixed)
  3739                           ;	Chosen strategy is simple_byte
  3740  0C9E  3A01               	xorlw	1	; case 1
  3741  0C9F  1903               	skipnz
  3742  0CA0  2C80               	goto	l3887
  3743  0CA1  3A03               	xorlw	3	; case 2
  3744  0CA2  1903               	skipnz
  3745  0CA3  2C8D               	goto	l3889
  3746  0CA4  2CA5               	goto	l3897
  3747  0CA5                     l3897:	
  3748                           
  3749                           ;main.c: 296: _delay((unsigned long)((2000)*(20000000/4000.0)));
  3750  0CA5  3033               	movlw	51
  3751  0CA6  1283               	bcf	3,5	;RP0=0, select bank0
  3752  0CA7  1303               	bcf	3,6	;RP1=0, select bank0
  3753  0CA8  00B7               	movwf	??_Drive1m+2
  3754  0CA9  30BC               	movlw	188
  3755  0CAA  00B6               	movwf	??_Drive1m+1
  3756  0CAB  3010               	movlw	16
  3757  0CAC  00B5               	movwf	??_Drive1m
  3758  0CAD                     u3567:	
  3759  0CAD  0BB5               	decfsz	??_Drive1m,f
  3760  0CAE  2CAD               	goto	u3567
  3761  0CAF  0BB6               	decfsz	??_Drive1m+1,f
  3762  0CB0  2CAD               	goto	u3567
  3763  0CB1  0BB7               	decfsz	??_Drive1m+2,f
  3764  0CB2  2CAD               	goto	u3567
  3765  0CB3  2C1A               	goto	l3899
  3766  0CB4                     l3901:	
  3767                           
  3768                           ;main.c: 298: }
  3769                           ;main.c: 300: }
  3770                           ;main.c: 301: }
  3771                           ;main.c: 304: DriveDirect(0,0);
  3772  0CB4  3000               	movlw	0
  3773  0CB5  1283               	bcf	3,5	;RP0=0, select bank0
  3774  0CB6  1303               	bcf	3,6	;RP1=0, select bank0
  3775  0CB7  00A1               	movwf	DriveDirect@VelocityRight
  3776  0CB8  00A2               	movwf	DriveDirect@VelocityRight+1
  3777  0CB9  3000               	movlw	0
  3778  0CBA  00A3               	movwf	DriveDirect@VelocityLeft
  3779  0CBB  00A4               	movwf	DriveDirect@VelocityLeft+1
  3780  0CBC  120A  158A  224B  120A  158A  	fcall	_DriveDirect
  3781                           
  3782                           ;main.c: 306: if(IR_Wall == 0){
  3783  0CC1  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  3784  0CC2  2CD6               	goto	l3917
  3785  0CC3  2CF3               	goto	l3921
  3786  0CC4                     l3907:	
  3787                           ;main.c: 308: case 0: y--;
  3788                           
  3789                           ;main.c: 307: switch(orientation){
  3790                           
  3791  0CC4  3001               	movlw	1
  3792  0CC5  1283               	bcf	3,5	;RP0=0, select bank0
  3793  0CC6  1303               	bcf	3,6	;RP1=0, select bank0
  3794  0CC7  02DF               	subwf	_y,f
  3795                           
  3796                           ;main.c: 309: break;
  3797  0CC8  2CE6               	goto	l3919
  3798  0CC9                     l3909:	
  3799                           ;main.c: 310: case 1: x++;
  3800                           
  3801  0CC9  3001               	movlw	1
  3802  0CCA  00B5               	movwf	??_Drive1m
  3803  0CCB  0835               	movf	??_Drive1m,w
  3804  0CCC  07E8               	addwf	_x,f
  3805                           
  3806                           ;main.c: 311: break;
  3807  0CCD  2CE6               	goto	l3919
  3808  0CCE                     l3911:	
  3809                           ;main.c: 312: case 2: y++;
  3810                           
  3811  0CCE  3001               	movlw	1
  3812  0CCF  00B5               	movwf	??_Drive1m
  3813  0CD0  0835               	movf	??_Drive1m,w
  3814  0CD1  07DF               	addwf	_y,f
  3815                           
  3816                           ;main.c: 313: break;
  3817  0CD2  2CE6               	goto	l3919
  3818  0CD3                     l3913:	
  3819                           ;main.c: 314: case 3: x--;
  3820                           
  3821  0CD3  3001               	movlw	1
  3822  0CD4  02E8               	subwf	_x,f
  3823                           
  3824                           ;main.c: 316: }
  3825                           
  3826                           ;main.c: 315: break;
  3827  0CD5  2CE6               	goto	l3919
  3828  0CD6                     l3917:	
  3829  0CD6  1283               	bcf	3,5	;RP0=0, select bank0
  3830  0CD7  1303               	bcf	3,6	;RP1=0, select bank0
  3831  0CD8  0866               	movf	_orientation,w
  3832                           
  3833                           ; Switch size 1, requested type "space"
  3834                           ; Number of cases is 4, Range of values is 0 to 3
  3835                           ; switch strategies available:
  3836                           ; Name         Instructions Cycles
  3837                           ; simple_byte           13     7 (average)
  3838                           ; direct_byte           20     8 (fixed)
  3839                           ; jumptable            260     6 (fixed)
  3840                           ;	Chosen strategy is simple_byte
  3841  0CD9  3A00               	xorlw	0	; case 0
  3842  0CDA  1903               	skipnz
  3843  0CDB  2CC4               	goto	l3907
  3844  0CDC  3A01               	xorlw	1	; case 1
  3845  0CDD  1903               	skipnz
  3846  0CDE  2CC9               	goto	l3909
  3847  0CDF  3A03               	xorlw	3	; case 2
  3848  0CE0  1903               	skipnz
  3849  0CE1  2CCE               	goto	l3911
  3850  0CE2  3A01               	xorlw	1	; case 3
  3851  0CE3  1903               	skipnz
  3852  0CE4  2CD3               	goto	l3913
  3853  0CE5  2CE6               	goto	l3919
  3854  0CE6                     l3919:	
  3855                           
  3856                           ;main.c: 317: _delay((unsigned long)((100)*(20000000/4000.0)));
  3857  0CE6  3003               	movlw	3
  3858  0CE7  00B7               	movwf	??_Drive1m+2
  3859  0CE8  308A               	movlw	138
  3860  0CE9  00B6               	movwf	??_Drive1m+1
  3861  0CEA  3056               	movlw	86
  3862  0CEB  00B5               	movwf	??_Drive1m
  3863  0CEC                     u3577:	
  3864  0CEC  0BB5               	decfsz	??_Drive1m,f
  3865  0CED  2CEC               	goto	u3577
  3866  0CEE  0BB6               	decfsz	??_Drive1m+1,f
  3867  0CEF  2CEC               	goto	u3577
  3868  0CF0  0BB7               	decfsz	??_Drive1m+2,f
  3869  0CF1  2CEC               	goto	u3577
  3870  0CF2  2CF3               	nop2
  3871  0CF3                     l3921:	
  3872                           
  3873                           ;main.c: 318: }
  3874                           ;main.c: 323: if (targets_found == 1){
  3875  0CF3  1EF0               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  3876  0CF4  0008               	return
  3877                           
  3878                           ;main.c: 324: char n = 20;
  3879  0CF5  3014               	movlw	20
  3880  0CF6  1283               	bcf	3,5	;RP0=0, select bank0
  3881  0CF7  1303               	bcf	3,6	;RP1=0, select bank0
  3882  0CF8  00B5               	movwf	??_Drive1m
  3883  0CF9  0835               	movf	??_Drive1m,w
  3884  0CFA  00B8               	movwf	Drive1m@n
  3885  0CFB  0008               	return
  3886  0CFC                     __end_of_Drive1m:	
  3887                           
  3888                           	psect	text11
  3889  0DE6                     __ptext11:	
  3890 ;; *************** function _wallFollow *****************
  3891 ;; Defined at:
  3892 ;;		line 14 in file "main.c"
  3893 ;; Parameters:    Size  Location     Type
  3894 ;;		None
  3895 ;; Auto vars:     Size  Location     Type
  3896 ;;  setADCdist      2   19[BANK0 ] unsigned int 
  3897 ;; Return value:  Size  Location     Type
  3898 ;;                  1    wreg      void 
  3899 ;; Registers used:
  3900 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3901 ;; Tracked objects:
  3902 ;;		On entry : 0/0
  3903 ;;		On exit  : 0/0
  3904 ;;		Unchanged: 0/0
  3905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3906 ;;      Params:         0       0       0       0       0
  3907 ;;      Locals:         0       2       0       0       0
  3908 ;;      Temps:          0       4       0       0       0
  3909 ;;      Totals:         0       6       0       0       0
  3910 ;;Total ram usage:        6 bytes
  3911 ;; Hardware stack levels used:    1
  3912 ;; Hardware stack levels required when called:    4
  3913 ;; This function calls:
  3914 ;;		_ADCMain
  3915 ;;		_DriveDirect
  3916 ;;		___lwdiv
  3917 ;;		___wmul
  3918 ;; This function is called by:
  3919 ;;		_Drive1m
  3920 ;; This function uses a non-reentrant model
  3921 ;;
  3922                           
  3923                           
  3924                           ;psect for function _wallFollow
  3925  0DE6                     _wallFollow:	
  3926                           
  3927                           ;main.c: 16: unsigned int setADCdist = 250;
  3928                           
  3929                           ;incstack = 0
  3930                           ; Regs used in _wallFollow: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3931  0DE6  30FA               	movlw	250
  3932  0DE7  1283               	bcf	3,5	;RP0=0, select bank0
  3933  0DE8  1303               	bcf	3,6	;RP1=0, select bank0
  3934  0DE9  00B3               	movwf	wallFollow@setADCdist
  3935  0DEA  3000               	movlw	0
  3936  0DEB  00B4               	movwf	wallFollow@setADCdist+1
  3937                           
  3938                           ;main.c: 18: ADCMain();
  3939  0DEC  120A  158A  204D  120A  158A  	fcall	_ADCMain
  3940                           
  3941                           ;main.c: 20: if(adcRAW < (setADCdist - 100)) {
  3942  0DF1  1283               	bcf	3,5	;RP0=0, select bank0
  3943  0DF2  1303               	bcf	3,6	;RP1=0, select bank0
  3944  0DF3  0833               	movf	wallFollow@setADCdist,w
  3945  0DF4  3E9C               	addlw	156
  3946  0DF5  00AF               	movwf	??_wallFollow
  3947  0DF6  0834               	movf	wallFollow@setADCdist+1,w
  3948  0DF7  1803               	skipnc
  3949  0DF8  3E01               	addlw	1
  3950  0DF9  3EFF               	addlw	255
  3951  0DFA  00B0               	movwf	??_wallFollow+1
  3952  0DFB  0830               	movf	??_wallFollow+1,w
  3953  0DFC  0246               	subwf	_adcRAW+1,w	;volatile
  3954  0DFD  1D03               	skipz
  3955  0DFE  2E01               	goto	u2585
  3956  0DFF  082F               	movf	??_wallFollow,w
  3957  0E00  0245               	subwf	_adcRAW,w	;volatile
  3958  0E01                     u2585:	
  3959  0E01  1803               	skipnc
  3960  0E02  2E0E               	goto	l3815
  3961                           
  3962                           ;main.c: 21: ADJUSTED_SPEED_L = CURRENT_SPEED_L;
  3963  0E03  086A               	movf	_CURRENT_SPEED_L+1,w
  3964  0E04  1683               	bsf	3,5	;RP0=1, select bank1
  3965  0E05  1303               	bcf	3,6	;RP1=0, select bank1
  3966  0E06  00C9               	movwf	(_ADJUSTED_SPEED_L+1)^(0+128)
  3967  0E07  1283               	bcf	3,5	;RP0=0, select bank0
  3968  0E08  1303               	bcf	3,6	;RP1=0, select bank0
  3969  0E09  0869               	movf	_CURRENT_SPEED_L,w
  3970  0E0A  1683               	bsf	3,5	;RP0=1, select bank1
  3971  0E0B  1303               	bcf	3,6	;RP1=0, select bank1
  3972  0E0C  00C8               	movwf	_ADJUSTED_SPEED_L^(0+128)
  3973  0E0D  2E62               	goto	l3821
  3974  0E0E                     l3815:	
  3975                           ;main.c: 23: }
  3976                           
  3977                           ;main.c: 22: ADJUSTED_SPEED_R = CURRENT_SPEED_R;
  3978                           
  3979                           
  3980                           ;main.c: 25: else if(adcRAW > setADCdist){
  3981  0E0E  1283               	bcf	3,5	;RP0=0, select bank0
  3982  0E0F  0846               	movf	_adcRAW+1,w	;volatile
  3983  0E10  0234               	subwf	wallFollow@setADCdist+1,w
  3984  0E11  1D03               	skipz
  3985  0E12  2E15               	goto	u2595
  3986  0E13  0845               	movf	_adcRAW,w	;volatile
  3987  0E14  0233               	subwf	wallFollow@setADCdist,w
  3988  0E15                     u2595:	
  3989  0E15  1803               	skipnc
  3990  0E16  2E6F               	goto	l3823
  3991                           
  3992                           ;main.c: 27: ADC_ADJUST = adcRAW - setADCdist;
  3993  0E17  0933               	comf	wallFollow@setADCdist,w
  3994  0E18  00AF               	movwf	??_wallFollow
  3995  0E19  0934               	comf	wallFollow@setADCdist+1,w
  3996  0E1A  00B0               	movwf	??_wallFollow+1
  3997  0E1B  0AAF               	incf	??_wallFollow,f
  3998  0E1C  1903               	skipnz
  3999  0E1D  0AB0               	incf	??_wallFollow+1,f
  4000  0E1E  0845               	movf	_adcRAW,w	;volatile
  4001  0E1F  072F               	addwf	??_wallFollow,w
  4002  0E20  00E4               	movwf	_ADC_ADJUST
  4003  0E21  0846               	movf	_adcRAW+1,w	;volatile
  4004  0E22  1803               	skipnc
  4005  0E23  0A46               	incf	_adcRAW+1,w	;volatile
  4006  0E24  0730               	addwf	??_wallFollow+1,w
  4007  0E25  00E5               	movwf	_ADC_ADJUST+1
  4008                           
  4009                           ;main.c: 28: ADJUSTED_SPEED_L = CURRENT_SPEED_L + (9/10)*ADC_ADJUST + ((7/3)*(CURRENT_SP
      +                          EED_L))/(ADC_ADJUST+10);
  4010  0E26  0865               	movf	_ADC_ADJUST+1,w
  4011  0E27  00A1               	movwf	___wmul@multiplier+1
  4012  0E28  0864               	movf	_ADC_ADJUST,w
  4013  0E29  00A0               	movwf	___wmul@multiplier
  4014  0E2A  3000               	movlw	0
  4015  0E2B  00A2               	movwf	___wmul@multiplicand
  4016  0E2C  00A3               	movwf	___wmul@multiplicand+1
  4017  0E2D  120A  158A  20B1  120A  158A  	fcall	___wmul
  4018  0E32  1283               	bcf	3,5	;RP0=0, select bank0
  4019  0E33  1303               	bcf	3,6	;RP1=0, select bank0
  4020  0E34  0820               	movf	?___wmul,w
  4021  0E35  00AF               	movwf	??_wallFollow
  4022  0E36  0821               	movf	?___wmul+1,w
  4023  0E37  00B0               	movwf	??_wallFollow+1
  4024  0E38  0864               	movf	_ADC_ADJUST,w
  4025  0E39  3E0A               	addlw	10
  4026  0E3A  00A0               	movwf	___lwdiv@divisor
  4027  0E3B  0865               	movf	_ADC_ADJUST+1,w
  4028  0E3C  1803               	skipnc
  4029  0E3D  3E01               	addlw	1
  4030  0E3E  3E00               	addlw	0
  4031  0E3F  00A1               	movwf	___lwdiv@divisor+1
  4032  0E40  1003               	clrc
  4033  0E41  0D69               	rlf	_CURRENT_SPEED_L,w
  4034  0E42  00A2               	movwf	___lwdiv@dividend
  4035  0E43  0D6A               	rlf	_CURRENT_SPEED_L+1,w
  4036  0E44  00A3               	movwf	___lwdiv@dividend+1
  4037  0E45  120A  158A  2188  120A  158A  	fcall	___lwdiv
  4038  0E4A  1283               	bcf	3,5	;RP0=0, select bank0
  4039  0E4B  1303               	bcf	3,6	;RP1=0, select bank0
  4040  0E4C  0820               	movf	?___lwdiv,w
  4041  0E4D  072F               	addwf	??_wallFollow,w
  4042  0E4E  00B1               	movwf	??_wallFollow+2
  4043  0E4F  0821               	movf	?___lwdiv+1,w
  4044  0E50  1803               	skipnc
  4045  0E51  0A21               	incf	?___lwdiv+1,w
  4046  0E52  0730               	addwf	??_wallFollow+1,w
  4047  0E53  00B2               	movwf	??_wallFollow+3
  4048  0E54  0869               	movf	_CURRENT_SPEED_L,w
  4049  0E55  0731               	addwf	??_wallFollow+2,w
  4050  0E56  1683               	bsf	3,5	;RP0=1, select bank1
  4051  0E57  1303               	bcf	3,6	;RP1=0, select bank1
  4052  0E58  00C8               	movwf	_ADJUSTED_SPEED_L^(0+128)
  4053  0E59  1283               	bcf	3,5	;RP0=0, select bank0
  4054  0E5A  1303               	bcf	3,6	;RP1=0, select bank0
  4055  0E5B  086A               	movf	_CURRENT_SPEED_L+1,w
  4056  0E5C  1803               	skipnc
  4057  0E5D  0A6A               	incf	_CURRENT_SPEED_L+1,w
  4058  0E5E  0732               	addwf	??_wallFollow+3,w
  4059  0E5F  1683               	bsf	3,5	;RP0=1, select bank1
  4060  0E60  1303               	bcf	3,6	;RP1=0, select bank1
  4061  0E61  00C9               	movwf	(_ADJUSTED_SPEED_L+1)^(0+128)
  4062  0E62                     l3821:	
  4063                           
  4064                           ;main.c: 29: ADJUSTED_SPEED_R = CURRENT_SPEED_R;
  4065  0E62  1283               	bcf	3,5	;RP0=0, select bank0
  4066  0E63  1303               	bcf	3,6	;RP1=0, select bank0
  4067  0E64  086C               	movf	_CURRENT_SPEED_R+1,w
  4068  0E65  1683               	bsf	3,5	;RP0=1, select bank1
  4069  0E66  1303               	bcf	3,6	;RP1=0, select bank1
  4070  0E67  00CB               	movwf	(_ADJUSTED_SPEED_R+1)^(0+128)
  4071  0E68  1283               	bcf	3,5	;RP0=0, select bank0
  4072  0E69  1303               	bcf	3,6	;RP1=0, select bank0
  4073  0E6A  086B               	movf	_CURRENT_SPEED_R,w
  4074  0E6B  1683               	bsf	3,5	;RP0=1, select bank1
  4075  0E6C  1303               	bcf	3,6	;RP1=0, select bank1
  4076  0E6D  00CA               	movwf	_ADJUSTED_SPEED_R^(0+128)
  4077                           
  4078                           ;main.c: 30: }
  4079  0E6E  2ECF               	goto	l3831
  4080  0E6F                     l3823:	
  4081                           
  4082                           ;main.c: 32: else if (adcRAW < setADCdist){
  4083  0E6F  1283               	bcf	3,5	;RP0=0, select bank0
  4084  0E70  0834               	movf	wallFollow@setADCdist+1,w
  4085  0E71  0246               	subwf	_adcRAW+1,w	;volatile
  4086  0E72  1D03               	skipz
  4087  0E73  2E76               	goto	u2605
  4088  0E74  0833               	movf	wallFollow@setADCdist,w
  4089  0E75  0245               	subwf	_adcRAW,w	;volatile
  4090  0E76                     u2605:	
  4091  0E76  1803               	skipnc
  4092  0E77  2ECF               	goto	l3831
  4093                           
  4094                           ;main.c: 34: ADC_ADJUST = setADCdist - adcRAW;
  4095  0E78  0945               	comf	_adcRAW,w	;volatile
  4096  0E79  00AF               	movwf	??_wallFollow
  4097  0E7A  0946               	comf	_adcRAW+1,w	;volatile
  4098  0E7B  00B0               	movwf	??_wallFollow+1
  4099  0E7C  0AAF               	incf	??_wallFollow,f
  4100  0E7D  1903               	skipnz
  4101  0E7E  0AB0               	incf	??_wallFollow+1,f
  4102  0E7F  0833               	movf	wallFollow@setADCdist,w
  4103  0E80  072F               	addwf	??_wallFollow,w
  4104  0E81  00E4               	movwf	_ADC_ADJUST
  4105  0E82  0834               	movf	wallFollow@setADCdist+1,w
  4106  0E83  1803               	skipnc
  4107  0E84  0A34               	incf	wallFollow@setADCdist+1,w
  4108  0E85  0730               	addwf	??_wallFollow+1,w
  4109  0E86  00E5               	movwf	_ADC_ADJUST+1
  4110                           
  4111                           ;main.c: 35: ADJUSTED_SPEED_R = CURRENT_SPEED_R + (9/10)*ADC_ADJUST + ((7/3)*(CURRENT_SP
      +                          EED_R))/(ADC_ADJUST+10);
  4112  0E87  0865               	movf	_ADC_ADJUST+1,w
  4113  0E88  00A1               	movwf	___wmul@multiplier+1
  4114  0E89  0864               	movf	_ADC_ADJUST,w
  4115  0E8A  00A0               	movwf	___wmul@multiplier
  4116  0E8B  3000               	movlw	0
  4117  0E8C  00A2               	movwf	___wmul@multiplicand
  4118  0E8D  00A3               	movwf	___wmul@multiplicand+1
  4119  0E8E  120A  158A  20B1  120A  158A  	fcall	___wmul
  4120  0E93  1283               	bcf	3,5	;RP0=0, select bank0
  4121  0E94  1303               	bcf	3,6	;RP1=0, select bank0
  4122  0E95  0820               	movf	?___wmul,w
  4123  0E96  00AF               	movwf	??_wallFollow
  4124  0E97  0821               	movf	?___wmul+1,w
  4125  0E98  00B0               	movwf	??_wallFollow+1
  4126  0E99  0864               	movf	_ADC_ADJUST,w
  4127  0E9A  3E0A               	addlw	10
  4128  0E9B  00A0               	movwf	___lwdiv@divisor
  4129  0E9C  0865               	movf	_ADC_ADJUST+1,w
  4130  0E9D  1803               	skipnc
  4131  0E9E  3E01               	addlw	1
  4132  0E9F  3E00               	addlw	0
  4133  0EA0  00A1               	movwf	___lwdiv@divisor+1
  4134  0EA1  1003               	clrc
  4135  0EA2  0D6B               	rlf	_CURRENT_SPEED_R,w
  4136  0EA3  00A2               	movwf	___lwdiv@dividend
  4137  0EA4  0D6C               	rlf	_CURRENT_SPEED_R+1,w
  4138  0EA5  00A3               	movwf	___lwdiv@dividend+1
  4139  0EA6  120A  158A  2188  120A  158A  	fcall	___lwdiv
  4140  0EAB  1283               	bcf	3,5	;RP0=0, select bank0
  4141  0EAC  1303               	bcf	3,6	;RP1=0, select bank0
  4142  0EAD  0820               	movf	?___lwdiv,w
  4143  0EAE  072F               	addwf	??_wallFollow,w
  4144  0EAF  00B1               	movwf	??_wallFollow+2
  4145  0EB0  0821               	movf	?___lwdiv+1,w
  4146  0EB1  1803               	skipnc
  4147  0EB2  0A21               	incf	?___lwdiv+1,w
  4148  0EB3  0730               	addwf	??_wallFollow+1,w
  4149  0EB4  00B2               	movwf	??_wallFollow+3
  4150  0EB5  086B               	movf	_CURRENT_SPEED_R,w
  4151  0EB6  0731               	addwf	??_wallFollow+2,w
  4152  0EB7  1683               	bsf	3,5	;RP0=1, select bank1
  4153  0EB8  1303               	bcf	3,6	;RP1=0, select bank1
  4154  0EB9  00CA               	movwf	_ADJUSTED_SPEED_R^(0+128)
  4155  0EBA  1283               	bcf	3,5	;RP0=0, select bank0
  4156  0EBB  1303               	bcf	3,6	;RP1=0, select bank0
  4157  0EBC  086C               	movf	_CURRENT_SPEED_R+1,w
  4158  0EBD  1803               	skipnc
  4159  0EBE  0A6C               	incf	_CURRENT_SPEED_R+1,w
  4160  0EBF  0732               	addwf	??_wallFollow+3,w
  4161  0EC0  1683               	bsf	3,5	;RP0=1, select bank1
  4162  0EC1  1303               	bcf	3,6	;RP1=0, select bank1
  4163  0EC2  00CB               	movwf	(_ADJUSTED_SPEED_R+1)^(0+128)
  4164                           
  4165                           ;main.c: 36: ADJUSTED_SPEED_L = CURRENT_SPEED_L;
  4166  0EC3  1283               	bcf	3,5	;RP0=0, select bank0
  4167  0EC4  1303               	bcf	3,6	;RP1=0, select bank0
  4168  0EC5  086A               	movf	_CURRENT_SPEED_L+1,w
  4169  0EC6  1683               	bsf	3,5	;RP0=1, select bank1
  4170  0EC7  1303               	bcf	3,6	;RP1=0, select bank1
  4171  0EC8  00C9               	movwf	(_ADJUSTED_SPEED_L+1)^(0+128)
  4172  0EC9  1283               	bcf	3,5	;RP0=0, select bank0
  4173  0ECA  1303               	bcf	3,6	;RP1=0, select bank0
  4174  0ECB  0869               	movf	_CURRENT_SPEED_L,w
  4175  0ECC  1683               	bsf	3,5	;RP0=1, select bank1
  4176  0ECD  1303               	bcf	3,6	;RP1=0, select bank1
  4177  0ECE  00C8               	movwf	_ADJUSTED_SPEED_L^(0+128)
  4178  0ECF                     l3831:	
  4179                           
  4180                           ;main.c: 37: }
  4181                           ;main.c: 39: DriveDirect(ADJUSTED_SPEED_R,ADJUSTED_SPEED_L);
  4182  0ECF  1683               	bsf	3,5	;RP0=1, select bank1
  4183  0ED0  1303               	bcf	3,6	;RP1=0, select bank1
  4184  0ED1  084B               	movf	(_ADJUSTED_SPEED_R+1)^(0+128),w
  4185  0ED2  1283               	bcf	3,5	;RP0=0, select bank0
  4186  0ED3  1303               	bcf	3,6	;RP1=0, select bank0
  4187  0ED4  00A2               	movwf	DriveDirect@VelocityRight+1
  4188  0ED5  1683               	bsf	3,5	;RP0=1, select bank1
  4189  0ED6  1303               	bcf	3,6	;RP1=0, select bank1
  4190  0ED7  084A               	movf	_ADJUSTED_SPEED_R^(0+128),w
  4191  0ED8  1283               	bcf	3,5	;RP0=0, select bank0
  4192  0ED9  1303               	bcf	3,6	;RP1=0, select bank0
  4193  0EDA  00A1               	movwf	DriveDirect@VelocityRight
  4194  0EDB  1683               	bsf	3,5	;RP0=1, select bank1
  4195  0EDC  1303               	bcf	3,6	;RP1=0, select bank1
  4196  0EDD  0849               	movf	(_ADJUSTED_SPEED_L+1)^(0+128),w
  4197  0EDE  1283               	bcf	3,5	;RP0=0, select bank0
  4198  0EDF  1303               	bcf	3,6	;RP1=0, select bank0
  4199  0EE0  00A4               	movwf	DriveDirect@VelocityLeft+1
  4200  0EE1  1683               	bsf	3,5	;RP0=1, select bank1
  4201  0EE2  1303               	bcf	3,6	;RP1=0, select bank1
  4202  0EE3  0848               	movf	_ADJUSTED_SPEED_L^(0+128),w
  4203  0EE4  1283               	bcf	3,5	;RP0=0, select bank0
  4204  0EE5  1303               	bcf	3,6	;RP1=0, select bank0
  4205  0EE6  00A3               	movwf	DriveDirect@VelocityLeft
  4206  0EE7  120A  158A  224B   	fcall	_DriveDirect
  4207  0EEA  0008               	return
  4208  0EEB                     __end_of_wallFollow:	
  4209                           
  4210                           	psect	text12
  4211  08B1                     __ptext12:	
  4212 ;; *************** function ___wmul *****************
  4213 ;; Defined at:
  4214 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  4215 ;; Parameters:    Size  Location     Type
  4216 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4217 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;  product         2    4[BANK0 ] unsigned int 
  4220 ;; Return value:  Size  Location     Type
  4221 ;;                  2    0[BANK0 ] unsigned int 
  4222 ;; Registers used:
  4223 ;;		wreg, status,2, status,0
  4224 ;; Tracked objects:
  4225 ;;		On entry : 0/0
  4226 ;;		On exit  : 0/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4229 ;;      Params:         0       4       0       0       0
  4230 ;;      Locals:         0       2       0       0       0
  4231 ;;      Temps:          0       0       0       0       0
  4232 ;;      Totals:         0       6       0       0       0
  4233 ;;Total ram usage:        6 bytes
  4234 ;; Hardware stack levels used:    1
  4235 ;; Hardware stack levels required when called:    1
  4236 ;; This function calls:
  4237 ;;		Nothing
  4238 ;; This function is called by:
  4239 ;;		_wallFollow
  4240 ;; This function uses a non-reentrant model
  4241 ;;
  4242                           
  4243                           
  4244                           ;psect for function ___wmul
  4245  08B1                     ___wmul:	
  4246                           
  4247                           ;incstack = 0
  4248                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4249  08B1  1283               	bcf	3,5	;RP0=0, select bank0
  4250  08B2  1303               	bcf	3,6	;RP1=0, select bank0
  4251  08B3  01A4               	clrf	___wmul@product
  4252  08B4  01A5               	clrf	___wmul@product+1
  4253  08B5                     l3769:	
  4254  08B5  1C20               	btfss	___wmul@multiplier,0
  4255  08B6  28BD               	goto	l1051
  4256  08B7  0822               	movf	___wmul@multiplicand,w
  4257  08B8  07A4               	addwf	___wmul@product,f
  4258  08B9  1803               	skipnc
  4259  08BA  0AA5               	incf	___wmul@product+1,f
  4260  08BB  0823               	movf	___wmul@multiplicand+1,w
  4261  08BC  07A5               	addwf	___wmul@product+1,f
  4262  08BD                     l1051:	
  4263  08BD  3001               	movlw	1
  4264  08BE                     u2485:	
  4265  08BE  1003               	clrc
  4266  08BF  0DA2               	rlf	___wmul@multiplicand,f
  4267  08C0  0DA3               	rlf	___wmul@multiplicand+1,f
  4268  08C1  3EFF               	addlw	-1
  4269  08C2  1D03               	skipz
  4270  08C3  28BE               	goto	u2485
  4271  08C4  3001               	movlw	1
  4272  08C5                     u2495:	
  4273  08C5  1003               	clrc
  4274  08C6  0CA1               	rrf	___wmul@multiplier+1,f
  4275  08C7  0CA0               	rrf	___wmul@multiplier,f
  4276  08C8  3EFF               	addlw	-1
  4277  08C9  1D03               	skipz
  4278  08CA  28C5               	goto	u2495
  4279  08CB  0820               	movf	___wmul@multiplier,w
  4280  08CC  0421               	iorwf	___wmul@multiplier+1,w
  4281  08CD  1D03               	btfss	3,2
  4282  08CE  28B5               	goto	l3769
  4283  08CF  0825               	movf	___wmul@product+1,w
  4284  08D0  00A1               	movwf	?___wmul+1
  4285  08D1  0824               	movf	___wmul@product,w
  4286  08D2  00A0               	movwf	?___wmul
  4287  08D3  0008               	return
  4288  08D4                     __end_of___wmul:	
  4289                           
  4290                           	psect	text13
  4291  0988                     __ptext13:	
  4292 ;; *************** function ___lwdiv *****************
  4293 ;; Defined at:
  4294 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  4295 ;; Parameters:    Size  Location     Type
  4296 ;;  divisor         2    0[BANK0 ] unsigned int 
  4297 ;;  dividend        2    2[BANK0 ] unsigned int 
  4298 ;; Auto vars:     Size  Location     Type
  4299 ;;  quotient        2    6[BANK0 ] unsigned int 
  4300 ;;  counter         1    5[BANK0 ] unsigned char 
  4301 ;; Return value:  Size  Location     Type
  4302 ;;                  2    0[BANK0 ] unsigned int 
  4303 ;; Registers used:
  4304 ;;		wreg, status,2, status,0
  4305 ;; Tracked objects:
  4306 ;;		On entry : 0/0
  4307 ;;		On exit  : 0/0
  4308 ;;		Unchanged: 0/0
  4309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4310 ;;      Params:         0       4       0       0       0
  4311 ;;      Locals:         0       3       0       0       0
  4312 ;;      Temps:          0       1       0       0       0
  4313 ;;      Totals:         0       8       0       0       0
  4314 ;;Total ram usage:        8 bytes
  4315 ;; Hardware stack levels used:    1
  4316 ;; Hardware stack levels required when called:    1
  4317 ;; This function calls:
  4318 ;;		Nothing
  4319 ;; This function is called by:
  4320 ;;		_wallFollow
  4321 ;; This function uses a non-reentrant model
  4322 ;;
  4323                           
  4324                           
  4325                           ;psect for function ___lwdiv
  4326  0988                     ___lwdiv:	
  4327                           
  4328                           ;incstack = 0
  4329                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4330  0988  1283               	bcf	3,5	;RP0=0, select bank0
  4331  0989  1303               	bcf	3,6	;RP1=0, select bank0
  4332  098A  01A6               	clrf	___lwdiv@quotient
  4333  098B  01A7               	clrf	___lwdiv@quotient+1
  4334  098C  0820               	movf	___lwdiv@divisor,w
  4335  098D  0421               	iorwf	___lwdiv@divisor+1,w
  4336  098E  1903               	btfsc	3,2
  4337  098F  29C1               	goto	l3803
  4338  0990  01A5               	clrf	___lwdiv@counter
  4339  0991  0AA5               	incf	___lwdiv@counter,f
  4340  0992                     l3791:	
  4341  0992  1BA1               	btfsc	___lwdiv@divisor+1,7
  4342  0993  29A0               	goto	l3793
  4343  0994  3001               	movlw	1
  4344  0995                     u2525:	
  4345  0995  1003               	clrc
  4346  0996  0DA0               	rlf	___lwdiv@divisor,f
  4347  0997  0DA1               	rlf	___lwdiv@divisor+1,f
  4348  0998  3EFF               	addlw	-1
  4349  0999  1D03               	skipz
  4350  099A  2995               	goto	u2525
  4351  099B  3001               	movlw	1
  4352  099C  00A4               	movwf	??___lwdiv
  4353  099D  0824               	movf	??___lwdiv,w
  4354  099E  07A5               	addwf	___lwdiv@counter,f
  4355  099F  2992               	goto	l3791
  4356  09A0                     l3793:	
  4357  09A0  3001               	movlw	1
  4358  09A1                     u2545:	
  4359  09A1  1003               	clrc
  4360  09A2  0DA6               	rlf	___lwdiv@quotient,f
  4361  09A3  0DA7               	rlf	___lwdiv@quotient+1,f
  4362  09A4  3EFF               	addlw	-1
  4363  09A5  1D03               	skipz
  4364  09A6  29A1               	goto	u2545
  4365  09A7  0821               	movf	___lwdiv@divisor+1,w
  4366  09A8  0223               	subwf	___lwdiv@dividend+1,w
  4367  09A9  1D03               	skipz
  4368  09AA  29AD               	goto	u2555
  4369  09AB  0820               	movf	___lwdiv@divisor,w
  4370  09AC  0222               	subwf	___lwdiv@dividend,w
  4371  09AD                     u2555:	
  4372  09AD  1C03               	skipc
  4373  09AE  29B6               	goto	l3799
  4374  09AF  0820               	movf	___lwdiv@divisor,w
  4375  09B0  02A2               	subwf	___lwdiv@dividend,f
  4376  09B1  0821               	movf	___lwdiv@divisor+1,w
  4377  09B2  1C03               	skipc
  4378  09B3  03A3               	decf	___lwdiv@dividend+1,f
  4379  09B4  02A3               	subwf	___lwdiv@dividend+1,f
  4380  09B5  1426               	bsf	___lwdiv@quotient,0
  4381  09B6                     l3799:	
  4382  09B6  3001               	movlw	1
  4383  09B7                     u2565:	
  4384  09B7  1003               	clrc
  4385  09B8  0CA1               	rrf	___lwdiv@divisor+1,f
  4386  09B9  0CA0               	rrf	___lwdiv@divisor,f
  4387  09BA  3EFF               	addlw	-1
  4388  09BB  1D03               	skipz
  4389  09BC  29B7               	goto	u2565
  4390  09BD  3001               	movlw	1
  4391  09BE  02A5               	subwf	___lwdiv@counter,f
  4392  09BF  1D03               	btfss	3,2
  4393  09C0  29A0               	goto	l3793
  4394  09C1                     l3803:	
  4395  09C1  0827               	movf	___lwdiv@quotient+1,w
  4396  09C2  00A1               	movwf	?___lwdiv+1
  4397  09C3  0826               	movf	___lwdiv@quotient,w
  4398  09C4  00A0               	movwf	?___lwdiv
  4399  09C5  0008               	return
  4400  09C6                     __end_of___lwdiv:	
  4401                           
  4402                           	psect	text14
  4403  0A4B                     __ptext14:	
  4404 ;; *************** function _DriveDirect *****************
  4405 ;; Defined at:
  4406 ;;		line 54 in file "ser.c"
  4407 ;; Parameters:    Size  Location     Type
  4408 ;;  VelocityRigh    2    1[BANK0 ] int 
  4409 ;;  VelocityLeft    2    3[BANK0 ] int 
  4410 ;; Auto vars:     Size  Location     Type
  4411 ;;  data            2    8[BANK0 ] unsigned int 
  4412 ;;  data            2    6[BANK0 ] unsigned int 
  4413 ;; Return value:  Size  Location     Type
  4414 ;;                  1    wreg      void 
  4415 ;; Registers used:
  4416 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4417 ;; Tracked objects:
  4418 ;;		On entry : 0/0
  4419 ;;		On exit  : 0/0
  4420 ;;		Unchanged: 0/0
  4421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4422 ;;      Params:         0       4       0       0       0
  4423 ;;      Locals:         0       4       0       0       0
  4424 ;;      Temps:          0       1       0       0       0
  4425 ;;      Totals:         0       9       0       0       0
  4426 ;;Total ram usage:        9 bytes
  4427 ;; Hardware stack levels used:    1
  4428 ;; Hardware stack levels required when called:    2
  4429 ;; This function calls:
  4430 ;;		_ser_putch
  4431 ;; This function is called by:
  4432 ;;		_wallFollow
  4433 ;;		_Drive1m
  4434 ;;		_Turn90
  4435 ;;		_re_route
  4436 ;; This function uses a non-reentrant model
  4437 ;;
  4438                           
  4439                           
  4440                           ;psect for function _DriveDirect
  4441  0A4B                     _DriveDirect:	
  4442                           
  4443                           ;ser.c: 55: RightSpeedH = 0;
  4444                           
  4445                           ;incstack = 0
  4446                           ; Regs used in _DriveDirect: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4447  0A4B  1283               	bcf	3,5	;RP0=0, select bank0
  4448  0A4C  1303               	bcf	3,6	;RP1=0, select bank0
  4449  0A4D  01CF               	clrf	_RightSpeedH
  4450                           
  4451                           ;ser.c: 56: LeftSpeedH = 0;
  4452  0A4E  01CB               	clrf	_LeftSpeedH
  4453                           
  4454                           ;ser.c: 58: if(VelocityRight > 255){
  4455  0A4F  0822               	movf	DriveDirect@VelocityRight+1,w
  4456  0A50  3A80               	xorlw	128
  4457  0A51  00FF               	movwf	127
  4458  0A52  3081               	movlw	129
  4459  0A53  027F               	subwf	127,w
  4460  0A54  1D03               	skipz
  4461  0A55  2A58               	goto	u2405
  4462  0A56  3000               	movlw	0
  4463  0A57  0221               	subwf	DriveDirect@VelocityRight,w
  4464  0A58                     u2405:	
  4465  0A58  1C03               	skipc
  4466  0A59  2A7B               	goto	l3733
  4467                           
  4468                           ;ser.c: 59: unsigned int data = VelocityRight;
  4469  0A5A  1283               	bcf	3,5	;RP0=0, select bank0
  4470  0A5B  1303               	bcf	3,6	;RP1=0, select bank0
  4471  0A5C  0822               	movf	DriveDirect@VelocityRight+1,w
  4472  0A5D  00A7               	movwf	DriveDirect@data+1
  4473  0A5E  0821               	movf	DriveDirect@VelocityRight,w
  4474  0A5F  00A6               	movwf	DriveDirect@data
  4475                           
  4476                           ;ser.c: 60: for (RightSpeedH = 0; data > 255; RightSpeedH++){
  4477  0A60  01CF               	clrf	_RightSpeedH
  4478  0A61  3001               	movlw	1
  4479  0A62  0227               	subwf	DriveDirect@data+1,w
  4480  0A63  3000               	movlw	0
  4481  0A64  1903               	skipnz
  4482  0A65  0226               	subwf	DriveDirect@data,w
  4483  0A66  1C03               	btfss	3,0
  4484  0A67  2A7B               	goto	l3733
  4485  0A68                     l3729:	
  4486                           
  4487                           ;ser.c: 61: data = data - 256;
  4488  0A68  0826               	movf	DriveDirect@data,w
  4489  0A69  3E00               	addlw	0
  4490  0A6A  00A6               	movwf	DriveDirect@data
  4491  0A6B  0827               	movf	DriveDirect@data+1,w
  4492  0A6C  1803               	skipnc
  4493  0A6D  3E01               	addlw	1
  4494  0A6E  3EFF               	addlw	255
  4495  0A6F  00A7               	movwf	DriveDirect@data+1
  4496  0A70  3001               	movlw	1
  4497  0A71  00A5               	movwf	??_DriveDirect
  4498  0A72  0825               	movf	??_DriveDirect,w
  4499  0A73  07CF               	addwf	_RightSpeedH,f
  4500  0A74  3001               	movlw	1
  4501  0A75  0227               	subwf	DriveDirect@data+1,w
  4502  0A76  3000               	movlw	0
  4503  0A77  1903               	skipnz
  4504  0A78  0226               	subwf	DriveDirect@data,w
  4505  0A79  1803               	skipnc
  4506  0A7A  2A68               	goto	l3729
  4507  0A7B                     l3733:	
  4508                           
  4509                           ;ser.c: 62: }
  4510                           ;ser.c: 63: }
  4511                           ;ser.c: 64: RightSpeedL = VelocityRight;
  4512  0A7B  1283               	bcf	3,5	;RP0=0, select bank0
  4513  0A7C  1303               	bcf	3,6	;RP1=0, select bank0
  4514  0A7D  0821               	movf	DriveDirect@VelocityRight,w
  4515  0A7E  00A5               	movwf	??_DriveDirect
  4516  0A7F  0825               	movf	??_DriveDirect,w
  4517  0A80  00D0               	movwf	_RightSpeedL
  4518                           
  4519                           ;ser.c: 67: if(VelocityLeft > 255){
  4520  0A81  0824               	movf	DriveDirect@VelocityLeft+1,w
  4521  0A82  3A80               	xorlw	128
  4522  0A83  00FF               	movwf	127
  4523  0A84  3081               	movlw	129
  4524  0A85  027F               	subwf	127,w
  4525  0A86  1D03               	skipz
  4526  0A87  2A8A               	goto	u2435
  4527  0A88  3000               	movlw	0
  4528  0A89  0223               	subwf	DriveDirect@VelocityLeft,w
  4529  0A8A                     u2435:	
  4530  0A8A  1C03               	skipc
  4531  0A8B  2AAD               	goto	l3749
  4532                           
  4533                           ;ser.c: 68: unsigned int data = VelocityLeft;
  4534  0A8C  1283               	bcf	3,5	;RP0=0, select bank0
  4535  0A8D  1303               	bcf	3,6	;RP1=0, select bank0
  4536  0A8E  0824               	movf	DriveDirect@VelocityLeft+1,w
  4537  0A8F  00A9               	movwf	DriveDirect@data_467+1
  4538  0A90  0823               	movf	DriveDirect@VelocityLeft,w
  4539  0A91  00A8               	movwf	DriveDirect@data_467
  4540                           
  4541                           ;ser.c: 69: for (LeftSpeedH = 0; data > 255; LeftSpeedH++){
  4542  0A92  01CB               	clrf	_LeftSpeedH
  4543  0A93  3001               	movlw	1
  4544  0A94  0229               	subwf	DriveDirect@data_467+1,w
  4545  0A95  3000               	movlw	0
  4546  0A96  1903               	skipnz
  4547  0A97  0228               	subwf	DriveDirect@data_467,w
  4548  0A98  1C03               	btfss	3,0
  4549  0A99  2AAD               	goto	l3749
  4550  0A9A                     l3745:	
  4551                           
  4552                           ;ser.c: 70: data = data - 256;
  4553  0A9A  0828               	movf	DriveDirect@data_467,w
  4554  0A9B  3E00               	addlw	0
  4555  0A9C  00A8               	movwf	DriveDirect@data_467
  4556  0A9D  0829               	movf	DriveDirect@data_467+1,w
  4557  0A9E  1803               	skipnc
  4558  0A9F  3E01               	addlw	1
  4559  0AA0  3EFF               	addlw	255
  4560  0AA1  00A9               	movwf	DriveDirect@data_467+1
  4561  0AA2  3001               	movlw	1
  4562  0AA3  00A5               	movwf	??_DriveDirect
  4563  0AA4  0825               	movf	??_DriveDirect,w
  4564  0AA5  07CB               	addwf	_LeftSpeedH,f
  4565  0AA6  3001               	movlw	1
  4566  0AA7  0229               	subwf	DriveDirect@data_467+1,w
  4567  0AA8  3000               	movlw	0
  4568  0AA9  1903               	skipnz
  4569  0AAA  0228               	subwf	DriveDirect@data_467,w
  4570  0AAB  1803               	skipnc
  4571  0AAC  2A9A               	goto	l3745
  4572  0AAD                     l3749:	
  4573                           
  4574                           ;ser.c: 71: }
  4575                           ;ser.c: 72: }
  4576                           ;ser.c: 73: LeftSpeedL = VelocityLeft;
  4577  0AAD  1283               	bcf	3,5	;RP0=0, select bank0
  4578  0AAE  1303               	bcf	3,6	;RP1=0, select bank0
  4579  0AAF  0823               	movf	DriveDirect@VelocityLeft,w
  4580  0AB0  00A5               	movwf	??_DriveDirect
  4581  0AB1  0825               	movf	??_DriveDirect,w
  4582  0AB2  00CC               	movwf	_LeftSpeedL
  4583                           
  4584                           ;ser.c: 76: ser_putch(145);
  4585  0AB3  3091               	movlw	145
  4586  0AB4  160A  118A  27D4  120A  158A  	fcall	_ser_putch
  4587                           
  4588                           ;ser.c: 77: ser_putch(RightSpeedH);
  4589  0AB9  1283               	bcf	3,5	;RP0=0, select bank0
  4590  0ABA  1303               	bcf	3,6	;RP1=0, select bank0
  4591  0ABB  084F               	movf	_RightSpeedH,w
  4592  0ABC  160A  118A  27D4  120A  158A  	fcall	_ser_putch
  4593                           
  4594                           ;ser.c: 78: ser_putch(RightSpeedL);
  4595  0AC1  1283               	bcf	3,5	;RP0=0, select bank0
  4596  0AC2  1303               	bcf	3,6	;RP1=0, select bank0
  4597  0AC3  0850               	movf	_RightSpeedL,w
  4598  0AC4  160A  118A  27D4  120A  158A  	fcall	_ser_putch
  4599                           
  4600                           ;ser.c: 79: ser_putch(LeftSpeedH);
  4601  0AC9  1283               	bcf	3,5	;RP0=0, select bank0
  4602  0ACA  1303               	bcf	3,6	;RP1=0, select bank0
  4603  0ACB  084B               	movf	_LeftSpeedH,w
  4604  0ACC  160A  118A  27D4  120A  158A  	fcall	_ser_putch
  4605                           
  4606                           ;ser.c: 80: ser_putch(LeftSpeedL);
  4607  0AD1  1283               	bcf	3,5	;RP0=0, select bank0
  4608  0AD2  1303               	bcf	3,6	;RP1=0, select bank0
  4609  0AD3  084C               	movf	_LeftSpeedL,w
  4610  0AD4  160A  118A  27D4   	fcall	_ser_putch
  4611  0AD7  0008               	return
  4612  0AD8                     __end_of_DriveDirect:	
  4613                           
  4614                           	psect	text15
  4615  084D                     __ptext15:	
  4616 ;; *************** function _ADCMain *****************
  4617 ;; Defined at:
  4618 ;;		line 16 in file "ADC.c"
  4619 ;; Parameters:    Size  Location     Type
  4620 ;;		None
  4621 ;; Auto vars:     Size  Location     Type
  4622 ;;		None
  4623 ;; Return value:  Size  Location     Type
  4624 ;;                  1    wreg      void 
  4625 ;; Registers used:
  4626 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4627 ;; Tracked objects:
  4628 ;;		On entry : 0/0
  4629 ;;		On exit  : 0/0
  4630 ;;		Unchanged: 0/0
  4631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4632 ;;      Params:         0       0       0       0       0
  4633 ;;      Locals:         0       0       0       0       0
  4634 ;;      Temps:          0       0       0       0       0
  4635 ;;      Totals:         0       0       0       0       0
  4636 ;;Total ram usage:        0 bytes
  4637 ;; Hardware stack levels used:    1
  4638 ;; Hardware stack levels required when called:    3
  4639 ;; This function calls:
  4640 ;;		_getADC
  4641 ;;		_lcdSetCursor
  4642 ;;		_lcdWriteToDigitBCD
  4643 ;; This function is called by:
  4644 ;;		_wallFollow
  4645 ;; This function uses a non-reentrant model
  4646 ;;
  4647                           
  4648                           
  4649                           ;psect for function _ADCMain
  4650  084D                     _ADCMain:	
  4651                           
  4652                           ;ADC.c: 18: getADC();
  4653                           
  4654                           ;incstack = 0
  4655                           ; Regs used in _ADCMain: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4656  084D  120A  158A  2206  120A  158A  	fcall	_getADC
  4657                           
  4658                           ;ADC.c: 19: lcdSetCursor(0b10000000);
  4659  0852  3080               	movlw	128
  4660  0853  160A  118A  27C1  120A  158A  	fcall	_lcdSetCursor
  4661                           
  4662                           ;ADC.c: 20: lcdWriteToDigitBCD(adcRAW);
  4663  0858  1283               	bcf	3,5	;RP0=0, select bank0
  4664  0859  1303               	bcf	3,6	;RP1=0, select bank0
  4665  085A  0846               	movf	_adcRAW+1,w	;volatile
  4666  085B  00A4               	movwf	lcdWriteToDigitBCD@data+1
  4667  085C  0845               	movf	_adcRAW,w	;volatile
  4668  085D  00A3               	movwf	lcdWriteToDigitBCD@data
  4669  085E  120A  158A  22D8   	fcall	_lcdWriteToDigitBCD
  4670  0861  0008               	return
  4671  0862                     __end_of_ADCMain:	
  4672                           
  4673                           	psect	text16
  4674  0AD8                     __ptext16:	
  4675 ;; *************** function _lcdWriteToDigitBCD *****************
  4676 ;; Defined at:
  4677 ;;		line 38 in file "LCD.c"
  4678 ;; Parameters:    Size  Location     Type
  4679 ;;  data            2    3[BANK0 ] unsigned int 
  4680 ;; Auto vars:     Size  Location     Type
  4681 ;;  OnesDigit       2   13[BANK0 ] unsigned int 
  4682 ;;  TenThouDigit    2   11[BANK0 ] unsigned int 
  4683 ;;  ThouDigit       2    9[BANK0 ] unsigned int 
  4684 ;;  HunsDigit       2    7[BANK0 ] unsigned int 
  4685 ;;  TensDigit       2    5[BANK0 ] unsigned int 
  4686 ;; Return value:  Size  Location     Type
  4687 ;;                  1    wreg      void 
  4688 ;; Registers used:
  4689 ;;		wreg, status,2, status,0, pclath, cstack
  4690 ;; Tracked objects:
  4691 ;;		On entry : 0/0
  4692 ;;		On exit  : 0/0
  4693 ;;		Unchanged: 0/0
  4694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4695 ;;      Params:         0       2       0       0       0
  4696 ;;      Locals:         0      10       0       0       0
  4697 ;;      Temps:          0       0       0       0       0
  4698 ;;      Totals:         0      12       0       0       0
  4699 ;;Total ram usage:       12 bytes
  4700 ;; Hardware stack levels used:    1
  4701 ;; Hardware stack levels required when called:    2
  4702 ;; This function calls:
  4703 ;;		_lcdWriteData
  4704 ;; This function is called by:
  4705 ;;		_ADCMain
  4706 ;; This function uses a non-reentrant model
  4707 ;;
  4708                           
  4709                           
  4710                           ;psect for function _lcdWriteToDigitBCD
  4711  0AD8                     _lcdWriteToDigitBCD:	
  4712                           
  4713                           ;LCD.c: 39: unsigned int OnesDigit, TensDigit, HunsDigit, ThouDigit, TenThouDigit;
  4714                           ;LCD.c: 42: OnesDigit = data;
  4715                           
  4716                           ;incstack = 0
  4717                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  4718  0AD8  1283               	bcf	3,5	;RP0=0, select bank0
  4719  0AD9  1303               	bcf	3,6	;RP1=0, select bank0
  4720  0ADA  0824               	movf	lcdWriteToDigitBCD@data+1,w
  4721  0ADB  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  4722  0ADC  0823               	movf	lcdWriteToDigitBCD@data,w
  4723  0ADD  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  4724                           
  4725                           ;LCD.c: 43: TensDigit = 0;
  4726  0ADE  01A5               	clrf	lcdWriteToDigitBCD@TensDigit
  4727  0ADF  01A6               	clrf	lcdWriteToDigitBCD@TensDigit+1
  4728                           
  4729                           ;LCD.c: 44: HunsDigit = 0;
  4730  0AE0  01A7               	clrf	lcdWriteToDigitBCD@HunsDigit
  4731  0AE1  01A8               	clrf	lcdWriteToDigitBCD@HunsDigit+1
  4732                           
  4733                           ;LCD.c: 45: ThouDigit = 0;
  4734  0AE2  01A9               	clrf	lcdWriteToDigitBCD@ThouDigit
  4735  0AE3  01AA               	clrf	lcdWriteToDigitBCD@ThouDigit+1
  4736                           
  4737                           ;LCD.c: 46: TenThouDigit = 0;
  4738  0AE4  01AB               	clrf	lcdWriteToDigitBCD@TenThouDigit
  4739  0AE5  01AC               	clrf	lcdWriteToDigitBCD@TenThouDigit+1
  4740  0AE6                     l3665:	
  4741                           ;LCD.c: 49: while (OnesDigit >= 10000){
  4742                           
  4743  0AE6  3027               	movlw	39
  4744  0AE7  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  4745  0AE8  3010               	movlw	16
  4746  0AE9  1903               	skipnz
  4747  0AEA  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  4748  0AEB  1C03               	btfss	3,0
  4749  0AEC  2B0A               	goto	l3671
  4750                           
  4751                           ;LCD.c: 50: OnesDigit = OnesDigit - 10000;
  4752  0AED  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  4753  0AEE  3EF0               	addlw	240
  4754  0AEF  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  4755  0AF0  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  4756  0AF1  1803               	skipnc
  4757  0AF2  3E01               	addlw	1
  4758  0AF3  3ED8               	addlw	216
  4759  0AF4  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  4760                           
  4761                           ;LCD.c: 51: TenThouDigit++;
  4762  0AF5  3001               	movlw	1
  4763  0AF6  07AB               	addwf	lcdWriteToDigitBCD@TenThouDigit,f
  4764  0AF7  1803               	skipnc
  4765  0AF8  0AAC               	incf	lcdWriteToDigitBCD@TenThouDigit+1,f
  4766  0AF9  3000               	movlw	0
  4767  0AFA  07AC               	addwf	lcdWriteToDigitBCD@TenThouDigit+1,f
  4768  0AFB  2AE6               	goto	l3665
  4769  0AFC                     l3667:	
  4770                           ;LCD.c: 52: }
  4771                           ;LCD.c: 54: while (OnesDigit >= 1000){
  4772                           
  4773                           
  4774                           ;LCD.c: 55: OnesDigit = OnesDigit - 1000;
  4775  0AFC  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  4776  0AFD  3E18               	addlw	24
  4777  0AFE  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  4778  0AFF  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  4779  0B00  1803               	skipnc
  4780  0B01  3E01               	addlw	1
  4781  0B02  3EFC               	addlw	252
  4782  0B03  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  4783                           
  4784                           ;LCD.c: 56: ThouDigit++;
  4785  0B04  3001               	movlw	1
  4786  0B05  07A9               	addwf	lcdWriteToDigitBCD@ThouDigit,f
  4787  0B06  1803               	skipnc
  4788  0B07  0AAA               	incf	lcdWriteToDigitBCD@ThouDigit+1,f
  4789  0B08  3000               	movlw	0
  4790  0B09  07AA               	addwf	lcdWriteToDigitBCD@ThouDigit+1,f
  4791  0B0A                     l3671:	
  4792  0B0A  3003               	movlw	3
  4793  0B0B  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  4794  0B0C  30E8               	movlw	232
  4795  0B0D  1903               	skipnz
  4796  0B0E  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  4797  0B0F  1C03               	btfss	3,0
  4798  0B10  2B20               	goto	l3677
  4799  0B11  2AFC               	goto	l3667
  4800  0B12                     l3673:	
  4801                           ;LCD.c: 57: }
  4802                           ;LCD.c: 59: while (OnesDigit >= 100){
  4803                           
  4804                           
  4805                           ;LCD.c: 60: OnesDigit = OnesDigit - 100;
  4806  0B12  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  4807  0B13  3E9C               	addlw	156
  4808  0B14  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  4809  0B15  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  4810  0B16  1803               	skipnc
  4811  0B17  3E01               	addlw	1
  4812  0B18  3EFF               	addlw	255
  4813  0B19  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  4814                           
  4815                           ;LCD.c: 61: HunsDigit++;
  4816  0B1A  3001               	movlw	1
  4817  0B1B  07A7               	addwf	lcdWriteToDigitBCD@HunsDigit,f
  4818  0B1C  1803               	skipnc
  4819  0B1D  0AA8               	incf	lcdWriteToDigitBCD@HunsDigit+1,f
  4820  0B1E  3000               	movlw	0
  4821  0B1F  07A8               	addwf	lcdWriteToDigitBCD@HunsDigit+1,f
  4822  0B20                     l3677:	
  4823  0B20  3000               	movlw	0
  4824  0B21  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  4825  0B22  3064               	movlw	100
  4826  0B23  1903               	skipnz
  4827  0B24  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  4828  0B25  1C03               	btfss	3,0
  4829  0B26  2B36               	goto	l3683
  4830  0B27  2B12               	goto	l3673
  4831  0B28                     l3679:	
  4832                           ;LCD.c: 62: }
  4833                           ;LCD.c: 64: while (OnesDigit >= 10){
  4834                           
  4835                           
  4836                           ;LCD.c: 65: OnesDigit = OnesDigit - 10;
  4837  0B28  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  4838  0B29  3EF6               	addlw	246
  4839  0B2A  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  4840  0B2B  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  4841  0B2C  1803               	skipnc
  4842  0B2D  3E01               	addlw	1
  4843  0B2E  3EFF               	addlw	255
  4844  0B2F  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  4845                           
  4846                           ;LCD.c: 66: TensDigit++;
  4847  0B30  3001               	movlw	1
  4848  0B31  07A5               	addwf	lcdWriteToDigitBCD@TensDigit,f
  4849  0B32  1803               	skipnc
  4850  0B33  0AA6               	incf	lcdWriteToDigitBCD@TensDigit+1,f
  4851  0B34  3000               	movlw	0
  4852  0B35  07A6               	addwf	lcdWriteToDigitBCD@TensDigit+1,f
  4853  0B36                     l3683:	
  4854  0B36  3000               	movlw	0
  4855  0B37  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  4856  0B38  300A               	movlw	10
  4857  0B39  1903               	skipnz
  4858  0B3A  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  4859  0B3B  1803               	skipnc
  4860  0B3C  2B28               	goto	l3679
  4861                           
  4862                           ;LCD.c: 67: }
  4863                           ;LCD.c: 69: if (TenThouDigit > 0)
  4864  0B3D  082B               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  4865  0B3E  042C               	iorwf	lcdWriteToDigitBCD@TenThouDigit+1,w
  4866  0B3F  1903               	btfsc	3,2
  4867  0B40  2B48               	goto	l3689
  4868                           
  4869                           ;LCD.c: 70: lcdWriteData((unsigned int)TenThouDigit + 48);
  4870  0B41  082B               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  4871  0B42  3E30               	addlw	48
  4872  0B43  120A  158A  2026  120A  158A  	fcall	_lcdWriteData
  4873  0B48                     l3689:	
  4874                           
  4875                           ;LCD.c: 72: if (ThouDigit > 0)
  4876  0B48  1283               	bcf	3,5	;RP0=0, select bank0
  4877  0B49  1303               	bcf	3,6	;RP1=0, select bank0
  4878  0B4A  0829               	movf	lcdWriteToDigitBCD@ThouDigit,w
  4879  0B4B  042A               	iorwf	lcdWriteToDigitBCD@ThouDigit+1,w
  4880  0B4C  1903               	btfsc	3,2
  4881  0B4D  2B55               	goto	l3693
  4882                           
  4883                           ;LCD.c: 73: lcdWriteData((unsigned int)ThouDigit + 48);
  4884  0B4E  0829               	movf	lcdWriteToDigitBCD@ThouDigit,w
  4885  0B4F  3E30               	addlw	48
  4886  0B50  120A  158A  2026  120A  158A  	fcall	_lcdWriteData
  4887  0B55                     l3693:	
  4888                           
  4889                           ;LCD.c: 75: if (HunsDigit > 0)
  4890  0B55  1283               	bcf	3,5	;RP0=0, select bank0
  4891  0B56  1303               	bcf	3,6	;RP1=0, select bank0
  4892  0B57  0827               	movf	lcdWriteToDigitBCD@HunsDigit,w
  4893  0B58  0428               	iorwf	lcdWriteToDigitBCD@HunsDigit+1,w
  4894  0B59  1903               	btfsc	3,2
  4895  0B5A  2B62               	goto	l570
  4896                           
  4897                           ;LCD.c: 76: lcdWriteData((unsigned int)HunsDigit + 48);
  4898  0B5B  0827               	movf	lcdWriteToDigitBCD@HunsDigit,w
  4899  0B5C  3E30               	addlw	48
  4900  0B5D  120A  158A  2026  120A  158A  	fcall	_lcdWriteData
  4901  0B62                     l570:	
  4902                           
  4903                           ;LCD.c: 79: lcdWriteData((unsigned int)TensDigit + 48);
  4904  0B62  1283               	bcf	3,5	;RP0=0, select bank0
  4905  0B63  1303               	bcf	3,6	;RP1=0, select bank0
  4906  0B64  0825               	movf	lcdWriteToDigitBCD@TensDigit,w
  4907  0B65  3E30               	addlw	48
  4908  0B66  120A  158A  2026  120A  158A  	fcall	_lcdWriteData
  4909                           
  4910                           ;LCD.c: 81: lcdWriteData((unsigned int)OnesDigit + 48);
  4911  0B6B  1283               	bcf	3,5	;RP0=0, select bank0
  4912  0B6C  1303               	bcf	3,6	;RP1=0, select bank0
  4913  0B6D  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  4914  0B6E  3E30               	addlw	48
  4915  0B6F  120A  158A  2026   	fcall	_lcdWriteData
  4916  0B72  0008               	return
  4917  0B73                     __end_of_lcdWriteToDigitBCD:	
  4918                           
  4919                           	psect	text17
  4920  0A06                     __ptext17:	
  4921 ;; *************** function _getADC *****************
  4922 ;; Defined at:
  4923 ;;		line 25 in file "ADC.c"
  4924 ;; Parameters:    Size  Location     Type
  4925 ;;		None
  4926 ;; Auto vars:     Size  Location     Type
  4927 ;;		None
  4928 ;; Return value:  Size  Location     Type
  4929 ;;                  2  586[None  ] unsigned int 
  4930 ;; Registers used:
  4931 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4932 ;; Tracked objects:
  4933 ;;		On entry : 0/0
  4934 ;;		On exit  : 0/0
  4935 ;;		Unchanged: 0/0
  4936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4937 ;;      Params:         0       0       0       0       0
  4938 ;;      Locals:         0       0       0       0       0
  4939 ;;      Temps:          0       2       0       0       0
  4940 ;;      Totals:         0       2       0       0       0
  4941 ;;Total ram usage:        2 bytes
  4942 ;; Hardware stack levels used:    1
  4943 ;; Hardware stack levels required when called:    1
  4944 ;; This function calls:
  4945 ;;		Nothing
  4946 ;; This function is called by:
  4947 ;;		_ADCMain
  4948 ;; This function uses a non-reentrant model
  4949 ;;
  4950                           
  4951                           
  4952                           ;psect for function _getADC
  4953  0A06                     _getADC:	
  4954                           
  4955                           ;ADC.c: 27: ADRESH = 0;
  4956                           
  4957                           ;incstack = 0
  4958                           ; Regs used in _getADC: [wreg-fsr0h+status,2+status,0]
  4959  0A06  1283               	bcf	3,5	;RP0=0, select bank0
  4960  0A07  1303               	bcf	3,6	;RP1=0, select bank0
  4961  0A08  019E               	clrf	30	;volatile
  4962                           
  4963                           ;ADC.c: 28: ADRESL = 0;
  4964  0A09  1683               	bsf	3,5	;RP0=1, select bank1
  4965  0A0A  1303               	bcf	3,6	;RP1=0, select bank1
  4966  0A0B  019E               	clrf	30	;volatile
  4967                           
  4968                           ;ADC.c: 30: GO = 1;
  4969  0A0C  1283               	bcf	3,5	;RP0=0, select bank0
  4970  0A0D  1303               	bcf	3,6	;RP1=0, select bank0
  4971  0A0E  151F               	bsf	31,2	;volatile
  4972  0A0F                     l691:	
  4973                           ;ADC.c: 31: while(GO) continue;
  4974                           
  4975  0A0F  191F               	btfsc	31,2	;volatile
  4976  0A10  2A0F               	goto	l691
  4977                           
  4978                           ;ADC.c: 35: adcRAW = (4*ADRESH);
  4979  0A11  081E               	movf	30,w	;volatile
  4980  0A12  00A0               	movwf	??_getADC
  4981  0A13  01A1               	clrf	??_getADC+1
  4982  0A14  1003               	clrc
  4983  0A15  0DA0               	rlf	??_getADC,f
  4984  0A16  0DA1               	rlf	??_getADC+1,f
  4985  0A17  1003               	clrc
  4986  0A18  0DA0               	rlf	??_getADC,f
  4987  0A19  0DA1               	rlf	??_getADC+1,f
  4988  0A1A  0820               	movf	??_getADC,w
  4989  0A1B  00C5               	movwf	_adcRAW	;volatile
  4990  0A1C  0821               	movf	??_getADC+1,w
  4991  0A1D  00C6               	movwf	_adcRAW+1	;volatile
  4992                           
  4993                           ;ADC.c: 37: switch(ADRESL){
  4994  0A1E  2A3D               	goto	l3709
  4995  0A1F                     l3703:	
  4996                           ;ADC.c: 38: case 0b01000000: adcRAW = adcRAW + 1;
  4997                           
  4998  0A1F  1283               	bcf	3,5	;RP0=0, select bank0
  4999  0A20  0845               	movf	_adcRAW,w	;volatile
  5000  0A21  3E01               	addlw	1
  5001  0A22  00C5               	movwf	_adcRAW	;volatile
  5002  0A23  0846               	movf	_adcRAW+1,w	;volatile
  5003  0A24  1803               	skipnc
  5004  0A25  3E01               	addlw	1
  5005  0A26  3E00               	addlw	0
  5006  0A27  00C6               	movwf	_adcRAW+1	;volatile
  5007                           
  5008                           ;ADC.c: 39: break;
  5009  0A28  0008               	return
  5010  0A29                     l3705:	
  5011                           ;ADC.c: 40: case 0b10000000: adcRAW = adcRAW + 2;
  5012                           
  5013  0A29  1283               	bcf	3,5	;RP0=0, select bank0
  5014  0A2A  0845               	movf	_adcRAW,w	;volatile
  5015  0A2B  3E02               	addlw	2
  5016  0A2C  00C5               	movwf	_adcRAW	;volatile
  5017  0A2D  0846               	movf	_adcRAW+1,w	;volatile
  5018  0A2E  1803               	skipnc
  5019  0A2F  3E01               	addlw	1
  5020  0A30  3E00               	addlw	0
  5021  0A31  00C6               	movwf	_adcRAW+1	;volatile
  5022                           
  5023                           ;ADC.c: 41: break;
  5024  0A32  0008               	return
  5025  0A33                     l3707:	
  5026                           ;ADC.c: 42: case 0b11000000: adcRAW = adcRAW + 3;
  5027                           
  5028  0A33  1283               	bcf	3,5	;RP0=0, select bank0
  5029  0A34  0845               	movf	_adcRAW,w	;volatile
  5030  0A35  3E03               	addlw	3
  5031  0A36  00C5               	movwf	_adcRAW	;volatile
  5032  0A37  0846               	movf	_adcRAW+1,w	;volatile
  5033  0A38  1803               	skipnc
  5034  0A39  3E01               	addlw	1
  5035  0A3A  3E00               	addlw	0
  5036  0A3B  00C6               	movwf	_adcRAW+1	;volatile
  5037                           
  5038                           ;ADC.c: 45: }
  5039                           
  5040                           ;ADC.c: 44: default: adcRAW = adcRAW;
  5041                           
  5042                           ;ADC.c: 43: break;
  5043  0A3C  0008               	return
  5044  0A3D                     l3709:	
  5045  0A3D  1683               	bsf	3,5	;RP0=1, select bank1
  5046  0A3E  1303               	bcf	3,6	;RP1=0, select bank1
  5047  0A3F  081E               	movf	30,w	;volatile
  5048                           
  5049                           ; Switch size 1, requested type "space"
  5050                           ; Number of cases is 3, Range of values is 64 to 192
  5051                           ; switch strategies available:
  5052                           ; Name         Instructions Cycles
  5053                           ; simple_byte           10     6 (average)
  5054                           ; jumptable            263     9 (fixed)
  5055                           ;	Chosen strategy is simple_byte
  5056  0A40  3A40               	xorlw	64	; case 64
  5057  0A41  1903               	skipnz
  5058  0A42  2A1F               	goto	l3703
  5059  0A43  3AC0               	xorlw	192	; case 128
  5060  0A44  1903               	skipnz
  5061  0A45  2A29               	goto	l3705
  5062  0A46  3A40               	xorlw	64	; case 192
  5063  0A47  1903               	skipnz
  5064  0A48  2A33               	goto	l3707
  5065  0A49  2A4A               	goto	l700
  5066  0A4A                     l700:	
  5067                           ;ADC.c: 47: return(adcRAW);
  5068                           ;	Return value of _getADC is never used
  5069                           
  5070  0A4A  0008               	return
  5071  0A4B                     __end_of_getADC:	
  5072                           
  5073                           	psect	text18
  5074  094A                     __ptext18:	
  5075 ;; *************** function _getSensorData *****************
  5076 ;; Defined at:
  5077 ;;		line 85 in file "ser.c"
  5078 ;; Parameters:    Size  Location     Type
  5079 ;;  packetID        1    wreg     unsigned char 
  5080 ;;  bytes           1    2[BANK0 ] unsigned char 
  5081 ;; Auto vars:     Size  Location     Type
  5082 ;;  packetID        1    6[BANK0 ] unsigned char 
  5083 ;;  sensor          2    7[BANK0 ] int 
  5084 ;; Return value:  Size  Location     Type
  5085 ;;                  2    2[BANK0 ] int 
  5086 ;; Registers used:
  5087 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5088 ;; Tracked objects:
  5089 ;;		On entry : 0/0
  5090 ;;		On exit  : 0/0
  5091 ;;		Unchanged: 0/0
  5092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5093 ;;      Params:         0       2       0       0       0
  5094 ;;      Locals:         0       3       0       0       0
  5095 ;;      Temps:          0       2       0       0       0
  5096 ;;      Totals:         0       7       0       0       0
  5097 ;;Total ram usage:        7 bytes
  5098 ;; Hardware stack levels used:    1
  5099 ;; Hardware stack levels required when called:    2
  5100 ;; This function calls:
  5101 ;;		_ser_getch
  5102 ;;		_ser_putch
  5103 ;; This function is called by:
  5104 ;;		_Drive1m
  5105 ;;		_Turn90
  5106 ;;		_re_route
  5107 ;; This function uses a non-reentrant model
  5108 ;;
  5109                           
  5110                           
  5111                           ;psect for function _getSensorData
  5112  094A                     _getSensorData:	
  5113                           
  5114                           ;incstack = 0
  5115                           ; Regs used in _getSensorData: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5116                           ;getSensorData@packetID stored from wreg
  5117  094A  1283               	bcf	3,5	;RP0=0, select bank0
  5118  094B  1303               	bcf	3,6	;RP1=0, select bank0
  5119  094C  00A6               	movwf	getSensorData@packetID
  5120                           
  5121                           ;ser.c: 86: ser_putch(142);
  5122  094D  308E               	movlw	142
  5123  094E  160A  118A  27D4  120A  158A  	fcall	_ser_putch
  5124                           
  5125                           ;ser.c: 87: ser_putch(packetID);
  5126  0953  1283               	bcf	3,5	;RP0=0, select bank0
  5127  0954  1303               	bcf	3,6	;RP1=0, select bank0
  5128  0955  0826               	movf	getSensorData@packetID,w
  5129  0956  160A  118A  27D4  120A  158A  	fcall	_ser_putch
  5130                           
  5131                           ;ser.c: 89: if (bytes == 2)
  5132  095B  3002               	movlw	2
  5133  095C  1283               	bcf	3,5	;RP0=0, select bank0
  5134  095D  1303               	bcf	3,6	;RP1=0, select bank0
  5135  095E  0622               	xorwf	getSensorData@bytes,w
  5136  095F  1D03               	btfss	3,2
  5137  0960  296C               	goto	l3839
  5138                           
  5139                           ;ser.c: 90: highByte = ser_getch();
  5140  0961  160A  118A  27CA  120A  158A  	fcall	_ser_getch
  5141  0966  1283               	bcf	3,5	;RP0=0, select bank0
  5142  0967  1303               	bcf	3,6	;RP1=0, select bank0
  5143  0968  00A4               	movwf	??_getSensorData
  5144  0969  0824               	movf	??_getSensorData,w
  5145  096A  00F9               	movwf	_highByte
  5146  096B  296D               	goto	l3841
  5147  096C                     l3839:	
  5148                           
  5149                           ;ser.c: 91: else
  5150                           ;ser.c: 92: highByte = 0;
  5151  096C  01F9               	clrf	_highByte
  5152  096D                     l3841:	
  5153                           
  5154                           ;ser.c: 94: lowByte = ser_getch();
  5155  096D  160A  118A  27CA   	fcall	_ser_getch
  5156  0970  1283               	bcf	3,5	;RP0=0, select bank0
  5157  0971  1303               	bcf	3,6	;RP1=0, select bank0
  5158  0972  00A4               	movwf	??_getSensorData
  5159  0973  0824               	movf	??_getSensorData,w
  5160  0974  00F8               	movwf	_lowByte
  5161                           
  5162                           ;ser.c: 96: signed int sensor = (256*highByte + lowByte);
  5163  0975  0879               	movf	_highByte,w
  5164  0976  00A4               	movwf	??_getSensorData
  5165  0977  01A5               	clrf	??_getSensorData+1
  5166  0978  0824               	movf	??_getSensorData,w
  5167  0979  00A5               	movwf	??_getSensorData+1
  5168  097A  01A4               	clrf	??_getSensorData
  5169  097B  0878               	movf	_lowByte,w
  5170  097C  0724               	addwf	??_getSensorData,w
  5171  097D  00A7               	movwf	getSensorData@sensor
  5172  097E  3000               	movlw	0
  5173  097F  1803               	skipnc
  5174  0980  3001               	movlw	1
  5175  0981  0725               	addwf	??_getSensorData+1,w
  5176  0982  00A8               	movwf	getSensorData@sensor+1
  5177                           
  5178                           ;ser.c: 98: return sensor;
  5179  0983  0828               	movf	getSensorData@sensor+1,w
  5180  0984  00A3               	movwf	?_getSensorData+1
  5181  0985  0827               	movf	getSensorData@sensor,w
  5182  0986  00A2               	movwf	?_getSensorData
  5183  0987  0008               	return
  5184  0988                     __end_of_getSensorData:	
  5185                           
  5186                           	psect	text19
  5187  17D4                     __ptext19:	
  5188 ;; *************** function _ser_putch *****************
  5189 ;; Defined at:
  5190 ;;		line 30 in file "ser.c"
  5191 ;; Parameters:    Size  Location     Type
  5192 ;;  c               1    wreg     unsigned char 
  5193 ;; Auto vars:     Size  Location     Type
  5194 ;;  c               1    0[BANK0 ] unsigned char 
  5195 ;; Return value:  Size  Location     Type
  5196 ;;                  1    wreg      void 
  5197 ;; Registers used:
  5198 ;;		wreg
  5199 ;; Tracked objects:
  5200 ;;		On entry : 0/0
  5201 ;;		On exit  : 0/0
  5202 ;;		Unchanged: 0/0
  5203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5204 ;;      Params:         0       0       0       0       0
  5205 ;;      Locals:         0       1       0       0       0
  5206 ;;      Temps:          0       0       0       0       0
  5207 ;;      Totals:         0       1       0       0       0
  5208 ;;Total ram usage:        1 bytes
  5209 ;; Hardware stack levels used:    1
  5210 ;; Hardware stack levels required when called:    1
  5211 ;; This function calls:
  5212 ;;		Nothing
  5213 ;; This function is called by:
  5214 ;;		_Drive1m
  5215 ;;		_main
  5216 ;;		_Drive
  5217 ;;		_DriveDirect
  5218 ;;		_getSensorData
  5219 ;; This function uses a non-reentrant model
  5220 ;;
  5221                           
  5222                           
  5223                           ;psect for function _ser_putch
  5224  17D4                     _ser_putch:	
  5225                           
  5226                           ;incstack = 0
  5227                           ; Regs used in _ser_putch: [wreg]
  5228                           ;ser_putch@c stored from wreg
  5229  17D4  1283               	bcf	3,5	;RP0=0, select bank0
  5230  17D5  1303               	bcf	3,6	;RP1=0, select bank0
  5231  17D6  00A0               	movwf	ser_putch@c
  5232  17D7                     l828:	
  5233                           ;ser.c: 31: while(!TRMT);
  5234                           
  5235  17D7  1683               	bsf	3,5	;RP0=1, select bank1
  5236  17D8  1303               	bcf	3,6	;RP1=0, select bank1
  5237  17D9  1C98               	btfss	24,1	;volatile
  5238  17DA  2FD7               	goto	l828
  5239                           
  5240                           ;ser.c: 32: TXREG=c;
  5241  17DB  1283               	bcf	3,5	;RP0=0, select bank0
  5242  17DC  1303               	bcf	3,6	;RP1=0, select bank0
  5243  17DD  0820               	movf	ser_putch@c,w
  5244  17DE  0099               	movwf	25	;volatile
  5245  17DF  0008               	return
  5246  17E0                     __end_of_ser_putch:	
  5247                           
  5248                           	psect	text20
  5249  17CA                     __ptext20:	
  5250 ;; *************** function _ser_getch *****************
  5251 ;; Defined at:
  5252 ;;		line 35 in file "ser.c"
  5253 ;; Parameters:    Size  Location     Type
  5254 ;;		None
  5255 ;; Auto vars:     Size  Location     Type
  5256 ;;  rxbyte          1    1[BANK0 ] unsigned char 
  5257 ;; Return value:  Size  Location     Type
  5258 ;;                  1    wreg      unsigned char 
  5259 ;; Registers used:
  5260 ;;		wreg
  5261 ;; Tracked objects:
  5262 ;;		On entry : 0/0
  5263 ;;		On exit  : 0/0
  5264 ;;		Unchanged: 0/0
  5265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5266 ;;      Params:         0       0       0       0       0
  5267 ;;      Locals:         0       1       0       0       0
  5268 ;;      Temps:          0       1       0       0       0
  5269 ;;      Totals:         0       2       0       0       0
  5270 ;;Total ram usage:        2 bytes
  5271 ;; Hardware stack levels used:    1
  5272 ;; Hardware stack levels required when called:    1
  5273 ;; This function calls:
  5274 ;;		Nothing
  5275 ;; This function is called by:
  5276 ;;		_getSensorData
  5277 ;; This function uses a non-reentrant model
  5278 ;;
  5279                           
  5280                           
  5281                           ;psect for function _ser_getch
  5282  17CA                     _ser_getch:	
  5283  17CA                     l834:	
  5284                           ;ser.c: 36: while(!RCIF);
  5285                           
  5286                           ;incstack = 0
  5287                           ; Regs used in _ser_getch: [wreg]
  5288                           
  5289  17CA  1283               	bcf	3,5	;RP0=0, select bank0
  5290  17CB  1303               	bcf	3,6	;RP1=0, select bank0
  5291  17CC  1E8C               	btfss	12,5	;volatile
  5292  17CD  2FCA               	goto	l834
  5293                           
  5294                           ;ser.c: 37: unsigned char rxbyte = RCREG;
  5295  17CE  081A               	movf	26,w	;volatile
  5296  17CF  00A0               	movwf	??_ser_getch
  5297  17D0  0820               	movf	??_ser_getch,w
  5298  17D1  00A1               	movwf	ser_getch@rxbyte
  5299                           
  5300                           ;ser.c: 38: return rxbyte;
  5301  17D2  0821               	movf	ser_getch@rxbyte,w
  5302  17D3  0008               	return
  5303  17D4                     __end_of_ser_getch:	
  5304                           
  5305                           	psect	text21
  5306  047C                     __ptext21:	
  5307 ;; *************** function _PathTo *****************
  5308 ;; Defined at:
  5309 ;;		line 44 in file "main.c"
  5310 ;; Parameters:    Size  Location     Type
  5311 ;;  x_target        1    wreg     unsigned char 
  5312 ;;  y_target        1    5[BANK0 ] unsigned char 
  5313 ;; Auto vars:     Size  Location     Type
  5314 ;;  x_target        1   13[BANK0 ] unsigned char 
  5315 ;;  sum             1   14[BANK0 ] unsigned char 
  5316 ;;  loop            2   15[BANK0 ] int 
  5317 ;; Return value:  Size  Location     Type
  5318 ;;                  1    wreg      void 
  5319 ;; Registers used:
  5320 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5321 ;; Tracked objects:
  5322 ;;		On entry : 0/0
  5323 ;;		On exit  : 0/0
  5324 ;;		Unchanged: 0/0
  5325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5326 ;;      Params:         0       1       0       0       0
  5327 ;;      Locals:         0       4       0       0       0
  5328 ;;      Temps:          0       7       0       0       0
  5329 ;;      Totals:         0      12       0       0       0
  5330 ;;Total ram usage:       12 bytes
  5331 ;; Hardware stack levels used:    1
  5332 ;; Hardware stack levels required when called:    3
  5333 ;; This function calls:
  5334 ;;		___bmul
  5335 ;;		_lcdSetCursor
  5336 ;;		_lcdWriteString
  5337 ;; This function is called by:
  5338 ;;		_re_route
  5339 ;;		_main
  5340 ;; This function uses a non-reentrant model
  5341 ;;
  5342                           
  5343                           
  5344                           ;psect for function _PathTo
  5345  047C                     _PathTo:	
  5346                           
  5347                           ;incstack = 0
  5348                           ; Regs used in _PathTo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5349                           ;PathTo@x_target stored from wreg
  5350  047C  1283               	bcf	3,5	;RP0=0, select bank0
  5351  047D  1303               	bcf	3,6	;RP1=0, select bank0
  5352  047E  00AD               	movwf	PathTo@x_target
  5353                           
  5354                           ;main.c: 48: for (r = 0; r <= 3; r++){
  5355  047F  01D5               	clrf	_r
  5356  0480  3004               	movlw	4
  5357  0481  0255               	subwf	_r,w
  5358  0482  1803               	btfsc	3,0
  5359  0483  2CC1               	goto	l3995
  5360  0484                     l3979:	
  5361                           
  5362                           ;main.c: 49: for (c = 0; c <= 4; c++){
  5363  0484  01D1               	clrf	_c
  5364  0485  3005               	movlw	5
  5365  0486  0251               	subwf	_c,w
  5366  0487  1803               	btfsc	3,0
  5367  0488  2CB9               	goto	l3991
  5368  0489                     l3985:	
  5369                           
  5370                           ;main.c: 50: mazeGrid[r][c] = mazeGridDefault[r][c];
  5371  0489  3005               	movlw	5
  5372  048A  00A6               	movwf	??_PathTo
  5373  048B  0826               	movf	??_PathTo,w
  5374  048C  00A0               	movwf	___bmul@multiplicand
  5375  048D  0855               	movf	_r,w
  5376  048E  120A  158A  2013  120A  118A  	fcall	___bmul
  5377  0493  3EB4               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  5378  0494  1283               	bcf	3,5	;RP0=0, select bank0
  5379  0495  1303               	bcf	3,6	;RP1=0, select bank0
  5380  0496  0751               	addwf	_c,w
  5381  0497  00A7               	movwf	??_PathTo+1
  5382  0498  0827               	movf	??_PathTo+1,w
  5383  0499  0084               	movwf	4
  5384  049A  1383               	bcf	3,7	;select IRP bank1
  5385  049B  0800               	movf	0,w
  5386  049C  00A8               	movwf	??_PathTo+2
  5387  049D  3005               	movlw	5
  5388  049E  00A9               	movwf	??_PathTo+3
  5389  049F  0829               	movf	??_PathTo+3,w
  5390  04A0  00A0               	movwf	___bmul@multiplicand
  5391  04A1  0855               	movf	_r,w
  5392  04A2  120A  158A  2013  120A  118A  	fcall	___bmul
  5393  04A7  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5394  04A8  1283               	bcf	3,5	;RP0=0, select bank0
  5395  04A9  1303               	bcf	3,6	;RP1=0, select bank0
  5396  04AA  0751               	addwf	_c,w
  5397  04AB  00AA               	movwf	??_PathTo+4
  5398  04AC  082A               	movf	??_PathTo+4,w
  5399  04AD  0084               	movwf	4
  5400  04AE  0828               	movf	??_PathTo+2,w
  5401  04AF  1383               	bcf	3,7	;select IRP bank1
  5402  04B0  0080               	movwf	0
  5403  04B1  3001               	movlw	1
  5404  04B2  00A6               	movwf	??_PathTo
  5405  04B3  0826               	movf	??_PathTo,w
  5406  04B4  07D1               	addwf	_c,f
  5407  04B5  3005               	movlw	5
  5408  04B6  0251               	subwf	_c,w
  5409  04B7  1C03               	skipc
  5410  04B8  2C89               	goto	l3985
  5411  04B9                     l3991:	
  5412  04B9  3001               	movlw	1
  5413  04BA  00A6               	movwf	??_PathTo
  5414  04BB  0826               	movf	??_PathTo,w
  5415  04BC  07D5               	addwf	_r,f
  5416  04BD  3004               	movlw	4
  5417  04BE  0255               	subwf	_r,w
  5418  04BF  1C03               	skipc
  5419  04C0  2C84               	goto	l3979
  5420  04C1                     l3995:	
  5421                           
  5422                           ;main.c: 51: }
  5423                           ;main.c: 52: }
  5424                           ;main.c: 54: pathCountShortest = 20;
  5425  04C1  3014               	movlw	20
  5426  04C2  00A6               	movwf	??_PathTo
  5427  04C3  0826               	movf	??_PathTo,w
  5428  04C4  00E7               	movwf	_pathCountShortest
  5429                           
  5430                           ;main.c: 55: for (r = 0; r <= 1; r++){
  5431  04C5  01D5               	clrf	_r
  5432  04C6  3002               	movlw	2
  5433  04C7  0255               	subwf	_r,w
  5434  04C8  1803               	btfsc	3,0
  5435  04C9  2CF1               	goto	l4019
  5436  04CA                     l4003:	
  5437                           
  5438                           ;main.c: 56: for (c = 0; c <= 15; c++){
  5439  04CA  01D1               	clrf	_c
  5440  04CB  3010               	movlw	16
  5441  04CC  0251               	subwf	_c,w
  5442  04CD  1803               	btfsc	3,0
  5443  04CE  2CE9               	goto	l4015
  5444  04CF                     l4009:	
  5445                           
  5446                           ;main.c: 57: pathShortest[r][c] = 0;
  5447  04CF  0855               	movf	_r,w
  5448  04D0  00A6               	movwf	??_PathTo
  5449  04D1  3004               	movlw	4
  5450  04D2                     u2845:	
  5451  04D2  1003               	clrc
  5452  04D3  0DA6               	rlf	??_PathTo,f
  5453  04D4  3EFF               	addlw	-1
  5454  04D5  1D03               	skipz
  5455  04D6  2CD2               	goto	u2845
  5456  04D7  30B0               	movlw	(low (_pathShortest| (0+256)))& (0+255)
  5457  04D8  0726               	addwf	??_PathTo,w
  5458  04D9  00A7               	movwf	??_PathTo+1
  5459  04DA  0851               	movf	_c,w
  5460  04DB  0727               	addwf	??_PathTo+1,w
  5461  04DC  00A8               	movwf	??_PathTo+2
  5462  04DD  0828               	movf	??_PathTo+2,w
  5463  04DE  0084               	movwf	4
  5464  04DF  1783               	bsf	3,7	;select IRP bank3
  5465  04E0  0180               	clrf	0
  5466  04E1  3001               	movlw	1
  5467  04E2  00A6               	movwf	??_PathTo
  5468  04E3  0826               	movf	??_PathTo,w
  5469  04E4  07D1               	addwf	_c,f
  5470  04E5  3010               	movlw	16
  5471  04E6  0251               	subwf	_c,w
  5472  04E7  1C03               	skipc
  5473  04E8  2CCF               	goto	l4009
  5474  04E9                     l4015:	
  5475  04E9  3001               	movlw	1
  5476  04EA  00A6               	movwf	??_PathTo
  5477  04EB  0826               	movf	??_PathTo,w
  5478  04EC  07D5               	addwf	_r,f
  5479  04ED  3002               	movlw	2
  5480  04EE  0255               	subwf	_r,w
  5481  04EF  1C03               	skipc
  5482  04F0  2CCA               	goto	l4003
  5483  04F1                     l4019:	
  5484                           
  5485                           ;main.c: 58: }
  5486                           ;main.c: 59: }
  5487                           ;main.c: 61: x_goto = x_target;
  5488  04F1  082D               	movf	PathTo@x_target,w
  5489  04F2  00A6               	movwf	??_PathTo
  5490  04F3  0826               	movf	??_PathTo,w
  5491  04F4  00DB               	movwf	_x_goto
  5492                           
  5493                           ;main.c: 62: y_goto = y_target;
  5494  04F5  0825               	movf	PathTo@y_target,w
  5495  04F6  00A6               	movwf	??_PathTo
  5496  04F7  0826               	movf	??_PathTo,w
  5497  04F8  00E0               	movwf	_y_goto
  5498                           
  5499                           ;main.c: 64: x_path = x;
  5500  04F9  0868               	movf	_x,w
  5501  04FA  00A6               	movwf	??_PathTo
  5502  04FB  0826               	movf	??_PathTo,w
  5503  04FC  00DD               	movwf	_x_path
  5504                           
  5505                           ;main.c: 65: y_path = y;
  5506  04FD  085F               	movf	_y,w
  5507  04FE  00A6               	movwf	??_PathTo
  5508  04FF  0826               	movf	??_PathTo,w
  5509  0500  00E2               	movwf	_y_path
  5510                           
  5511                           ;main.c: 66: orientation_path = orientation;
  5512  0501  0866               	movf	_orientation,w
  5513  0502  00A6               	movwf	??_PathTo
  5514  0503  0826               	movf	??_PathTo,w
  5515  0504  00D3               	movwf	_orientation_path
  5516                           
  5517                           ;main.c: 68: pathCount = 0;
  5518  0505  01D4               	clrf	_pathCount
  5519                           
  5520                           ;main.c: 71: lcdSetCursor(0b10000000);
  5521  0506  3080               	movlw	128
  5522  0507  160A  118A  27C1  120A  118A  	fcall	_lcdSetCursor
  5523                           
  5524                           ;main.c: 72: lcdWriteString("Working...");
  5525  050C  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  5526  050D  120A  158A  2091  120A  118A  	fcall	_lcdWriteString
  5527                           
  5528                           ;main.c: 74: for (int loop = 0; loop <= 10000; loop++){
  5529  0512  1283               	bcf	3,5	;RP0=0, select bank0
  5530  0513  1303               	bcf	3,6	;RP1=0, select bank0
  5531  0514  01AF               	clrf	PathTo@loop
  5532  0515  01B0               	clrf	PathTo@loop+1
  5533  0516                     L16:	
  5534  0516  0830               	movf	PathTo@loop+1,w
  5535  0517  3A80               	xorlw	128
  5536  0518  00FF               	movwf	127
  5537  0519  30A7               	movlw	167
  5538  051A  027F               	subwf	127,w
  5539  051B  1D03               	skipz
  5540  051C  2D1F               	goto	u2875
  5541  051D  3011               	movlw	17
  5542  051E  022F               	subwf	PathTo@loop,w
  5543  051F                     u2875:	
  5544  051F  1803               	btfsc	3,0
  5545  0520  0008               	return
  5546                           
  5547                           ;main.c: 76: reset_flag = 0;
  5548  0521  11F0               	bcf	_reset_flag/(0+8),_reset_flag& (0+7)
  5549                           
  5550                           ;main.c: 78: path[0][pathCount] = x_path;
  5551  0522  1283               	bcf	3,5	;RP0=0, select bank0
  5552  0523  1303               	bcf	3,6	;RP1=0, select bank0
  5553  0524  085D               	movf	_x_path,w
  5554  0525  00A6               	movwf	??_PathTo
  5555  0526  0854               	movf	_pathCount,w
  5556  0527  3E90               	addlw	(low (_path| (0+256)))& (0+255)
  5557  0528  0084               	movwf	4
  5558  0529  0826               	movf	??_PathTo,w
  5559  052A  1783               	bsf	3,7	;select IRP bank3
  5560  052B  0080               	movwf	0
  5561                           
  5562                           ;main.c: 79: path[1][pathCount] = y_path;
  5563  052C  0862               	movf	_y_path,w
  5564  052D  00A6               	movwf	??_PathTo
  5565  052E  0854               	movf	_pathCount,w
  5566  052F  3EA0               	addlw	(low ((_path| (0+256)+16)))& (0+255)
  5567  0530  0084               	movwf	4
  5568  0531  0826               	movf	??_PathTo,w
  5569  0532  0080               	movwf	0
  5570                           
  5571                           ;main.c: 84: left = gridWalls[0][(mazeGrid[y_path][x_path])];
  5572  0533  3005               	movlw	5
  5573  0534  00A6               	movwf	??_PathTo
  5574  0535  0826               	movf	??_PathTo,w
  5575  0536  00A0               	movwf	___bmul@multiplicand
  5576  0537  0862               	movf	_y_path,w
  5577  0538  120A  158A  2013  120A  118A  	fcall	___bmul
  5578  053D  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5579  053E  1283               	bcf	3,5	;RP0=0, select bank0
  5580  053F  1303               	bcf	3,6	;RP1=0, select bank0
  5581  0540  075D               	addwf	_x_path,w
  5582  0541  00A7               	movwf	??_PathTo+1
  5583  0542  0827               	movf	??_PathTo+1,w
  5584  0543  0084               	movwf	4
  5585  0544  1383               	bcf	3,7	;select IRP bank1
  5586  0545  0800               	movf	0,w
  5587  0546  3E10               	addlw	(low (_gridWalls| (0+256)))& (0+255)
  5588  0547  0084               	movwf	4
  5589  0548  1170               	bcf	_left/(0+8),_left& (0+7)
  5590  0549  1783               	bsf	3,7	;select IRP bank2
  5591  054A  1800               	btfsc	0,0
  5592  054B  1570               	bsf	_left/(0+8),_left& (0+7)
  5593                           
  5594                           ;main.c: 85: up = gridWalls[1][(mazeGrid[y_path][x_path])];
  5595  054C  3005               	movlw	5
  5596  054D  1283               	bcf	3,5	;RP0=0, select bank0
  5597  054E  1303               	bcf	3,6	;RP1=0, select bank0
  5598  054F  00A6               	movwf	??_PathTo
  5599  0550  0826               	movf	??_PathTo,w
  5600  0551  00A0               	movwf	___bmul@multiplicand
  5601  0552  0862               	movf	_y_path,w
  5602  0553  120A  158A  2013  120A  118A  	fcall	___bmul
  5603  0558  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5604  0559  1283               	bcf	3,5	;RP0=0, select bank0
  5605  055A  1303               	bcf	3,6	;RP1=0, select bank0
  5606  055B  075D               	addwf	_x_path,w
  5607  055C  00A7               	movwf	??_PathTo+1
  5608  055D  0827               	movf	??_PathTo+1,w
  5609  055E  0084               	movwf	4
  5610  055F  1383               	bcf	3,7	;select IRP bank1
  5611  0560  0800               	movf	0,w
  5612  0561  3E20               	addlw	(low ((_gridWalls| (0+256)+16)))& (0+255)
  5613  0562  0084               	movwf	4
  5614  0563  1370               	bcf	_up/(0+8),_up& (0+7)
  5615  0564  1783               	bsf	3,7	;select IRP bank2
  5616  0565  1800               	btfsc	0,0
  5617  0566  1770               	bsf	_up/(0+8),_up& (0+7)
  5618                           
  5619                           ;main.c: 86: right = gridWalls[2][(mazeGrid[y_path][x_path])];
  5620  0567  3005               	movlw	5
  5621  0568  1283               	bcf	3,5	;RP0=0, select bank0
  5622  0569  1303               	bcf	3,6	;RP1=0, select bank0
  5623  056A  00A6               	movwf	??_PathTo
  5624  056B  0826               	movf	??_PathTo,w
  5625  056C  00A0               	movwf	___bmul@multiplicand
  5626  056D  0862               	movf	_y_path,w
  5627  056E  120A  158A  2013  120A  118A  	fcall	___bmul
  5628  0573  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5629  0574  1283               	bcf	3,5	;RP0=0, select bank0
  5630  0575  1303               	bcf	3,6	;RP1=0, select bank0
  5631  0576  075D               	addwf	_x_path,w
  5632  0577  00A7               	movwf	??_PathTo+1
  5633  0578  0827               	movf	??_PathTo+1,w
  5634  0579  0084               	movwf	4
  5635  057A  1383               	bcf	3,7	;select IRP bank1
  5636  057B  0800               	movf	0,w
  5637  057C  3E30               	addlw	(low ((_gridWalls| (0+256)+32)))& (0+255)
  5638  057D  0084               	movwf	4
  5639  057E  1270               	bcf	_right/(0+8),_right& (0+7)
  5640  057F  1783               	bsf	3,7	;select IRP bank2
  5641  0580  1800               	btfsc	0,0
  5642  0581  1670               	bsf	_right/(0+8),_right& (0+7)
  5643                           
  5644                           ;main.c: 87: down = gridWalls[3][(mazeGrid[y_path][x_path])];
  5645  0582  3005               	movlw	5
  5646  0583  1283               	bcf	3,5	;RP0=0, select bank0
  5647  0584  1303               	bcf	3,6	;RP1=0, select bank0
  5648  0585  00A6               	movwf	??_PathTo
  5649  0586  0826               	movf	??_PathTo,w
  5650  0587  00A0               	movwf	___bmul@multiplicand
  5651  0588  0862               	movf	_y_path,w
  5652  0589  120A  158A  2013  120A  118A  	fcall	___bmul
  5653  058E  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5654  058F  1283               	bcf	3,5	;RP0=0, select bank0
  5655  0590  1303               	bcf	3,6	;RP1=0, select bank0
  5656  0591  075D               	addwf	_x_path,w
  5657  0592  00A7               	movwf	??_PathTo+1
  5658  0593  0827               	movf	??_PathTo+1,w
  5659  0594  0084               	movwf	4
  5660  0595  1383               	bcf	3,7	;select IRP bank1
  5661  0596  0800               	movf	0,w
  5662  0597  3E40               	addlw	(low ((_gridWalls| (0+256)+48)))& (0+255)
  5663  0598  0084               	movwf	4
  5664  0599  10F0               	bcf	_down/(0+8),_down& (0+7)
  5665  059A  1783               	bsf	3,7	;select IRP bank2
  5666  059B  1800               	btfsc	0,0
  5667  059C  14F0               	bsf	_down/(0+8),_down& (0+7)
  5668                           
  5669                           ;main.c: 91: if (pathCount != 0){
  5670  059D  1283               	bcf	3,5	;RP0=0, select bank0
  5671  059E  1303               	bcf	3,6	;RP1=0, select bank0
  5672  059F  0854               	movf	_pathCount,w
  5673  05A0  1D03               	btfss	3,2
  5674  05A1  2DAB               	goto	l4049
  5675  05A2  2DB9               	goto	l4051
  5676  05A3                     l177:	
  5677                           ;main.c: 93: case 0: down = 1;
  5678                           
  5679                           ;main.c: 92: switch(orientation_path){
  5680                           
  5681  05A3  14F0               	bsf	_down/(0+8),_down& (0+7)
  5682                           
  5683                           ;main.c: 94: break;
  5684  05A4  2DB9               	goto	l4051
  5685  05A5                     l179:	
  5686                           ;main.c: 95: case 1: left = 1;
  5687                           
  5688  05A5  1570               	bsf	_left/(0+8),_left& (0+7)
  5689                           
  5690                           ;main.c: 96: break;
  5691  05A6  2DB9               	goto	l4051
  5692  05A7                     l180:	
  5693                           ;main.c: 97: case 2: up = 1;
  5694                           
  5695  05A7  1770               	bsf	_up/(0+8),_up& (0+7)
  5696                           
  5697                           ;main.c: 98: break;
  5698  05A8  2DB9               	goto	l4051
  5699  05A9                     l181:	
  5700                           ;main.c: 99: case 3: right = 1;
  5701                           
  5702  05A9  1670               	bsf	_right/(0+8),_right& (0+7)
  5703                           
  5704                           ;main.c: 101: }
  5705                           
  5706                           ;main.c: 100: break;
  5707  05AA  2DB9               	goto	l4051
  5708  05AB                     l4049:	
  5709  05AB  0853               	movf	_orientation_path,w
  5710                           
  5711                           ; Switch size 1, requested type "space"
  5712                           ; Number of cases is 4, Range of values is 0 to 3
  5713                           ; switch strategies available:
  5714                           ; Name         Instructions Cycles
  5715                           ; simple_byte           13     7 (average)
  5716                           ; direct_byte           20     8 (fixed)
  5717                           ; jumptable            260     6 (fixed)
  5718                           ;	Chosen strategy is simple_byte
  5719  05AC  3A00               	xorlw	0	; case 0
  5720  05AD  1903               	skipnz
  5721  05AE  2DA3               	goto	l177
  5722  05AF  3A01               	xorlw	1	; case 1
  5723  05B0  1903               	skipnz
  5724  05B1  2DA5               	goto	l179
  5725  05B2  3A03               	xorlw	3	; case 2
  5726  05B3  1903               	skipnz
  5727  05B4  2DA7               	goto	l180
  5728  05B5  3A01               	xorlw	1	; case 3
  5729  05B6  1903               	skipnz
  5730  05B7  2DA9               	goto	l181
  5731  05B8  2DB9               	goto	l4051
  5732  05B9                     l4051:	
  5733                           
  5734                           ;main.c: 102: }
  5735                           ;main.c: 106: char sum = (left + up + down + right);
  5736  05B9  3000               	movlw	0
  5737  05BA  1970               	btfsc	_left/(0+8),_left& (0+7)
  5738  05BB  3001               	movlw	1
  5739  05BC  1B70               	btfsc	_up/(0+8),_up& (0+7)
  5740  05BD  3E01               	addlw	1
  5741  05BE  18F0               	btfsc	_down/(0+8),_down& (0+7)
  5742  05BF  3E01               	addlw	1
  5743  05C0  1A70               	btfsc	_right/(0+8),_right& (0+7)
  5744  05C1  3E01               	addlw	1
  5745  05C2  00A6               	movwf	??_PathTo
  5746  05C3  0826               	movf	??_PathTo,w
  5747  05C4  00AE               	movwf	PathTo@sum
  5748                           
  5749                           ;main.c: 107: if(sum <= 2){
  5750  05C5  3003               	movlw	3
  5751  05C6  022E               	subwf	PathTo@sum,w
  5752  05C7  1803               	skipnc
  5753  05C8  2DE4               	goto	l182
  5754                           
  5755                           ;main.c: 108: x_int = x_path;
  5756  05C9  085D               	movf	_x_path,w
  5757  05CA  00A6               	movwf	??_PathTo
  5758  05CB  0826               	movf	??_PathTo,w
  5759  05CC  00DC               	movwf	_x_int
  5760                           
  5761                           ;main.c: 109: y_int = y_path;
  5762  05CD  0862               	movf	_y_path,w
  5763  05CE  00A6               	movwf	??_PathTo
  5764  05CF  0826               	movf	??_PathTo,w
  5765  05D0  00E1               	movwf	_y_int
  5766                           
  5767                           ;main.c: 115: if (left == 0)
  5768  05D1  1970               	btfsc	_left/(0+8),_left& (0+7)
  5769  05D2  2DD5               	goto	l183
  5770                           
  5771                           ;main.c: 116: intersection_orientation = 3;
  5772  05D3  3003               	movlw	3
  5773  05D4  2DE1               	goto	L5
  5774  05D5                     l183:	
  5775                           
  5776                           ;main.c: 117: else if (up == 0)
  5777  05D5  1B70               	btfsc	_up/(0+8),_up& (0+7)
  5778  05D6  2DD9               	goto	l185
  5779                           
  5780                           ;main.c: 118: intersection_orientation = 0;
  5781  05D7  01D2               	clrf	_intersection_orientation
  5782  05D8  2DE4               	goto	l182
  5783  05D9                     l185:	
  5784                           
  5785                           ;main.c: 119: else if (right == 0)
  5786  05D9  1A70               	btfsc	_right/(0+8),_right& (0+7)
  5787  05DA  2DDE               	goto	l187
  5788                           
  5789                           ;main.c: 120: intersection_orientation = 1;
  5790  05DB  01D2               	clrf	_intersection_orientation
  5791  05DC  0AD2               	incf	_intersection_orientation,f
  5792  05DD  2DE4               	goto	l182
  5793  05DE                     l187:	
  5794                           
  5795                           ;main.c: 121: else if (down == 0)
  5796  05DE  18F0               	btfsc	_down/(0+8),_down& (0+7)
  5797  05DF  2DE4               	goto	l182
  5798                           
  5799                           ;main.c: 122: intersection_orientation = 2;
  5800  05E0  3002               	movlw	2
  5801  05E1                     L5:	
  5802  05E1  00A6               	movwf	??_PathTo
  5803  05E2  0826               	movf	??_PathTo,w
  5804  05E3  00D2               	movwf	_intersection_orientation
  5805  05E4                     l182:	
  5806                           
  5807                           ;main.c: 123: }
  5808                           ;main.c: 130: if ((x_path == x_target)){
  5809  05E4  085D               	movf	_x_path,w
  5810  05E5  062D               	xorwf	PathTo@x_target,w
  5811  05E6  1D03               	skipz
  5812  05E7  2EE1               	goto	l4131
  5813                           
  5814                           ;main.c: 131: if (y_path == y_target){
  5815  05E8  0862               	movf	_y_path,w
  5816  05E9  0625               	xorwf	PathTo@y_target,w
  5817  05EA  1D03               	skipz
  5818  05EB  2EE1               	goto	l4131
  5819                           
  5820                           ;main.c: 135: if(pathCount < pathCountShortest){
  5821  05EC  0867               	movf	_pathCountShortest,w
  5822  05ED  0254               	subwf	_pathCount,w
  5823  05EE  1803               	skipnc
  5824  05EF  2E99               	goto	l4103
  5825                           
  5826                           ;main.c: 136: pathCountShortest = pathCount;
  5827  05F0  0854               	movf	_pathCount,w
  5828  05F1  00A6               	movwf	??_PathTo
  5829  05F2  0826               	movf	??_PathTo,w
  5830  05F3  00E7               	movwf	_pathCountShortest
  5831                           
  5832                           ;main.c: 137: for (r = 0; r <= 1; r++){
  5833  05F4  01D5               	clrf	_r
  5834  05F5                     L13:	
  5835  05F5  3002               	movlw	2
  5836  05F6  0255               	subwf	_r,w
  5837  05F7  1803               	btfsc	3,0
  5838  05F8  2E99               	goto	l4103
  5839                           
  5840                           ;main.c: 138: for (c = 0; c <= 15; c++){
  5841  05F9  01D1               	clrf	_c
  5842  05FA  3010               	movlw	16
  5843  05FB  0251               	subwf	_c,w
  5844  05FC  1803               	btfsc	3,0
  5845  05FD  2E2B               	goto	l4089
  5846  05FE                     l4083:	
  5847                           
  5848                           ;main.c: 139: pathShortest[r][c] = path[r][c];
  5849  05FE  0855               	movf	_r,w
  5850  05FF  00A6               	movwf	??_PathTo
  5851  0600  3004               	movlw	4
  5852  0601                     u3035:	
  5853  0601  1003               	clrc
  5854  0602  0DA6               	rlf	??_PathTo,f
  5855  0603  3EFF               	addlw	-1
  5856  0604  1D03               	skipz
  5857  0605  2E01               	goto	u3035
  5858  0606  3090               	movlw	(low (_path| (0+256)))& (0+255)
  5859  0607  0726               	addwf	??_PathTo,w
  5860  0608  00A7               	movwf	??_PathTo+1
  5861  0609  0851               	movf	_c,w
  5862  060A  0727               	addwf	??_PathTo+1,w
  5863  060B  00A8               	movwf	??_PathTo+2
  5864  060C  0828               	movf	??_PathTo+2,w
  5865  060D  0084               	movwf	4
  5866  060E  1783               	bsf	3,7	;select IRP bank3
  5867  060F  0800               	movf	0,w
  5868  0610  00A9               	movwf	??_PathTo+3
  5869  0611  0855               	movf	_r,w
  5870  0612  00AA               	movwf	??_PathTo+4
  5871  0613  3004               	movlw	4
  5872  0614                     u3045:	
  5873  0614  1003               	clrc
  5874  0615  0DAA               	rlf	??_PathTo+4,f
  5875  0616  3EFF               	addlw	-1
  5876  0617  1D03               	skipz
  5877  0618  2E14               	goto	u3045
  5878  0619  30B0               	movlw	(low (_pathShortest| (0+256)))& (0+255)
  5879  061A  072A               	addwf	??_PathTo+4,w
  5880  061B  00AB               	movwf	??_PathTo+5
  5881  061C  0851               	movf	_c,w
  5882  061D  072B               	addwf	??_PathTo+5,w
  5883  061E  00AC               	movwf	??_PathTo+6
  5884  061F  082C               	movf	??_PathTo+6,w
  5885  0620  0084               	movwf	4
  5886  0621  0829               	movf	??_PathTo+3,w
  5887  0622  0080               	movwf	0
  5888  0623  3001               	movlw	1
  5889  0624  00A6               	movwf	??_PathTo
  5890  0625  0826               	movf	??_PathTo,w
  5891  0626  07D1               	addwf	_c,f
  5892  0627  3010               	movlw	16
  5893  0628  0251               	subwf	_c,w
  5894  0629  1C03               	skipc
  5895  062A  2DFE               	goto	l4083
  5896  062B                     l4089:	
  5897  062B  3001               	movlw	1
  5898  062C  00A6               	movwf	??_PathTo
  5899  062D  0826               	movf	??_PathTo,w
  5900  062E  07D5               	addwf	_r,f
  5901  062F  2DF5               	goto	L13
  5902  0630                     l4093:	
  5903                           ;main.c: 149: case 0: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 4);
  5904                           
  5905                           ;main.c: 140: }
  5906                           ;main.c: 141: }
  5907                           ;main.c: 142: }
  5908                           ;main.c: 148: switch(intersection_orientation){
  5909                           
  5910  0630  3005               	movlw	5
  5911  0631  00A6               	movwf	??_PathTo
  5912  0632  0826               	movf	??_PathTo,w
  5913  0633  00A0               	movwf	___bmul@multiplicand
  5914  0634  0861               	movf	_y_int,w
  5915  0635  120A  158A  2013  120A  118A  	fcall	___bmul
  5916  063A  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5917  063B  1283               	bcf	3,5	;RP0=0, select bank0
  5918  063C  1303               	bcf	3,6	;RP1=0, select bank0
  5919  063D  075C               	addwf	_x_int,w
  5920  063E  00A7               	movwf	??_PathTo+1
  5921  063F  0827               	movf	??_PathTo+1,w
  5922  0640  0084               	movwf	4
  5923  0641  1383               	bcf	3,7	;select IRP bank1
  5924  0642  0800               	movf	0,w
  5925  0643  3E04               	addlw	4
  5926  0644  2E83               	goto	L14
  5927  0645                     l4095:	
  5928                           ;main.c: 151: case 1: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 2);
  5929                           
  5930                           ;main.c: 150: break;
  5931                           
  5932  0645  3005               	movlw	5
  5933  0646  00A6               	movwf	??_PathTo
  5934  0647  0826               	movf	??_PathTo,w
  5935  0648  00A0               	movwf	___bmul@multiplicand
  5936  0649  0861               	movf	_y_int,w
  5937  064A  120A  158A  2013  120A  118A  	fcall	___bmul
  5938  064F  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5939  0650  1283               	bcf	3,5	;RP0=0, select bank0
  5940  0651  1303               	bcf	3,6	;RP1=0, select bank0
  5941  0652  075C               	addwf	_x_int,w
  5942  0653  00A7               	movwf	??_PathTo+1
  5943  0654  0827               	movf	??_PathTo+1,w
  5944  0655  0084               	movwf	4
  5945  0656  1383               	bcf	3,7	;select IRP bank1
  5946  0657  0800               	movf	0,w
  5947  0658  3E02               	addlw	2
  5948  0659  2E83               	goto	L14
  5949  065A                     l4097:	
  5950                           ;main.c: 153: case 2: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 1);
  5951                           
  5952                           ;main.c: 152: break;
  5953                           
  5954  065A  3005               	movlw	5
  5955  065B  00A6               	movwf	??_PathTo
  5956  065C  0826               	movf	??_PathTo,w
  5957  065D  00A0               	movwf	___bmul@multiplicand
  5958  065E  0861               	movf	_y_int,w
  5959  065F  120A  158A  2013  120A  118A  	fcall	___bmul
  5960  0664  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5961  0665  1283               	bcf	3,5	;RP0=0, select bank0
  5962  0666  1303               	bcf	3,6	;RP1=0, select bank0
  5963  0667  075C               	addwf	_x_int,w
  5964  0668  00A7               	movwf	??_PathTo+1
  5965  0669  0827               	movf	??_PathTo+1,w
  5966  066A  0084               	movwf	4
  5967  066B  1383               	bcf	3,7	;select IRP bank1
  5968  066C  0800               	movf	0,w
  5969  066D  3E01               	addlw	1
  5970  066E  2E83               	goto	L14
  5971  066F                     l4099:	
  5972                           ;main.c: 155: case 3: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 8);
  5973                           
  5974                           ;main.c: 154: break;
  5975                           
  5976  066F  3005               	movlw	5
  5977  0670  00A6               	movwf	??_PathTo
  5978  0671  0826               	movf	??_PathTo,w
  5979  0672  00A0               	movwf	___bmul@multiplicand
  5980  0673  0861               	movf	_y_int,w
  5981  0674  120A  158A  2013  120A  118A  	fcall	___bmul
  5982  0679  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5983  067A  1283               	bcf	3,5	;RP0=0, select bank0
  5984  067B  1303               	bcf	3,6	;RP1=0, select bank0
  5985  067C  075C               	addwf	_x_int,w
  5986  067D  00A7               	movwf	??_PathTo+1
  5987  067E  0827               	movf	??_PathTo+1,w
  5988  067F  0084               	movwf	4
  5989  0680  1383               	bcf	3,7	;select IRP bank1
  5990  0681  0800               	movf	0,w
  5991  0682  3E08               	addlw	8
  5992  0683                     L14:	
  5993  0683  00A8               	movwf	??_PathTo+2
  5994  0684  3005               	movlw	5
  5995  0685  00A9               	movwf	??_PathTo+3
  5996  0686  0829               	movf	??_PathTo+3,w
  5997  0687  00A0               	movwf	___bmul@multiplicand
  5998  0688  0861               	movf	_y_int,w
  5999  0689  120A  158A  2013  120A  118A  	fcall	___bmul
  6000  068E  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  6001  068F  1283               	bcf	3,5	;RP0=0, select bank0
  6002  0690  1303               	bcf	3,6	;RP1=0, select bank0
  6003  0691  075C               	addwf	_x_int,w
  6004  0692  00AA               	movwf	??_PathTo+4
  6005  0693  082A               	movf	??_PathTo+4,w
  6006  0694  0084               	movwf	4
  6007  0695  0828               	movf	??_PathTo+2,w
  6008  0696  1383               	bcf	3,7	;select IRP bank1
  6009  0697  0080               	movwf	0
  6010                           
  6011                           ;main.c: 157: }
  6012                           
  6013                           ;main.c: 156: break;
  6014  0698  2EA7               	goto	l4105
  6015  0699                     l4103:	
  6016  0699  0852               	movf	_intersection_orientation,w
  6017                           
  6018                           ; Switch size 1, requested type "space"
  6019                           ; Number of cases is 4, Range of values is 0 to 3
  6020                           ; switch strategies available:
  6021                           ; Name         Instructions Cycles
  6022                           ; simple_byte           13     7 (average)
  6023                           ; direct_byte           20     8 (fixed)
  6024                           ; jumptable            260     6 (fixed)
  6025                           ;	Chosen strategy is simple_byte
  6026  069A  3A00               	xorlw	0	; case 0
  6027  069B  1903               	skipnz
  6028  069C  2E30               	goto	l4093
  6029  069D  3A01               	xorlw	1	; case 1
  6030  069E  1903               	skipnz
  6031  069F  2E45               	goto	l4095
  6032  06A0  3A03               	xorlw	3	; case 2
  6033  06A1  1903               	skipnz
  6034  06A2  2E5A               	goto	l4097
  6035  06A3  3A01               	xorlw	1	; case 3
  6036  06A4  1903               	skipnz
  6037  06A5  2E6F               	goto	l4099
  6038  06A6  2EA7               	goto	l4105
  6039  06A7                     l4105:	
  6040                           
  6041                           ;main.c: 160: x_path = x;
  6042  06A7  0868               	movf	_x,w
  6043  06A8  00A6               	movwf	??_PathTo
  6044  06A9  0826               	movf	??_PathTo,w
  6045  06AA  00DD               	movwf	_x_path
  6046                           
  6047                           ;main.c: 161: y_path = y;
  6048  06AB  085F               	movf	_y,w
  6049  06AC  00A6               	movwf	??_PathTo
  6050  06AD  0826               	movf	??_PathTo,w
  6051  06AE  00E2               	movwf	_y_path
  6052                           
  6053                           ;main.c: 162: orientation_path = orientation;
  6054  06AF  0866               	movf	_orientation,w
  6055  06B0  00A6               	movwf	??_PathTo
  6056  06B1  0826               	movf	??_PathTo,w
  6057  06B2  00D3               	movwf	_orientation_path
  6058                           
  6059                           ;main.c: 163: pathCount = 0;
  6060  06B3  01D4               	clrf	_pathCount
  6061                           
  6062                           ;main.c: 164: reset_flag = 1;
  6063  06B4  15F0               	bsf	_reset_flag/(0+8),_reset_flag& (0+7)
  6064                           
  6065                           ;main.c: 167: for (r = 0; r <= 1; r++){
  6066  06B5  01D5               	clrf	_r
  6067  06B6  3002               	movlw	2
  6068  06B7  0255               	subwf	_r,w
  6069  06B8  1803               	btfsc	3,0
  6070  06B9  2EE1               	goto	l4131
  6071  06BA                     l4115:	
  6072                           
  6073                           ;main.c: 168: for (c = 0; c <= 15; c++){
  6074  06BA  01D1               	clrf	_c
  6075  06BB  3010               	movlw	16
  6076  06BC  0251               	subwf	_c,w
  6077  06BD  1803               	btfsc	3,0
  6078  06BE  2ED9               	goto	l4127
  6079  06BF                     l4121:	
  6080                           
  6081                           ;main.c: 169: path[r][c] = 0;
  6082  06BF  0855               	movf	_r,w
  6083  06C0  00A6               	movwf	??_PathTo
  6084  06C1  3004               	movlw	4
  6085  06C2                     u3095:	
  6086  06C2  1003               	clrc
  6087  06C3  0DA6               	rlf	??_PathTo,f
  6088  06C4  3EFF               	addlw	-1
  6089  06C5  1D03               	skipz
  6090  06C6  2EC2               	goto	u3095
  6091  06C7  3090               	movlw	(low (_path| (0+256)))& (0+255)
  6092  06C8  0726               	addwf	??_PathTo,w
  6093  06C9  00A7               	movwf	??_PathTo+1
  6094  06CA  0851               	movf	_c,w
  6095  06CB  0727               	addwf	??_PathTo+1,w
  6096  06CC  00A8               	movwf	??_PathTo+2
  6097  06CD  0828               	movf	??_PathTo+2,w
  6098  06CE  0084               	movwf	4
  6099  06CF  1783               	bsf	3,7	;select IRP bank3
  6100  06D0  0180               	clrf	0
  6101  06D1  3001               	movlw	1
  6102  06D2  00A6               	movwf	??_PathTo
  6103  06D3  0826               	movf	??_PathTo,w
  6104  06D4  07D1               	addwf	_c,f
  6105  06D5  3010               	movlw	16
  6106  06D6  0251               	subwf	_c,w
  6107  06D7  1C03               	skipc
  6108  06D8  2EBF               	goto	l4121
  6109  06D9                     l4127:	
  6110  06D9  3001               	movlw	1
  6111  06DA  00A6               	movwf	??_PathTo
  6112  06DB  0826               	movf	??_PathTo,w
  6113  06DC  07D5               	addwf	_r,f
  6114  06DD  3002               	movlw	2
  6115  06DE  0255               	subwf	_r,w
  6116  06DF  1C03               	skipc
  6117  06E0  2EBA               	goto	l4115
  6118  06E1                     l4131:	
  6119                           
  6120                           ;main.c: 170: }
  6121                           ;main.c: 171: }
  6122                           ;main.c: 172: }
  6123                           ;main.c: 173: }
  6124                           ;main.c: 179: if((sum == 4) || (pathCount >= 15)){
  6125  06E1  3004               	movlw	4
  6126  06E2  062E               	xorwf	PathTo@sum,w
  6127  06E3  1903               	btfsc	3,2
  6128  06E4  2F53               	goto	l4145
  6129  06E5  300F               	movlw	15
  6130  06E6  0254               	subwf	_pathCount,w
  6131  06E7  1803               	btfsc	3,0
  6132  06E8  2F53               	goto	l4145
  6133  06E9  2F9B               	goto	l207
  6134  06EA                     l4135:	
  6135                           ;main.c: 183: case 0: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 4);
  6136                           
  6137                           ;main.c: 182: switch(intersection_orientation){
  6138                           
  6139  06EA  3005               	movlw	5
  6140  06EB  00A6               	movwf	??_PathTo
  6141  06EC  0826               	movf	??_PathTo,w
  6142  06ED  00A0               	movwf	___bmul@multiplicand
  6143  06EE  0861               	movf	_y_int,w
  6144  06EF  120A  158A  2013  120A  118A  	fcall	___bmul
  6145  06F4  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  6146  06F5  1283               	bcf	3,5	;RP0=0, select bank0
  6147  06F6  1303               	bcf	3,6	;RP1=0, select bank0
  6148  06F7  075C               	addwf	_x_int,w
  6149  06F8  00A7               	movwf	??_PathTo+1
  6150  06F9  0827               	movf	??_PathTo+1,w
  6151  06FA  0084               	movwf	4
  6152  06FB  1383               	bcf	3,7	;select IRP bank1
  6153  06FC  0800               	movf	0,w
  6154  06FD  3E04               	addlw	4
  6155  06FE  2F3D               	goto	L15
  6156  06FF                     l4137:	
  6157                           ;main.c: 185: case 1: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 2);
  6158                           
  6159                           ;main.c: 184: break;
  6160                           
  6161  06FF  3005               	movlw	5
  6162  0700  00A6               	movwf	??_PathTo
  6163  0701  0826               	movf	??_PathTo,w
  6164  0702  00A0               	movwf	___bmul@multiplicand
  6165  0703  0861               	movf	_y_int,w
  6166  0704  120A  158A  2013  120A  118A  	fcall	___bmul
  6167  0709  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  6168  070A  1283               	bcf	3,5	;RP0=0, select bank0
  6169  070B  1303               	bcf	3,6	;RP1=0, select bank0
  6170  070C  075C               	addwf	_x_int,w
  6171  070D  00A7               	movwf	??_PathTo+1
  6172  070E  0827               	movf	??_PathTo+1,w
  6173  070F  0084               	movwf	4
  6174  0710  1383               	bcf	3,7	;select IRP bank1
  6175  0711  0800               	movf	0,w
  6176  0712  3E02               	addlw	2
  6177  0713  2F3D               	goto	L15
  6178  0714                     l4139:	
  6179                           ;main.c: 187: case 2: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 1);
  6180                           
  6181                           ;main.c: 186: break;
  6182                           
  6183  0714  3005               	movlw	5
  6184  0715  00A6               	movwf	??_PathTo
  6185  0716  0826               	movf	??_PathTo,w
  6186  0717  00A0               	movwf	___bmul@multiplicand
  6187  0718  0861               	movf	_y_int,w
  6188  0719  120A  158A  2013  120A  118A  	fcall	___bmul
  6189  071E  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  6190  071F  1283               	bcf	3,5	;RP0=0, select bank0
  6191  0720  1303               	bcf	3,6	;RP1=0, select bank0
  6192  0721  075C               	addwf	_x_int,w
  6193  0722  00A7               	movwf	??_PathTo+1
  6194  0723  0827               	movf	??_PathTo+1,w
  6195  0724  0084               	movwf	4
  6196  0725  1383               	bcf	3,7	;select IRP bank1
  6197  0726  0800               	movf	0,w
  6198  0727  3E01               	addlw	1
  6199  0728  2F3D               	goto	L15
  6200  0729                     l4141:	
  6201                           ;main.c: 189: case 3: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 8);
  6202                           
  6203                           ;main.c: 188: break;
  6204                           
  6205  0729  3005               	movlw	5
  6206  072A  00A6               	movwf	??_PathTo
  6207  072B  0826               	movf	??_PathTo,w
  6208  072C  00A0               	movwf	___bmul@multiplicand
  6209  072D  0861               	movf	_y_int,w
  6210  072E  120A  158A  2013  120A  118A  	fcall	___bmul
  6211  0733  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  6212  0734  1283               	bcf	3,5	;RP0=0, select bank0
  6213  0735  1303               	bcf	3,6	;RP1=0, select bank0
  6214  0736  075C               	addwf	_x_int,w
  6215  0737  00A7               	movwf	??_PathTo+1
  6216  0738  0827               	movf	??_PathTo+1,w
  6217  0739  0084               	movwf	4
  6218  073A  1383               	bcf	3,7	;select IRP bank1
  6219  073B  0800               	movf	0,w
  6220  073C  3E08               	addlw	8
  6221  073D                     L15:	
  6222  073D  00A8               	movwf	??_PathTo+2
  6223  073E  3005               	movlw	5
  6224  073F  00A9               	movwf	??_PathTo+3
  6225  0740  0829               	movf	??_PathTo+3,w
  6226  0741  00A0               	movwf	___bmul@multiplicand
  6227  0742  0861               	movf	_y_int,w
  6228  0743  120A  158A  2013  120A  118A  	fcall	___bmul
  6229  0748  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  6230  0749  1283               	bcf	3,5	;RP0=0, select bank0
  6231  074A  1303               	bcf	3,6	;RP1=0, select bank0
  6232  074B  075C               	addwf	_x_int,w
  6233  074C  00AA               	movwf	??_PathTo+4
  6234  074D  082A               	movf	??_PathTo+4,w
  6235  074E  0084               	movwf	4
  6236  074F  0828               	movf	??_PathTo+2,w
  6237  0750  1383               	bcf	3,7	;select IRP bank1
  6238  0751  0080               	movwf	0
  6239                           
  6240                           ;main.c: 191: }
  6241                           
  6242                           ;main.c: 190: break;
  6243  0752  2F61               	goto	l4147
  6244  0753                     l4145:	
  6245  0753  0852               	movf	_intersection_orientation,w
  6246                           
  6247                           ; Switch size 1, requested type "space"
  6248                           ; Number of cases is 4, Range of values is 0 to 3
  6249                           ; switch strategies available:
  6250                           ; Name         Instructions Cycles
  6251                           ; simple_byte           13     7 (average)
  6252                           ; direct_byte           20     8 (fixed)
  6253                           ; jumptable            260     6 (fixed)
  6254                           ;	Chosen strategy is simple_byte
  6255  0754  3A00               	xorlw	0	; case 0
  6256  0755  1903               	skipnz
  6257  0756  2EEA               	goto	l4135
  6258  0757  3A01               	xorlw	1	; case 1
  6259  0758  1903               	skipnz
  6260  0759  2EFF               	goto	l4137
  6261  075A  3A03               	xorlw	3	; case 2
  6262  075B  1903               	skipnz
  6263  075C  2F14               	goto	l4139
  6264  075D  3A01               	xorlw	1	; case 3
  6265  075E  1903               	skipnz
  6266  075F  2F29               	goto	l4141
  6267  0760  2F61               	goto	l4147
  6268  0761                     l4147:	
  6269                           
  6270                           ;main.c: 194: x_path = x;
  6271  0761  0868               	movf	_x,w
  6272  0762  00A6               	movwf	??_PathTo
  6273  0763  0826               	movf	??_PathTo,w
  6274  0764  00DD               	movwf	_x_path
  6275                           
  6276                           ;main.c: 195: y_path = y;
  6277  0765  085F               	movf	_y,w
  6278  0766  00A6               	movwf	??_PathTo
  6279  0767  0826               	movf	??_PathTo,w
  6280  0768  00E2               	movwf	_y_path
  6281                           
  6282                           ;main.c: 196: orientation_path = orientation;
  6283  0769  0866               	movf	_orientation,w
  6284  076A  00A6               	movwf	??_PathTo
  6285  076B  0826               	movf	??_PathTo,w
  6286  076C  00D3               	movwf	_orientation_path
  6287                           
  6288                           ;main.c: 197: pathCount = 0;
  6289  076D  01D4               	clrf	_pathCount
  6290                           
  6291                           ;main.c: 198: reset_flag = 1;
  6292  076E  15F0               	bsf	_reset_flag/(0+8),_reset_flag& (0+7)
  6293                           
  6294                           ;main.c: 200: for (r = 0; r <= 1; r++){
  6295  076F  01D5               	clrf	_r
  6296  0770  3002               	movlw	2
  6297  0771  0255               	subwf	_r,w
  6298  0772  1803               	btfsc	3,0
  6299  0773  2F9B               	goto	l207
  6300  0774                     l4157:	
  6301                           
  6302                           ;main.c: 201: for (c = 0; c <= 15; c++){
  6303  0774  01D1               	clrf	_c
  6304  0775  3010               	movlw	16
  6305  0776  0251               	subwf	_c,w
  6306  0777  1803               	btfsc	3,0
  6307  0778  2F93               	goto	l4169
  6308  0779                     l4163:	
  6309                           
  6310                           ;main.c: 202: path[r][c] = 0;
  6311  0779  0855               	movf	_r,w
  6312  077A  00A6               	movwf	??_PathTo
  6313  077B  3004               	movlw	4
  6314  077C                     u3165:	
  6315  077C  1003               	clrc
  6316  077D  0DA6               	rlf	??_PathTo,f
  6317  077E  3EFF               	addlw	-1
  6318  077F  1D03               	skipz
  6319  0780  2F7C               	goto	u3165
  6320  0781  3090               	movlw	(low (_path| (0+256)))& (0+255)
  6321  0782  0726               	addwf	??_PathTo,w
  6322  0783  00A7               	movwf	??_PathTo+1
  6323  0784  0851               	movf	_c,w
  6324  0785  0727               	addwf	??_PathTo+1,w
  6325  0786  00A8               	movwf	??_PathTo+2
  6326  0787  0828               	movf	??_PathTo+2,w
  6327  0788  0084               	movwf	4
  6328  0789  1783               	bsf	3,7	;select IRP bank3
  6329  078A  0180               	clrf	0
  6330  078B  3001               	movlw	1
  6331  078C  00A6               	movwf	??_PathTo
  6332  078D  0826               	movf	??_PathTo,w
  6333  078E  07D1               	addwf	_c,f
  6334  078F  3010               	movlw	16
  6335  0790  0251               	subwf	_c,w
  6336  0791  1C03               	skipc
  6337  0792  2F79               	goto	l4163
  6338  0793                     l4169:	
  6339  0793  3001               	movlw	1
  6340  0794  00A6               	movwf	??_PathTo
  6341  0795  0826               	movf	??_PathTo,w
  6342  0796  07D5               	addwf	_r,f
  6343  0797  3002               	movlw	2
  6344  0798  0255               	subwf	_r,w
  6345  0799  1C03               	skipc
  6346  079A  2F74               	goto	l4157
  6347  079B                     l207:	
  6348                           
  6349                           ;main.c: 203: }
  6350                           ;main.c: 204: }
  6351                           ;main.c: 205: }
  6352                           ;main.c: 214: if (reset_flag != 1){
  6353  079B  19F0               	btfsc	_reset_flag/(0+8),_reset_flag& (0+7)
  6354  079C  2FC0               	goto	l220
  6355                           
  6356                           ;main.c: 217: if(left == 0){
  6357  079D  1970               	btfsc	_left/(0+8),_left& (0+7)
  6358  079E  2FA3               	goto	l221
  6359                           
  6360                           ;main.c: 218: x_path--;
  6361  079F  3001               	movlw	1
  6362  07A0  02DD               	subwf	_x_path,f
  6363                           
  6364                           ;main.c: 219: orientation_path = 3;
  6365  07A1  3003               	movlw	3
  6366  07A2  2FB9               	goto	L17
  6367  07A3                     l221:	
  6368                           ;main.c: 221: }
  6369                           
  6370                           ;main.c: 220: pathCount++;
  6371                           
  6372                           
  6373                           ;main.c: 222: else if(up == 0){
  6374  07A3  1B70               	btfsc	_up/(0+8),_up& (0+7)
  6375  07A4  2FA9               	goto	l223
  6376                           
  6377                           ;main.c: 223: y_path--;
  6378  07A5  3001               	movlw	1
  6379  07A6  02E2               	subwf	_y_path,f
  6380                           
  6381                           ;main.c: 224: orientation_path = 0;
  6382  07A7  01D3               	clrf	_orientation_path
  6383  07A8  2FBC               	goto	l4195
  6384  07A9                     l223:	
  6385                           ;main.c: 226: }
  6386                           
  6387                           ;main.c: 225: pathCount++;
  6388                           
  6389                           
  6390                           ;main.c: 227: else if(right == 0){
  6391  07A9  1A70               	btfsc	_right/(0+8),_right& (0+7)
  6392  07AA  2FB2               	goto	l225
  6393                           
  6394                           ;main.c: 228: x_path++;
  6395  07AB  3001               	movlw	1
  6396  07AC  00A6               	movwf	??_PathTo
  6397  07AD  0826               	movf	??_PathTo,w
  6398  07AE  07DD               	addwf	_x_path,f
  6399                           
  6400                           ;main.c: 229: orientation_path = 1;
  6401  07AF  01D3               	clrf	_orientation_path
  6402  07B0  0AD3               	incf	_orientation_path,f
  6403  07B1  2FBC               	goto	l4195
  6404  07B2                     l225:	
  6405                           ;main.c: 231: }
  6406                           
  6407                           ;main.c: 230: pathCount++;
  6408                           
  6409                           
  6410                           ;main.c: 232: else if(down == 0){
  6411  07B2  18F0               	btfsc	_down/(0+8),_down& (0+7)
  6412  07B3  2FC0               	goto	l220
  6413                           
  6414                           ;main.c: 233: y_path++;
  6415  07B4  3001               	movlw	1
  6416  07B5  00A6               	movwf	??_PathTo
  6417  07B6  0826               	movf	??_PathTo,w
  6418  07B7  07E2               	addwf	_y_path,f
  6419                           
  6420                           ;main.c: 234: orientation_path = 2;
  6421  07B8  3002               	movlw	2
  6422  07B9                     L17:	
  6423  07B9  00A6               	movwf	??_PathTo
  6424  07BA  0826               	movf	??_PathTo,w
  6425  07BB  00D3               	movwf	_orientation_path
  6426  07BC                     l4195:	
  6427                           
  6428                           ;main.c: 235: pathCount++;
  6429  07BC  3001               	movlw	1
  6430  07BD  00A6               	movwf	??_PathTo
  6431  07BE  0826               	movf	??_PathTo,w
  6432  07BF  07D4               	addwf	_pathCount,f
  6433  07C0                     l220:	
  6434  07C0  3001               	movlw	1
  6435  07C1  07AF               	addwf	PathTo@loop,f
  6436  07C2  1803               	skipnc
  6437  07C3  0AB0               	incf	PathTo@loop+1,f
  6438  07C4  3000               	movlw	0
  6439  07C5  07B0               	addwf	PathTo@loop+1,f
  6440  07C6  2D16               	goto	L16
  6441  07C7                     __end_of_PathTo:	
  6442                           
  6443                           	psect	text22
  6444  0891                     __ptext22:	
  6445 ;; *************** function _lcdWriteString *****************
  6446 ;; Defined at:
  6447 ;;		line 32 in file "LCD.c"
  6448 ;; Parameters:    Size  Location     Type
  6449 ;;  s               1    wreg     PTR unsigned char 
  6450 ;;		 -> STR_1(11), 
  6451 ;; Auto vars:     Size  Location     Type
  6452 ;;  s               1    4[BANK0 ] PTR unsigned char 
  6453 ;;		 -> STR_1(11), 
  6454 ;; Return value:  Size  Location     Type
  6455 ;;                  1    wreg      void 
  6456 ;; Registers used:
  6457 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6458 ;; Tracked objects:
  6459 ;;		On entry : 0/0
  6460 ;;		On exit  : 0/0
  6461 ;;		Unchanged: 0/0
  6462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6463 ;;      Params:         0       0       0       0       0
  6464 ;;      Locals:         0       1       0       0       0
  6465 ;;      Temps:          0       1       0       0       0
  6466 ;;      Totals:         0       2       0       0       0
  6467 ;;Total ram usage:        2 bytes
  6468 ;; Hardware stack levels used:    1
  6469 ;; Hardware stack levels required when called:    2
  6470 ;; This function calls:
  6471 ;;		_lcdWriteData
  6472 ;; This function is called by:
  6473 ;;		_PathTo
  6474 ;; This function uses a non-reentrant model
  6475 ;;
  6476                           
  6477                           
  6478                           ;psect for function _lcdWriteString
  6479  0891                     _lcdWriteString:	
  6480                           
  6481                           ;incstack = 0
  6482                           ; Regs used in _lcdWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6483                           ;lcdWriteString@s stored from wreg
  6484  0891  1283               	bcf	3,5	;RP0=0, select bank0
  6485  0892  1303               	bcf	3,6	;RP1=0, select bank0
  6486  0893  00A4               	movwf	lcdWriteString@s
  6487  0894                     l3857:	
  6488                           ;LCD.c: 34: while(*s) lcdWriteData(*s++);
  6489                           
  6490  0894  0824               	movf	lcdWriteString@s,w
  6491  0895  0084               	movwf	4
  6492  0896  120A  158A  2000  120A  158A  	fcall	stringdir
  6493  089B  3A00               	xorlw	0
  6494  089C  1903               	btfsc	3,2
  6495  089D  0008               	return
  6496  089E  0824               	movf	lcdWriteString@s,w
  6497  089F  0084               	movwf	4
  6498  08A0  120A  158A  2000  120A  158A  	fcall	stringdir
  6499  08A5  120A  158A  2026  120A  158A  	fcall	_lcdWriteData
  6500  08AA  3001               	movlw	1
  6501  08AB  1283               	bcf	3,5	;RP0=0, select bank0
  6502  08AC  1303               	bcf	3,6	;RP1=0, select bank0
  6503  08AD  00A3               	movwf	??_lcdWriteString
  6504  08AE  0823               	movf	??_lcdWriteString,w
  6505  08AF  07A4               	addwf	lcdWriteString@s,f
  6506  08B0  2894               	goto	l3857
  6507  08B1                     __end_of_lcdWriteString:	
  6508                           
  6509                           	psect	text23
  6510  0826                     __ptext23:	
  6511 ;; *************** function _lcdWriteData *****************
  6512 ;; Defined at:
  6513 ;;		line 16 in file "LCD.c"
  6514 ;; Parameters:    Size  Location     Type
  6515 ;;  databyte        1    wreg     unsigned char 
  6516 ;; Auto vars:     Size  Location     Type
  6517 ;;  databyte        1    2[BANK0 ] unsigned char 
  6518 ;; Return value:  Size  Location     Type
  6519 ;;                  1    wreg      void 
  6520 ;; Registers used:
  6521 ;;		wreg
  6522 ;; Tracked objects:
  6523 ;;		On entry : 0/0
  6524 ;;		On exit  : 0/0
  6525 ;;		Unchanged: 0/0
  6526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6527 ;;      Params:         0       0       0       0       0
  6528 ;;      Locals:         0       1       0       0       0
  6529 ;;      Temps:          0       2       0       0       0
  6530 ;;      Totals:         0       3       0       0       0
  6531 ;;Total ram usage:        3 bytes
  6532 ;; Hardware stack levels used:    1
  6533 ;; Hardware stack levels required when called:    1
  6534 ;; This function calls:
  6535 ;;		Nothing
  6536 ;; This function is called by:
  6537 ;;		_lcdWriteString
  6538 ;;		_lcdWriteToDigitBCD
  6539 ;; This function uses a non-reentrant model
  6540 ;;
  6541                           
  6542                           
  6543                           ;psect for function _lcdWriteData
  6544  0826                     _lcdWriteData:	
  6545                           
  6546                           ;incstack = 0
  6547                           ; Regs used in _lcdWriteData: [wreg]
  6548                           ;lcdWriteData@databyte stored from wreg
  6549  0826  1283               	bcf	3,5	;RP0=0, select bank0
  6550  0827  1303               	bcf	3,6	;RP1=0, select bank0
  6551  0828  00A2               	movwf	lcdWriteData@databyte
  6552                           
  6553                           ;LCD.c: 17: RE2 = 0;
  6554  0829  1109               	bcf	9,2	;volatile
  6555                           
  6556                           ;LCD.c: 18: RE1 = 0;
  6557  082A  1089               	bcf	9,1	;volatile
  6558                           
  6559                           ;LCD.c: 19: RE0 = 1;
  6560  082B  1409               	bsf	9,0	;volatile
  6561                           
  6562                           ;LCD.c: 20: PORTD = databyte;
  6563  082C  0822               	movf	lcdWriteData@databyte,w
  6564  082D  0088               	movwf	8	;volatile
  6565                           
  6566                           ;LCD.c: 21: RE2 = 1;
  6567  082E  1509               	bsf	9,2	;volatile
  6568                           
  6569                           ;LCD.c: 22: RE2 = 0;
  6570  082F  1109               	bcf	9,2	;volatile
  6571                           
  6572                           ;LCD.c: 23: _delay((unsigned long)((1)*(20000000/4000.0)));
  6573  0830  3007               	movlw	7
  6574  0831  00A1               	movwf	??_lcdWriteData+1
  6575  0832  307D               	movlw	125
  6576  0833  00A0               	movwf	??_lcdWriteData
  6577  0834                     u3587:	
  6578  0834  0BA0               	decfsz	??_lcdWriteData,f
  6579  0835  2834               	goto	u3587
  6580  0836  0BA1               	decfsz	??_lcdWriteData+1,f
  6581  0837  2834               	goto	u3587
  6582  0838  0008               	return
  6583  0839                     __end_of_lcdWriteData:	
  6584                           
  6585                           	psect	text24
  6586  17C1                     __ptext24:	
  6587 ;; *************** function _lcdSetCursor *****************
  6588 ;; Defined at:
  6589 ;;		line 27 in file "LCD.c"
  6590 ;; Parameters:    Size  Location     Type
  6591 ;;  address         1    wreg     unsigned char 
  6592 ;; Auto vars:     Size  Location     Type
  6593 ;;  address         1    3[BANK0 ] unsigned char 
  6594 ;; Return value:  Size  Location     Type
  6595 ;;                  1    wreg      void 
  6596 ;; Registers used:
  6597 ;;		wreg, status,2, status,0, pclath, cstack
  6598 ;; Tracked objects:
  6599 ;;		On entry : 0/0
  6600 ;;		On exit  : 0/0
  6601 ;;		Unchanged: 0/0
  6602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6603 ;;      Params:         0       0       0       0       0
  6604 ;;      Locals:         0       1       0       0       0
  6605 ;;      Temps:          0       0       0       0       0
  6606 ;;      Totals:         0       1       0       0       0
  6607 ;;Total ram usage:        1 bytes
  6608 ;; Hardware stack levels used:    1
  6609 ;; Hardware stack levels required when called:    2
  6610 ;; This function calls:
  6611 ;;		_lcdWriteControl
  6612 ;; This function is called by:
  6613 ;;		_PathTo
  6614 ;;		_ADCMain
  6615 ;; This function uses a non-reentrant model
  6616 ;;
  6617                           
  6618                           
  6619                           ;psect for function _lcdSetCursor
  6620  17C1                     _lcdSetCursor:	
  6621                           
  6622                           ;incstack = 0
  6623                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  6624                           ;lcdSetCursor@address stored from wreg
  6625  17C1  1283               	bcf	3,5	;RP0=0, select bank0
  6626  17C2  1303               	bcf	3,6	;RP1=0, select bank0
  6627  17C3  00A3               	movwf	lcdSetCursor@address
  6628                           
  6629                           ;LCD.c: 28: address |= 0b10000000;
  6630  17C4  17A3               	bsf	lcdSetCursor@address,7
  6631                           
  6632                           ;LCD.c: 29: lcdWriteControl(address);
  6633  17C5  0823               	movf	lcdSetCursor@address,w
  6634  17C6  120A  158A  2039   	fcall	_lcdWriteControl
  6635  17C9  0008               	return
  6636  17CA                     __end_of_lcdSetCursor:	
  6637                           
  6638                           	psect	text25
  6639  0839                     __ptext25:	
  6640 ;; *************** function _lcdWriteControl *****************
  6641 ;; Defined at:
  6642 ;;		line 5 in file "LCD.c"
  6643 ;; Parameters:    Size  Location     Type
  6644 ;;  databyte        1    wreg     unsigned char 
  6645 ;; Auto vars:     Size  Location     Type
  6646 ;;  databyte        1    2[BANK0 ] unsigned char 
  6647 ;; Return value:  Size  Location     Type
  6648 ;;                  1    wreg      void 
  6649 ;; Registers used:
  6650 ;;		wreg
  6651 ;; Tracked objects:
  6652 ;;		On entry : 0/0
  6653 ;;		On exit  : 0/0
  6654 ;;		Unchanged: 0/0
  6655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6656 ;;      Params:         0       0       0       0       0
  6657 ;;      Locals:         0       1       0       0       0
  6658 ;;      Temps:          0       2       0       0       0
  6659 ;;      Totals:         0       3       0       0       0
  6660 ;;Total ram usage:        3 bytes
  6661 ;; Hardware stack levels used:    1
  6662 ;; Hardware stack levels required when called:    1
  6663 ;; This function calls:
  6664 ;;		Nothing
  6665 ;; This function is called by:
  6666 ;;		_lcdSetCursor
  6667 ;;		_setupLCD
  6668 ;; This function uses a non-reentrant model
  6669 ;;
  6670                           
  6671                           
  6672                           ;psect for function _lcdWriteControl
  6673  0839                     _lcdWriteControl:	
  6674                           
  6675                           ;incstack = 0
  6676                           ; Regs used in _lcdWriteControl: [wreg]
  6677                           ;lcdWriteControl@databyte stored from wreg
  6678  0839  1283               	bcf	3,5	;RP0=0, select bank0
  6679  083A  1303               	bcf	3,6	;RP1=0, select bank0
  6680  083B  00A2               	movwf	lcdWriteControl@databyte
  6681                           
  6682                           ;LCD.c: 6: RE2 = 0;
  6683  083C  1109               	bcf	9,2	;volatile
  6684                           
  6685                           ;LCD.c: 7: RE1 = 0;
  6686  083D  1089               	bcf	9,1	;volatile
  6687                           
  6688                           ;LCD.c: 8: RE0 = 0;
  6689  083E  1009               	bcf	9,0	;volatile
  6690                           
  6691                           ;LCD.c: 9: PORTD = databyte;
  6692  083F  0822               	movf	lcdWriteControl@databyte,w
  6693  0840  0088               	movwf	8	;volatile
  6694                           
  6695                           ;LCD.c: 10: RE2 = 1;
  6696  0841  1509               	bsf	9,2	;volatile
  6697                           
  6698                           ;LCD.c: 11: RE2 = 0;
  6699  0842  1109               	bcf	9,2	;volatile
  6700                           
  6701                           ;LCD.c: 12: _delay((unsigned long)((2)*(20000000/4000.0)));
  6702  0843  300D               	movlw	13
  6703  0844  00A1               	movwf	??_lcdWriteControl+1
  6704  0845  30FB               	movlw	251
  6705  0846  00A0               	movwf	??_lcdWriteControl
  6706  0847                     u3597:	
  6707  0847  0BA0               	decfsz	??_lcdWriteControl,f
  6708  0848  2847               	goto	u3597
  6709  0849  0BA1               	decfsz	??_lcdWriteControl+1,f
  6710  084A  2847               	goto	u3597
  6711  084B  284C               	nop2
  6712  084C  0008               	return
  6713  084D                     __end_of_lcdWriteControl:	
  6714                           
  6715                           	psect	text26
  6716  0813                     __ptext26:	
  6717 ;; *************** function ___bmul *****************
  6718 ;; Defined at:
  6719 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
  6720 ;; Parameters:    Size  Location     Type
  6721 ;;  multiplier      1    wreg     unsigned char 
  6722 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  6723 ;; Auto vars:     Size  Location     Type
  6724 ;;  multiplier      1    3[BANK0 ] unsigned char 
  6725 ;;  product         1    2[BANK0 ] unsigned char 
  6726 ;; Return value:  Size  Location     Type
  6727 ;;                  1    wreg      unsigned char 
  6728 ;; Registers used:
  6729 ;;		wreg, status,2, status,0
  6730 ;; Tracked objects:
  6731 ;;		On entry : 0/0
  6732 ;;		On exit  : 0/0
  6733 ;;		Unchanged: 0/0
  6734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6735 ;;      Params:         0       1       0       0       0
  6736 ;;      Locals:         0       2       0       0       0
  6737 ;;      Temps:          0       1       0       0       0
  6738 ;;      Totals:         0       4       0       0       0
  6739 ;;Total ram usage:        4 bytes
  6740 ;; Hardware stack levels used:    1
  6741 ;; Hardware stack levels required when called:    1
  6742 ;; This function calls:
  6743 ;;		Nothing
  6744 ;; This function is called by:
  6745 ;;		_PathTo
  6746 ;;		_re_route
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           
  6751                           ;psect for function ___bmul
  6752  0813                     ___bmul:	
  6753                           
  6754                           ;incstack = 0
  6755                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6756                           ;___bmul@multiplier stored from wreg
  6757  0813  1283               	bcf	3,5	;RP0=0, select bank0
  6758  0814  1303               	bcf	3,6	;RP1=0, select bank0
  6759  0815  00A3               	movwf	___bmul@multiplier
  6760  0816  01A2               	clrf	___bmul@product
  6761  0817                     l3961:	
  6762  0817  1C23               	btfss	___bmul@multiplier,0
  6763  0818  281D               	goto	l3965
  6764  0819  0820               	movf	___bmul@multiplicand,w
  6765  081A  00A1               	movwf	??___bmul
  6766  081B  0821               	movf	??___bmul,w
  6767  081C  07A2               	addwf	___bmul@product,f
  6768  081D                     l3965:	
  6769  081D  1003               	clrc
  6770  081E  0DA0               	rlf	___bmul@multiplicand,f
  6771  081F  1003               	clrc
  6772  0820  0CA3               	rrf	___bmul@multiplier,f
  6773  0821  0823               	movf	___bmul@multiplier,w
  6774  0822  1D03               	btfss	3,2
  6775  0823  2817               	goto	l3961
  6776  0824  0822               	movf	___bmul@product,w
  6777  0825  0008               	return
  6778  0826                     __end_of___bmul:	
  6779                           
  6780                           	psect	text27
  6781  08D4                     __ptext27:	
  6782 ;; *************** function _isr *****************
  6783 ;; Defined at:
  6784 ;;		line 457 in file "main.c"
  6785 ;; Parameters:    Size  Location     Type
  6786 ;;		None
  6787 ;; Auto vars:     Size  Location     Type
  6788 ;;		None
  6789 ;; Return value:  Size  Location     Type
  6790 ;;                  1    wreg      void 
  6791 ;; Registers used:
  6792 ;;		wreg, status,2, status,0
  6793 ;; Tracked objects:
  6794 ;;		On entry : 0/0
  6795 ;;		On exit  : 0/0
  6796 ;;		Unchanged: 0/0
  6797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6798 ;;      Params:         0       0       0       0       0
  6799 ;;      Locals:         0       0       0       0       0
  6800 ;;      Temps:          5       0       0       0       0
  6801 ;;      Totals:         5       0       0       0       0
  6802 ;;Total ram usage:        5 bytes
  6803 ;; Hardware stack levels used:    1
  6804 ;; This function calls:
  6805 ;;		Nothing
  6806 ;; This function is called by:
  6807 ;;		Interrupt level 1
  6808 ;; This function uses a non-reentrant model
  6809 ;;
  6810                           
  6811                           
  6812                           ;psect for function _isr
  6813  08D4                     _isr:	
  6814                           
  6815                           ;main.c: 458: if(TMR0IF){
  6816  08D4  1D0B               	btfss	11,2	;volatile
  6817  08D5  28EF               	goto	i1l318
  6818                           
  6819                           ;main.c: 459: TMR0IF = 0;
  6820  08D6  110B               	bcf	11,2	;volatile
  6821                           
  6822                           ;main.c: 460: TMR0 = 100;
  6823  08D7  3064               	movlw	100
  6824  08D8  0081               	movwf	1	;volatile
  6825                           
  6826                           ;main.c: 461: time_count++;
  6827  08D9  3001               	movlw	1
  6828  08DA  1683               	bsf	3,5	;RP0=1, select bank1
  6829  08DB  1303               	bcf	3,6	;RP1=0, select bank1
  6830  08DC  07D2               	addwf	_time_count^(0+128),f	;volatile
  6831  08DD  1803               	skipnc
  6832  08DE  0AD3               	incf	(_time_count+1)^(0+128),f	;volatile
  6833  08DF  3000               	movlw	0
  6834  08E0  07D3               	addwf	(_time_count+1)^(0+128),f	;volatile
  6835                           
  6836                           ;main.c: 463: if(!RB0)
  6837  08E1  1283               	bcf	3,5	;RP0=0, select bank0
  6838  08E2  1303               	bcf	3,6	;RP1=0, select bank0
  6839  08E3  1806               	btfsc	6,0	;volatile
  6840  08E4  28E9               	goto	i1l3287
  6841                           
  6842                           ;main.c: 464: PB8Counter++;
  6843  08E5  3001               	movlw	1
  6844  08E6  00F1               	movwf	??_isr
  6845  08E7  0871               	movf	??_isr,w
  6846  08E8  07CE               	addwf	_PB8Counter,f
  6847  08E9                     i1l3287:	
  6848                           
  6849                           ;main.c: 465: if(!RB1)
  6850  08E9  1886               	btfsc	6,1	;volatile
  6851  08EA  28EF               	goto	i1l318
  6852                           
  6853                           ;main.c: 466: PB7Counter++;
  6854  08EB  3001               	movlw	1
  6855  08EC  00F1               	movwf	??_isr
  6856  08ED  0871               	movf	??_isr,w
  6857  08EE  07CD               	addwf	_PB7Counter,f
  6858  08EF                     i1l318:	
  6859  08EF  0875               	movf	??_isr+4,w
  6860  08F0  00FF               	movwf	127
  6861  08F1  0874               	movf	??_isr+3,w
  6862  08F2  008A               	movwf	10
  6863  08F3  0873               	movf	??_isr+2,w
  6864  08F4  0084               	movwf	4
  6865  08F5  0E72               	swapf	(??_isr+1)^(0+-128),w
  6866  08F6  0083               	movwf	3
  6867  08F7  0EFE               	swapf	126,f
  6868  08F8  0E7E               	swapf	126,w
  6869  08F9  0009               	retfie
  6870  08FA                     __end_of_isr:	
  6871  007E                     btemp	set	126	;btemp
  6872  007E                     wtemp	set	126
  6873  007E                     wtemp0	set	126
  6874  0080                     wtemp1	set	128
  6875  0082                     wtemp2	set	130
  6876  0084                     wtemp3	set	132
  6877  0086                     wtemp4	set	134
  6878  0088                     wtemp5	set	136
  6879  007F                     wtemp6	set	127
  6880  007E                     ttemp	set	126
  6881  007E                     ttemp0	set	126
  6882  0081                     ttemp1	set	129
  6883  0084                     ttemp2	set	132
  6884  0087                     ttemp3	set	135
  6885  007F                     ttemp4	set	127
  6886  007E                     ltemp	set	126
  6887  007E                     ltemp0	set	126
  6888  0082                     ltemp1	set	130
  6889  0086                     ltemp2	set	134
  6890  0080                     ltemp3	set	128
  6891                           
  6892                           	psect	intentry
  6893  0004                     __pintentry:	
  6894                           ;incstack = 0
  6895                           ; Regs used in _isr: [wreg+status,2+status,0]
  6896                           
  6897  0004                     interrupt_function:	
  6898  007E                     saved_w	set	btemp
  6899  0004  00FE               	movwf	btemp
  6900  0005  0E03               	swapf	3,w
  6901  0006  00F2               	movwf	??_isr+1
  6902  0007  0804               	movf	4,w
  6903  0008  00F3               	movwf	??_isr+2
  6904  0009  080A               	movf	10,w
  6905  000A  00F4               	movwf	??_isr+3
  6906  000B  1283               	bcf	3,5	;RP0=0, select bank0
  6907  000C  1303               	bcf	3,6	;RP1=0, select bank0
  6908  000D  087F               	movf	btemp+1,w
  6909  000E  00F5               	movwf	??_isr+4
  6910  000F  120A  158A  28D4   	ljmp	_isr


Data Sizes:
    Strings     11
    Constant    0
    Data        111
    BSS         115
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     37      77
    BANK1            80      6      60
    BANK3            96      0      64
    BANK2            96      0      64

Pointer List with Targets:

    lcdWriteString@s	PTR unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_re_route
    _setupLCD->_lcdWriteControl
    _re_route->_TravelPath
    _TravelPath->_Drive1m
    _Turn90->_DriveDirect
    _Drive->_ser_putch
    _Drive1m->_wallFollow
    _DriveDirect->_ser_putch
    _ADCMain->_lcdWriteToDigitBCD
    _lcdWriteToDigitBCD->_lcdWriteData
    _getSensorData->_ser_getch
    _PathTo->_lcdWriteString
    _lcdWriteString->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   27451
                                             34 BANK0      3     3      0
                                              0 BANK1      6     6      0
                             _PathTo
                         _TravelPath
                           _re_route
                           _ser_init
                          _ser_putch
                           _setupADC
                           _setupLCD
                           _setupSPI
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _spi_transfer                                         3     3      0      44
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      31
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _re_route                                             5     5      0   15993
                                             29 BANK0      5     5      0
                        _DriveDirect
                             _PathTo
                         _TravelPath
                             _Turn90
                             ___bmul
                      _getSensorData
 ---------------------------------------------------------------------------------
 (2) _TravelPath                                           3     3      0    8879
                                             26 BANK0      3     3      0
                            _Drive1m
                             _Turn90
 ---------------------------------------------------------------------------------
 (2) _Turn90                                               4     4      0    2288
                                             10 BANK0      4     4      0
                              _Drive
                        _DriveDirect
                      _getSensorData
 ---------------------------------------------------------------------------------
 (3) _Drive                                                4     1      3     545
                                              1 BANK0      4     1      3
                          _ser_putch
 ---------------------------------------------------------------------------------
 (3) _Drive1m                                              5     5      0    6427
                                             21 BANK0      5     5      0
                        _DriveDirect
                      _getSensorData
                          _ser_putch
                         _wallFollow
 ---------------------------------------------------------------------------------
 (4) _wallFollow                                           6     6      0    4647
                                             15 BANK0      6     6      0
                            _ADCMain
                        _DriveDirect
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2196
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     501
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _DriveDirect                                          9     5      4    1065
                                              1 BANK0      9     5      4
                          _ser_putch
 ---------------------------------------------------------------------------------
 (5) _ADCMain                                              0     0      0     727
                             _getADC
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (6) _lcdWriteToDigitBCD                                  12    10      2     662
                                              3 BANK0     12    10      2
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (6) _getADC                                               2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getSensorData                                        7     5      2     616
                                              2 BANK0      7     5      2
                          _ser_getch
                          _ser_putch
 ---------------------------------------------------------------------------------
 (1) _ser_putch                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ser_getch                                            2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PathTo                                              12    11      1    1959
                                              5 BANK0     12    11      1
                             ___bmul
                       _lcdSetCursor
                     _lcdWriteString
 ---------------------------------------------------------------------------------
 (3) _lcdWriteString                                       2     2      0     126
                                              3 BANK0      2     2      0
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (7) _lcdWriteData                                         3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (6) _lcdSetCursor                                         1     1      0      65
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1    1186
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PathTo
     ___bmul
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteString
       _lcdWriteData
   _TravelPath
     _Drive1m
       _DriveDirect
         _ser_putch
       _getSensorData
         _ser_getch
         _ser_putch
       _ser_putch
       _wallFollow
         _ADCMain
           _getADC
           _lcdSetCursor
             _lcdWriteControl
           _lcdWriteToDigitBCD
             _lcdWriteData
         _DriveDirect
           _ser_putch
         ___lwdiv
         ___wmul
     _Turn90
       _Drive
         _ser_putch
       _DriveDirect
         _ser_putch
       _getSensorData
         _ser_getch
         _ser_putch
   _re_route
     _DriveDirect
       _ser_putch
     _PathTo
       ___bmul
       _lcdSetCursor
         _lcdWriteControl
       _lcdWriteString
         _lcdWriteData
     _TravelPath
       _Drive1m
         _DriveDirect
           _ser_putch
         _getSensorData
           _ser_getch
           _ser_putch
         _ser_putch
         _wallFollow
           _ADCMain
             _getADC
             _lcdSetCursor
               _lcdWriteControl
             _lcdWriteToDigitBCD
               _lcdWriteData
           _DriveDirect
             _ser_putch
           ___lwdiv
           ___wmul
       _Turn90
         _Drive
           _ser_putch
         _DriveDirect
           _ser_putch
         _getSensorData
           _ser_getch
           _ser_putch
     _Turn90
       _Drive
         _ser_putch
       _DriveDirect
         _ser_putch
       _getSensorData
         _ser_getch
         _ser_putch
     ___bmul
     _getSensorData
       _ser_getch
       _ser_putch
   _ser_init
   _ser_putch
   _setupADC
   _setupLCD
     _lcdWriteControl
   _setupSPI
   _spi_transfer

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      40       9       66.7%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      40      11       66.7%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      6      3C       7       75.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     25      4D       5       96.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0     113      12        0.0%
ABS                  0      0     113       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri Oct 07 14:38:44 2016

                             _c 0051                               _r 0055                               _x 0068  
               ??_getSensorData 0024                               _y 005F                               pc 0002  
                ___bmul@product 0022                     __CFG_CP$OFF 0000                              _GO 00FA  
                            _up 0386                              fsr 0004             ___wmul@multiplicand 0022  
                   Drive@speedH 0024                     Drive@speedL 0021                             l220 07C0  
                           l221 07A3                             l223 07A9                             l207 079B  
                           l225 07B2                             l180 05A7                             l181 05A9  
                           l325 0450                             l182 05E4                             l183 05D5  
                           l185 05D9                             l177 05A3                             l187 05DE  
                           l179 05A5                             l700 0A4A                             l570 0B62  
                           l834 17CA                             l691 0A0F                             l828 17D7  
                           l964 07F7                             _GIE 005F                             _RB0 0030  
                           _RB1 0031                             _RB2 0032                   ??_DriveDirect 0025  
                           _RB3 0033                             _RC2 003A                             _RE0 0048  
                           _RE1 0049                             _RE2 004A                    __CFG_CPD$OFF 0000  
                           _isr 08D4                 __end_of_ADCMain 0862                             fsr0 0004  
                           indf 0000                    __CFG_FOSC$HS 0000                  ??_lcdWriteData 0020  
                  __CFG_LVP$OFF 0000                            l1051 08BD                            l4003 04CA  
                          l4103 0699                            l4015 04E9                            l4121 06BF  
                          l4105 06A7                            l4009 04CF                            l4115 06BA  
                          l4131 06E1                            l4051 05B9                            l4019 04F1  
                          l4141 0729                            l4205 0EFC                            l4221 0F30  
                          l4301 0D68                            l4135 06EA                            l4127 06D9  
                          l4207 0F03                            l4311 0D95                            l4303 0D78  
                          l4137 06FF                            l4145 0753                            l4049 05AB  
                          l4225 0F3B                            l4241 0F6F                            l4209 0F0A  
                          l4217 0F22                            l4313 0DB9                            l4163 0779  
                          l4139 0714                            l4147 0761                            l4083 05FE  
                          l4227 0F42                            l4219 0F2F                            l4157 0774  
                          l4093 0630                            l4245 0F7A                            l4261 0FAE  
                          l4229 0F49                            l4237 0F61                            l4095 0645  
                          l3703 0A1F                            l4247 0F81                            l4239 0F6E  
                          l4169 0793                            l4097 065A                            l4089 062B  
                          l3705 0A29                            l4265 0FB9                            l4249 0F88  
                          l4257 0FA0                            l4281 0FF1                            l4195 07BC  
                          l4099 066F                            l3707 0A33                            l3803 09C1  
                          l4267 0FC0                            l4259 0FAD                            l4291 0CFD  
                          l3709 0A3D                            l3733 0A7B                            l3821 0E62  
                          l3901 0CB4                            l4285 0FF9                            l4269 0FC7  
                          l4277 0FDF                            l4293 0D14                            l3671 0B0A  
                          l3823 0E6F                            l3831 0ECF                            l3815 0E0E  
                          l3911 0CCE                            l4279 0FEC                            l4287 0EEF  
                          l4295 0D29                            l3841 096D                            l3673 0B12  
                          l3665 0AE6                            l3745 0A9A                            l3729 0A68  
                          l3913 0CD3                            l3921 0CF3                            l4297 0D3E  
                          l3683 0B36                            l3667 0AFC                            l3907 0CC4  
                          l3693 0B55                            l3677 0B20                            l3749 0AAD  
                          l3909 0CC9                            l3917 0CD6                            l3933 0B83  
                          l3941 0BB4                            l4661 0428                            l4645 03DC  
                          l3839 096C                            l3679 0B28                            l3791 0992  
                          l3919 0CE6                            l3935 0B85                            l4671 0440  
                          l3961 0817                            l3857 0894                            l3689 0B48  
                          l3793 09A0                            l3769 08B5                            l3953 0BD5  
                          l3947 0BBF                            l3955 0BF7                            l3939 0B92  
                          l4683 0478                            l3965 081D                            l3885 0C7B  
                          l3949 0BC3                            l3991 04B9                            l3799 09B6  
                          l3887 0C80                            l3895 0C9B                            l3879 0C65  
                          l4679 0468                            l3985 0489                            l3889 0C8D  
                          l3897 0CA5                            l3995 04C1                            l3979 0484  
                          l3899 0C1A                            ?_isr 0071                            STR_1 0806  
                          u3035 0601                            u3045 0614                            u2405 0A58  
                          u2435 0A8A                            u3315 0DA0                            u3165 077C  
                          u2525 0995                            u2605 0E76                            u3095 06C2  
                          u2545 09A1                            u2555 09AD                            u3507 0DCF  
                          u2565 09B7                            u2485 08BE                            u2725 0B9B  
                          u3517 0F16                            u3437 0067                            u2495 08C5  
                          u3527 0F55                            u3447 009E                            u2585 0E01  
                          u3537 0F94                            u3457 00B3                            u2595 0E15  
                          u2675 0C25                            u2755 0BDE                            u3547 0FD3  
                          u3467 00C8                            _PEIE 005E                            u2845 04D2  
                          u3557 0C0C                            u3477 03F7                            u3567 0CAD  
                          u3487 0412                            u3577 0CEC                            u3497 0875  
                          u3587 0834                            u2875 051F                            _RCIF 0065  
                          u3597 0847                            _TMR0 0001                            _TRMT 04C1  
                  __CFG_WRT$OFF 0000                            _radH 0056                            _radL 0057  
                          _main 005F                            _left 0382                            _down 0381  
                          _path 0190                            _loop 0049                            btemp 007E  
                          ltemp 007E                            start 0012                            ttemp 007E  
                          wtemp 007E               ___bmul@multiplier 0023                 __end_of_Drive1m 0CFC  
                         ??_isr 0071                      PathTo@loop 002F                           ?_main 0071  
                 __CFG_WDTE$OFF 0000                 __end_of___lwdiv 09C6                           i1l318 08EF  
                         _RCREG 001A                           _RCSTA 0018                           _SPBRG 0099  
                         _PORTA 0005                           _PORTB 0006                           _PORTC 0007  
                         _PORTD 0008                           _PORTE 0009                           _TRISA 0085  
                         _TRISB 0086                           _TRISC 0087                           _TRISD 0088  
                         _TRISE 0089                           _SSPIF 0063                           _TXREG 0019  
                         _TXSTA 0098        _intersection_orientation 0052                           _Drive 08FA  
                         _angle 0076      __end_of_lcdWriteToDigitBCD 0B73             __end_of_DriveDirect 0AD8  
                         _right 0384                           _x_int 005C                           _y_int 0061  
                __pbitbssCOMMON 0380                  __CFG_BOREN$OFF 0000                           pclath 000A  
                         ltemp0 007E                           ltemp1 0082                           ltemp2 0086  
                         ltemp3 0080                      _LeftSpeedH 004B                      _LeftSpeedL 004C  
                         ttemp0 007E                           ttemp1 0081                           ttemp2 0084  
                         ttemp3 0087                           ttemp4 007F                           status 0003  
                         wtemp0 007E                           wtemp1 0080                           wtemp2 0082  
                         wtemp3 0084                           wtemp4 0086                           wtemp5 0088  
                         wtemp6 007F                 __initialization 0015                    __end_of_main 047C  
                     ??_ADCMain 002F        __size_of_lcdWriteControl 0014                          ??_main 0042  
          __end_of_lcdSetCursor 17CA                ??_lcdWriteString 0023                          ?_Drive 0021  
                        _ADCON0 001F                          _ADCON1 009F                          _ADRESH 001E  
                        _ADRESL 009E                          i1l3287 08E9                          _TMR0IE 005D  
                        _TMR0IF 005A                          _SSPCON 0014                          _SSPBUF 0013  
                     ??_Drive1m 0035                  __CFG_PWRTE$OFF 0000                          _PathTo 047C  
                        _adcRAW 0045                          _Turn90 0B73                          ___bmul 0813  
                        ___wmul 08B1                          _getADC 0A06            __end_of_lcdWriteData 0839  
               lcdWriteString@s 0024                       ??___lwdiv 0024                          _speedH 0058  
                        _speedL 0059                          _x_goto 005B                          _x_path 005D  
                        _y_goto 0060                          _y_path 0062                __end_of_re_route 0DE6  
                   _DriveDirect 0A4B                __end_of_ser_init 17EF                __end_of_setupADC 0878  
              __end_of_setupLCD 07F0                __end_of_setupSPI 0891                          saved_w 007E  
               Turn90@direction 002D                      _TravelPath 0EEB         __end_of__initialization 005B  
           ___bmul@multiplicand 0020                   __end_of_Drive 0922                  __pcstackCOMMON 0071  
                  __pidataBANK0 17B2                    __pidataBANK1 0922                    __pidataBANK2 09C6  
                PathTo@x_target 002D                  PathTo@y_target 0025                 DriveDirect@data 0026  
                       ??_Drive 0024               ??_lcdWriteControl 0020                      __pbssBANK0 0045  
                    __pbssBANK1 00C8                      __pbssBANK3 0190               _pathCountShortest 0067  
           lcdSetCursor@address 0023                         ?_PathTo 0025                      __pmaintext 005F  
                       ?_Turn90 0071                         ?___bmul 0020                         ?___wmul 0020  
                       ?_getADC 0071                      __pintentry 0004           __size_of_lcdSetCursor 0009  
                       _ADCMain 084D           __end_of_getSensorData 0988              __size_of_ser_getch 000A  
            __size_of_ser_putch 000C                     ?_TravelPath 0071                     _RightSpeedH 004F  
                   _RightSpeedL 0050                         _IR_Wall 0380                         _SSPSTAT 0094  
                    __stringtab 0800                         _Drive1m 0C14         DriveDirect@VelocityLeft 0023  
         __size_of_lcdWriteData 0013                       ?_re_route 0071                    _lcdSetCursor 17C1  
            _lcdWriteToDigitBCD 0AD8                       ?_ser_init 0071                 __size_of_PathTo 034B  
                     ?_setupADC 0071                       ?_setupLCD 0071                       ?_setupSPI 0071  
               __size_of_Turn90 00A1                 __size_of___bmul 0013                 __size_of___wmul 0023  
               __size_of_getADC 0045                         ___lwdiv 0988             ?_lcdWriteToDigitBCD 0023  
                       __ptext1 07F0                         __ptext2 0878                         __ptext3 07C7  
                       __ptext4 0862                         __ptext5 17E0                         __ptext6 0CFC  
                       __ptext7 0EEB                         __ptext8 0B73                         __ptext9 08FA  
                  __size_of_isr 0026                         _lowByte 0078                _orientation_path 0053  
                       _targets 005A                         clrloop0 17BA                    _lcdWriteData 0826  
          end_of_initialization 005B            ??_lcdWriteToDigitBCD 0025               __end_of_ser_getch 17D4  
             __end_of_ser_putch 17E0                      ??_re_route 003D                      _wallFollow 0DE6  
                    _reset_flag 0383                      ??_ser_init 0020                      ??_setupADC 0020  
                    ??_setupLCD 0023                      ??_setupSPI 0020             __size_of_TravelPath 0115  
                    _time_count 00D2                    ?_DriveDirect 0021                       Drive@radH 0022  
                     Drive@radL 0023                     TravelPath@n 003C                   ?_spi_transfer 0071  
               ser_getch@rxbyte 0021                      main@fourth 00DA                      main@second 00D8  
                __end_of_PathTo 07C7                       PathTo@sum 002E                  __end_of_Turn90 0C14  
                __end_of___bmul 0826             DriveDirect@data_467 0028                 _lcdWriteControl 0839  
                __end_of___wmul 08D4                  __end_of_getADC 0A4B             start_initialization 0015  
                   __end_of_isr 08FA                  ??_spi_transfer 0020         __size_of_lcdWriteString 0020  
                   ?_wallFollow 0071                        ??_PathTo 0026                        ??_Turn90 002A  
                      ??___bmul 0021                        ??___wmul 0024                        ??_getADC 0020  
                    init_fetch0 17EF                     __pdataBANK0 0066                     __pdataBANK1 00A0  
                   __pdataBANK2 0110                        ?_ADCMain 0071                     __pbssCOMMON 0076  
                     ___latbits 0002                   __pcstackBANK0 0020                   __pcstackBANK1 00D6  
                  ??_TravelPath 003A                        ?_Drive1m 0071         __end_of_lcdWriteControl 084D  
              ___lwdiv@dividend 0022               __size_of_re_route 00EA               __size_of_ser_init 000F  
                      ?___lwdiv 0020               __size_of_setupADC 0016               __size_of_setupLCD 0029  
            __end_of_TravelPath 1000               __size_of_setupSPI 0019                       __pstrings 0800  
                  _pathShortest 01B0                       _gridWalls 0110                  __size_of_Drive 0028  
          __size_of_DriveDirect 008D             __size_of_wallFollow 0105            wallFollow@setADCdist 0033  
              ___lwdiv@quotient 0026                   _targets_found 0385                 main@controlByte 00D6  
                     _pathCount 0054         lcdWriteControl@databyte 0022               interrupt_function 0004  
        __size_of_getSensorData 003E                  ___wmul@product 0024                      ser_putch@c 0020  
         getSensorData@packetID 0026                       clear_ram0 17B9                       _ser_getch 17CA  
                     _ser_putch 17D4                       _timerLoop 00D4                        Drive1m@n 0038  
              __size_of_ADCMain 0015                   _VelocityRight 00D0            __end_of_spi_transfer 07FF  
                   __stringbase 0805               ___wmul@multiplier 0020                spi_transfer@data 0022  
                     main@fifth 00DB                       main@first 00D7                spi_transfer@temp 0021  
                    _ADC_ADJUST 0064                       main@third 00D9                        _Distance 00CC  
          lcdWriteData@databyte 0022     __size_of_lcdWriteToDigitBCD 009B                  _lcdWriteString 0891  
      DriveDirect@VelocityRight 0021                __size_of_Drive1m 00E8                _ADJUSTED_SPEED_L 00C8  
              _ADJUSTED_SPEED_R 00CA                      ?_ser_getch 0071                ?_lcdWriteControl 0071  
               _mazeGridDefault 00B4                      ?_ser_putch 0071                __size_of___lwdiv 003E  
                 _getSensorData 094A              __end_of__stringtab 0806  lcdWriteToDigitBCD@TenThouDigit 002B  
               ___lwdiv@divisor 0020                 ___lwdiv@counter 0025                        __ptext10 0C14  
                      __ptext11 0DE6                        __ptext20 17CA                        __ptext12 08B1  
                      __ptext21 047C                        __ptext13 0988                        __ptext22 0891  
                      __ptext14 0A4B                        __ptext23 0826                        __ptext15 084D  
                      __ptext24 17C1                        __ptext16 0AD8                        __ptext25 0839  
                      __ptext17 0A06                        __ptext26 0813                        __ptext18 094A  
                      __ptext27 08D4                        __ptext19 17D4                        _highByte 0079  
        __end_of_lcdWriteString 08B1                        _distance 0047                        _mazeGrid 00A0  
                 __size_of_main 041D                        _re_route 0CFC                    ??_wallFollow 002F  
                      _ser_init 17E0                        _setupADC 0862                        _setupLCD 07C7  
                      _setupSPI 0878                      _PB7Counter 004D     lcdWriteToDigitBCD@HunsDigit 0027  
                      _x_target 005E                      _PB8Counter 004E                        _y_target 0063  
                  _VelocityLeft 00CE     lcdWriteToDigitBCD@OnesDigit 002D                  ?_getSensorData 0022  
   lcdWriteToDigitBCD@TensDigit 0025     lcdWriteToDigitBCD@ThouDigit 0029                        init_ram0 17F3  
            __end_of_wallFollow 0EEB                 ?_lcdWriteString 0071                  Drive1m@omni_IR 0039  
                      intlevel1 0000                   ?_lcdSetCursor 0071                       stringcode 0800  
                   ??_ser_getch 0020                     ??_ser_putch 0020             getSensorData@sensor 0027  
         __size_of_spi_transfer 000F                     _orientation 0066                      _OPTION_REG 0081  
                      stringdir 0800                        stringtab 0800              getSensorData@bytes 0022  
                 ?_lcdWriteData 0071          lcdWriteToDigitBCD@data 0023                    _spi_transfer 07F0  
                ??_lcdSetCursor 0023                 _CURRENT_SPEED_L 0069                 _CURRENT_SPEED_R 006B  
