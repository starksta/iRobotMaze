

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Tue Sep 27 18:56:15 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	idataBANK3,global,class=CODE,delta=2
     8                           	psect	strings,global,class=STRING,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	dabs	1,0x7E,2
    35  0000                     	;# 
    36  0001                     	;# 
    37  0002                     	;# 
    38  0003                     	;# 
    39  0004                     	;# 
    40  0005                     	;# 
    41  0006                     	;# 
    42  0007                     	;# 
    43  0008                     	;# 
    44  0009                     	;# 
    45  000A                     	;# 
    46  000B                     	;# 
    47  000C                     	;# 
    48  000D                     	;# 
    49  000E                     	;# 
    50  000E                     	;# 
    51  000F                     	;# 
    52  0010                     	;# 
    53  0011                     	;# 
    54  0012                     	;# 
    55  0013                     	;# 
    56  0014                     	;# 
    57  0015                     	;# 
    58  0015                     	;# 
    59  0016                     	;# 
    60  0017                     	;# 
    61  0018                     	;# 
    62  0019                     	;# 
    63  001A                     	;# 
    64  001B                     	;# 
    65  001B                     	;# 
    66  001C                     	;# 
    67  001D                     	;# 
    68  001E                     	;# 
    69  001F                     	;# 
    70  0081                     	;# 
    71  0085                     	;# 
    72  0086                     	;# 
    73  0087                     	;# 
    74  0088                     	;# 
    75  0089                     	;# 
    76  008C                     	;# 
    77  008D                     	;# 
    78  008E                     	;# 
    79  0091                     	;# 
    80  0092                     	;# 
    81  0093                     	;# 
    82  0094                     	;# 
    83  0098                     	;# 
    84  0099                     	;# 
    85  009C                     	;# 
    86  009D                     	;# 
    87  009E                     	;# 
    88  009F                     	;# 
    89  010C                     	;# 
    90  010D                     	;# 
    91  010E                     	;# 
    92  010F                     	;# 
    93  018C                     	;# 
    94  018D                     	;# 
    95  0000                     	;# 
    96  0001                     	;# 
    97  0002                     	;# 
    98  0003                     	;# 
    99  0004                     	;# 
   100  0005                     	;# 
   101  0006                     	;# 
   102  0007                     	;# 
   103  0008                     	;# 
   104  0009                     	;# 
   105  000A                     	;# 
   106  000B                     	;# 
   107  000C                     	;# 
   108  000D                     	;# 
   109  000E                     	;# 
   110  000E                     	;# 
   111  000F                     	;# 
   112  0010                     	;# 
   113  0011                     	;# 
   114  0012                     	;# 
   115  0013                     	;# 
   116  0014                     	;# 
   117  0015                     	;# 
   118  0015                     	;# 
   119  0016                     	;# 
   120  0017                     	;# 
   121  0018                     	;# 
   122  0019                     	;# 
   123  001A                     	;# 
   124  001B                     	;# 
   125  001B                     	;# 
   126  001C                     	;# 
   127  001D                     	;# 
   128  001E                     	;# 
   129  001F                     	;# 
   130  0081                     	;# 
   131  0085                     	;# 
   132  0086                     	;# 
   133  0087                     	;# 
   134  0088                     	;# 
   135  0089                     	;# 
   136  008C                     	;# 
   137  008D                     	;# 
   138  008E                     	;# 
   139  0091                     	;# 
   140  0092                     	;# 
   141  0093                     	;# 
   142  0094                     	;# 
   143  0098                     	;# 
   144  0099                     	;# 
   145  009C                     	;# 
   146  009D                     	;# 
   147  009E                     	;# 
   148  009F                     	;# 
   149  010C                     	;# 
   150  010D                     	;# 
   151  010E                     	;# 
   152  010F                     	;# 
   153  018C                     	;# 
   154  018D                     	;# 
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0008                     	;# 
   164  0009                     	;# 
   165  000A                     	;# 
   166  000B                     	;# 
   167  000C                     	;# 
   168  000D                     	;# 
   169  000E                     	;# 
   170  000E                     	;# 
   171  000F                     	;# 
   172  0010                     	;# 
   173  0011                     	;# 
   174  0012                     	;# 
   175  0013                     	;# 
   176  0014                     	;# 
   177  0015                     	;# 
   178  0015                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001B                     	;# 
   186  001C                     	;# 
   187  001D                     	;# 
   188  001E                     	;# 
   189  001F                     	;# 
   190  0081                     	;# 
   191  0085                     	;# 
   192  0086                     	;# 
   193  0087                     	;# 
   194  0088                     	;# 
   195  0089                     	;# 
   196  008C                     	;# 
   197  008D                     	;# 
   198  008E                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0093                     	;# 
   202  0094                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  009F                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  010F                     	;# 
   213  018C                     	;# 
   214  018D                     	;# 
   215  0000                     	;# 
   216  0001                     	;# 
   217  0002                     	;# 
   218  0003                     	;# 
   219  0004                     	;# 
   220  0005                     	;# 
   221  0006                     	;# 
   222  0007                     	;# 
   223  0008                     	;# 
   224  0009                     	;# 
   225  000A                     	;# 
   226  000B                     	;# 
   227  000C                     	;# 
   228  000D                     	;# 
   229  000E                     	;# 
   230  000E                     	;# 
   231  000F                     	;# 
   232  0010                     	;# 
   233  0011                     	;# 
   234  0012                     	;# 
   235  0013                     	;# 
   236  0014                     	;# 
   237  0015                     	;# 
   238  0015                     	;# 
   239  0016                     	;# 
   240  0017                     	;# 
   241  0018                     	;# 
   242  0019                     	;# 
   243  001A                     	;# 
   244  001B                     	;# 
   245  001B                     	;# 
   246  001C                     	;# 
   247  001D                     	;# 
   248  001E                     	;# 
   249  001F                     	;# 
   250  0081                     	;# 
   251  0085                     	;# 
   252  0086                     	;# 
   253  0087                     	;# 
   254  0088                     	;# 
   255  0089                     	;# 
   256  008C                     	;# 
   257  008D                     	;# 
   258  008E                     	;# 
   259  0091                     	;# 
   260  0092                     	;# 
   261  0093                     	;# 
   262  0094                     	;# 
   263  0098                     	;# 
   264  0099                     	;# 
   265  009C                     	;# 
   266  009D                     	;# 
   267  009E                     	;# 
   268  009F                     	;# 
   269  010C                     	;# 
   270  010D                     	;# 
   271  010E                     	;# 
   272  010F                     	;# 
   273  018C                     	;# 
   274  018D                     	;# 
   275  0000                     	;# 
   276  0001                     	;# 
   277  0002                     	;# 
   278  0003                     	;# 
   279  0004                     	;# 
   280  0005                     	;# 
   281  0006                     	;# 
   282  0007                     	;# 
   283  0008                     	;# 
   284  0009                     	;# 
   285  000A                     	;# 
   286  000B                     	;# 
   287  000C                     	;# 
   288  000D                     	;# 
   289  000E                     	;# 
   290  000E                     	;# 
   291  000F                     	;# 
   292  0010                     	;# 
   293  0011                     	;# 
   294  0012                     	;# 
   295  0013                     	;# 
   296  0014                     	;# 
   297  0015                     	;# 
   298  0015                     	;# 
   299  0016                     	;# 
   300  0017                     	;# 
   301  0018                     	;# 
   302  0019                     	;# 
   303  001A                     	;# 
   304  001B                     	;# 
   305  001B                     	;# 
   306  001C                     	;# 
   307  001D                     	;# 
   308  001E                     	;# 
   309  001F                     	;# 
   310  0081                     	;# 
   311  0085                     	;# 
   312  0086                     	;# 
   313  0087                     	;# 
   314  0088                     	;# 
   315  0089                     	;# 
   316  008C                     	;# 
   317  008D                     	;# 
   318  008E                     	;# 
   319  0091                     	;# 
   320  0092                     	;# 
   321  0093                     	;# 
   322  0094                     	;# 
   323  0098                     	;# 
   324  0099                     	;# 
   325  009C                     	;# 
   326  009D                     	;# 
   327  009E                     	;# 
   328  009F                     	;# 
   329  010C                     	;# 
   330  010D                     	;# 
   331  010E                     	;# 
   332  010F                     	;# 
   333  018C                     	;# 
   334  018D                     	;# 
   335  0000                     	;# 
   336  0001                     	;# 
   337  0002                     	;# 
   338  0003                     	;# 
   339  0004                     	;# 
   340  0005                     	;# 
   341  0006                     	;# 
   342  0007                     	;# 
   343  0008                     	;# 
   344  0009                     	;# 
   345  000A                     	;# 
   346  000B                     	;# 
   347  000C                     	;# 
   348  000D                     	;# 
   349  000E                     	;# 
   350  000E                     	;# 
   351  000F                     	;# 
   352  0010                     	;# 
   353  0011                     	;# 
   354  0012                     	;# 
   355  0013                     	;# 
   356  0014                     	;# 
   357  0015                     	;# 
   358  0015                     	;# 
   359  0016                     	;# 
   360  0017                     	;# 
   361  0018                     	;# 
   362  0019                     	;# 
   363  001A                     	;# 
   364  001B                     	;# 
   365  001B                     	;# 
   366  001C                     	;# 
   367  001D                     	;# 
   368  001E                     	;# 
   369  001F                     	;# 
   370  0081                     	;# 
   371  0085                     	;# 
   372  0086                     	;# 
   373  0087                     	;# 
   374  0088                     	;# 
   375  0089                     	;# 
   376  008C                     	;# 
   377  008D                     	;# 
   378  008E                     	;# 
   379  0091                     	;# 
   380  0092                     	;# 
   381  0093                     	;# 
   382  0094                     	;# 
   383  0098                     	;# 
   384  0099                     	;# 
   385  009C                     	;# 
   386  009D                     	;# 
   387  009E                     	;# 
   388  009F                     	;# 
   389  010C                     	;# 
   390  010D                     	;# 
   391  010E                     	;# 
   392  010F                     	;# 
   393  018C                     	;# 
   394  018D                     	;# 
   395                           
   396                           	psect	idataBANK0
   397  0698                     __pidataBANK0:	
   398                           
   399                           ;initializer for _pathCountShortest
   400  0698  3414               	retlw	20
   401                           
   402                           ;initializer for _x
   403  0699  3401               	retlw	1
   404                           
   405                           	psect	idataBANK1
   406  0509                     __pidataBANK1:	
   407                           
   408                           ;initializer for _path
   409  0509  3400               	retlw	0
   410  050A  3401               	retlw	1
   411  050B  3402               	retlw	2
   412  050C  3403               	retlw	3
   413  050D  3404               	retlw	4
   414  050E  3405               	retlw	5
   415  050F  3406               	retlw	6
   416  0510  3407               	retlw	7
   417  0511  3408               	retlw	8
   418  0512  3409               	retlw	9
   419  0513  340A               	retlw	10
   420  0514  340B               	retlw	11
   421  0515  340C               	retlw	12
   422  0516  340D               	retlw	13
   423  0517  340E               	retlw	14
   424  0518  340F               	retlw	15
   425  0519  3400               	retlw	0
   426  051A  3400               	retlw	0
   427  051B  3400               	retlw	0
   428  051C  3400               	retlw	0
   429  051D  3400               	retlw	0
   430  051E  3400               	retlw	0
   431  051F  3400               	retlw	0
   432  0520  3400               	retlw	0
   433  0521  3400               	retlw	0
   434  0522  3400               	retlw	0
   435  0523  3400               	retlw	0
   436  0524  3400               	retlw	0
   437  0525  3400               	retlw	0
   438  0526  3400               	retlw	0
   439  0527  3400               	retlw	0
   440  0528  3400               	retlw	0
   441  0529  3400               	retlw	0
   442  052A  3400               	retlw	0
   443  052B  3400               	retlw	0
   444  052C  3400               	retlw	0
   445  052D  3400               	retlw	0
   446  052E  3400               	retlw	0
   447  052F  3400               	retlw	0
   448  0530  3400               	retlw	0
   449  0531  3400               	retlw	0
   450  0532  3400               	retlw	0
   451  0533  3400               	retlw	0
   452  0534  3400               	retlw	0
   453  0535  3400               	retlw	0
   454  0536  3400               	retlw	0
   455  0537  3400               	retlw	0
   456  0538  3400               	retlw	0
   457                           
   458                           ;initializer for _mazeGrid
   459  0539  340C               	retlw	12
   460  053A  3407               	retlw	7
   461  053B  340E               	retlw	14
   462  053C  340D               	retlw	13
   463  053D  3406               	retlw	6
   464  053E  3407               	retlw	7
   465  053F  3405               	retlw	5
   466  0540  3400               	retlw	0
   467  0541  3405               	retlw	5
   468  0542  3402               	retlw	2
   469  0543  340C               	retlw	12
   470  0544  3406               	retlw	6
   471  0545  340A               	retlw	10
   472  0546  340E               	retlw	14
   473  0547  340A               	retlw	10
   474  0548  340B               	retlw	11
   475  0549  3409               	retlw	9
   476  054A  3401               	retlw	1
   477  054B  3401               	retlw	1
   478  054C  3403               	retlw	3
   479                           
   480                           	psect	idataBANK2
   481  04B9                     __pidataBANK2:	
   482                           
   483                           ;initializer for _squareWalls
   484  04B9  3401               	retlw	1
   485  04BA  3402               	retlw	2
   486  04BB  3403               	retlw	3
   487  04BC  3404               	retlw	4
   488  04BD  3405               	retlw	5
   489  04BE  3406               	retlw	6
   490  04BF  3407               	retlw	7
   491  04C0  3408               	retlw	8
   492  04C1  3409               	retlw	9
   493  04C2  340A               	retlw	10
   494  04C3  340B               	retlw	11
   495  04C4  340C               	retlw	12
   496  04C5  340D               	retlw	13
   497  04C6  340E               	retlw	14
   498  04C7  340F               	retlw	15
   499  04C8  3410               	retlw	16
   500  04C9  3400               	retlw	0
   501  04CA  3400               	retlw	0
   502  04CB  3400               	retlw	0
   503  04CC  3400               	retlw	0
   504  04CD  3400               	retlw	0
   505  04CE  3400               	retlw	0
   506  04CF  3400               	retlw	0
   507  04D0  3400               	retlw	0
   508  04D1  3401               	retlw	1
   509  04D2  3401               	retlw	1
   510  04D3  3401               	retlw	1
   511  04D4  3401               	retlw	1
   512  04D5  3401               	retlw	1
   513  04D6  3401               	retlw	1
   514  04D7  3401               	retlw	1
   515  04D8  3401               	retlw	1
   516  04D9  3400               	retlw	0
   517  04DA  3400               	retlw	0
   518  04DB  3400               	retlw	0
   519  04DC  3400               	retlw	0
   520  04DD  3401               	retlw	1
   521  04DE  3401               	retlw	1
   522  04DF  3401               	retlw	1
   523  04E0  3401               	retlw	1
   524  04E1  3400               	retlw	0
   525  04E2  3400               	retlw	0
   526  04E3  3400               	retlw	0
   527  04E4  3400               	retlw	0
   528  04E5  3401               	retlw	1
   529  04E6  3401               	retlw	1
   530  04E7  3401               	retlw	1
   531  04E8  3401               	retlw	1
   532  04E9  3400               	retlw	0
   533  04EA  3400               	retlw	0
   534  04EB  3401               	retlw	1
   535  04EC  3401               	retlw	1
   536  04ED  3400               	retlw	0
   537  04EE  3400               	retlw	0
   538  04EF  3401               	retlw	1
   539  04F0  3401               	retlw	1
   540  04F1  3400               	retlw	0
   541  04F2  3400               	retlw	0
   542  04F3  3401               	retlw	1
   543  04F4  3401               	retlw	1
   544  04F5  3400               	retlw	0
   545  04F6  3400               	retlw	0
   546  04F7  3401               	retlw	1
   547  04F8  3401               	retlw	1
   548  04F9  3400               	retlw	0
   549  04FA  3401               	retlw	1
   550  04FB  3400               	retlw	0
   551  04FC  3401               	retlw	1
   552  04FD  3400               	retlw	0
   553  04FE  3401               	retlw	1
   554  04FF  3400               	retlw	0
   555  0500  3401               	retlw	1
   556  0501  3400               	retlw	0
   557  0502  3401               	retlw	1
   558  0503  3400               	retlw	0
   559  0504  3401               	retlw	1
   560  0505  3400               	retlw	0
   561  0506  3401               	retlw	1
   562  0507  3400               	retlw	0
   563  0508  3401               	retlw	1
   564                           
   565                           	psect	idataBANK3
   566  054D                     __pidataBANK3:	
   567                           
   568                           ;initializer for _shortest_path
   569  054D  3400               	retlw	0
   570  054E  3401               	retlw	1
   571  054F  3402               	retlw	2
   572  0550  3403               	retlw	3
   573  0551  3404               	retlw	4
   574  0552  3405               	retlw	5
   575  0553  3406               	retlw	6
   576  0554  3407               	retlw	7
   577  0555  3408               	retlw	8
   578  0556  3409               	retlw	9
   579  0557  340A               	retlw	10
   580  0558  340B               	retlw	11
   581  0559  340C               	retlw	12
   582  055A  340D               	retlw	13
   583  055B  340E               	retlw	14
   584  055C  340F               	retlw	15
   585  055D  3400               	retlw	0
   586  055E  3400               	retlw	0
   587  055F  3400               	retlw	0
   588  0560  3400               	retlw	0
   589  0561  3400               	retlw	0
   590  0562  3400               	retlw	0
   591  0563  3400               	retlw	0
   592  0564  3400               	retlw	0
   593  0565  3400               	retlw	0
   594  0566  3400               	retlw	0
   595  0567  3400               	retlw	0
   596  0568  3400               	retlw	0
   597  0569  3400               	retlw	0
   598  056A  3400               	retlw	0
   599  056B  3400               	retlw	0
   600  056C  3400               	retlw	0
   601  056D  3400               	retlw	0
   602  056E  3400               	retlw	0
   603  056F  3400               	retlw	0
   604  0570  3400               	retlw	0
   605  0571  3400               	retlw	0
   606  0572  3400               	retlw	0
   607  0573  3400               	retlw	0
   608  0574  3400               	retlw	0
   609  0575  3400               	retlw	0
   610  0576  3400               	retlw	0
   611  0577  3400               	retlw	0
   612  0578  3400               	retlw	0
   613  0579  3400               	retlw	0
   614  057A  3400               	retlw	0
   615  057B  3400               	retlw	0
   616  057C  3400               	retlw	0
   617                           
   618                           ;initializer for _mazeGridDefault
   619  057D  340C               	retlw	12
   620  057E  3407               	retlw	7
   621  057F  340E               	retlw	14
   622  0580  340D               	retlw	13
   623  0581  3406               	retlw	6
   624  0582  3407               	retlw	7
   625  0583  3405               	retlw	5
   626  0584  3400               	retlw	0
   627  0585  3405               	retlw	5
   628  0586  3402               	retlw	2
   629  0587  340C               	retlw	12
   630  0588  3406               	retlw	6
   631  0589  340A               	retlw	10
   632  058A  340E               	retlw	14
   633  058B  340A               	retlw	10
   634  058C  340B               	retlw	11
   635  058D  3409               	retlw	9
   636  058E  3401               	retlw	1
   637  058F  3401               	retlw	1
   638  0590  3403               	retlw	3
   639  001F                     _ADCON0	set	31
   640  0005                     _PORTA	set	5
   641  0007                     _PORTC	set	7
   642  0008                     _PORTD	set	8
   643  0009                     _PORTE	set	9
   644  001A                     _RCREG	set	26
   645  0018                     _RCSTA	set	24
   646  0013                     _SSPBUF	set	19
   647  0014                     _SSPCON	set	20
   648  0001                     _TMR0	set	1
   649  0019                     _TXREG	set	25
   650  001E                     _ADRESH	set	30
   651  005F                     _GIE	set	95
   652  00FA                     _GO	set	250
   653  005E                     _PEIE	set	94
   654  0030                     _RB0	set	48
   655  0065                     _RCIF	set	101
   656  0048                     _RE0	set	72
   657  0049                     _RE1	set	73
   658  004A                     _RE2	set	74
   659  0063                     _SSPIF	set	99
   660  005D                     _TMR0IE	set	93
   661  005A                     _TMR0IF	set	90
   662  009F                     _ADCON1	set	159
   663  009E                     _ADRESL	set	158
   664  0081                     _OPTION_REG	set	129
   665  0099                     _SPBRG	set	153
   666  0094                     _SSPSTAT	set	148
   667  0085                     _TRISA	set	133
   668  0086                     _TRISB	set	134
   669  0087                     _TRISC	set	135
   670  0088                     _TRISD	set	136
   671  0089                     _TRISE	set	137
   672  0098                     _TXSTA	set	152
   673  04C1                     _TRMT	set	1217
   674                           
   675                           	psect	strings
   676  0688                     __pstrings:	
   677  0688                     stringtab:	
   678  0688                     __stringtab:	
   679  0688                     stringcode:	
   680                           ;	String table - string pointers are 1 byte each
   681                           
   682  0688                     stringdir:	
   683  0688  3006               	movlw	high stringdir
   684  0689  008A               	movwf	10
   685  068A  0804               	movf	4,w
   686  068B  0A84               	incf	4,f
   687  068C  0782               	addwf	2,f
   688  068D                     __stringbase:	
   689  068D  3400               	retlw	0
   690  068E                     __end_of__stringtab:	
   691  068E                     STR_1:	
   692  068E  3420               	retlw	32	;' '
   693  068F  3400               	retlw	0
   694  068E                     
   695                           ; #config settings
   696  0000                     
   697                           	psect	cinit
   698  0015                     start_initialization:	
   699  0015                     __initialization:	
   700                           
   701                           ; Initialize objects allocated to BANK3
   702  0015  1783               	bsf	3,7	;select IRP bank2
   703  0016  30D4               	movlw	low (__pdataBANK3+68)
   704  0017  00FD               	movwf	btemp+-1
   705  0018  3005               	movlw	high __pidataBANK3
   706  0019  00FE               	movwf	btemp
   707  001A  304D               	movlw	low __pidataBANK3
   708  001B  00FF               	movwf	btemp+1
   709  001C  3090               	movlw	low __pdataBANK3
   710  001D  0084               	movwf	4
   711  001E  120A  118A  2663  120A  118A  	fcall	init_ram0
   712                           
   713                           ; Initialize objects allocated to BANK2
   714  0023  3060               	movlw	low (__pdataBANK2+80)
   715  0024  00FD               	movwf	btemp+-1
   716  0025  3004               	movlw	high __pidataBANK2
   717  0026  00FE               	movwf	btemp
   718  0027  30B9               	movlw	low __pidataBANK2
   719  0028  00FF               	movwf	btemp+1
   720  0029  3010               	movlw	low __pdataBANK2
   721  002A  0084               	movwf	4
   722  002B  120A  118A  2663  120A  118A  	fcall	init_ram0
   723                           
   724                           ; Initialize objects allocated to BANK1
   725  0030  1383               	bcf	3,7	;select IRP bank0
   726  0031  30E4               	movlw	low (__pdataBANK1+68)
   727  0032  00FD               	movwf	btemp+-1
   728  0033  3005               	movlw	high __pidataBANK1
   729  0034  00FE               	movwf	btemp
   730  0035  3009               	movlw	low __pidataBANK1
   731  0036  00FF               	movwf	btemp+1
   732  0037  30A0               	movlw	low __pdataBANK1
   733  0038  0084               	movwf	4
   734  0039  120A  118A  2663  120A  118A  	fcall	init_ram0
   735                           
   736                           ; Initialize objects allocated to BANK0
   737  003E  120A  118A  2698  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   738  0043  00E5               	movwf	__pdataBANK0& (0+127)
   739  0044  120A  118A  2699  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   740  0049  00E6               	movwf	(__pdataBANK0+1)& (0+127)
   741                           
   742                           ; Clear objects allocated to BANK0
   743  004A  3020               	movlw	low __pbssBANK0
   744  004B  0084               	movwf	4
   745  004C  3045               	movlw	low (__pbssBANK0+37)
   746  004D  120A  118A  2690   	fcall	clear_ram0
   747                           
   748                           ; Clear objects allocated to COMMON
   749  0050  01F0               	clrf	__pbssCOMMON& (0+127)
   750  0051  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   751  0052  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   752  0053  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   753  0054  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   754  0055                     end_of_initialization:	
   755                           ;End of C runtime variable initialization code
   756                           
   757  0055                     __end_of__initialization:	
   758  0055  0183               	clrf	3
   759  0056  120A  118A  2B6F   	ljmp	_main	;jump to C main() function
   760                           
   761                           	psect	bssCOMMON
   762  0070                     __pbssCOMMON:	
   763  0070                     _angle:	
   764  0070                     	ds	2
   765  0072                     _RightSpeedH:	
   766  0072                     	ds	1
   767  0073                     _lowByte:	
   768  0073                     	ds	1
   769  0074                     _highByte:	
   770  0074                     	ds	1
   771                           
   772                           	psect	bssBANK0
   773  0020                     __pbssBANK0:	
   774  0020                     _VelocityLeft:	
   775  0020                     	ds	2
   776  0022                     _VelocityRight:	
   777  0022                     	ds	2
   778  0024                     _adcRAW:	
   779  0024                     	ds	2
   780  0026                     _distance:	
   781  0026                     	ds	2
   782  0028                     _time_count:	
   783  0028                     	ds	2
   784  002A                     _LeftSpeedH:	
   785  002A                     	ds	1
   786  002B                     _LeftSpeedL:	
   787  002B                     	ds	1
   788  002C                     _PB8Counter:	
   789  002C                     	ds	1
   790  002D                     _RightSpeedL:	
   791  002D                     	ds	1
   792  002E                     _c:	
   793  002E                     	ds	1
   794  002F                     _down:	
   795  002F                     	ds	1
   796  0030                     _intersection_Orientation:	
   797  0030                     	ds	1
   798  0031                     _left:	
   799  0031                     	ds	1
   800  0032                     _orientation:	
   801  0032                     	ds	1
   802  0033                     _orientation_path:	
   803  0033                     	ds	1
   804  0034                     _pathCount:	
   805  0034                     	ds	1
   806  0035                     _r:	
   807  0035                     	ds	1
   808  0036                     _radH:	
   809  0036                     	ds	1
   810  0037                     _radL:	
   811  0037                     	ds	1
   812  0038                     _right:	
   813  0038                     	ds	1
   814  0039                     _speedH:	
   815  0039                     	ds	1
   816  003A                     _speedL:	
   817  003A                     	ds	1
   818  003B                     _up:	
   819  003B                     	ds	1
   820  003C                     _x_origin:	
   821  003C                     	ds	1
   822  003D                     _x_path:	
   823  003D                     	ds	1
   824  003E                     _x_target:	
   825  003E                     	ds	1
   826  003F                     _x_test:	
   827  003F                     	ds	1
   828  0040                     _y:	
   829  0040                     	ds	1
   830  0041                     _y_origin:	
   831  0041                     	ds	1
   832  0042                     _y_path:	
   833  0042                     	ds	1
   834  0043                     _y_target:	
   835  0043                     	ds	1
   836  0044                     _y_test:	
   837  0044                     	ds	1
   838                           
   839                           	psect	dataBANK0
   840  0065                     __pdataBANK0:	
   841  0065                     _pathCountShortest:	
   842  0065                     	ds	1
   843  0066                     _x:	
   844  0066                     	ds	1
   845                           
   846                           	psect	dataBANK1
   847  00A0                     __pdataBANK1:	
   848  00A0                     _path:	
   849  00A0                     	ds	48
   850  00D0                     _mazeGrid:	
   851  00D0                     	ds	20
   852                           
   853                           	psect	dataBANK3
   854  0190                     __pdataBANK3:	
   855  0190                     _shortest_path:	
   856  0190                     	ds	48
   857  01C0                     _mazeGridDefault:	
   858  01C0                     	ds	20
   859                           
   860                           	psect	dataBANK2
   861  0110                     __pdataBANK2:	
   862  0110                     _squareWalls:	
   863  0110                     	ds	80
   864                           
   865                           	psect	inittext
   866  065F                     init_fetch0:	
   867                           ;	Called with low address in FSR and high address in W
   868                           
   869  065F  087E               	movf	126,w
   870  0660  008A               	movwf	10
   871  0661  087F               	movf	127,w
   872  0662  0082               	movwf	2
   873  0663                     init_ram0:	
   874                           ;Called with:
   875                           ;	high address of idata address in btemp 
   876                           ;	low address of idata address in btemp+1 
   877                           ;	low address of data in FSR
   878                           ;	high address + 1 of data in btemp-1
   879                           
   880  0663  265F  120A  118A   	fcall	init_fetch0
   881  0666  0080               	movwf	0
   882  0667  0A84               	incf	4,f
   883  0668  0804               	movf	4,w
   884  0669  067D               	xorwf	125,w
   885  066A  1903               	btfsc	3,2
   886  066B  3400               	retlw	0
   887  066C  0AFF               	incf	127,f
   888  066D  1903               	btfsc	3,2
   889  066E  0AFE               	incf	126,f
   890  066F  2E63               	goto	init_ram0
   891                           
   892                           	psect	clrtext
   893  0690                     clear_ram0:	
   894                           ;	Called with FSR containing the base address, and
   895                           ;	W with the last address+1
   896                           
   897  0690  0064               	clrwdt	;clear the watchdog before getting into this loop
   898  0691                     clrloop0:	
   899  0691  0180               	clrf	0	;clear RAM location pointed to by FSR
   900  0692  0A84               	incf	4,f	;increment pointer
   901  0693  0604               	xorwf	4,w	;XOR with final address
   902  0694  1903               	btfsc	3,2	;have we reached the end yet?
   903  0695  3400               	retlw	0	;all done for this memory range, return
   904  0696  0604               	xorwf	4,w	;XOR again to restore value
   905  0697  2E91               	goto	clrloop0	;do the next byte
   906                           
   907                           	psect	cstackCOMMON
   908  0075                     __pcstackCOMMON:	
   909  0075                     ?_ser_init:	
   910  0075                     ?_setupSPI:	
   911                           ; 1 bytes @ 0x0
   912                           
   913  0075                     ?_setupLCD:	
   914                           ; 1 bytes @ 0x0
   915                           
   916  0075                     ?_setupADC:	
   917                           ; 1 bytes @ 0x0
   918                           
   919  0075                     ?_lcdSetCursor:	
   920                           ; 1 bytes @ 0x0
   921                           
   922  0075                     ?_lcdWriteData:	
   923                           ; 1 bytes @ 0x0
   924                           
   925  0075                     ?_lcdWriteString:	
   926                           ; 1 bytes @ 0x0
   927                           
   928  0075                     ?_isr:	
   929                           ; 1 bytes @ 0x0
   930                           
   931  0075                     ??_isr:	
   932                           ; 1 bytes @ 0x0
   933                           
   934  0075                     ?_main:	
   935                           ; 1 bytes @ 0x0
   936                           
   937  0075                     ?_lcdWriteControl:	
   938                           ; 1 bytes @ 0x0
   939                           
   940                           
   941                           ; 1 bytes @ 0x0
   942  0075                     	ds	5
   943                           
   944                           	psect	cstackBANK0
   945  0045                     __pcstackBANK0:	
   946  0045                     ??_ser_init:	
   947  0045                     ??_setupSPI:	
   948                           ; 1 bytes @ 0x0
   949                           
   950  0045                     ??_setupADC:	
   951                           ; 1 bytes @ 0x0
   952                           
   953  0045                     ??_lcdWriteData:	
   954                           ; 1 bytes @ 0x0
   955                           
   956  0045                     ??_lcdWriteControl:	
   957                           ; 1 bytes @ 0x0
   958                           
   959  0045                     ?___bmul:	
   960                           ; 1 bytes @ 0x0
   961                           
   962  0045                     ___bmul@multiplicand:	
   963                           ; 1 bytes @ 0x0
   964                           
   965                           
   966                           ; 1 bytes @ 0x0
   967  0045                     	ds	1
   968  0046                     ??___bmul:	
   969                           
   970                           ; 1 bytes @ 0x1
   971  0046                     	ds	1
   972  0047                     lcdWriteControl@databyte:	
   973  0047                     lcdWriteData@databyte:	
   974                           ; 1 bytes @ 0x2
   975                           
   976  0047                     ___bmul@product:	
   977                           ; 1 bytes @ 0x2
   978                           
   979                           
   980                           ; 1 bytes @ 0x2
   981  0047                     	ds	1
   982  0048                     ??_setupLCD:	
   983  0048                     ??_lcdSetCursor:	
   984                           ; 1 bytes @ 0x3
   985                           
   986  0048                     ??_lcdWriteString:	
   987                           ; 1 bytes @ 0x3
   988                           
   989  0048                     ?_lcdWriteToDigitBCD:	
   990                           ; 1 bytes @ 0x3
   991                           
   992  0048                     lcdSetCursor@address:	
   993                           ; 1 bytes @ 0x3
   994                           
   995  0048                     ___bmul@multiplier:	
   996                           ; 1 bytes @ 0x3
   997                           
   998  0048                     lcdWriteToDigitBCD@data:	
   999                           ; 1 bytes @ 0x3
  1000                           
  1001                           
  1002                           ; 2 bytes @ 0x3
  1003  0048                     	ds	1
  1004  0049                     ?_PathTo:	
  1005  0049                     PathTo@y_target:	
  1006                           ; 1 bytes @ 0x4
  1007                           
  1008  0049                     lcdWriteString@s:	
  1009                           ; 1 bytes @ 0x4
  1010                           
  1011                           
  1012                           ; 1 bytes @ 0x4
  1013  0049                     	ds	1
  1014  004A                     ??_lcdWriteToDigitBCD:	
  1015  004A                     ??_PathTo:	
  1016                           ; 1 bytes @ 0x5
  1017                           
  1018  004A                     lcdWriteToDigitBCD@TensDigit:	
  1019                           ; 1 bytes @ 0x5
  1020                           
  1021                           
  1022                           ; 2 bytes @ 0x5
  1023  004A                     	ds	2
  1024  004C                     lcdWriteToDigitBCD@HunsDigit:	
  1025                           
  1026                           ; 2 bytes @ 0x7
  1027  004C                     	ds	2
  1028  004E                     lcdWriteToDigitBCD@ThouDigit:	
  1029                           
  1030                           ; 2 bytes @ 0x9
  1031  004E                     	ds	2
  1032  0050                     lcdWriteToDigitBCD@TenThouDigit:	
  1033                           
  1034                           ; 2 bytes @ 0xB
  1035  0050                     	ds	1
  1036  0051                     PathTo@x_target:	
  1037                           
  1038                           ; 1 bytes @ 0xC
  1039  0051                     	ds	1
  1040  0052                     PathTo@sum:	
  1041  0052                     lcdWriteToDigitBCD@OnesDigit:	
  1042                           ; 1 bytes @ 0xD
  1043                           
  1044                           
  1045                           ; 2 bytes @ 0xD
  1046  0052                     	ds	1
  1047  0053                     _PathTo$132:	
  1048                           
  1049                           ; 1 bytes @ 0xE
  1050  0053                     	ds	1
  1051  0054                     _PathTo$133:	
  1052                           
  1053                           ; 1 bytes @ 0xF
  1054  0054                     	ds	1
  1055  0055                     _PathTo$134:	
  1056                           
  1057                           ; 1 bytes @ 0x10
  1058  0055                     	ds	1
  1059  0056                     _PathTo$135:	
  1060                           
  1061                           ; 1 bytes @ 0x11
  1062  0056                     	ds	1
  1063  0057                     _PathTo$137:	
  1064                           
  1065                           ; 1 bytes @ 0x12
  1066  0057                     	ds	1
  1067  0058                     _PathTo$139:	
  1068                           
  1069                           ; 1 bytes @ 0x13
  1070  0058                     	ds	1
  1071  0059                     _PathTo$140:	
  1072                           
  1073                           ; 1 bytes @ 0x14
  1074  0059                     	ds	1
  1075  005A                     _PathTo$141:	
  1076                           
  1077                           ; 1 bytes @ 0x15
  1078  005A                     	ds	1
  1079  005B                     _PathTo$142:	
  1080                           
  1081                           ; 1 bytes @ 0x16
  1082  005B                     	ds	1
  1083  005C                     PathTo@loop:	
  1084                           
  1085                           ; 2 bytes @ 0x17
  1086  005C                     	ds	2
  1087  005E                     PathTo@n:	
  1088                           
  1089                           ; 1 bytes @ 0x19
  1090  005E                     	ds	1
  1091  005F                     PathTo@n_138:	
  1092                           
  1093                           ; 1 bytes @ 0x1A
  1094  005F                     	ds	1
  1095  0060                     ??_main:	
  1096                           
  1097                           ; 1 bytes @ 0x1B
  1098  0060                     	ds	2
  1099  0062                     main@a:	
  1100                           
  1101                           ; 1 bytes @ 0x1D
  1102  0062                     	ds	1
  1103  0063                     main@n:	
  1104                           
  1105                           ; 1 bytes @ 0x1E
  1106  0063                     	ds	1
  1107  0064                     main@n_150:	
  1108                           
  1109                           ; 1 bytes @ 0x1F
  1110  0064                     	ds	1
  1111                           
  1112                           	psect	maintext
  1113  036F                     __pmaintext:	
  1114 ;;
  1115 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1116 ;;
  1117 ;; *************** function _main *****************
  1118 ;; Defined at:
  1119 ;;		line 238 in file "main.c"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;		None
  1122 ;; Auto vars:     Size  Location     Type
  1123 ;;  n               1   31[BANK0 ] unsigned char 
  1124 ;;  n               1   30[BANK0 ] unsigned char 
  1125 ;;  a               1   29[BANK0 ] unsigned char 
  1126 ;; Return value:  Size  Location     Type
  1127 ;;                  1    wreg      void 
  1128 ;; Registers used:
  1129 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1130 ;; Tracked objects:
  1131 ;;		On entry : B00/0
  1132 ;;		On exit  : 0/0
  1133 ;;		Unchanged: 0/0
  1134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1135 ;;      Params:         0       0       0       0       0
  1136 ;;      Locals:         0       3       0       0       0
  1137 ;;      Temps:          0       2       0       0       0
  1138 ;;      Totals:         0       5       0       0       0
  1139 ;;Total ram usage:        5 bytes
  1140 ;; Hardware stack levels required when called:    3
  1141 ;; This function calls:
  1142 ;;		_PathTo
  1143 ;;		_lcdSetCursor
  1144 ;;		_lcdWriteData
  1145 ;;		_lcdWriteString
  1146 ;;		_lcdWriteToDigitBCD
  1147 ;;		_ser_init
  1148 ;;		_setupADC
  1149 ;;		_setupLCD
  1150 ;;		_setupSPI
  1151 ;; This function is called by:
  1152 ;;		Startup code after reset
  1153 ;; This function uses a non-reentrant model
  1154 ;;
  1155                           
  1156                           
  1157                           ;psect for function _main
  1158  036F                     _main:	
  1159                           
  1160                           ;main.c: 240: ser_init();
  1161                           
  1162                           ;incstack = 0
  1163                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1164  036F  120A  118A  2670  120A  118A  	fcall	_ser_init
  1165                           
  1166                           ;main.c: 241: setupSPI();
  1167  0374  120A  118A  25F6  120A  118A  	fcall	_setupSPI
  1168                           
  1169                           ;main.c: 242: setupLCD();
  1170  0379  120A  118A  2591  120A  118A  	fcall	_setupLCD
  1171                           
  1172                           ;main.c: 243: setupADC();
  1173  037E  120A  118A  260F  120A  118A  	fcall	_setupADC
  1174                           
  1175                           ;main.c: 245: x = 1;
  1176  0383  3001               	movlw	1
  1177  0384  1283               	bcf	3,5	;RP0=0, select bank0
  1178  0385  1303               	bcf	3,6	;RP1=0, select bank0
  1179  0386  00E0               	movwf	??_main
  1180  0387  0860               	movf	??_main,w
  1181  0388  00E6               	movwf	_x	;volatile
  1182                           
  1183                           ;main.c: 246: y = 0;
  1184  0389  01C0               	clrf	_y	;volatile
  1185                           
  1186                           ;main.c: 249: char a = 1;
  1187  038A  01E2               	clrf	main@a
  1188  038B  0AE2               	incf	main@a,f
  1189  038C                     l2672:	
  1190                           ;main.c: 250: while (a == 1){
  1191                           
  1192  038C  0362               	decf	main@a,w
  1193  038D  1D03               	btfss	3,2
  1194  038E  2C1F               	goto	l228
  1195                           
  1196                           ;main.c: 252: PathTo(3,2);
  1197  038F  3002               	movlw	2
  1198  0390  00E0               	movwf	??_main
  1199  0391  0860               	movf	??_main,w
  1200  0392  00C9               	movwf	PathTo@y_target
  1201  0393  3003               	movlw	3
  1202  0394  120A  118A  2059  120A  118A  	fcall	_PathTo
  1203                           
  1204                           ;main.c: 254: lcdSetCursor(0b10000000);
  1205  0399  3080               	movlw	128
  1206  039A  120A  118A  267F  120A  118A  	fcall	_lcdSetCursor
  1207                           
  1208                           ;main.c: 255: for (char n = 0; n < 10; n++){
  1209  039F  1283               	bcf	3,5	;RP0=0, select bank0
  1210  03A0  1303               	bcf	3,6	;RP1=0, select bank0
  1211  03A1  01E3               	clrf	main@n
  1212  03A2  300A               	movlw	10
  1213  03A3  0263               	subwf	main@n,w
  1214  03A4  1803               	btfsc	3,0
  1215  03A5  2BC6               	goto	l2646
  1216  03A6                     l2638:	
  1217                           
  1218                           ;main.c: 256: lcdWriteData((shortest_path[1][n]) + 48);
  1219  03A6  0863               	movf	main@n,w
  1220  03A7  3EA0               	addlw	(low ((_shortest_path| (0+256)+16)))& (0+255)
  1221  03A8  0084               	movwf	4
  1222  03A9  1783               	bsf	3,7	;select IRP bank3
  1223  03AA  0800               	movf	0,w
  1224  03AB  3E30               	addlw	48
  1225  03AC  120A  118A  2639  120A  118A  	fcall	_lcdWriteData
  1226                           
  1227                           ;main.c: 257: _delay((unsigned long)((15)*(20000000/4000.0)));
  1228  03B1  3062               	movlw	98
  1229  03B2  1283               	bcf	3,5	;RP0=0, select bank0
  1230  03B3  1303               	bcf	3,6	;RP1=0, select bank0
  1231  03B4  00E1               	movwf	??_main+1
  1232  03B5  3065               	movlw	101
  1233  03B6  00E0               	movwf	??_main
  1234  03B7                     u2057:	
  1235  03B7  0BE0               	decfsz	??_main,f
  1236  03B8  2BB7               	goto	u2057
  1237  03B9  0BE1               	decfsz	??_main+1,f
  1238  03BA  2BB7               	goto	u2057
  1239  03BB  2BBC               	nop2
  1240  03BC  3001               	movlw	1
  1241  03BD  1283               	bcf	3,5	;RP0=0, select bank0
  1242  03BE  1303               	bcf	3,6	;RP1=0, select bank0
  1243  03BF  00E0               	movwf	??_main
  1244  03C0  0860               	movf	??_main,w
  1245  03C1  07E3               	addwf	main@n,f
  1246  03C2  300A               	movlw	10
  1247  03C3  0263               	subwf	main@n,w
  1248  03C4  1C03               	skipc
  1249  03C5  2BA6               	goto	l2638
  1250  03C6                     l2646:	
  1251                           
  1252                           ;main.c: 258: }
  1253                           ;main.c: 259: lcdWriteString(" ");
  1254  03C6  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1255  03C7  120A  118A  25BA  120A  118A  	fcall	_lcdWriteString
  1256                           
  1257                           ;main.c: 260: lcdWriteToDigitBCD(pathCount);
  1258  03CC  1283               	bcf	3,5	;RP0=0, select bank0
  1259  03CD  1303               	bcf	3,6	;RP1=0, select bank0
  1260  03CE  0834               	movf	_pathCount,w
  1261  03CF  00E0               	movwf	??_main
  1262  03D0  01E1               	clrf	??_main+1
  1263  03D1  0860               	movf	??_main,w
  1264  03D2  00C8               	movwf	lcdWriteToDigitBCD@data
  1265  03D3  0861               	movf	??_main+1,w
  1266  03D4  00C9               	movwf	lcdWriteToDigitBCD@data+1
  1267  03D5  120A  118A  2422  120A  118A  	fcall	_lcdWriteToDigitBCD
  1268                           
  1269                           ;main.c: 262: lcdSetCursor(0b11000000);
  1270  03DA  30C0               	movlw	192
  1271  03DB  120A  118A  267F  120A  118A  	fcall	_lcdSetCursor
  1272                           
  1273                           ;main.c: 263: for (char n = 0; n < 10; n++){
  1274  03E0  1283               	bcf	3,5	;RP0=0, select bank0
  1275  03E1  1303               	bcf	3,6	;RP1=0, select bank0
  1276  03E2  01E4               	clrf	main@n_150
  1277  03E3  300A               	movlw	10
  1278  03E4  0264               	subwf	main@n_150,w
  1279  03E5  1803               	btfsc	3,0
  1280  03E6  2C07               	goto	l2666
  1281  03E7                     l2658:	
  1282                           
  1283                           ;main.c: 264: lcdWriteData((shortest_path[2][n]) + 48);
  1284  03E7  0864               	movf	main@n_150,w
  1285  03E8  3EB0               	addlw	(low ((_shortest_path| (0+256)+32)))& (0+255)
  1286  03E9  0084               	movwf	4
  1287  03EA  1783               	bsf	3,7	;select IRP bank3
  1288  03EB  0800               	movf	0,w
  1289  03EC  3E30               	addlw	48
  1290  03ED  120A  118A  2639  120A  118A  	fcall	_lcdWriteData
  1291                           
  1292                           ;main.c: 265: _delay((unsigned long)((15)*(20000000/4000.0)));
  1293  03F2  3062               	movlw	98
  1294  03F3  1283               	bcf	3,5	;RP0=0, select bank0
  1295  03F4  1303               	bcf	3,6	;RP1=0, select bank0
  1296  03F5  00E1               	movwf	??_main+1
  1297  03F6  3065               	movlw	101
  1298  03F7  00E0               	movwf	??_main
  1299  03F8                     u2067:	
  1300  03F8  0BE0               	decfsz	??_main,f
  1301  03F9  2BF8               	goto	u2067
  1302  03FA  0BE1               	decfsz	??_main+1,f
  1303  03FB  2BF8               	goto	u2067
  1304  03FC  2BFD               	nop2
  1305  03FD  3001               	movlw	1
  1306  03FE  1283               	bcf	3,5	;RP0=0, select bank0
  1307  03FF  1303               	bcf	3,6	;RP1=0, select bank0
  1308  0400  00E0               	movwf	??_main
  1309  0401  0860               	movf	??_main,w
  1310  0402  07E4               	addwf	main@n_150,f
  1311  0403  300A               	movlw	10
  1312  0404  0264               	subwf	main@n_150,w
  1313  0405  1C03               	skipc
  1314  0406  2BE7               	goto	l2658
  1315  0407                     l2666:	
  1316                           
  1317                           ;main.c: 266: }
  1318                           ;main.c: 267: lcdWriteString(" ");
  1319  0407  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1320  0408  120A  118A  25BA  120A  118A  	fcall	_lcdWriteString
  1321                           
  1322                           ;main.c: 268: lcdWriteToDigitBCD(pathCountShortest);
  1323  040D  1283               	bcf	3,5	;RP0=0, select bank0
  1324  040E  1303               	bcf	3,6	;RP1=0, select bank0
  1325  040F  0865               	movf	_pathCountShortest,w
  1326  0410  00E0               	movwf	??_main
  1327  0411  01E1               	clrf	??_main+1
  1328  0412  0860               	movf	??_main,w
  1329  0413  00C8               	movwf	lcdWriteToDigitBCD@data
  1330  0414  0861               	movf	??_main+1,w
  1331  0415  00C9               	movwf	lcdWriteToDigitBCD@data+1
  1332  0416  120A  118A  2422  120A  118A  	fcall	_lcdWriteToDigitBCD
  1333                           
  1334                           ;main.c: 272: a = 0;
  1335  041B  1283               	bcf	3,5	;RP0=0, select bank0
  1336  041C  1303               	bcf	3,6	;RP1=0, select bank0
  1337  041D  01E2               	clrf	main@a
  1338  041E  2B8C               	goto	l2672
  1339  041F                     l228:	
  1340  041F  120A  118A  2812   	ljmp	start
  1341  0422                     __end_of_main:	
  1342                           
  1343                           	psect	text1
  1344  05F6                     __ptext1:	
  1345 ;; *************** function _setupSPI *****************
  1346 ;; Defined at:
  1347 ;;		line 4 in file "SPI.c"
  1348 ;; Parameters:    Size  Location     Type
  1349 ;;		None
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;		None
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  1    wreg      void 
  1354 ;; Registers used:
  1355 ;;		wreg
  1356 ;; Tracked objects:
  1357 ;;		On entry : 0/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1361 ;;      Params:         0       0       0       0       0
  1362 ;;      Locals:         0       0       0       0       0
  1363 ;;      Temps:          0       0       0       0       0
  1364 ;;      Totals:         0       0       0       0       0
  1365 ;;Total ram usage:        0 bytes
  1366 ;; Hardware stack levels used:    1
  1367 ;; Hardware stack levels required when called:    1
  1368 ;; This function calls:
  1369 ;;		Nothing
  1370 ;; This function is called by:
  1371 ;;		_main
  1372 ;; This function uses a non-reentrant model
  1373 ;;
  1374                           
  1375                           
  1376                           ;psect for function _setupSPI
  1377  05F6                     _setupSPI:	
  1378                           
  1379                           ;SPI.c: 6: TRISB = 0b00000011;
  1380                           
  1381                           ;incstack = 0
  1382                           ; Regs used in _setupSPI: [wreg]
  1383  05F6  3003               	movlw	3
  1384  05F7  1683               	bsf	3,5	;RP0=1, select bank1
  1385  05F8  1303               	bcf	3,6	;RP1=0, select bank1
  1386  05F9  0086               	movwf	6	;volatile
  1387                           
  1388                           ;SPI.c: 8: SSPSTAT = 0b01000000;
  1389  05FA  3040               	movlw	64
  1390  05FB  0094               	movwf	20	;volatile
  1391                           
  1392                           ;SPI.c: 9: SSPCON = 0b00100000;
  1393  05FC  3020               	movlw	32
  1394  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  1395  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  1396  05FF  0094               	movwf	20	;volatile
  1397                           
  1398                           ;SPI.c: 10: TRISC = 0b10000000;
  1399  0600  3080               	movlw	128
  1400  0601  1683               	bsf	3,5	;RP0=1, select bank1
  1401  0602  1303               	bcf	3,6	;RP1=0, select bank1
  1402  0603  0087               	movwf	7	;volatile
  1403                           
  1404                           ;SPI.c: 11: PORTC = 0b00000011;
  1405  0604  3003               	movlw	3
  1406  0605  1283               	bcf	3,5	;RP0=0, select bank0
  1407  0606  1303               	bcf	3,6	;RP1=0, select bank0
  1408  0607  0087               	movwf	7	;volatile
  1409                           
  1410                           ;SPI.c: 14: OPTION_REG = 0b00000100;
  1411  0608  3004               	movlw	4
  1412  0609  1683               	bsf	3,5	;RP0=1, select bank1
  1413  060A  1303               	bcf	3,6	;RP1=0, select bank1
  1414  060B  0081               	movwf	1	;volatile
  1415                           
  1416                           ;SPI.c: 16: TMR0IE = 1;
  1417  060C  168B               	bsf	11,5	;volatile
  1418                           
  1419                           ;SPI.c: 18: (GIE = 1);
  1420  060D  178B               	bsf	11,7	;volatile
  1421  060E  0008               	return
  1422  060F                     __end_of_setupSPI:	
  1423                           
  1424                           	psect	text2
  1425  0591                     __ptext2:	
  1426 ;; *************** function _setupLCD *****************
  1427 ;; Defined at:
  1428 ;;		line 82 in file "LCD.c"
  1429 ;; Parameters:    Size  Location     Type
  1430 ;;		None
  1431 ;; Auto vars:     Size  Location     Type
  1432 ;;		None
  1433 ;; Return value:  Size  Location     Type
  1434 ;;                  1    wreg      void 
  1435 ;; Registers used:
  1436 ;;		wreg, status,2, status,0, pclath, cstack
  1437 ;; Tracked objects:
  1438 ;;		On entry : 0/0
  1439 ;;		On exit  : 0/0
  1440 ;;		Unchanged: 0/0
  1441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1442 ;;      Params:         0       0       0       0       0
  1443 ;;      Locals:         0       0       0       0       0
  1444 ;;      Temps:          0       0       0       0       0
  1445 ;;      Totals:         0       0       0       0       0
  1446 ;;Total ram usage:        0 bytes
  1447 ;; Hardware stack levels used:    1
  1448 ;; Hardware stack levels required when called:    2
  1449 ;; This function calls:
  1450 ;;		_lcdWriteControl
  1451 ;; This function is called by:
  1452 ;;		_main
  1453 ;; This function uses a non-reentrant model
  1454 ;;
  1455                           
  1456                           
  1457                           ;psect for function _setupLCD
  1458  0591                     _setupLCD:	
  1459                           
  1460                           ;LCD.c: 84: ADCON1 = 0b00000010;
  1461                           
  1462                           ;incstack = 0
  1463                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  1464  0591  3002               	movlw	2
  1465  0592  1683               	bsf	3,5	;RP0=1, select bank1
  1466  0593  1303               	bcf	3,6	;RP1=0, select bank1
  1467  0594  009F               	movwf	31	;volatile
  1468                           
  1469                           ;LCD.c: 86: PORTD = 0;
  1470  0595  1283               	bcf	3,5	;RP0=0, select bank0
  1471  0596  1303               	bcf	3,6	;RP1=0, select bank0
  1472  0597  0188               	clrf	8	;volatile
  1473                           
  1474                           ;LCD.c: 87: PORTE = 0;
  1475  0598  0189               	clrf	9	;volatile
  1476                           
  1477                           ;LCD.c: 89: TRISD = 0b00000000;
  1478  0599  1683               	bsf	3,5	;RP0=1, select bank1
  1479  059A  1303               	bcf	3,6	;RP1=0, select bank1
  1480  059B  0188               	clrf	8	;volatile
  1481                           
  1482                           ;LCD.c: 90: TRISE = 0b00000000;
  1483  059C  0189               	clrf	9	;volatile
  1484                           
  1485                           ;LCD.c: 93: lcdWriteControl(0b00000001);
  1486  059D  3001               	movlw	1
  1487  059E  120A  118A  2625  120A  118A  	fcall	_lcdWriteControl
  1488                           
  1489                           ;LCD.c: 94: lcdWriteControl(0b00111000);
  1490  05A3  3038               	movlw	56
  1491  05A4  120A  118A  2625  120A  118A  	fcall	_lcdWriteControl
  1492                           
  1493                           ;LCD.c: 95: lcdWriteControl(0b00001100);
  1494  05A9  300C               	movlw	12
  1495  05AA  120A  118A  2625  120A  118A  	fcall	_lcdWriteControl
  1496                           
  1497                           ;LCD.c: 96: lcdWriteControl(0b00000110);
  1498  05AF  3006               	movlw	6
  1499  05B0  120A  118A  2625  120A  118A  	fcall	_lcdWriteControl
  1500                           
  1501                           ;LCD.c: 97: lcdWriteControl(0b00000010);
  1502  05B5  3002               	movlw	2
  1503  05B6  120A  118A  2625   	fcall	_lcdWriteControl
  1504  05B9  0008               	return
  1505  05BA                     __end_of_setupLCD:	
  1506                           
  1507                           	psect	text3
  1508  060F                     __ptext3:	
  1509 ;; *************** function _setupADC *****************
  1510 ;; Defined at:
  1511 ;;		line 5 in file "ADC.c"
  1512 ;; Parameters:    Size  Location     Type
  1513 ;;		None
  1514 ;; Auto vars:     Size  Location     Type
  1515 ;;		None
  1516 ;; Return value:  Size  Location     Type
  1517 ;;                  1    wreg      void 
  1518 ;; Registers used:
  1519 ;;		wreg, status,2
  1520 ;; Tracked objects:
  1521 ;;		On entry : 0/0
  1522 ;;		On exit  : 0/0
  1523 ;;		Unchanged: 0/0
  1524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1525 ;;      Params:         0       0       0       0       0
  1526 ;;      Locals:         0       0       0       0       0
  1527 ;;      Temps:          0       1       0       0       0
  1528 ;;      Totals:         0       1       0       0       0
  1529 ;;Total ram usage:        1 bytes
  1530 ;; Hardware stack levels used:    1
  1531 ;; Hardware stack levels required when called:    1
  1532 ;; This function calls:
  1533 ;;		Nothing
  1534 ;; This function is called by:
  1535 ;;		_main
  1536 ;; This function uses a non-reentrant model
  1537 ;;
  1538                           
  1539                           
  1540                           ;psect for function _setupADC
  1541  060F                     _setupADC:	
  1542                           
  1543                           ;ADC.c: 6: PORTA = 0;
  1544                           
  1545                           ;incstack = 0
  1546                           ; Regs used in _setupADC: [wreg+status,2]
  1547  060F  1283               	bcf	3,5	;RP0=0, select bank0
  1548  0610  1303               	bcf	3,6	;RP1=0, select bank0
  1549  0611  0185               	clrf	5	;volatile
  1550                           
  1551                           ;ADC.c: 7: TRISA = 0b11111111;
  1552  0612  30FF               	movlw	255
  1553  0613  1683               	bsf	3,5	;RP0=1, select bank1
  1554  0614  1303               	bcf	3,6	;RP1=0, select bank1
  1555  0615  0085               	movwf	5	;volatile
  1556                           
  1557                           ;ADC.c: 10: ADCON0 = 0b10001001;
  1558  0616  3089               	movlw	137
  1559  0617  1283               	bcf	3,5	;RP0=0, select bank0
  1560  0618  1303               	bcf	3,6	;RP1=0, select bank0
  1561  0619  009F               	movwf	31	;volatile
  1562                           
  1563                           ;ADC.c: 11: ADCON1 = 0b00000010;
  1564  061A  3002               	movlw	2
  1565  061B  1683               	bsf	3,5	;RP0=1, select bank1
  1566  061C  1303               	bcf	3,6	;RP1=0, select bank1
  1567  061D  009F               	movwf	31	;volatile
  1568                           
  1569                           ;ADC.c: 13: _delay((unsigned long)((50)*(20000000/4000000.0)));
  1570  061E  3053               	movlw	83
  1571  061F  1283               	bcf	3,5	;RP0=0, select bank0
  1572  0620  1303               	bcf	3,6	;RP1=0, select bank0
  1573  0621  00C5               	movwf	??_setupADC
  1574  0622                     u2077:	
  1575  0622  0BC5               	decfsz	??_setupADC,f
  1576  0623  2E22               	goto	u2077
  1577  0624  0008               	return
  1578  0625                     __end_of_setupADC:	
  1579                           
  1580                           	psect	text4
  1581  0670                     __ptext4:	
  1582 ;; *************** function _ser_init *****************
  1583 ;; Defined at:
  1584 ;;		line 5 in file "ser.c"
  1585 ;; Parameters:    Size  Location     Type
  1586 ;;		None
  1587 ;; Auto vars:     Size  Location     Type
  1588 ;;		None
  1589 ;; Return value:  Size  Location     Type
  1590 ;;                  1    wreg      void 
  1591 ;; Registers used:
  1592 ;;		wreg
  1593 ;; Tracked objects:
  1594 ;;		On entry : 0/0
  1595 ;;		On exit  : 0/0
  1596 ;;		Unchanged: 0/0
  1597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1598 ;;      Params:         0       0       0       0       0
  1599 ;;      Locals:         0       0       0       0       0
  1600 ;;      Temps:          0       0       0       0       0
  1601 ;;      Totals:         0       0       0       0       0
  1602 ;;Total ram usage:        0 bytes
  1603 ;; Hardware stack levels used:    1
  1604 ;; Hardware stack levels required when called:    1
  1605 ;; This function calls:
  1606 ;;		Nothing
  1607 ;; This function is called by:
  1608 ;;		_main
  1609 ;; This function uses a non-reentrant model
  1610 ;;
  1611                           
  1612                           
  1613                           ;psect for function _ser_init
  1614  0670                     _ser_init:	
  1615                           
  1616                           ;ser.c: 7: TXSTA = 0b00100100;
  1617                           
  1618                           ;incstack = 0
  1619                           ; Regs used in _ser_init: [wreg]
  1620  0670  3024               	movlw	36
  1621  0671  1683               	bsf	3,5	;RP0=1, select bank1
  1622  0672  1303               	bcf	3,6	;RP1=0, select bank1
  1623  0673  0098               	movwf	24	;volatile
  1624                           
  1625                           ;ser.c: 8: RCSTA = 0b10011000;
  1626  0674  3098               	movlw	152
  1627  0675  1283               	bcf	3,5	;RP0=0, select bank0
  1628  0676  1303               	bcf	3,6	;RP1=0, select bank0
  1629  0677  0098               	movwf	24	;volatile
  1630                           
  1631                           ;ser.c: 24: SPBRG = 20;
  1632  0678  3014               	movlw	20
  1633  0679  1683               	bsf	3,5	;RP0=1, select bank1
  1634  067A  1303               	bcf	3,6	;RP1=0, select bank1
  1635  067B  0099               	movwf	25	;volatile
  1636                           
  1637                           ;ser.c: 26: PEIE = 1;
  1638  067C  170B               	bsf	11,6	;volatile
  1639                           
  1640                           ;ser.c: 27: (GIE = 1);
  1641  067D  178B               	bsf	11,7	;volatile
  1642  067E  0008               	return
  1643  067F                     __end_of_ser_init:	
  1644                           
  1645                           	psect	text5
  1646  0422                     __ptext5:	
  1647 ;; *************** function _lcdWriteToDigitBCD *****************
  1648 ;; Defined at:
  1649 ;;		line 38 in file "LCD.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;  data            2    3[BANK0 ] unsigned int 
  1652 ;; Auto vars:     Size  Location     Type
  1653 ;;  OnesDigit       2   13[BANK0 ] unsigned int 
  1654 ;;  TenThouDigit    2   11[BANK0 ] unsigned int 
  1655 ;;  ThouDigit       2    9[BANK0 ] unsigned int 
  1656 ;;  HunsDigit       2    7[BANK0 ] unsigned int 
  1657 ;;  TensDigit       2    5[BANK0 ] unsigned int 
  1658 ;; Return value:  Size  Location     Type
  1659 ;;                  1    wreg      void 
  1660 ;; Registers used:
  1661 ;;		wreg, status,2, status,0, pclath, cstack
  1662 ;; Tracked objects:
  1663 ;;		On entry : 0/0
  1664 ;;		On exit  : 0/0
  1665 ;;		Unchanged: 0/0
  1666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1667 ;;      Params:         0       2       0       0       0
  1668 ;;      Locals:         0      10       0       0       0
  1669 ;;      Temps:          0       0       0       0       0
  1670 ;;      Totals:         0      12       0       0       0
  1671 ;;Total ram usage:       12 bytes
  1672 ;; Hardware stack levels used:    1
  1673 ;; Hardware stack levels required when called:    2
  1674 ;; This function calls:
  1675 ;;		_lcdWriteData
  1676 ;; This function is called by:
  1677 ;;		_main
  1678 ;;		_ADCMain
  1679 ;; This function uses a non-reentrant model
  1680 ;;
  1681                           
  1682                           
  1683                           ;psect for function _lcdWriteToDigitBCD
  1684  0422                     _lcdWriteToDigitBCD:	
  1685                           
  1686                           ;LCD.c: 39: unsigned int OnesDigit, TensDigit, HunsDigit, ThouDigit, TenThouDigit;
  1687                           ;LCD.c: 42: OnesDigit = data;
  1688                           
  1689                           ;incstack = 0
  1690                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  1691  0422  1283               	bcf	3,5	;RP0=0, select bank0
  1692  0423  1303               	bcf	3,6	;RP1=0, select bank0
  1693  0424  0849               	movf	lcdWriteToDigitBCD@data+1,w
  1694  0425  00D3               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1695  0426  0848               	movf	lcdWriteToDigitBCD@data,w
  1696  0427  00D2               	movwf	lcdWriteToDigitBCD@OnesDigit
  1697                           
  1698                           ;LCD.c: 43: TensDigit = 0;
  1699  0428  01CA               	clrf	lcdWriteToDigitBCD@TensDigit
  1700  0429  01CB               	clrf	lcdWriteToDigitBCD@TensDigit+1
  1701                           
  1702                           ;LCD.c: 44: HunsDigit = 0;
  1703  042A  01CC               	clrf	lcdWriteToDigitBCD@HunsDigit
  1704  042B  01CD               	clrf	lcdWriteToDigitBCD@HunsDigit+1
  1705                           
  1706                           ;LCD.c: 45: ThouDigit = 0;
  1707  042C  01CE               	clrf	lcdWriteToDigitBCD@ThouDigit
  1708  042D  01CF               	clrf	lcdWriteToDigitBCD@ThouDigit+1
  1709                           
  1710                           ;LCD.c: 46: TenThouDigit = 0;
  1711  042E  01D0               	clrf	lcdWriteToDigitBCD@TenThouDigit
  1712  042F  01D1               	clrf	lcdWriteToDigitBCD@TenThouDigit+1
  1713  0430                     l2592:	
  1714                           ;LCD.c: 49: while (OnesDigit >= 10000){
  1715                           
  1716  0430  3027               	movlw	39
  1717  0431  0253               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1718  0432  3010               	movlw	16
  1719  0433  1903               	skipnz
  1720  0434  0252               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1721  0435  1C03               	btfss	3,0
  1722  0436  2C54               	goto	l2598
  1723                           
  1724                           ;LCD.c: 50: OnesDigit = OnesDigit - 10000;
  1725  0437  0852               	movf	lcdWriteToDigitBCD@OnesDigit,w
  1726  0438  3EF0               	addlw	240
  1727  0439  00D2               	movwf	lcdWriteToDigitBCD@OnesDigit
  1728  043A  0853               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1729  043B  1803               	skipnc
  1730  043C  3E01               	addlw	1
  1731  043D  3ED8               	addlw	216
  1732  043E  00D3               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1733                           
  1734                           ;LCD.c: 51: TenThouDigit++;
  1735  043F  3001               	movlw	1
  1736  0440  07D0               	addwf	lcdWriteToDigitBCD@TenThouDigit,f
  1737  0441  1803               	skipnc
  1738  0442  0AD1               	incf	lcdWriteToDigitBCD@TenThouDigit+1,f
  1739  0443  3000               	movlw	0
  1740  0444  07D1               	addwf	lcdWriteToDigitBCD@TenThouDigit+1,f
  1741  0445  2C30               	goto	l2592
  1742  0446                     l2594:	
  1743                           ;LCD.c: 52: }
  1744                           ;LCD.c: 54: while (OnesDigit >= 1000){
  1745                           
  1746                           
  1747                           ;LCD.c: 55: OnesDigit = OnesDigit - 1000;
  1748  0446  0852               	movf	lcdWriteToDigitBCD@OnesDigit,w
  1749  0447  3E18               	addlw	24
  1750  0448  00D2               	movwf	lcdWriteToDigitBCD@OnesDigit
  1751  0449  0853               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1752  044A  1803               	skipnc
  1753  044B  3E01               	addlw	1
  1754  044C  3EFC               	addlw	252
  1755  044D  00D3               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1756                           
  1757                           ;LCD.c: 56: ThouDigit++;
  1758  044E  3001               	movlw	1
  1759  044F  07CE               	addwf	lcdWriteToDigitBCD@ThouDigit,f
  1760  0450  1803               	skipnc
  1761  0451  0ACF               	incf	lcdWriteToDigitBCD@ThouDigit+1,f
  1762  0452  3000               	movlw	0
  1763  0453  07CF               	addwf	lcdWriteToDigitBCD@ThouDigit+1,f
  1764  0454                     l2598:	
  1765  0454  3003               	movlw	3
  1766  0455  0253               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1767  0456  30E8               	movlw	232
  1768  0457  1903               	skipnz
  1769  0458  0252               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1770  0459  1C03               	btfss	3,0
  1771  045A  2C6A               	goto	l2604
  1772  045B  2C46               	goto	l2594
  1773  045C                     l2600:	
  1774                           ;LCD.c: 57: }
  1775                           ;LCD.c: 59: while (OnesDigit >= 100){
  1776                           
  1777                           
  1778                           ;LCD.c: 60: OnesDigit = OnesDigit - 100;
  1779  045C  0852               	movf	lcdWriteToDigitBCD@OnesDigit,w
  1780  045D  3E9C               	addlw	156
  1781  045E  00D2               	movwf	lcdWriteToDigitBCD@OnesDigit
  1782  045F  0853               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1783  0460  1803               	skipnc
  1784  0461  3E01               	addlw	1
  1785  0462  3EFF               	addlw	255
  1786  0463  00D3               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1787                           
  1788                           ;LCD.c: 61: HunsDigit++;
  1789  0464  3001               	movlw	1
  1790  0465  07CC               	addwf	lcdWriteToDigitBCD@HunsDigit,f
  1791  0466  1803               	skipnc
  1792  0467  0ACD               	incf	lcdWriteToDigitBCD@HunsDigit+1,f
  1793  0468  3000               	movlw	0
  1794  0469  07CD               	addwf	lcdWriteToDigitBCD@HunsDigit+1,f
  1795  046A                     l2604:	
  1796  046A  3000               	movlw	0
  1797  046B  0253               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1798  046C  3064               	movlw	100
  1799  046D  1903               	skipnz
  1800  046E  0252               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1801  046F  1C03               	btfss	3,0
  1802  0470  2C80               	goto	l2610
  1803  0471  2C5C               	goto	l2600
  1804  0472                     l2606:	
  1805                           ;LCD.c: 62: }
  1806                           ;LCD.c: 64: while (OnesDigit >= 10){
  1807                           
  1808                           
  1809                           ;LCD.c: 65: OnesDigit = OnesDigit - 10;
  1810  0472  0852               	movf	lcdWriteToDigitBCD@OnesDigit,w
  1811  0473  3EF6               	addlw	246
  1812  0474  00D2               	movwf	lcdWriteToDigitBCD@OnesDigit
  1813  0475  0853               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1814  0476  1803               	skipnc
  1815  0477  3E01               	addlw	1
  1816  0478  3EFF               	addlw	255
  1817  0479  00D3               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1818                           
  1819                           ;LCD.c: 66: TensDigit++;
  1820  047A  3001               	movlw	1
  1821  047B  07CA               	addwf	lcdWriteToDigitBCD@TensDigit,f
  1822  047C  1803               	skipnc
  1823  047D  0ACB               	incf	lcdWriteToDigitBCD@TensDigit+1,f
  1824  047E  3000               	movlw	0
  1825  047F  07CB               	addwf	lcdWriteToDigitBCD@TensDigit+1,f
  1826  0480                     l2610:	
  1827  0480  3000               	movlw	0
  1828  0481  0253               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1829  0482  300A               	movlw	10
  1830  0483  1903               	skipnz
  1831  0484  0252               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1832  0485  1803               	skipnc
  1833  0486  2C72               	goto	l2606
  1834                           
  1835                           ;LCD.c: 67: }
  1836                           ;LCD.c: 69: if (TenThouDigit > 0)
  1837  0487  0850               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  1838  0488  0451               	iorwf	lcdWriteToDigitBCD@TenThouDigit+1,w
  1839  0489  1903               	btfsc	3,2
  1840  048A  2C92               	goto	l2616
  1841                           
  1842                           ;LCD.c: 70: lcdWriteData((unsigned int)TenThouDigit + 48);
  1843  048B  0850               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  1844  048C  3E30               	addlw	48
  1845  048D  120A  118A  2639  120A  118A  	fcall	_lcdWriteData
  1846  0492                     l2616:	
  1847                           
  1848                           ;LCD.c: 72: if (ThouDigit > 0)
  1849  0492  1283               	bcf	3,5	;RP0=0, select bank0
  1850  0493  1303               	bcf	3,6	;RP1=0, select bank0
  1851  0494  084E               	movf	lcdWriteToDigitBCD@ThouDigit,w
  1852  0495  044F               	iorwf	lcdWriteToDigitBCD@ThouDigit+1,w
  1853  0496  1903               	btfsc	3,2
  1854  0497  2C9F               	goto	l383
  1855                           
  1856                           ;LCD.c: 73: lcdWriteData((unsigned int)ThouDigit + 48);
  1857  0498  084E               	movf	lcdWriteToDigitBCD@ThouDigit,w
  1858  0499  3E30               	addlw	48
  1859  049A  120A  118A  2639  120A  118A  	fcall	_lcdWriteData
  1860  049F                     l383:	
  1861                           
  1862                           ;LCD.c: 75: lcdWriteData((unsigned int)HunsDigit + 48);
  1863  049F  1283               	bcf	3,5	;RP0=0, select bank0
  1864  04A0  1303               	bcf	3,6	;RP1=0, select bank0
  1865  04A1  084C               	movf	lcdWriteToDigitBCD@HunsDigit,w
  1866  04A2  3E30               	addlw	48
  1867  04A3  120A  118A  2639  120A  118A  	fcall	_lcdWriteData
  1868                           
  1869                           ;LCD.c: 76: lcdWriteData((unsigned int)TensDigit + 48);
  1870  04A8  1283               	bcf	3,5	;RP0=0, select bank0
  1871  04A9  1303               	bcf	3,6	;RP1=0, select bank0
  1872  04AA  084A               	movf	lcdWriteToDigitBCD@TensDigit,w
  1873  04AB  3E30               	addlw	48
  1874  04AC  120A  118A  2639  120A  118A  	fcall	_lcdWriteData
  1875                           
  1876                           ;LCD.c: 77: lcdWriteData((unsigned int)OnesDigit + 48);
  1877  04B1  1283               	bcf	3,5	;RP0=0, select bank0
  1878  04B2  1303               	bcf	3,6	;RP1=0, select bank0
  1879  04B3  0852               	movf	lcdWriteToDigitBCD@OnesDigit,w
  1880  04B4  3E30               	addlw	48
  1881  04B5  120A  118A  2639   	fcall	_lcdWriteData
  1882  04B8  0008               	return
  1883  04B9                     __end_of_lcdWriteToDigitBCD:	
  1884                           
  1885                           	psect	text6
  1886  05BA                     __ptext6:	
  1887 ;; *************** function _lcdWriteString *****************
  1888 ;; Defined at:
  1889 ;;		line 32 in file "LCD.c"
  1890 ;; Parameters:    Size  Location     Type
  1891 ;;  s               1    wreg     PTR unsigned char 
  1892 ;;		 -> STR_2(2), STR_1(2), 
  1893 ;; Auto vars:     Size  Location     Type
  1894 ;;  s               1    4[BANK0 ] PTR unsigned char 
  1895 ;;		 -> STR_2(2), STR_1(2), 
  1896 ;; Return value:  Size  Location     Type
  1897 ;;                  1    wreg      void 
  1898 ;; Registers used:
  1899 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1900 ;; Tracked objects:
  1901 ;;		On entry : 0/0
  1902 ;;		On exit  : 0/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1905 ;;      Params:         0       0       0       0       0
  1906 ;;      Locals:         0       1       0       0       0
  1907 ;;      Temps:          0       1       0       0       0
  1908 ;;      Totals:         0       2       0       0       0
  1909 ;;Total ram usage:        2 bytes
  1910 ;; Hardware stack levels used:    1
  1911 ;; Hardware stack levels required when called:    2
  1912 ;; This function calls:
  1913 ;;		_lcdWriteData
  1914 ;; This function is called by:
  1915 ;;		_main
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919                           
  1920                           ;psect for function _lcdWriteString
  1921  05BA                     _lcdWriteString:	
  1922                           
  1923                           ;incstack = 0
  1924                           ; Regs used in _lcdWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1925                           ;lcdWriteString@s stored from wreg
  1926  05BA  1283               	bcf	3,5	;RP0=0, select bank0
  1927  05BB  1303               	bcf	3,6	;RP1=0, select bank0
  1928  05BC  00C9               	movwf	lcdWriteString@s
  1929  05BD                     l2576:	
  1930                           ;LCD.c: 34: while(*s) lcdWriteData(*s++);
  1931                           
  1932  05BD  0849               	movf	lcdWriteString@s,w
  1933  05BE  0084               	movwf	4
  1934  05BF  120A  118A  2688  120A  118A  	fcall	stringdir
  1935  05C4  3A00               	xorlw	0
  1936  05C5  1903               	btfsc	3,2
  1937  05C6  0008               	return
  1938  05C7  0849               	movf	lcdWriteString@s,w
  1939  05C8  0084               	movwf	4
  1940  05C9  120A  118A  2688  120A  118A  	fcall	stringdir
  1941  05CE  120A  118A  2639  120A  118A  	fcall	_lcdWriteData
  1942  05D3  3001               	movlw	1
  1943  05D4  1283               	bcf	3,5	;RP0=0, select bank0
  1944  05D5  1303               	bcf	3,6	;RP1=0, select bank0
  1945  05D6  00C8               	movwf	??_lcdWriteString
  1946  05D7  0848               	movf	??_lcdWriteString,w
  1947  05D8  07C9               	addwf	lcdWriteString@s,f
  1948  05D9  2DBD               	goto	l2576
  1949  05DA                     __end_of_lcdWriteString:	
  1950                           
  1951                           	psect	text7
  1952  0639                     __ptext7:	
  1953 ;; *************** function _lcdWriteData *****************
  1954 ;; Defined at:
  1955 ;;		line 16 in file "LCD.c"
  1956 ;; Parameters:    Size  Location     Type
  1957 ;;  databyte        1    wreg     unsigned char 
  1958 ;; Auto vars:     Size  Location     Type
  1959 ;;  databyte        1    2[BANK0 ] unsigned char 
  1960 ;; Return value:  Size  Location     Type
  1961 ;;                  1    wreg      void 
  1962 ;; Registers used:
  1963 ;;		wreg
  1964 ;; Tracked objects:
  1965 ;;		On entry : 0/0
  1966 ;;		On exit  : 0/0
  1967 ;;		Unchanged: 0/0
  1968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1969 ;;      Params:         0       0       0       0       0
  1970 ;;      Locals:         0       1       0       0       0
  1971 ;;      Temps:          0       2       0       0       0
  1972 ;;      Totals:         0       3       0       0       0
  1973 ;;Total ram usage:        3 bytes
  1974 ;; Hardware stack levels used:    1
  1975 ;; Hardware stack levels required when called:    1
  1976 ;; This function calls:
  1977 ;;		Nothing
  1978 ;; This function is called by:
  1979 ;;		_main
  1980 ;;		_lcdWriteString
  1981 ;;		_lcdWriteToDigitBCD
  1982 ;; This function uses a non-reentrant model
  1983 ;;
  1984                           
  1985                           
  1986                           ;psect for function _lcdWriteData
  1987  0639                     _lcdWriteData:	
  1988                           
  1989                           ;incstack = 0
  1990                           ; Regs used in _lcdWriteData: [wreg]
  1991                           ;lcdWriteData@databyte stored from wreg
  1992  0639  1283               	bcf	3,5	;RP0=0, select bank0
  1993  063A  1303               	bcf	3,6	;RP1=0, select bank0
  1994  063B  00C7               	movwf	lcdWriteData@databyte
  1995                           
  1996                           ;LCD.c: 17: RE2 = 0;
  1997  063C  1109               	bcf	9,2	;volatile
  1998                           
  1999                           ;LCD.c: 18: RE1 = 0;
  2000  063D  1089               	bcf	9,1	;volatile
  2001                           
  2002                           ;LCD.c: 19: RE0 = 1;
  2003  063E  1409               	bsf	9,0	;volatile
  2004                           
  2005                           ;LCD.c: 20: PORTD = databyte;
  2006  063F  0847               	movf	lcdWriteData@databyte,w
  2007  0640  0088               	movwf	8	;volatile
  2008                           
  2009                           ;LCD.c: 21: RE2 = 1;
  2010  0641  1509               	bsf	9,2	;volatile
  2011                           
  2012                           ;LCD.c: 22: RE2 = 0;
  2013  0642  1109               	bcf	9,2	;volatile
  2014                           
  2015                           ;LCD.c: 23: _delay((unsigned long)((1)*(20000000/4000.0)));
  2016  0643  3007               	movlw	7
  2017  0644  00C6               	movwf	??_lcdWriteData+1
  2018  0645  307D               	movlw	125
  2019  0646  00C5               	movwf	??_lcdWriteData
  2020  0647                     u2087:	
  2021  0647  0BC5               	decfsz	??_lcdWriteData,f
  2022  0648  2E47               	goto	u2087
  2023  0649  0BC6               	decfsz	??_lcdWriteData+1,f
  2024  064A  2E47               	goto	u2087
  2025  064B  0008               	return
  2026  064C                     __end_of_lcdWriteData:	
  2027                           
  2028                           	psect	text8
  2029  067F                     __ptext8:	
  2030 ;; *************** function _lcdSetCursor *****************
  2031 ;; Defined at:
  2032 ;;		line 27 in file "LCD.c"
  2033 ;; Parameters:    Size  Location     Type
  2034 ;;  address         1    wreg     unsigned char 
  2035 ;; Auto vars:     Size  Location     Type
  2036 ;;  address         1    3[BANK0 ] unsigned char 
  2037 ;; Return value:  Size  Location     Type
  2038 ;;                  1    wreg      void 
  2039 ;; Registers used:
  2040 ;;		wreg, status,2, status,0, pclath, cstack
  2041 ;; Tracked objects:
  2042 ;;		On entry : 0/0
  2043 ;;		On exit  : 0/0
  2044 ;;		Unchanged: 0/0
  2045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2046 ;;      Params:         0       0       0       0       0
  2047 ;;      Locals:         0       1       0       0       0
  2048 ;;      Temps:          0       0       0       0       0
  2049 ;;      Totals:         0       1       0       0       0
  2050 ;;Total ram usage:        1 bytes
  2051 ;; Hardware stack levels used:    1
  2052 ;; Hardware stack levels required when called:    2
  2053 ;; This function calls:
  2054 ;;		_lcdWriteControl
  2055 ;; This function is called by:
  2056 ;;		_main
  2057 ;;		_ADCMain
  2058 ;; This function uses a non-reentrant model
  2059 ;;
  2060                           
  2061                           
  2062                           ;psect for function _lcdSetCursor
  2063  067F                     _lcdSetCursor:	
  2064                           
  2065                           ;incstack = 0
  2066                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  2067                           ;lcdSetCursor@address stored from wreg
  2068  067F  1283               	bcf	3,5	;RP0=0, select bank0
  2069  0680  1303               	bcf	3,6	;RP1=0, select bank0
  2070  0681  00C8               	movwf	lcdSetCursor@address
  2071                           
  2072                           ;LCD.c: 28: address |= 0b10000000;
  2073  0682  17C8               	bsf	lcdSetCursor@address,7
  2074                           
  2075                           ;LCD.c: 29: lcdWriteControl(address);
  2076  0683  0848               	movf	lcdSetCursor@address,w
  2077  0684  120A  118A  2625   	fcall	_lcdWriteControl
  2078  0687  0008               	return
  2079  0688                     __end_of_lcdSetCursor:	
  2080                           
  2081                           	psect	text9
  2082  0625                     __ptext9:	
  2083 ;; *************** function _lcdWriteControl *****************
  2084 ;; Defined at:
  2085 ;;		line 5 in file "LCD.c"
  2086 ;; Parameters:    Size  Location     Type
  2087 ;;  databyte        1    wreg     unsigned char 
  2088 ;; Auto vars:     Size  Location     Type
  2089 ;;  databyte        1    2[BANK0 ] unsigned char 
  2090 ;; Return value:  Size  Location     Type
  2091 ;;                  1    wreg      void 
  2092 ;; Registers used:
  2093 ;;		wreg
  2094 ;; Tracked objects:
  2095 ;;		On entry : 0/0
  2096 ;;		On exit  : 0/0
  2097 ;;		Unchanged: 0/0
  2098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2099 ;;      Params:         0       0       0       0       0
  2100 ;;      Locals:         0       1       0       0       0
  2101 ;;      Temps:          0       2       0       0       0
  2102 ;;      Totals:         0       3       0       0       0
  2103 ;;Total ram usage:        3 bytes
  2104 ;; Hardware stack levels used:    1
  2105 ;; Hardware stack levels required when called:    1
  2106 ;; This function calls:
  2107 ;;		Nothing
  2108 ;; This function is called by:
  2109 ;;		_lcdSetCursor
  2110 ;;		_setupLCD
  2111 ;; This function uses a non-reentrant model
  2112 ;;
  2113                           
  2114                           
  2115                           ;psect for function _lcdWriteControl
  2116  0625                     _lcdWriteControl:	
  2117                           
  2118                           ;incstack = 0
  2119                           ; Regs used in _lcdWriteControl: [wreg]
  2120                           ;lcdWriteControl@databyte stored from wreg
  2121  0625  1283               	bcf	3,5	;RP0=0, select bank0
  2122  0626  1303               	bcf	3,6	;RP1=0, select bank0
  2123  0627  00C7               	movwf	lcdWriteControl@databyte
  2124                           
  2125                           ;LCD.c: 6: RE2 = 0;
  2126  0628  1109               	bcf	9,2	;volatile
  2127                           
  2128                           ;LCD.c: 7: RE1 = 0;
  2129  0629  1089               	bcf	9,1	;volatile
  2130                           
  2131                           ;LCD.c: 8: RE0 = 0;
  2132  062A  1009               	bcf	9,0	;volatile
  2133                           
  2134                           ;LCD.c: 9: PORTD = databyte;
  2135  062B  0847               	movf	lcdWriteControl@databyte,w
  2136  062C  0088               	movwf	8	;volatile
  2137                           
  2138                           ;LCD.c: 10: RE2 = 1;
  2139  062D  1509               	bsf	9,2	;volatile
  2140                           
  2141                           ;LCD.c: 11: RE2 = 0;
  2142  062E  1109               	bcf	9,2	;volatile
  2143                           
  2144                           ;LCD.c: 12: _delay((unsigned long)((2)*(20000000/4000.0)));
  2145  062F  300D               	movlw	13
  2146  0630  00C6               	movwf	??_lcdWriteControl+1
  2147  0631  30FB               	movlw	251
  2148  0632  00C5               	movwf	??_lcdWriteControl
  2149  0633                     u2097:	
  2150  0633  0BC5               	decfsz	??_lcdWriteControl,f
  2151  0634  2E33               	goto	u2097
  2152  0635  0BC6               	decfsz	??_lcdWriteControl+1,f
  2153  0636  2E33               	goto	u2097
  2154  0637  2E38               	nop2
  2155  0638  0008               	return
  2156  0639                     __end_of_lcdWriteControl:	
  2157                           
  2158                           	psect	text10
  2159  0059                     __ptext10:	
  2160 ;; *************** function _PathTo *****************
  2161 ;; Defined at:
  2162 ;;		line 69 in file "main.c"
  2163 ;; Parameters:    Size  Location     Type
  2164 ;;  x_target        1    wreg     unsigned char 
  2165 ;;  y_target        1    4[BANK0 ] unsigned char 
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;  x_target        1   12[BANK0 ] unsigned char 
  2168 ;;  n               1   26[BANK0 ] unsigned char 
  2169 ;;  n               1   25[BANK0 ] unsigned char 
  2170 ;;  sum             1   13[BANK0 ] unsigned char 
  2171 ;;  loop            2   23[BANK0 ] int 
  2172 ;; Return value:  Size  Location     Type
  2173 ;;                  1    wreg      void 
  2174 ;; Registers used:
  2175 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2176 ;; Tracked objects:
  2177 ;;		On entry : 0/0
  2178 ;;		On exit  : 0/0
  2179 ;;		Unchanged: 0/0
  2180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2181 ;;      Params:         0       1       0       0       0
  2182 ;;      Locals:         0      15       0       0       0
  2183 ;;      Temps:          0       7       0       0       0
  2184 ;;      Totals:         0      23       0       0       0
  2185 ;;Total ram usage:       23 bytes
  2186 ;; Hardware stack levels used:    1
  2187 ;; Hardware stack levels required when called:    2
  2188 ;; This function calls:
  2189 ;;		___bmul
  2190 ;; This function is called by:
  2191 ;;		_main
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           
  2196                           ;psect for function _PathTo
  2197  0059                     _PathTo:	
  2198                           
  2199                           ;incstack = 0
  2200                           ; Regs used in _PathTo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2201                           ;PathTo@x_target stored from wreg
  2202  0059  1283               	bcf	3,5	;RP0=0, select bank0
  2203  005A  1303               	bcf	3,6	;RP1=0, select bank0
  2204  005B  00D1               	movwf	PathTo@x_target
  2205                           
  2206                           ;main.c: 73: for (r = 0; r <= 3; r++){
  2207  005C  01B5               	clrf	_r
  2208  005D  3004               	movlw	4
  2209  005E  0235               	subwf	_r,w
  2210  005F  1803               	btfsc	3,0
  2211  0060  289E               	goto	l2322
  2212  0061                     l2306:	
  2213                           
  2214                           ;main.c: 74: for (c = 0; c <= 4; c++){
  2215  0061  01AE               	clrf	_c
  2216  0062  3005               	movlw	5
  2217  0063  022E               	subwf	_c,w
  2218  0064  1803               	btfsc	3,0
  2219  0065  2896               	goto	l2318
  2220  0066                     l2312:	
  2221                           
  2222                           ;main.c: 75: mazeGrid[r][c] = mazeGridDefault[r][c];
  2223  0066  3005               	movlw	5
  2224  0067  00CA               	movwf	??_PathTo
  2225  0068  084A               	movf	??_PathTo,w
  2226  0069  00C5               	movwf	___bmul@multiplicand
  2227  006A  0835               	movf	_r,w
  2228  006B  120A  118A  264C  120A  118A  	fcall	___bmul
  2229  0070  3EC0               	addlw	(low (_mazeGridDefault| (0+256)))& (0+255)
  2230  0071  1283               	bcf	3,5	;RP0=0, select bank0
  2231  0072  1303               	bcf	3,6	;RP1=0, select bank0
  2232  0073  072E               	addwf	_c,w
  2233  0074  00CB               	movwf	??_PathTo+1
  2234  0075  084B               	movf	??_PathTo+1,w
  2235  0076  0084               	movwf	4
  2236  0077  1783               	bsf	3,7	;select IRP bank3
  2237  0078  0800               	movf	0,w
  2238  0079  00CC               	movwf	??_PathTo+2
  2239  007A  3005               	movlw	5
  2240  007B  00CD               	movwf	??_PathTo+3
  2241  007C  084D               	movf	??_PathTo+3,w
  2242  007D  00C5               	movwf	___bmul@multiplicand
  2243  007E  0835               	movf	_r,w
  2244  007F  120A  118A  264C  120A  118A  	fcall	___bmul
  2245  0084  3ED0               	addlw	(low (_mazeGrid| 0))& (0+255)
  2246  0085  1283               	bcf	3,5	;RP0=0, select bank0
  2247  0086  1303               	bcf	3,6	;RP1=0, select bank0
  2248  0087  072E               	addwf	_c,w
  2249  0088  00CE               	movwf	??_PathTo+4
  2250  0089  084E               	movf	??_PathTo+4,w
  2251  008A  0084               	movwf	4
  2252  008B  084C               	movf	??_PathTo+2,w
  2253  008C  1383               	bcf	3,7	;select IRP bank1
  2254  008D  0080               	movwf	0
  2255  008E  3001               	movlw	1
  2256  008F  00CA               	movwf	??_PathTo
  2257  0090  084A               	movf	??_PathTo,w
  2258  0091  07AE               	addwf	_c,f
  2259  0092  3005               	movlw	5
  2260  0093  022E               	subwf	_c,w
  2261  0094  1C03               	skipc
  2262  0095  2866               	goto	l2312
  2263  0096                     l2318:	
  2264  0096  3001               	movlw	1
  2265  0097  00CA               	movwf	??_PathTo
  2266  0098  084A               	movf	??_PathTo,w
  2267  0099  07B5               	addwf	_r,f
  2268  009A  3004               	movlw	4
  2269  009B  0235               	subwf	_r,w
  2270  009C  1C03               	skipc
  2271  009D  2861               	goto	l2306
  2272  009E                     l2322:	
  2273                           
  2274                           ;main.c: 76: }
  2275                           ;main.c: 77: }
  2276                           ;main.c: 79: x_origin = x;
  2277  009E  0866               	movf	_x,w	;volatile
  2278  009F  00CA               	movwf	??_PathTo
  2279  00A0  084A               	movf	??_PathTo,w
  2280  00A1  00BC               	movwf	_x_origin
  2281                           
  2282                           ;main.c: 80: y_origin = y;
  2283  00A2  0840               	movf	_y,w	;volatile
  2284  00A3  00CA               	movwf	??_PathTo
  2285  00A4  084A               	movf	??_PathTo,w
  2286  00A5  00C1               	movwf	_y_origin
  2287                           
  2288                           ;main.c: 81: x_path = x;
  2289  00A6  0866               	movf	_x,w	;volatile
  2290  00A7  00CA               	movwf	??_PathTo
  2291  00A8  084A               	movf	??_PathTo,w
  2292  00A9  00BD               	movwf	_x_path
  2293                           
  2294                           ;main.c: 82: y_path = y;
  2295  00AA  0840               	movf	_y,w	;volatile
  2296  00AB  00CA               	movwf	??_PathTo
  2297  00AC  084A               	movf	??_PathTo,w
  2298  00AD  00C2               	movwf	_y_path
  2299                           
  2300                           ;main.c: 83: orientation_path = orientation;
  2301  00AE  0832               	movf	_orientation,w	;volatile
  2302  00AF  00CA               	movwf	??_PathTo
  2303  00B0  084A               	movf	??_PathTo,w
  2304  00B1  00B3               	movwf	_orientation_path
  2305                           
  2306                           ;main.c: 84: pathCount = 0;
  2307  00B2  01B4               	clrf	_pathCount
  2308                           
  2309                           ;main.c: 86: for (int loop = 0; loop <= 1000; loop++){
  2310  00B3  01DC               	clrf	PathTo@loop
  2311  00B4  01DD               	clrf	PathTo@loop+1
  2312  00B5                     L12:	
  2313  00B5  085D               	movf	PathTo@loop+1,w
  2314  00B6  3A80               	xorlw	128
  2315  00B7  00FF               	movwf	127
  2316  00B8  3083               	movlw	131
  2317  00B9  027F               	subwf	127,w
  2318  00BA  1D03               	skipz
  2319  00BB  28BE               	goto	u1565
  2320  00BC  30E9               	movlw	233
  2321  00BD  025C               	subwf	PathTo@loop,w
  2322  00BE                     u1565:	
  2323  00BE  1803               	btfsc	3,0
  2324  00BF  0008               	return
  2325                           
  2326                           ;main.c: 89: path[1][pathCount] = x_path;
  2327  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  2328  00C1  1303               	bcf	3,6	;RP1=0, select bank0
  2329  00C2  083D               	movf	_x_path,w
  2330  00C3  00CA               	movwf	??_PathTo
  2331  00C4  0834               	movf	_pathCount,w
  2332  00C5  3EB0               	addlw	(low ((_path| 0+16)))& (0+255)
  2333  00C6  0084               	movwf	4
  2334  00C7  084A               	movf	??_PathTo,w
  2335  00C8  1383               	bcf	3,7	;select IRP bank1
  2336  00C9  0080               	movwf	0
  2337                           
  2338                           ;main.c: 90: path[2][pathCount] = y_path;
  2339  00CA  0842               	movf	_y_path,w
  2340  00CB  00CA               	movwf	??_PathTo
  2341  00CC  0834               	movf	_pathCount,w
  2342  00CD  3EC0               	addlw	(low ((_path| 0+32)))& (0+255)
  2343  00CE  0084               	movwf	4
  2344  00CF  084A               	movf	??_PathTo,w
  2345  00D0  0080               	movwf	0
  2346                           
  2347                           ;main.c: 92: if ((x_path == x_target) && (y_path == y_target)){
  2348  00D1  083D               	movf	_x_path,w
  2349  00D2  0651               	xorwf	PathTo@x_target,w
  2350  00D3  1D03               	skipz
  2351  00D4  299F               	goto	l2408
  2352  00D5  0842               	movf	_y_path,w
  2353  00D6  0649               	xorwf	PathTo@y_target,w
  2354  00D7  1D03               	skipz
  2355  00D8  299F               	goto	l2408
  2356                           
  2357                           ;main.c: 94: if(pathCount < pathCountShortest){
  2358  00D9  0865               	movf	_pathCountShortest,w
  2359  00DA  0234               	subwf	_pathCount,w
  2360  00DB  1803               	skipnc
  2361  00DC  2921               	goto	l2364
  2362                           
  2363                           ;main.c: 95: pathCountShortest = pathCount;
  2364  00DD  0834               	movf	_pathCount,w
  2365  00DE  00CA               	movwf	??_PathTo
  2366  00DF  084A               	movf	??_PathTo,w
  2367  00E0  00E5               	movwf	_pathCountShortest
  2368                           
  2369                           ;main.c: 96: for (r = 0; r <= 2; r++){
  2370  00E1  01B5               	clrf	_r
  2371  00E2  3003               	movlw	3
  2372  00E3  0235               	subwf	_r,w
  2373  00E4  1803               	btfsc	3,0
  2374  00E5  2921               	goto	l2364
  2375  00E6                     l2348:	
  2376                           
  2377                           ;main.c: 97: for (c = 0; c <= 15; c++){
  2378  00E6  01AE               	clrf	_c
  2379  00E7  3010               	movlw	16
  2380  00E8  022E               	subwf	_c,w
  2381  00E9  1803               	btfsc	3,0
  2382  00EA  2919               	goto	l2360
  2383  00EB                     l2354:	
  2384                           
  2385                           ;main.c: 98: shortest_path[r][c] = path[r][c];
  2386  00EB  0835               	movf	_r,w
  2387  00EC  00CA               	movwf	??_PathTo
  2388  00ED  3004               	movlw	4
  2389  00EE                     u1625:	
  2390  00EE  1003               	clrc
  2391  00EF  0DCA               	rlf	??_PathTo,f
  2392  00F0  3EFF               	addlw	-1
  2393  00F1  1D03               	skipz
  2394  00F2  28EE               	goto	u1625
  2395  00F3  30A0               	movlw	(low (_path| 0))& (0+255)
  2396  00F4  074A               	addwf	??_PathTo,w
  2397  00F5  00CB               	movwf	??_PathTo+1
  2398  00F6  082E               	movf	_c,w
  2399  00F7  074B               	addwf	??_PathTo+1,w
  2400  00F8  00CC               	movwf	??_PathTo+2
  2401  00F9  084C               	movf	??_PathTo+2,w
  2402  00FA  0084               	movwf	4
  2403  00FB  1383               	bcf	3,7	;select IRP bank1
  2404  00FC  0800               	movf	0,w
  2405  00FD  00CD               	movwf	??_PathTo+3
  2406  00FE  0835               	movf	_r,w
  2407  00FF  00CE               	movwf	??_PathTo+4
  2408  0100  3004               	movlw	4
  2409  0101                     u1635:	
  2410  0101  1003               	clrc
  2411  0102  0DCE               	rlf	??_PathTo+4,f
  2412  0103  3EFF               	addlw	-1
  2413  0104  1D03               	skipz
  2414  0105  2901               	goto	u1635
  2415  0106  3090               	movlw	(low (_shortest_path| (0+256)))& (0+255)
  2416  0107  074E               	addwf	??_PathTo+4,w
  2417  0108  00CF               	movwf	??_PathTo+5
  2418  0109  082E               	movf	_c,w
  2419  010A  074F               	addwf	??_PathTo+5,w
  2420  010B  00D0               	movwf	??_PathTo+6
  2421  010C  0850               	movf	??_PathTo+6,w
  2422  010D  0084               	movwf	4
  2423  010E  084D               	movf	??_PathTo+3,w
  2424  010F  1783               	bsf	3,7	;select IRP bank3
  2425  0110  0080               	movwf	0
  2426  0111  3001               	movlw	1
  2427  0112  00CA               	movwf	??_PathTo
  2428  0113  084A               	movf	??_PathTo,w
  2429  0114  07AE               	addwf	_c,f
  2430  0115  3010               	movlw	16
  2431  0116  022E               	subwf	_c,w
  2432  0117  1C03               	skipc
  2433  0118  28EB               	goto	l2354
  2434  0119                     l2360:	
  2435  0119  3001               	movlw	1
  2436  011A  00CA               	movwf	??_PathTo
  2437  011B  084A               	movf	??_PathTo,w
  2438  011C  07B5               	addwf	_r,f
  2439  011D  3003               	movlw	3
  2440  011E  0235               	subwf	_r,w
  2441  011F  1C03               	skipc
  2442  0120  28E6               	goto	l2348
  2443  0121                     l2364:	
  2444                           
  2445                           ;main.c: 99: }
  2446                           ;main.c: 100: }
  2447                           ;main.c: 101: }
  2448                           ;main.c: 103: char n = 15;
  2449  0121  300F               	movlw	15
  2450  0122  00CA               	movwf	??_PathTo
  2451  0123  084A               	movf	??_PathTo,w
  2452  0124  00DE               	movwf	PathTo@n
  2453                           
  2454                           ;main.c: 104: x_test = path[1][n];
  2455  0125  085E               	movf	PathTo@n,w
  2456  0126  3EB0               	addlw	(low ((_path| 0+16)))& (0+255)
  2457  0127  0084               	movwf	4
  2458  0128  1383               	bcf	3,7	;select IRP bank1
  2459  0129  0800               	movf	0,w
  2460  012A  00CA               	movwf	??_PathTo
  2461  012B  084A               	movf	??_PathTo,w
  2462  012C  00BF               	movwf	_x_test
  2463                           
  2464                           ;main.c: 105: y_test = path[2][n];
  2465  012D  085E               	movf	PathTo@n,w
  2466  012E  3EC0               	addlw	(low ((_path| 0+32)))& (0+255)
  2467  012F  0084               	movwf	4
  2468  0130  0800               	movf	0,w
  2469  0131  00CA               	movwf	??_PathTo
  2470  0132  084A               	movf	??_PathTo,w
  2471  0133  00C4               	movwf	_y_test
  2472                           
  2473                           ;main.c: 107: for (n = 15; mazeGrid[y_test][x_test] < 32; n--){
  2474  0134  300F               	movlw	15
  2475  0135  00CA               	movwf	??_PathTo
  2476  0136  084A               	movf	??_PathTo,w
  2477  0137  00DE               	movwf	PathTo@n
  2478  0138                     l2374:	
  2479  0138  3005               	movlw	5
  2480  0139  00CA               	movwf	??_PathTo
  2481  013A  084A               	movf	??_PathTo,w
  2482  013B  00C5               	movwf	___bmul@multiplicand
  2483  013C  0844               	movf	_y_test,w
  2484  013D  120A  118A  264C  120A  118A  	fcall	___bmul
  2485  0142  3ED0               	addlw	(low (_mazeGrid| 0))& (0+255)
  2486  0143  1283               	bcf	3,5	;RP0=0, select bank0
  2487  0144  1303               	bcf	3,6	;RP1=0, select bank0
  2488  0145  073F               	addwf	_x_test,w
  2489  0146  00CB               	movwf	??_PathTo+1
  2490  0147  084B               	movf	??_PathTo+1,w
  2491  0148  0084               	movwf	4
  2492  0149  3020               	movlw	32
  2493  014A  1383               	bcf	3,7	;select IRP bank1
  2494  014B  0200               	subwf	0,w
  2495  014C  1803               	btfsc	3,0
  2496  014D  2984               	goto	l2402
  2497                           
  2498                           ;main.c: 108: x_test = path[1][n];
  2499  014E  085E               	movf	PathTo@n,w
  2500  014F  3EB0               	addlw	(low ((_path| 0+16)))& (0+255)
  2501  0150  0084               	movwf	4
  2502  0151  0800               	movf	0,w
  2503  0152  00CA               	movwf	??_PathTo
  2504  0153  084A               	movf	??_PathTo,w
  2505  0154  00BF               	movwf	_x_test
  2506                           
  2507                           ;main.c: 109: y_test = path[2][n];
  2508  0155  085E               	movf	PathTo@n,w
  2509  0156  3EC0               	addlw	(low ((_path| 0+32)))& (0+255)
  2510  0157  0084               	movwf	4
  2511  0158  0800               	movf	0,w
  2512  0159  00CA               	movwf	??_PathTo
  2513  015A  084A               	movf	??_PathTo,w
  2514  015B  00C4               	movwf	_y_test
  2515  015C  3001               	movlw	1
  2516  015D  02DE               	subwf	PathTo@n,f
  2517  015E  2938               	goto	l2374
  2518  015F                     l160:	
  2519                           ;main.c: 114: case 0: mazeGrid[y_test][x_test] = 0b00000100 || mazeGrid[y_test][x_test];
  2520                           
  2521                           ;main.c: 110: }
  2522                           ;main.c: 113: switch(intersection_Orientation){
  2523                           
  2524  015F  01D3               	clrf	_PathTo$132
  2525  0160  0AD3               	incf	_PathTo$132,f
  2526  0161  0853               	movf	_PathTo$132,w
  2527  0162  296E               	goto	L10
  2528  0163                     l164:	
  2529                           ;main.c: 116: case 1: mazeGrid[y_test][x_test] = 0b00000010 || mazeGrid[y_test][x_test];
  2530                           
  2531                           ;main.c: 115: break;
  2532                           
  2533  0163  01D4               	clrf	_PathTo$133
  2534  0164  0AD4               	incf	_PathTo$133,f
  2535  0165  0854               	movf	_PathTo$133,w
  2536  0166  296E               	goto	L10
  2537  0167                     l167:	
  2538                           ;main.c: 118: case 2: mazeGrid[y_test][x_test] = 0b00000001 || mazeGrid[y_test][x_test];
  2539                           
  2540                           ;main.c: 117: break;
  2541                           
  2542  0167  01D5               	clrf	_PathTo$134
  2543  0168  0AD5               	incf	_PathTo$134,f
  2544  0169  0855               	movf	_PathTo$134,w
  2545  016A  296E               	goto	L10
  2546  016B                     l170:	
  2547                           ;main.c: 120: case 3: mazeGrid[y_test][x_test] = 0b00001000 || mazeGrid[y_test][x_test];
  2548                           
  2549                           ;main.c: 119: break;
  2550                           
  2551  016B  01D6               	clrf	_PathTo$135
  2552  016C  0AD6               	incf	_PathTo$135,f
  2553  016D  0856               	movf	_PathTo$135,w
  2554  016E                     L10:	
  2555  016E  00CA               	movwf	??_PathTo
  2556  016F  3005               	movlw	5
  2557  0170  00CB               	movwf	??_PathTo+1
  2558  0171  084B               	movf	??_PathTo+1,w
  2559  0172  00C5               	movwf	___bmul@multiplicand
  2560  0173  0844               	movf	_y_test,w
  2561  0174  120A  118A  264C  120A  118A  	fcall	___bmul
  2562  0179  3ED0               	addlw	(low (_mazeGrid| 0))& (0+255)
  2563  017A  1283               	bcf	3,5	;RP0=0, select bank0
  2564  017B  1303               	bcf	3,6	;RP1=0, select bank0
  2565  017C  073F               	addwf	_x_test,w
  2566  017D  00CC               	movwf	??_PathTo+2
  2567  017E  084C               	movf	??_PathTo+2,w
  2568  017F  0084               	movwf	4
  2569  0180  084A               	movf	??_PathTo,w
  2570  0181  1383               	bcf	3,7	;select IRP bank1
  2571  0182  0080               	movwf	0
  2572                           
  2573                           ;main.c: 122: }
  2574                           
  2575                           ;main.c: 121: break;
  2576  0183  2992               	goto	l2404
  2577  0184                     l2402:	
  2578  0184  0830               	movf	_intersection_Orientation,w
  2579                           
  2580                           ; Switch size 1, requested type "space"
  2581                           ; Number of cases is 4, Range of values is 0 to 3
  2582                           ; switch strategies available:
  2583                           ; Name         Instructions Cycles
  2584                           ; simple_byte           13     7 (average)
  2585                           ; direct_byte           20     8 (fixed)
  2586                           ; jumptable            260     6 (fixed)
  2587                           ;	Chosen strategy is simple_byte
  2588  0185  3A00               	xorlw	0	; case 0
  2589  0186  1903               	skipnz
  2590  0187  295F               	goto	l160
  2591  0188  3A01               	xorlw	1	; case 1
  2592  0189  1903               	skipnz
  2593  018A  2963               	goto	l164
  2594  018B  3A03               	xorlw	3	; case 2
  2595  018C  1903               	skipnz
  2596  018D  2967               	goto	l167
  2597  018E  3A01               	xorlw	1	; case 3
  2598  018F  1903               	skipnz
  2599  0190  296B               	goto	l170
  2600  0191  2992               	goto	l2404
  2601  0192                     l2404:	
  2602                           
  2603                           ;main.c: 125: x_path = x_origin;
  2604  0192  083C               	movf	_x_origin,w
  2605  0193  00CA               	movwf	??_PathTo
  2606  0194  084A               	movf	??_PathTo,w
  2607  0195  00BD               	movwf	_x_path
  2608                           
  2609                           ;main.c: 126: y_path = y_origin;
  2610  0196  0841               	movf	_y_origin,w
  2611  0197  00CA               	movwf	??_PathTo
  2612  0198  084A               	movf	??_PathTo,w
  2613  0199  00C2               	movwf	_y_path
  2614                           
  2615                           ;main.c: 127: orientation_path = orientation;
  2616  019A  0832               	movf	_orientation,w	;volatile
  2617  019B  00CA               	movwf	??_PathTo
  2618  019C  084A               	movf	??_PathTo,w
  2619  019D  00B3               	movwf	_orientation_path
  2620                           
  2621                           ;main.c: 128: pathCount = 0;
  2622  019E  01B4               	clrf	_pathCount
  2623  019F                     l2408:	
  2624                           
  2625                           ;main.c: 129: }
  2626                           ;main.c: 132: left = squareWalls[1][((mazeGrid[y_path][x_path]) + 1)];
  2627  019F  3005               	movlw	5
  2628  01A0  00CA               	movwf	??_PathTo
  2629  01A1  084A               	movf	??_PathTo,w
  2630  01A2  00C5               	movwf	___bmul@multiplicand
  2631  01A3  0842               	movf	_y_path,w
  2632  01A4  120A  118A  264C  120A  118A  	fcall	___bmul
  2633  01A9  3ED0               	addlw	(low (_mazeGrid| 0))& (0+255)
  2634  01AA  1283               	bcf	3,5	;RP0=0, select bank0
  2635  01AB  1303               	bcf	3,6	;RP1=0, select bank0
  2636  01AC  073D               	addwf	_x_path,w
  2637  01AD  00CB               	movwf	??_PathTo+1
  2638  01AE  084B               	movf	??_PathTo+1,w
  2639  01AF  0084               	movwf	4
  2640  01B0  1383               	bcf	3,7	;select IRP bank1
  2641  01B1  0800               	movf	0,w
  2642  01B2  3E01               	addlw	1
  2643  01B3  3E20               	addlw	(low ((_squareWalls| (0+256)+16)))& (0+255)
  2644  01B4  0084               	movwf	4
  2645  01B5  1783               	bsf	3,7	;select IRP bank2
  2646  01B6  0800               	movf	0,w
  2647  01B7  00CC               	movwf	??_PathTo+2
  2648  01B8  084C               	movf	??_PathTo+2,w
  2649  01B9  00B1               	movwf	_left
  2650                           
  2651                           ;main.c: 133: right = squareWalls[2][((mazeGrid[y_path][x_path]) + 1)];
  2652  01BA  3005               	movlw	5
  2653  01BB  00CA               	movwf	??_PathTo
  2654  01BC  084A               	movf	??_PathTo,w
  2655  01BD  00C5               	movwf	___bmul@multiplicand
  2656  01BE  0842               	movf	_y_path,w
  2657  01BF  120A  118A  264C  120A  118A  	fcall	___bmul
  2658  01C4  3ED0               	addlw	(low (_mazeGrid| 0))& (0+255)
  2659  01C5  1283               	bcf	3,5	;RP0=0, select bank0
  2660  01C6  1303               	bcf	3,6	;RP1=0, select bank0
  2661  01C7  073D               	addwf	_x_path,w
  2662  01C8  00CB               	movwf	??_PathTo+1
  2663  01C9  084B               	movf	??_PathTo+1,w
  2664  01CA  0084               	movwf	4
  2665  01CB  1383               	bcf	3,7	;select IRP bank1
  2666  01CC  0800               	movf	0,w
  2667  01CD  3E01               	addlw	1
  2668  01CE  3E30               	addlw	(low ((_squareWalls| (0+256)+32)))& (0+255)
  2669  01CF  0084               	movwf	4
  2670  01D0  1783               	bsf	3,7	;select IRP bank2
  2671  01D1  0800               	movf	0,w
  2672  01D2  00CC               	movwf	??_PathTo+2
  2673  01D3  084C               	movf	??_PathTo+2,w
  2674  01D4  00B8               	movwf	_right
  2675                           
  2676                           ;main.c: 134: up = squareWalls[3][((mazeGrid[y_path][x_path]) + 1)];
  2677  01D5  3005               	movlw	5
  2678  01D6  00CA               	movwf	??_PathTo
  2679  01D7  084A               	movf	??_PathTo,w
  2680  01D8  00C5               	movwf	___bmul@multiplicand
  2681  01D9  0842               	movf	_y_path,w
  2682  01DA  120A  118A  264C  120A  118A  	fcall	___bmul
  2683  01DF  3ED0               	addlw	(low (_mazeGrid| 0))& (0+255)
  2684  01E0  1283               	bcf	3,5	;RP0=0, select bank0
  2685  01E1  1303               	bcf	3,6	;RP1=0, select bank0
  2686  01E2  073D               	addwf	_x_path,w
  2687  01E3  00CB               	movwf	??_PathTo+1
  2688  01E4  084B               	movf	??_PathTo+1,w
  2689  01E5  0084               	movwf	4
  2690  01E6  1383               	bcf	3,7	;select IRP bank1
  2691  01E7  0800               	movf	0,w
  2692  01E8  3E01               	addlw	1
  2693  01E9  3E40               	addlw	(low ((_squareWalls| (0+256)+48)))& (0+255)
  2694  01EA  0084               	movwf	4
  2695  01EB  1783               	bsf	3,7	;select IRP bank2
  2696  01EC  0800               	movf	0,w
  2697  01ED  00CC               	movwf	??_PathTo+2
  2698  01EE  084C               	movf	??_PathTo+2,w
  2699  01EF  00BB               	movwf	_up
  2700                           
  2701                           ;main.c: 135: down = squareWalls[4][((mazeGrid[y_path][x_path]) + 1)];
  2702  01F0  3005               	movlw	5
  2703  01F1  00CA               	movwf	??_PathTo
  2704  01F2  084A               	movf	??_PathTo,w
  2705  01F3  00C5               	movwf	___bmul@multiplicand
  2706  01F4  0842               	movf	_y_path,w
  2707  01F5  120A  118A  264C  120A  118A  	fcall	___bmul
  2708  01FA  3ED0               	addlw	(low (_mazeGrid| 0))& (0+255)
  2709  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  2710  01FC  1303               	bcf	3,6	;RP1=0, select bank0
  2711  01FD  073D               	addwf	_x_path,w
  2712  01FE  00CB               	movwf	??_PathTo+1
  2713  01FF  084B               	movf	??_PathTo+1,w
  2714  0200  0084               	movwf	4
  2715  0201  1383               	bcf	3,7	;select IRP bank1
  2716  0202  0800               	movf	0,w
  2717  0203  3E01               	addlw	1
  2718  0204  3E50               	addlw	(low ((_squareWalls| (0+256)+64)))& (0+255)
  2719  0205  0084               	movwf	4
  2720  0206  1783               	bsf	3,7	;select IRP bank2
  2721  0207  0800               	movf	0,w
  2722  0208  00CC               	movwf	??_PathTo+2
  2723  0209  084C               	movf	??_PathTo+2,w
  2724  020A  00AF               	movwf	_down
  2725                           
  2726                           ;main.c: 138: switch(orientation_path){
  2727  020B  2A18               	goto	l2418
  2728  020C                     l174:	
  2729                           ;main.c: 139: case 0: down = 1;
  2730                           
  2731  020C  01AF               	clrf	_down
  2732  020D  0AAF               	incf	_down,f
  2733                           
  2734                           ;main.c: 140: break;
  2735  020E  2A26               	goto	l2420
  2736  020F                     l176:	
  2737                           ;main.c: 141: case 1: left = 1;
  2738                           
  2739  020F  01B1               	clrf	_left
  2740  0210  0AB1               	incf	_left,f
  2741                           
  2742                           ;main.c: 142: break;
  2743  0211  2A26               	goto	l2420
  2744  0212                     l177:	
  2745                           ;main.c: 143: case 2: up = 1;
  2746                           
  2747  0212  01BB               	clrf	_up
  2748  0213  0ABB               	incf	_up,f
  2749                           
  2750                           ;main.c: 144: break;
  2751  0214  2A26               	goto	l2420
  2752  0215                     l178:	
  2753                           ;main.c: 145: case 3: right = 1;
  2754                           
  2755  0215  01B8               	clrf	_right
  2756  0216  0AB8               	incf	_right,f
  2757                           
  2758                           ;main.c: 147: }
  2759                           
  2760                           ;main.c: 146: break;
  2761  0217  2A26               	goto	l2420
  2762  0218                     l2418:	
  2763  0218  0833               	movf	_orientation_path,w
  2764                           
  2765                           ; Switch size 1, requested type "space"
  2766                           ; Number of cases is 4, Range of values is 0 to 3
  2767                           ; switch strategies available:
  2768                           ; Name         Instructions Cycles
  2769                           ; simple_byte           13     7 (average)
  2770                           ; direct_byte           20     8 (fixed)
  2771                           ; jumptable            260     6 (fixed)
  2772                           ;	Chosen strategy is simple_byte
  2773  0219  3A00               	xorlw	0	; case 0
  2774  021A  1903               	skipnz
  2775  021B  2A0C               	goto	l174
  2776  021C  3A01               	xorlw	1	; case 1
  2777  021D  1903               	skipnz
  2778  021E  2A0F               	goto	l176
  2779  021F  3A03               	xorlw	3	; case 2
  2780  0220  1903               	skipnz
  2781  0221  2A12               	goto	l177
  2782  0222  3A01               	xorlw	1	; case 3
  2783  0223  1903               	skipnz
  2784  0224  2A15               	goto	l178
  2785  0225  2A26               	goto	l2420
  2786  0226                     l2420:	
  2787                           
  2788                           ;main.c: 150: char sum = (left + up + down + right);
  2789  0226  083B               	movf	_up,w
  2790  0227  0731               	addwf	_left,w
  2791  0228  00CA               	movwf	??_PathTo
  2792  0229  082F               	movf	_down,w
  2793  022A  074A               	addwf	??_PathTo,w
  2794  022B  00CB               	movwf	??_PathTo+1
  2795  022C  0838               	movf	_right,w
  2796  022D  074B               	addwf	??_PathTo+1,w
  2797  022E  00CC               	movwf	??_PathTo+2
  2798  022F  084C               	movf	??_PathTo+2,w
  2799  0230  00D2               	movwf	PathTo@sum
  2800                           
  2801                           ;main.c: 151: if(sum <= 2)
  2802  0231  3003               	movlw	3
  2803  0232  0252               	subwf	PathTo@sum,w
  2804  0233  1803               	skipnc
  2805  0234  2A4D               	goto	l2432
  2806                           
  2807                           ;main.c: 152: (mazeGrid[y_path][x_path]) = ((0b00100000) || (mazeGrid[y_path][x_path]));
  2808  0235  01D7               	clrf	_PathTo$137
  2809  0236  0AD7               	incf	_PathTo$137,f
  2810  0237  0857               	movf	_PathTo$137,w
  2811  0238  00CA               	movwf	??_PathTo
  2812  0239  3005               	movlw	5
  2813  023A  00CB               	movwf	??_PathTo+1
  2814  023B  084B               	movf	??_PathTo+1,w
  2815  023C  00C5               	movwf	___bmul@multiplicand
  2816  023D  0842               	movf	_y_path,w
  2817  023E  120A  118A  264C  120A  118A  	fcall	___bmul
  2818  0243  3ED0               	addlw	(low (_mazeGrid| 0))& (0+255)
  2819  0244  1283               	bcf	3,5	;RP0=0, select bank0
  2820  0245  1303               	bcf	3,6	;RP1=0, select bank0
  2821  0246  073D               	addwf	_x_path,w
  2822  0247  00CC               	movwf	??_PathTo+2
  2823  0248  084C               	movf	??_PathTo+2,w
  2824  0249  0084               	movwf	4
  2825  024A  084A               	movf	??_PathTo,w
  2826  024B  1383               	bcf	3,7	;select IRP bank1
  2827  024C  0080               	movwf	0
  2828  024D                     l2432:	
  2829                           
  2830                           ;main.c: 156: if(left == 0){
  2831  024D  0831               	movf	_left,w
  2832  024E  1D03               	btfss	3,2
  2833  024F  2A6E               	goto	l2442
  2834                           
  2835                           ;main.c: 157: if(mazeGrid[y_path][x_path] >= 32)
  2836  0250  3005               	movlw	5
  2837  0251  00CA               	movwf	??_PathTo
  2838  0252  084A               	movf	??_PathTo,w
  2839  0253  00C5               	movwf	___bmul@multiplicand
  2840  0254  0842               	movf	_y_path,w
  2841  0255  120A  118A  264C  120A  118A  	fcall	___bmul
  2842  025A  3ED0               	addlw	(low (_mazeGrid| 0))& (0+255)
  2843  025B  1283               	bcf	3,5	;RP0=0, select bank0
  2844  025C  1303               	bcf	3,6	;RP1=0, select bank0
  2845  025D  073D               	addwf	_x_path,w
  2846  025E  00CB               	movwf	??_PathTo+1
  2847  025F  084B               	movf	??_PathTo+1,w
  2848  0260  0084               	movwf	4
  2849  0261  3020               	movlw	32
  2850  0262  1383               	bcf	3,7	;select IRP bank1
  2851  0263  0200               	subwf	0,w
  2852  0264  1C03               	skipc
  2853  0265  2A6A               	goto	l2438
  2854                           
  2855                           ;main.c: 158: intersection_Orientation = 3;
  2856  0266  3003               	movlw	3
  2857  0267  00CA               	movwf	??_PathTo
  2858  0268  084A               	movf	??_PathTo,w
  2859  0269  00B0               	movwf	_intersection_Orientation
  2860  026A                     l2438:	
  2861                           
  2862                           ;main.c: 159: x_path--;
  2863  026A  3001               	movlw	1
  2864  026B  02BD               	subwf	_x_path,f
  2865                           
  2866                           ;main.c: 160: orientation_path = 3;
  2867  026C  3003               	movlw	3
  2868  026D  2ACF               	goto	L13
  2869  026E                     l2442:	
  2870                           ;main.c: 162: }
  2871                           
  2872                           ;main.c: 161: pathCount++;
  2873                           
  2874                           
  2875                           ;main.c: 163: else if(up == 0){
  2876  026E  083B               	movf	_up,w
  2877  026F  1D03               	btfss	3,2
  2878  0270  2A8B               	goto	l2452
  2879                           
  2880                           ;main.c: 164: if(mazeGrid[y_path][x_path] >= 32)
  2881  0271  3005               	movlw	5
  2882  0272  00CA               	movwf	??_PathTo
  2883  0273  084A               	movf	??_PathTo,w
  2884  0274  00C5               	movwf	___bmul@multiplicand
  2885  0275  0842               	movf	_y_path,w
  2886  0276  120A  118A  264C  120A  118A  	fcall	___bmul
  2887  027B  3ED0               	addlw	(low (_mazeGrid| 0))& (0+255)
  2888  027C  1283               	bcf	3,5	;RP0=0, select bank0
  2889  027D  1303               	bcf	3,6	;RP1=0, select bank0
  2890  027E  073D               	addwf	_x_path,w
  2891  027F  00CB               	movwf	??_PathTo+1
  2892  0280  084B               	movf	??_PathTo+1,w
  2893  0281  0084               	movwf	4
  2894  0282  3020               	movlw	32
  2895  0283  1383               	bcf	3,7	;select IRP bank1
  2896  0284  0200               	subwf	0,w
  2897  0285  1803               	btfsc	3,0
  2898                           
  2899                           ;main.c: 165: intersection_Orientation = 0;
  2900  0286  01B0               	clrf	_intersection_Orientation
  2901                           
  2902                           ;main.c: 166: y_path--;
  2903  0287  3001               	movlw	1
  2904  0288  02C2               	subwf	_y_path,f
  2905                           
  2906                           ;main.c: 167: orientation_path = 0;
  2907  0289  01B3               	clrf	_orientation_path
  2908  028A  2AD2               	goto	L6
  2909  028B                     l2452:	
  2910                           ;main.c: 169: }
  2911                           
  2912                           ;main.c: 168: pathCount++;
  2913                           
  2914                           
  2915                           ;main.c: 170: else if(right == 0){
  2916  028B  0838               	movf	_right,w
  2917  028C  1D03               	btfss	3,2
  2918  028D  2AAD               	goto	l2462
  2919                           
  2920                           ;main.c: 171: if(mazeGrid[y_path][x_path] >= 32)
  2921  028E  3005               	movlw	5
  2922  028F  00CA               	movwf	??_PathTo
  2923  0290  084A               	movf	??_PathTo,w
  2924  0291  00C5               	movwf	___bmul@multiplicand
  2925  0292  0842               	movf	_y_path,w
  2926  0293  120A  118A  264C  120A  118A  	fcall	___bmul
  2927  0298  3ED0               	addlw	(low (_mazeGrid| 0))& (0+255)
  2928  0299  1283               	bcf	3,5	;RP0=0, select bank0
  2929  029A  1303               	bcf	3,6	;RP1=0, select bank0
  2930  029B  073D               	addwf	_x_path,w
  2931  029C  00CB               	movwf	??_PathTo+1
  2932  029D  084B               	movf	??_PathTo+1,w
  2933  029E  0084               	movwf	4
  2934  029F  3020               	movlw	32
  2935  02A0  1383               	bcf	3,7	;select IRP bank1
  2936  02A1  0200               	subwf	0,w
  2937  02A2  1C03               	skipc
  2938  02A3  2AA6               	goto	l2458
  2939                           
  2940                           ;main.c: 172: intersection_Orientation = 1;
  2941  02A4  01B0               	clrf	_intersection_Orientation
  2942  02A5  0AB0               	incf	_intersection_Orientation,f
  2943  02A6                     l2458:	
  2944                           
  2945                           ;main.c: 173: x_path++;
  2946  02A6  3001               	movlw	1
  2947  02A7  00CA               	movwf	??_PathTo
  2948  02A8  084A               	movf	??_PathTo,w
  2949  02A9  07BD               	addwf	_x_path,f
  2950                           
  2951                           ;main.c: 174: orientation_path = 1;
  2952  02AA  01B3               	clrf	_orientation_path
  2953  02AB  0AB3               	incf	_orientation_path,f
  2954  02AC  2AD2               	goto	L6
  2955  02AD                     l2462:	
  2956                           ;main.c: 176: }
  2957                           
  2958                           ;main.c: 175: pathCount++;
  2959                           
  2960                           
  2961                           ;main.c: 177: else if(down == 0){
  2962  02AD  082F               	movf	_down,w
  2963  02AE  1D03               	btfss	3,2
  2964  02AF  2AD6               	goto	l2472
  2965                           
  2966                           ;main.c: 178: if(mazeGrid[y_path][x_path] >= 32)
  2967  02B0  3005               	movlw	5
  2968  02B1  00CA               	movwf	??_PathTo
  2969  02B2  084A               	movf	??_PathTo,w
  2970  02B3  00C5               	movwf	___bmul@multiplicand
  2971  02B4  0842               	movf	_y_path,w
  2972  02B5  120A  118A  264C  120A  118A  	fcall	___bmul
  2973  02BA  3ED0               	addlw	(low (_mazeGrid| 0))& (0+255)
  2974  02BB  1283               	bcf	3,5	;RP0=0, select bank0
  2975  02BC  1303               	bcf	3,6	;RP1=0, select bank0
  2976  02BD  073D               	addwf	_x_path,w
  2977  02BE  00CB               	movwf	??_PathTo+1
  2978  02BF  084B               	movf	??_PathTo+1,w
  2979  02C0  0084               	movwf	4
  2980  02C1  3020               	movlw	32
  2981  02C2  1383               	bcf	3,7	;select IRP bank1
  2982  02C3  0200               	subwf	0,w
  2983  02C4  1C03               	skipc
  2984  02C5  2ACA               	goto	l2468
  2985                           
  2986                           ;main.c: 179: intersection_Orientation = 2;
  2987  02C6  3002               	movlw	2
  2988  02C7  00CA               	movwf	??_PathTo
  2989  02C8  084A               	movf	??_PathTo,w
  2990  02C9  00B0               	movwf	_intersection_Orientation
  2991  02CA                     l2468:	
  2992                           
  2993                           ;main.c: 180: y_path++;
  2994  02CA  3001               	movlw	1
  2995  02CB  00CA               	movwf	??_PathTo
  2996  02CC  084A               	movf	??_PathTo,w
  2997  02CD  07C2               	addwf	_y_path,f
  2998                           
  2999                           ;main.c: 181: orientation_path = 2;
  3000  02CE  3002               	movlw	2
  3001  02CF                     L13:	
  3002  02CF  00CA               	movwf	??_PathTo
  3003  02D0  084A               	movf	??_PathTo,w
  3004  02D1  00B3               	movwf	_orientation_path
  3005  02D2                     L6:	
  3006                           
  3007                           ;main.c: 182: pathCount++;
  3008  02D2  3001               	movlw	1
  3009  02D3  00CA               	movwf	??_PathTo
  3010  02D4  084A               	movf	??_PathTo,w
  3011  02D5  07B4               	addwf	_pathCount,f
  3012  02D6                     l2472:	
  3013                           
  3014                           ;main.c: 183: }
  3015                           ;main.c: 186: if((left == up == right == down == 1) || (pathCount > 50)){
  3016  02D6  0831               	movf	_left,w
  3017  02D7  063B               	xorwf	_up,w
  3018  02D8  1D03               	btfss	3,2
  3019  02D9  2ADC               	goto	u1810
  3020  02DA  3001               	movlw	1
  3021  02DB  2ADD               	goto	u1820
  3022  02DC                     u1810:	
  3023  02DC  3000               	movlw	0
  3024  02DD                     u1820:	
  3025  02DD  0638               	xorwf	_right,w
  3026  02DE  1D03               	btfss	3,2
  3027  02DF  2AE2               	goto	u1830
  3028  02E0  3001               	movlw	1
  3029  02E1  2AE3               	goto	u1840
  3030  02E2                     u1830:	
  3031  02E2  3000               	movlw	0
  3032  02E3                     u1840:	
  3033  02E3  062F               	xorwf	_down,w
  3034  02E4  1903               	skipnz
  3035  02E5  2AEA               	goto	l2476
  3036  02E6  3033               	movlw	51
  3037  02E7  0234               	subwf	_pathCount,w
  3038  02E8  1C03               	skipc
  3039  02E9  2B68               	goto	l2520
  3040  02EA                     l2476:	
  3041                           
  3042                           ;main.c: 188: char n = 15;
  3043  02EA  300F               	movlw	15
  3044  02EB  00CA               	movwf	??_PathTo
  3045  02EC  084A               	movf	??_PathTo,w
  3046  02ED  00DF               	movwf	PathTo@n_138
  3047                           
  3048                           ;main.c: 189: x_test = path[1][n];
  3049  02EE  085F               	movf	PathTo@n_138,w
  3050  02EF  3EB0               	addlw	(low ((_path| 0+16)))& (0+255)
  3051  02F0  0084               	movwf	4
  3052  02F1  1383               	bcf	3,7	;select IRP bank1
  3053  02F2  0800               	movf	0,w
  3054  02F3  00CA               	movwf	??_PathTo
  3055  02F4  084A               	movf	??_PathTo,w
  3056  02F5  00BF               	movwf	_x_test
  3057                           
  3058                           ;main.c: 190: y_test = path[2][n];
  3059  02F6  085F               	movf	PathTo@n_138,w
  3060  02F7  3EC0               	addlw	(low ((_path| 0+32)))& (0+255)
  3061  02F8  0084               	movwf	4
  3062  02F9  0800               	movf	0,w
  3063  02FA  00CA               	movwf	??_PathTo
  3064  02FB  084A               	movf	??_PathTo,w
  3065  02FC  00C4               	movwf	_y_test
  3066                           
  3067                           ;main.c: 192: for (n = 15; mazeGrid[y_test][x_test] < 32; n--){
  3068  02FD  300F               	movlw	15
  3069  02FE  00CA               	movwf	??_PathTo
  3070  02FF  084A               	movf	??_PathTo,w
  3071  0300  00DF               	movwf	PathTo@n_138
  3072  0301                     l2486:	
  3073  0301  3005               	movlw	5
  3074  0302  00CA               	movwf	??_PathTo
  3075  0303  084A               	movf	??_PathTo,w
  3076  0304  00C5               	movwf	___bmul@multiplicand
  3077  0305  0844               	movf	_y_test,w
  3078  0306  120A  118A  264C  120A  118A  	fcall	___bmul
  3079  030B  3ED0               	addlw	(low (_mazeGrid| 0))& (0+255)
  3080  030C  1283               	bcf	3,5	;RP0=0, select bank0
  3081  030D  1303               	bcf	3,6	;RP1=0, select bank0
  3082  030E  073F               	addwf	_x_test,w
  3083  030F  00CB               	movwf	??_PathTo+1
  3084  0310  084B               	movf	??_PathTo+1,w
  3085  0311  0084               	movwf	4
  3086  0312  3020               	movlw	32
  3087  0313  1383               	bcf	3,7	;select IRP bank1
  3088  0314  0200               	subwf	0,w
  3089  0315  1803               	btfsc	3,0
  3090  0316  2B4D               	goto	l2514
  3091                           
  3092                           ;main.c: 193: x_test = path[1][n];
  3093  0317  085F               	movf	PathTo@n_138,w
  3094  0318  3EB0               	addlw	(low ((_path| 0+16)))& (0+255)
  3095  0319  0084               	movwf	4
  3096  031A  0800               	movf	0,w
  3097  031B  00CA               	movwf	??_PathTo
  3098  031C  084A               	movf	??_PathTo,w
  3099  031D  00BF               	movwf	_x_test
  3100                           
  3101                           ;main.c: 194: y_test = path[2][n];
  3102  031E  085F               	movf	PathTo@n_138,w
  3103  031F  3EC0               	addlw	(low ((_path| 0+32)))& (0+255)
  3104  0320  0084               	movwf	4
  3105  0321  0800               	movf	0,w
  3106  0322  00CA               	movwf	??_PathTo
  3107  0323  084A               	movf	??_PathTo,w
  3108  0324  00C4               	movwf	_y_test
  3109  0325  3001               	movlw	1
  3110  0326  02DF               	subwf	PathTo@n_138,f
  3111  0327  2B01               	goto	l2486
  3112  0328                     l200:	
  3113                           ;main.c: 199: case 0: mazeGrid[y_test][x_test] = 0b00000100 || mazeGrid[y_test][x_test];
  3114                           
  3115                           ;main.c: 195: }
  3116                           ;main.c: 198: switch(intersection_Orientation){
  3117                           
  3118  0328  01D8               	clrf	_PathTo$139
  3119  0329  0AD8               	incf	_PathTo$139,f
  3120  032A  0858               	movf	_PathTo$139,w
  3121  032B  2B37               	goto	L11
  3122  032C                     l204:	
  3123                           ;main.c: 201: case 1: mazeGrid[y_test][x_test] = 0b00000010 || mazeGrid[y_test][x_test];
  3124                           
  3125                           ;main.c: 200: break;
  3126                           
  3127  032C  01D9               	clrf	_PathTo$140
  3128  032D  0AD9               	incf	_PathTo$140,f
  3129  032E  0859               	movf	_PathTo$140,w
  3130  032F  2B37               	goto	L11
  3131  0330                     l207:	
  3132                           ;main.c: 203: case 2: mazeGrid[y_test][x_test] = 0b00000001 || mazeGrid[y_test][x_test];
  3133                           
  3134                           ;main.c: 202: break;
  3135                           
  3136  0330  01DA               	clrf	_PathTo$141
  3137  0331  0ADA               	incf	_PathTo$141,f
  3138  0332  085A               	movf	_PathTo$141,w
  3139  0333  2B37               	goto	L11
  3140  0334                     l210:	
  3141                           ;main.c: 205: case 3: mazeGrid[y_test][x_test] = 0b00001000 || mazeGrid[y_test][x_test];
  3142                           
  3143                           ;main.c: 204: break;
  3144                           
  3145  0334  01DB               	clrf	_PathTo$142
  3146  0335  0ADB               	incf	_PathTo$142,f
  3147  0336  085B               	movf	_PathTo$142,w
  3148  0337                     L11:	
  3149  0337  00CA               	movwf	??_PathTo
  3150  0338  3005               	movlw	5
  3151  0339  00CB               	movwf	??_PathTo+1
  3152  033A  084B               	movf	??_PathTo+1,w
  3153  033B  00C5               	movwf	___bmul@multiplicand
  3154  033C  0844               	movf	_y_test,w
  3155  033D  120A  118A  264C  120A  118A  	fcall	___bmul
  3156  0342  3ED0               	addlw	(low (_mazeGrid| 0))& (0+255)
  3157  0343  1283               	bcf	3,5	;RP0=0, select bank0
  3158  0344  1303               	bcf	3,6	;RP1=0, select bank0
  3159  0345  073F               	addwf	_x_test,w
  3160  0346  00CC               	movwf	??_PathTo+2
  3161  0347  084C               	movf	??_PathTo+2,w
  3162  0348  0084               	movwf	4
  3163  0349  084A               	movf	??_PathTo,w
  3164  034A  1383               	bcf	3,7	;select IRP bank1
  3165  034B  0080               	movwf	0
  3166                           
  3167                           ;main.c: 207: }
  3168                           
  3169                           ;main.c: 206: break;
  3170  034C  2B5B               	goto	l2516
  3171  034D                     l2514:	
  3172  034D  0830               	movf	_intersection_Orientation,w
  3173                           
  3174                           ; Switch size 1, requested type "space"
  3175                           ; Number of cases is 4, Range of values is 0 to 3
  3176                           ; switch strategies available:
  3177                           ; Name         Instructions Cycles
  3178                           ; simple_byte           13     7 (average)
  3179                           ; direct_byte           20     8 (fixed)
  3180                           ; jumptable            260     6 (fixed)
  3181                           ;	Chosen strategy is simple_byte
  3182  034E  3A00               	xorlw	0	; case 0
  3183  034F  1903               	skipnz
  3184  0350  2B28               	goto	l200
  3185  0351  3A01               	xorlw	1	; case 1
  3186  0352  1903               	skipnz
  3187  0353  2B2C               	goto	l204
  3188  0354  3A03               	xorlw	3	; case 2
  3189  0355  1903               	skipnz
  3190  0356  2B30               	goto	l207
  3191  0357  3A01               	xorlw	1	; case 3
  3192  0358  1903               	skipnz
  3193  0359  2B34               	goto	l210
  3194  035A  2B5B               	goto	l2516
  3195  035B                     l2516:	
  3196                           
  3197                           ;main.c: 210: x_path = x_origin;
  3198  035B  083C               	movf	_x_origin,w
  3199  035C  00CA               	movwf	??_PathTo
  3200  035D  084A               	movf	??_PathTo,w
  3201  035E  00BD               	movwf	_x_path
  3202                           
  3203                           ;main.c: 211: y_path = y_origin;
  3204  035F  0841               	movf	_y_origin,w
  3205  0360  00CA               	movwf	??_PathTo
  3206  0361  084A               	movf	??_PathTo,w
  3207  0362  00C2               	movwf	_y_path
  3208                           
  3209                           ;main.c: 212: orientation_path = orientation;
  3210  0363  0832               	movf	_orientation,w	;volatile
  3211  0364  00CA               	movwf	??_PathTo
  3212  0365  084A               	movf	??_PathTo,w
  3213  0366  00B3               	movwf	_orientation_path
  3214                           
  3215                           ;main.c: 213: pathCount = 0;
  3216  0367  01B4               	clrf	_pathCount
  3217  0368                     l2520:	
  3218  0368  3001               	movlw	1
  3219  0369  07DC               	addwf	PathTo@loop,f
  3220  036A  1803               	skipnc
  3221  036B  0ADD               	incf	PathTo@loop+1,f
  3222  036C  3000               	movlw	0
  3223  036D  07DD               	addwf	PathTo@loop+1,f
  3224  036E  28B5               	goto	L12
  3225  036F                     __end_of_PathTo:	
  3226                           
  3227                           	psect	text11
  3228  064C                     __ptext11:	
  3229 ;; *************** function ___bmul *****************
  3230 ;; Defined at:
  3231 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
  3232 ;; Parameters:    Size  Location     Type
  3233 ;;  multiplier      1    wreg     unsigned char 
  3234 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3235 ;; Auto vars:     Size  Location     Type
  3236 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3237 ;;  product         1    2[BANK0 ] unsigned char 
  3238 ;; Return value:  Size  Location     Type
  3239 ;;                  1    wreg      unsigned char 
  3240 ;; Registers used:
  3241 ;;		wreg, status,2, status,0
  3242 ;; Tracked objects:
  3243 ;;		On entry : 0/0
  3244 ;;		On exit  : 0/0
  3245 ;;		Unchanged: 0/0
  3246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3247 ;;      Params:         0       1       0       0       0
  3248 ;;      Locals:         0       2       0       0       0
  3249 ;;      Temps:          0       1       0       0       0
  3250 ;;      Totals:         0       4       0       0       0
  3251 ;;Total ram usage:        4 bytes
  3252 ;; Hardware stack levels used:    1
  3253 ;; Hardware stack levels required when called:    1
  3254 ;; This function calls:
  3255 ;;		Nothing
  3256 ;; This function is called by:
  3257 ;;		_PathTo
  3258 ;; This function uses a non-reentrant model
  3259 ;;
  3260                           
  3261                           
  3262                           ;psect for function ___bmul
  3263  064C                     ___bmul:	
  3264                           
  3265                           ;incstack = 0
  3266                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3267                           ;___bmul@multiplier stored from wreg
  3268  064C  1283               	bcf	3,5	;RP0=0, select bank0
  3269  064D  1303               	bcf	3,6	;RP1=0, select bank0
  3270  064E  00C8               	movwf	___bmul@multiplier
  3271  064F  01C7               	clrf	___bmul@product
  3272  0650                     l2288:	
  3273  0650  1C48               	btfss	___bmul@multiplier,0
  3274  0651  2E56               	goto	l2292
  3275  0652  0845               	movf	___bmul@multiplicand,w
  3276  0653  00C6               	movwf	??___bmul
  3277  0654  0846               	movf	??___bmul,w
  3278  0655  07C7               	addwf	___bmul@product,f
  3279  0656                     l2292:	
  3280  0656  1003               	clrc
  3281  0657  0DC5               	rlf	___bmul@multiplicand,f
  3282  0658  1003               	clrc
  3283  0659  0CC8               	rrf	___bmul@multiplier,f
  3284  065A  0848               	movf	___bmul@multiplier,w
  3285  065B  1D03               	btfss	3,2
  3286  065C  2E50               	goto	l2288
  3287  065D  0847               	movf	___bmul@product,w
  3288  065E  0008               	return
  3289  065F                     __end_of___bmul:	
  3290                           
  3291                           	psect	text12
  3292  05DA                     __ptext12:	
  3293 ;; *************** function _isr *****************
  3294 ;; Defined at:
  3295 ;;		line 222 in file "main.c"
  3296 ;; Parameters:    Size  Location     Type
  3297 ;;		None
  3298 ;; Auto vars:     Size  Location     Type
  3299 ;;		None
  3300 ;; Return value:  Size  Location     Type
  3301 ;;                  1    wreg      void 
  3302 ;; Registers used:
  3303 ;;		wreg, status,2, status,0
  3304 ;; Tracked objects:
  3305 ;;		On entry : 0/0
  3306 ;;		On exit  : 0/0
  3307 ;;		Unchanged: 0/0
  3308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3309 ;;      Params:         0       0       0       0       0
  3310 ;;      Locals:         0       0       0       0       0
  3311 ;;      Temps:          5       0       0       0       0
  3312 ;;      Totals:         5       0       0       0       0
  3313 ;;Total ram usage:        5 bytes
  3314 ;; Hardware stack levels used:    1
  3315 ;; This function calls:
  3316 ;;		Nothing
  3317 ;; This function is called by:
  3318 ;;		Interrupt level 1
  3319 ;; This function uses a non-reentrant model
  3320 ;;
  3321                           
  3322                           
  3323                           ;psect for function _isr
  3324  05DA                     _isr:	
  3325                           
  3326                           ;main.c: 223: if(TMR0IF){
  3327  05DA  1D0B               	btfss	11,2	;volatile
  3328  05DB  2DEB               	goto	i1l218
  3329                           
  3330                           ;main.c: 224: TMR0IF = 0;
  3331  05DC  110B               	bcf	11,2	;volatile
  3332                           
  3333                           ;main.c: 225: TMR0 = 100;
  3334  05DD  3064               	movlw	100
  3335  05DE  0081               	movwf	1	;volatile
  3336                           
  3337                           ;main.c: 226: time_count++;
  3338  05DF  3001               	movlw	1
  3339  05E0  07A8               	addwf	_time_count,f	;volatile
  3340  05E1  1803               	skipnc
  3341  05E2  0AA9               	incf	_time_count+1,f	;volatile
  3342  05E3  3000               	movlw	0
  3343  05E4  07A9               	addwf	_time_count+1,f	;volatile
  3344                           
  3345                           ;main.c: 228: if (!RB0 == 1)
  3346  05E5  1806               	btfsc	6,0	;volatile
  3347  05E6  2DEB               	goto	i1l218
  3348                           
  3349                           ;main.c: 229: PB8Counter++;
  3350  05E7  3001               	movlw	1
  3351  05E8  00F5               	movwf	??_isr
  3352  05E9  0875               	movf	??_isr,w
  3353  05EA  07AC               	addwf	_PB8Counter,f
  3354  05EB                     i1l218:	
  3355  05EB  0879               	movf	??_isr+4,w
  3356  05EC  00FF               	movwf	127
  3357  05ED  0878               	movf	??_isr+3,w
  3358  05EE  008A               	movwf	10
  3359  05EF  0877               	movf	??_isr+2,w
  3360  05F0  0084               	movwf	4
  3361  05F1  0E76               	swapf	(??_isr+1)^(0+-128),w
  3362  05F2  0083               	movwf	3
  3363  05F3  0EFE               	swapf	126,f
  3364  05F4  0E7E               	swapf	126,w
  3365  05F5  0009               	retfie
  3366  05F6                     __end_of_isr:	
  3367  007E                     btemp	set	126	;btemp
  3368  007E                     wtemp	set	126
  3369  007E                     wtemp0	set	126
  3370  0080                     wtemp1	set	128
  3371  0082                     wtemp2	set	130
  3372  0084                     wtemp3	set	132
  3373  0086                     wtemp4	set	134
  3374  0088                     wtemp5	set	136
  3375  007F                     wtemp6	set	127
  3376  007E                     ttemp	set	126
  3377  007E                     ttemp0	set	126
  3378  0081                     ttemp1	set	129
  3379  0084                     ttemp2	set	132
  3380  0087                     ttemp3	set	135
  3381  007F                     ttemp4	set	127
  3382  007E                     ltemp	set	126
  3383  007E                     ltemp0	set	126
  3384  0082                     ltemp1	set	130
  3385  0086                     ltemp2	set	134
  3386  0080                     ltemp3	set	128
  3387                           
  3388                           	psect	intentry
  3389  0004                     __pintentry:	
  3390                           ;incstack = 0
  3391                           ; Regs used in _isr: [wreg+status,2+status,0]
  3392                           
  3393  0004                     interrupt_function:	
  3394  007E                     saved_w	set	btemp
  3395  0004  00FE               	movwf	btemp
  3396  0005  0E03               	swapf	3,w
  3397  0006  00F6               	movwf	??_isr+1
  3398  0007  0804               	movf	4,w
  3399  0008  00F7               	movwf	??_isr+2
  3400  0009  080A               	movf	10,w
  3401  000A  00F8               	movwf	??_isr+3
  3402  000B  1283               	bcf	3,5	;RP0=0, select bank0
  3403  000C  1303               	bcf	3,6	;RP1=0, select bank0
  3404  000D  087F               	movf	btemp+1,w
  3405  000E  00F9               	movwf	??_isr+4
  3406  000F  120A  118A  2DDA   	ljmp	_isr


Data Sizes:
    Strings     2
    Constant    0
    Data        218
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     32      71
    BANK1            80      0      68
    BANK3            96      0      68
    BANK2            96      0      80

Pointer List with Targets:

    lcdWriteString@s	PTR unsigned char  size(1) Largest target is 2
		 -> STR_2(CODE[2]), STR_1(CODE[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_PathTo
    _setupLCD->_lcdWriteControl
    _lcdWriteToDigitBCD->_lcdWriteData
    _lcdWriteString->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl
    _PathTo->___bmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    3293
                                             27 BANK0      5     5      0
                             _PathTo
                       _lcdSetCursor
                       _lcdWriteData
                     _lcdWriteString
                 _lcdWriteToDigitBCD
                           _ser_init
                           _setupADC
                           _setupLCD
                           _setupSPI
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      31
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdWriteToDigitBCD                                  12    10      2     761
                                              3 BANK0     12    10      2
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (1) _lcdWriteString                                       2     2      0     156
                                              3 BANK0      2     2      0
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (2) _lcdWriteData                                         3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcdSetCursor                                         1     1      0      65
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _PathTo                                              23    22      1    2014
                                              4 BANK0     23    22      1
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1    1186
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PathTo
     ___bmul
   _lcdSetCursor
     _lcdWriteControl
   _lcdWriteData
   _lcdWriteString
     _lcdWriteData
   _lcdWriteToDigitBCD
     _lcdWriteData
   _ser_init
   _setupADC
   _setupLCD
     _lcdWriteControl
   _setupSPI

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      44       9       70.8%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      50      11       83.3%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      44       7       85.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     20      47       5       88.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     129      12        0.0%
ABS                  0      0     129       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Tue Sep 27 18:56:15 2016

                             _c 002E                               _r 0035                               _x 0066  
                             _y 0040                               pc 0002                  ___bmul@product 0047  
                   __CFG_CP$OFF 0000                              _GO 00FA                              _up 003B  
                            fsr 0004                             l200 0328                             l210 0334  
                           l204 032C                             l207 0330                             l160 015F  
                           l170 016B                             l164 0163                             l228 041F  
                           l174 020C                             l167 0167                             l176 020F  
                           l177 0212                             l178 0215                             l383 049F  
                           _GIE 005F                             _RB0 0030                             _RE0 0048  
                           _RE1 0049                             _RE2 004A                    __CFG_CPD$OFF 0000  
                           _isr 05DA                             fsr0 0004                             indf 0000  
                  __CFG_FOSC$HS 0000                  ??_lcdWriteData 0045                    __CFG_LVP$OFF 0000  
                          l2312 0066                            l2402 0184                            l2322 009E  
                          l2306 0061                            l2420 0226                            l2404 0192  
                          l2318 0096                            l2520 0368                            l2432 024D  
                          l2360 0119                            l2408 019F                            l2600 045C  
                          l2514 034D                            l2442 026E                            l2418 0218  
                          l2354 00EB                            l2610 0480                            l2292 0656  
                          l2516 035B                            l2452 028B                            l2348 00E6  
                          l2364 0121                            l2604 046A                            l2462 02AD  
                          l2438 026A                            l2374 0138                            l2606 0472  
                          l2288 0650                            l2472 02D6                            l2616 0492  
                          l2458 02A6                            l2476 02EA                            l2468 02CA  
                          l2486 0301                            l2646 03C6                            l2638 03A6  
                          l2576 05BD                            l2592 0430                            l2672 038C  
                          l2594 0446                            l2666 0407                            l2658 03E7  
                          l2598 0454                            ?_isr 0075                     _squareWalls 0110  
                          STR_1 068E                            STR_2 068E                            u2057 03B7  
                          u2067 03F8                            u2077 0622                            u2087 0647  
                          u1625 00EE                            u2097 0633                            u1810 02DC  
                          u1635 0101                            u1820 02DD                            u1565 00BE  
                          u1830 02E2                            u1840 02E3                            _PEIE 005E  
                          _RCIF 0065                            _TMR0 0001                            _TRMT 04C1  
                  __CFG_WRT$OFF 0000                            _radH 0036                            _radL 0037  
                          _main 036F                            _left 0031                            _down 002F  
                          _path 00A0                            btemp 007E                            ltemp 007E  
                          start 0012                            ttemp 007E                            wtemp 007E  
             ___bmul@multiplier 0048                           ??_isr 0075                      PathTo@loop 005C  
                         ?_main 0075                   __CFG_WDTE$OFF 0000                           i1l218 05EB  
                         _RCREG 001A                           _RCSTA 0018                           _SPBRG 0099  
                         _PORTA 0005                           _PORTC 0007                           _PORTD 0008  
                         _PORTE 0009                           _TRISA 0085                           _TRISB 0086  
                         _TRISC 0087                           _TRISD 0088                           _TRISE 0089  
                         _SSPIF 0063                           _TXREG 0019                           _TXSTA 0098  
                         _angle 0070      __end_of_lcdWriteToDigitBCD 04B9                           _right 0038  
                         main@a 0062                           main@n 0063                  __CFG_BOREN$OFF 0000  
                         pclath 000A                           ltemp0 007E                           ltemp1 0082  
                         ltemp2 0086                           ltemp3 0080                      _LeftSpeedH 002A  
                    _LeftSpeedL 002B                           ttemp0 007E                           ttemp1 0081  
                         ttemp2 0084                           ttemp3 0087                           ttemp4 007F  
                         status 0003                           wtemp0 007E                           wtemp1 0080  
                         wtemp2 0082                           wtemp3 0084                           wtemp4 0086  
                         wtemp5 0088                           wtemp6 007F                 __initialization 0015  
                    _PathTo$140 0059                      _PathTo$132 0053                      _PathTo$141 005A  
                    _PathTo$133 0054                      _PathTo$142 005B                      _PathTo$134 0055  
                    _PathTo$135 0056                      _PathTo$137 0057                      _PathTo$139 0058  
                  __end_of_main 0422                     PathTo@n_138 005F        __size_of_lcdWriteControl 0014  
                        ??_main 0060            __end_of_lcdSetCursor 0688                ??_lcdWriteString 0048  
                        _ADCON0 001F                          _ADCON1 009F                          _ADRESH 001E  
                        _ADRESL 009E                          _TMR0IE 005D                          _TMR0IF 005A  
                        _SSPCON 0014                          _SSPBUF 0013                  __CFG_PWRTE$OFF 0000  
                        _PathTo 0059                          _adcRAW 0024                          ___bmul 064C  
          __end_of_lcdWriteData 064C                 lcdWriteString@s 0049                          _speedH 0039  
                        _speedL 003A                          _x_path 003D                          _y_path 0042  
                        _x_test 003F                          _y_test 0044                __end_of_ser_init 067F  
              __end_of_setupADC 0625                __end_of_setupLCD 05BA                __end_of_setupSPI 060F  
                        saved_w 007E         __end_of__initialization 0055             ___bmul@multiplicand 0045  
                __pcstackCOMMON 0075                    __pidataBANK0 0698                    __pidataBANK1 0509  
                  __pidataBANK2 04B9                    __pidataBANK3 054D                  PathTo@x_target 0051  
                PathTo@y_target 0049               ??_lcdWriteControl 0045                      __pbssBANK0 0020  
             _pathCountShortest 0065             lcdSetCursor@address 0048                         ?_PathTo 0049  
                    __pmaintext 036F                         ?___bmul 0045                      __pintentry 0004  
         __size_of_lcdSetCursor 0009                     _RightSpeedH 0072                     _RightSpeedL 002D  
                       _SSPSTAT 0094                      __stringtab 0688                         PathTo@n 005E  
         __size_of_lcdWriteData 0013                    _lcdSetCursor 067F              _lcdWriteToDigitBCD 0422  
                     ?_ser_init 0075                 __size_of_PathTo 0316                       ?_setupADC 0075  
                     ?_setupLCD 0075                       ?_setupSPI 0075                 __size_of___bmul 0013  
           ?_lcdWriteToDigitBCD 0048                         __ptext1 05F6                         __ptext2 0591  
                       __ptext3 060F                         __ptext4 0670                         __ptext5 0422  
                       __ptext6 05BA                         __ptext7 0639                         __ptext8 067F  
                       __ptext9 0625                    __size_of_isr 001C                         _lowByte 0073  
              _orientation_path 0033                         clrloop0 0691                    _lcdWriteData 0639  
          end_of_initialization 0055            ??_lcdWriteToDigitBCD 004A                      ??_ser_init 0045  
                    ??_setupADC 0045                      ??_setupLCD 0048                      ??_setupSPI 0045  
                    _time_count 0028                  __end_of_PathTo 036F                       PathTo@sum 0052  
                __end_of___bmul 065F                 _lcdWriteControl 0625        _intersection_Orientation 0030  
           start_initialization 0015                     __end_of_isr 05F6         __size_of_lcdWriteString 0020  
                      ??_PathTo 004A                        ??___bmul 0046                      init_fetch0 065F  
                   __pdataBANK0 0065                     __pdataBANK1 00A0                     __pdataBANK2 0110  
                   __pdataBANK3 0190                     __pbssCOMMON 0070                       ___latbits 0002  
                 __pcstackBANK0 0045         __end_of_lcdWriteControl 0639               __size_of_ser_init 000F  
             __size_of_setupADC 0016               __size_of_setupLCD 0029               __size_of_setupSPI 0019  
                     __pstrings 0688                       _pathCount 0034         lcdWriteControl@databyte 0047  
             interrupt_function 0004                       clear_ram0 0690                   _VelocityRight 0022  
                   __stringbase 068D                       main@n_150 0064            lcdWriteData@databyte 0047  
   __size_of_lcdWriteToDigitBCD 0097                  _lcdWriteString 05BA                ?_lcdWriteControl 0075  
               _mazeGridDefault 01C0              __end_of__stringtab 068E  lcdWriteToDigitBCD@TenThouDigit 0050  
                      __ptext10 0059                        __ptext11 064C                        __ptext12 05DA  
                      _highByte 0074          __end_of_lcdWriteString 05DA                        _distance 0026  
                      _mazeGrid 00D0                   __size_of_main 00B3                        _ser_init 0670  
                      _setupADC 060F                        _setupLCD 0591                        _setupSPI 05F6  
   lcdWriteToDigitBCD@HunsDigit 004C                        _x_target 003E                      _PB8Counter 002C  
                      _x_origin 003C                        _y_target 0043                        _y_origin 0041  
                  _VelocityLeft 0020     lcdWriteToDigitBCD@OnesDigit 0052     lcdWriteToDigitBCD@TensDigit 004A  
   lcdWriteToDigitBCD@ThouDigit 004E                        init_ram0 0663                 ?_lcdWriteString 0075  
                      intlevel1 0000                   ?_lcdSetCursor 0075                       stringcode 0688  
                   _orientation 0032                      _OPTION_REG 0081                   _shortest_path 0190  
                      stringdir 0688                        stringtab 0688                   ?_lcdWriteData 0075  
        lcdWriteToDigitBCD@data 0048                  ??_lcdSetCursor 0048  
