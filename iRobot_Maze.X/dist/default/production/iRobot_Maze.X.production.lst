

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Fri Oct 07 13:14:02 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	intentry,global,class=CODE,delta=2
    45                           	dabs	1,0x7E,2
    46  0000                     	;# 
    47  0001                     	;# 
    48  0002                     	;# 
    49  0003                     	;# 
    50  0004                     	;# 
    51  0005                     	;# 
    52  0006                     	;# 
    53  0007                     	;# 
    54  0008                     	;# 
    55  0009                     	;# 
    56  000A                     	;# 
    57  000B                     	;# 
    58  000C                     	;# 
    59  000D                     	;# 
    60  000E                     	;# 
    61  000E                     	;# 
    62  000F                     	;# 
    63  0010                     	;# 
    64  0011                     	;# 
    65  0012                     	;# 
    66  0013                     	;# 
    67  0014                     	;# 
    68  0015                     	;# 
    69  0015                     	;# 
    70  0016                     	;# 
    71  0017                     	;# 
    72  0018                     	;# 
    73  0019                     	;# 
    74  001A                     	;# 
    75  001B                     	;# 
    76  001B                     	;# 
    77  001C                     	;# 
    78  001D                     	;# 
    79  001E                     	;# 
    80  001F                     	;# 
    81  0081                     	;# 
    82  0085                     	;# 
    83  0086                     	;# 
    84  0087                     	;# 
    85  0088                     	;# 
    86  0089                     	;# 
    87  008C                     	;# 
    88  008D                     	;# 
    89  008E                     	;# 
    90  0091                     	;# 
    91  0092                     	;# 
    92  0093                     	;# 
    93  0094                     	;# 
    94  0098                     	;# 
    95  0099                     	;# 
    96  009C                     	;# 
    97  009D                     	;# 
    98  009E                     	;# 
    99  009F                     	;# 
   100  010C                     	;# 
   101  010D                     	;# 
   102  010E                     	;# 
   103  010F                     	;# 
   104  018C                     	;# 
   105  018D                     	;# 
   106  0000                     	;# 
   107  0001                     	;# 
   108  0002                     	;# 
   109  0003                     	;# 
   110  0004                     	;# 
   111  0005                     	;# 
   112  0006                     	;# 
   113  0007                     	;# 
   114  0008                     	;# 
   115  0009                     	;# 
   116  000A                     	;# 
   117  000B                     	;# 
   118  000C                     	;# 
   119  000D                     	;# 
   120  000E                     	;# 
   121  000E                     	;# 
   122  000F                     	;# 
   123  0010                     	;# 
   124  0011                     	;# 
   125  0012                     	;# 
   126  0013                     	;# 
   127  0014                     	;# 
   128  0015                     	;# 
   129  0015                     	;# 
   130  0016                     	;# 
   131  0017                     	;# 
   132  0018                     	;# 
   133  0019                     	;# 
   134  001A                     	;# 
   135  001B                     	;# 
   136  001B                     	;# 
   137  001C                     	;# 
   138  001D                     	;# 
   139  001E                     	;# 
   140  001F                     	;# 
   141  0081                     	;# 
   142  0085                     	;# 
   143  0086                     	;# 
   144  0087                     	;# 
   145  0088                     	;# 
   146  0089                     	;# 
   147  008C                     	;# 
   148  008D                     	;# 
   149  008E                     	;# 
   150  0091                     	;# 
   151  0092                     	;# 
   152  0093                     	;# 
   153  0094                     	;# 
   154  0098                     	;# 
   155  0099                     	;# 
   156  009C                     	;# 
   157  009D                     	;# 
   158  009E                     	;# 
   159  009F                     	;# 
   160  010C                     	;# 
   161  010D                     	;# 
   162  010E                     	;# 
   163  010F                     	;# 
   164  018C                     	;# 
   165  018D                     	;# 
   166  0000                     	;# 
   167  0001                     	;# 
   168  0002                     	;# 
   169  0003                     	;# 
   170  0004                     	;# 
   171  0005                     	;# 
   172  0006                     	;# 
   173  0007                     	;# 
   174  0008                     	;# 
   175  0009                     	;# 
   176  000A                     	;# 
   177  000B                     	;# 
   178  000C                     	;# 
   179  000D                     	;# 
   180  000E                     	;# 
   181  000E                     	;# 
   182  000F                     	;# 
   183  0010                     	;# 
   184  0011                     	;# 
   185  0012                     	;# 
   186  0013                     	;# 
   187  0014                     	;# 
   188  0015                     	;# 
   189  0015                     	;# 
   190  0016                     	;# 
   191  0017                     	;# 
   192  0018                     	;# 
   193  0019                     	;# 
   194  001A                     	;# 
   195  001B                     	;# 
   196  001B                     	;# 
   197  001C                     	;# 
   198  001D                     	;# 
   199  001E                     	;# 
   200  001F                     	;# 
   201  0081                     	;# 
   202  0085                     	;# 
   203  0086                     	;# 
   204  0087                     	;# 
   205  0088                     	;# 
   206  0089                     	;# 
   207  008C                     	;# 
   208  008D                     	;# 
   209  008E                     	;# 
   210  0091                     	;# 
   211  0092                     	;# 
   212  0093                     	;# 
   213  0094                     	;# 
   214  0098                     	;# 
   215  0099                     	;# 
   216  009C                     	;# 
   217  009D                     	;# 
   218  009E                     	;# 
   219  009F                     	;# 
   220  010C                     	;# 
   221  010D                     	;# 
   222  010E                     	;# 
   223  010F                     	;# 
   224  018C                     	;# 
   225  018D                     	;# 
   226  0000                     	;# 
   227  0001                     	;# 
   228  0002                     	;# 
   229  0003                     	;# 
   230  0004                     	;# 
   231  0005                     	;# 
   232  0006                     	;# 
   233  0007                     	;# 
   234  0008                     	;# 
   235  0009                     	;# 
   236  000A                     	;# 
   237  000B                     	;# 
   238  000C                     	;# 
   239  000D                     	;# 
   240  000E                     	;# 
   241  000E                     	;# 
   242  000F                     	;# 
   243  0010                     	;# 
   244  0011                     	;# 
   245  0012                     	;# 
   246  0013                     	;# 
   247  0014                     	;# 
   248  0015                     	;# 
   249  0015                     	;# 
   250  0016                     	;# 
   251  0017                     	;# 
   252  0018                     	;# 
   253  0019                     	;# 
   254  001A                     	;# 
   255  001B                     	;# 
   256  001B                     	;# 
   257  001C                     	;# 
   258  001D                     	;# 
   259  001E                     	;# 
   260  001F                     	;# 
   261  0081                     	;# 
   262  0085                     	;# 
   263  0086                     	;# 
   264  0087                     	;# 
   265  0088                     	;# 
   266  0089                     	;# 
   267  008C                     	;# 
   268  008D                     	;# 
   269  008E                     	;# 
   270  0091                     	;# 
   271  0092                     	;# 
   272  0093                     	;# 
   273  0094                     	;# 
   274  0098                     	;# 
   275  0099                     	;# 
   276  009C                     	;# 
   277  009D                     	;# 
   278  009E                     	;# 
   279  009F                     	;# 
   280  010C                     	;# 
   281  010D                     	;# 
   282  010E                     	;# 
   283  010F                     	;# 
   284  018C                     	;# 
   285  018D                     	;# 
   286  0000                     	;# 
   287  0001                     	;# 
   288  0002                     	;# 
   289  0003                     	;# 
   290  0004                     	;# 
   291  0005                     	;# 
   292  0006                     	;# 
   293  0007                     	;# 
   294  0008                     	;# 
   295  0009                     	;# 
   296  000A                     	;# 
   297  000B                     	;# 
   298  000C                     	;# 
   299  000D                     	;# 
   300  000E                     	;# 
   301  000E                     	;# 
   302  000F                     	;# 
   303  0010                     	;# 
   304  0011                     	;# 
   305  0012                     	;# 
   306  0013                     	;# 
   307  0014                     	;# 
   308  0015                     	;# 
   309  0015                     	;# 
   310  0016                     	;# 
   311  0017                     	;# 
   312  0018                     	;# 
   313  0019                     	;# 
   314  001A                     	;# 
   315  001B                     	;# 
   316  001B                     	;# 
   317  001C                     	;# 
   318  001D                     	;# 
   319  001E                     	;# 
   320  001F                     	;# 
   321  0081                     	;# 
   322  0085                     	;# 
   323  0086                     	;# 
   324  0087                     	;# 
   325  0088                     	;# 
   326  0089                     	;# 
   327  008C                     	;# 
   328  008D                     	;# 
   329  008E                     	;# 
   330  0091                     	;# 
   331  0092                     	;# 
   332  0093                     	;# 
   333  0094                     	;# 
   334  0098                     	;# 
   335  0099                     	;# 
   336  009C                     	;# 
   337  009D                     	;# 
   338  009E                     	;# 
   339  009F                     	;# 
   340  010C                     	;# 
   341  010D                     	;# 
   342  010E                     	;# 
   343  010F                     	;# 
   344  018C                     	;# 
   345  018D                     	;# 
   346  0000                     	;# 
   347  0001                     	;# 
   348  0002                     	;# 
   349  0003                     	;# 
   350  0004                     	;# 
   351  0005                     	;# 
   352  0006                     	;# 
   353  0007                     	;# 
   354  0008                     	;# 
   355  0009                     	;# 
   356  000A                     	;# 
   357  000B                     	;# 
   358  000C                     	;# 
   359  000D                     	;# 
   360  000E                     	;# 
   361  000E                     	;# 
   362  000F                     	;# 
   363  0010                     	;# 
   364  0011                     	;# 
   365  0012                     	;# 
   366  0013                     	;# 
   367  0014                     	;# 
   368  0015                     	;# 
   369  0015                     	;# 
   370  0016                     	;# 
   371  0017                     	;# 
   372  0018                     	;# 
   373  0019                     	;# 
   374  001A                     	;# 
   375  001B                     	;# 
   376  001B                     	;# 
   377  001C                     	;# 
   378  001D                     	;# 
   379  001E                     	;# 
   380  001F                     	;# 
   381  0081                     	;# 
   382  0085                     	;# 
   383  0086                     	;# 
   384  0087                     	;# 
   385  0088                     	;# 
   386  0089                     	;# 
   387  008C                     	;# 
   388  008D                     	;# 
   389  008E                     	;# 
   390  0091                     	;# 
   391  0092                     	;# 
   392  0093                     	;# 
   393  0094                     	;# 
   394  0098                     	;# 
   395  0099                     	;# 
   396  009C                     	;# 
   397  009D                     	;# 
   398  009E                     	;# 
   399  009F                     	;# 
   400  010C                     	;# 
   401  010D                     	;# 
   402  010E                     	;# 
   403  010F                     	;# 
   404  018C                     	;# 
   405  018D                     	;# 
   406                           
   407                           	psect	idataBANK0
   408  0978                     __pidataBANK0:	
   409                           
   410                           ;initializer for _CURRENT_SPEED_L
   411  0978  3496               	retlw	150
   412  0979  3400               	retlw	0
   413                           
   414                           ;initializer for _CURRENT_SPEED_R
   415  097A  3496               	retlw	150
   416  097B  3400               	retlw	0
   417                           
   418                           ;initializer for _orientation
   419  097C  3403               	retlw	3
   420                           
   421                           ;initializer for _pathCountShortest
   422  097D  3414               	retlw	20
   423                           
   424                           ;initializer for _x
   425  097E  3401               	retlw	1
   426                           
   427                           	psect	idataBANK1
   428  0AA8                     __pidataBANK1:	
   429                           
   430                           ;initializer for _mazeGrid
   431  0AA8  340C               	retlw	12
   432  0AA9  3407               	retlw	7
   433  0AAA  340E               	retlw	14
   434  0AAB  340D               	retlw	13
   435  0AAC  3406               	retlw	6
   436  0AAD  3409               	retlw	9
   437  0AAE  3405               	retlw	5
   438  0AAF  3400               	retlw	0
   439  0AB0  3405               	retlw	5
   440  0AB1  3402               	retlw	2
   441  0AB2  340C               	retlw	12
   442  0AB3  3406               	retlw	6
   443  0AB4  340A               	retlw	10
   444  0AB5  340E               	retlw	14
   445  0AB6  340A               	retlw	10
   446  0AB7  340B               	retlw	11
   447  0AB8  3409               	retlw	9
   448  0AB9  3401               	retlw	1
   449  0ABA  3401               	retlw	1
   450  0ABB  3403               	retlw	3
   451                           
   452                           ;initializer for _mazeGridDefault
   453  0ABC  340C               	retlw	12
   454  0ABD  3407               	retlw	7
   455  0ABE  340E               	retlw	14
   456  0ABF  340D               	retlw	13
   457  0AC0  3406               	retlw	6
   458  0AC1  3409               	retlw	9
   459  0AC2  3405               	retlw	5
   460  0AC3  3400               	retlw	0
   461  0AC4  3405               	retlw	5
   462  0AC5  3402               	retlw	2
   463  0AC6  340C               	retlw	12
   464  0AC7  3406               	retlw	6
   465  0AC8  340A               	retlw	10
   466  0AC9  340E               	retlw	14
   467  0ACA  340A               	retlw	10
   468  0ACB  340B               	retlw	11
   469  0ACC  3409               	retlw	9
   470  0ACD  3401               	retlw	1
   471  0ACE  3401               	retlw	1
   472  0ACF  3403               	retlw	3
   473                           
   474                           	psect	idataBANK3
   475  07BA                     __pidataBANK3:	
   476                           
   477                           ;initializer for _gridWalls
   478  07BA  3400               	retlw	0
   479  07BB  3400               	retlw	0
   480  07BC  3400               	retlw	0
   481  07BD  3400               	retlw	0
   482  07BE  3400               	retlw	0
   483  07BF  3400               	retlw	0
   484  07C0  3400               	retlw	0
   485  07C1  3400               	retlw	0
   486  07C2  3401               	retlw	1
   487  07C3  3401               	retlw	1
   488  07C4  3401               	retlw	1
   489  07C5  3401               	retlw	1
   490  07C6  3401               	retlw	1
   491  07C7  3401               	retlw	1
   492  07C8  3401               	retlw	1
   493  07C9  3401               	retlw	1
   494  07CA  3400               	retlw	0
   495  07CB  3400               	retlw	0
   496  07CC  3400               	retlw	0
   497  07CD  3400               	retlw	0
   498  07CE  3401               	retlw	1
   499  07CF  3401               	retlw	1
   500  07D0  3401               	retlw	1
   501  07D1  3401               	retlw	1
   502  07D2  3400               	retlw	0
   503  07D3  3400               	retlw	0
   504  07D4  3400               	retlw	0
   505  07D5  3400               	retlw	0
   506  07D6  3401               	retlw	1
   507  07D7  3401               	retlw	1
   508  07D8  3401               	retlw	1
   509  07D9  3401               	retlw	1
   510  07DA  3400               	retlw	0
   511  07DB  3400               	retlw	0
   512  07DC  3401               	retlw	1
   513  07DD  3401               	retlw	1
   514  07DE  3400               	retlw	0
   515  07DF  3400               	retlw	0
   516  07E0  3401               	retlw	1
   517  07E1  3401               	retlw	1
   518  07E2  3400               	retlw	0
   519  07E3  3400               	retlw	0
   520  07E4  3401               	retlw	1
   521  07E5  3401               	retlw	1
   522  07E6  3400               	retlw	0
   523  07E7  3400               	retlw	0
   524  07E8  3401               	retlw	1
   525  07E9  3401               	retlw	1
   526  07EA  3400               	retlw	0
   527  07EB  3401               	retlw	1
   528  07EC  3400               	retlw	0
   529  07ED  3401               	retlw	1
   530  07EE  3400               	retlw	0
   531  07EF  3401               	retlw	1
   532  07F0  3400               	retlw	0
   533  07F1  3401               	retlw	1
   534  07F2  3400               	retlw	0
   535  07F3  3401               	retlw	1
   536  07F4  3400               	retlw	0
   537  07F5  3401               	retlw	1
   538  07F6  3400               	retlw	0
   539  07F7  3401               	retlw	1
   540  07F8  3400               	retlw	0
   541  07F9  3401               	retlw	1
   542  001F                     _ADCON0	set	31
   543  0005                     _PORTA	set	5
   544  0006                     _PORTB	set	6
   545  0007                     _PORTC	set	7
   546  0008                     _PORTD	set	8
   547  0009                     _PORTE	set	9
   548  001A                     _RCREG	set	26
   549  0018                     _RCSTA	set	24
   550  0013                     _SSPBUF	set	19
   551  0014                     _SSPCON	set	20
   552  0001                     _TMR0	set	1
   553  0019                     _TXREG	set	25
   554  001E                     _ADRESH	set	30
   555  005F                     _GIE	set	95
   556  00FA                     _GO	set	250
   557  005E                     _PEIE	set	94
   558  0030                     _RB0	set	48
   559  0031                     _RB1	set	49
   560  0032                     _RB2	set	50
   561  0033                     _RB3	set	51
   562  003A                     _RC2	set	58
   563  0065                     _RCIF	set	101
   564  0048                     _RE0	set	72
   565  0049                     _RE1	set	73
   566  004A                     _RE2	set	74
   567  0063                     _SSPIF	set	99
   568  005D                     _TMR0IE	set	93
   569  005A                     _TMR0IF	set	90
   570  009F                     _ADCON1	set	159
   571  009E                     _ADRESL	set	158
   572  0081                     _OPTION_REG	set	129
   573  0099                     _SPBRG	set	153
   574  0094                     _SSPSTAT	set	148
   575  0085                     _TRISA	set	133
   576  0086                     _TRISB	set	134
   577  0087                     _TRISC	set	135
   578  0088                     _TRISD	set	136
   579  0089                     _TRISE	set	137
   580  0098                     _TXSTA	set	152
   581  04C1                     _TRMT	set	1217
   582                           
   583                           	psect	strings
   584  0800                     __pstrings:	
   585  0800                     stringtab:	
   586  0800                     __stringtab:	
   587  0800                     stringcode:	
   588                           ;	String table - string pointers are 1 byte each
   589                           
   590  0800                     stringdir:	
   591  0800  3008               	movlw	high stringdir
   592  0801  008A               	movwf	10
   593  0802  0804               	movf	4,w
   594  0803  0A84               	incf	4,f
   595  0804  0782               	addwf	2,f
   596  0805                     __stringbase:	
   597  0805  3400               	retlw	0
   598  0806                     __end_of__stringtab:	
   599  0806                     STR_1:	
   600  0806  3457               	retlw	87	;'W'
   601  0807  346F               	retlw	111	;'o'
   602  0808  3472               	retlw	114	;'r'
   603  0809  346B               	retlw	107	;'k'
   604  080A  3469               	retlw	105	;'i'
   605  080B  346E               	retlw	110	;'n'
   606  080C  3467               	retlw	103	;'g'
   607  080D  342E               	retlw	46	;'.'
   608  080E  342E               	retlw	46	;'.'
   609  080F  342E               	retlw	46	;'.'
   610  0810  3400               	retlw	0
   611                           
   612                           ; #config settings
   613  0000                     
   614                           	psect	cinit
   615  0015                     start_initialization:	
   616  0015                     __initialization:	
   617                           
   618                           ; Initialize objects allocated to BANK3
   619  0015  1783               	bsf	3,7	;select IRP bank2
   620  0016  30D0               	movlw	low (__pdataBANK3+64)
   621  0017  00FD               	movwf	btemp+-1
   622  0018  3007               	movlw	high __pidataBANK3
   623  0019  00FE               	movwf	btemp
   624  001A  30BA               	movlw	low __pidataBANK3
   625  001B  00FF               	movwf	btemp+1
   626  001C  3090               	movlw	low __pdataBANK3
   627  001D  0084               	movwf	4
   628  001E  120A  158A  21C8  120A  118A  	fcall	init_ram0
   629                           
   630                           ; Initialize objects allocated to BANK1
   631  0023  1383               	bcf	3,7	;select IRP bank0
   632  0024  30C8               	movlw	low (__pdataBANK1+40)
   633  0025  00FD               	movwf	btemp+-1
   634  0026  300A               	movlw	high __pidataBANK1
   635  0027  00FE               	movwf	btemp
   636  0028  30A8               	movlw	low __pidataBANK1
   637  0029  00FF               	movwf	btemp+1
   638  002A  30A0               	movlw	low __pdataBANK1
   639  002B  0084               	movwf	4
   640  002C  120A  158A  21C8  120A  118A  	fcall	init_ram0
   641                           
   642                           ; Initialize objects allocated to BANK0
   643  0031  306C               	movlw	low (__pdataBANK0+7)
   644  0032  00FD               	movwf	btemp+-1
   645  0033  3009               	movlw	high __pidataBANK0
   646  0034  00FE               	movwf	btemp
   647  0035  3078               	movlw	low __pidataBANK0
   648  0036  00FF               	movwf	btemp+1
   649  0037  3065               	movlw	low __pdataBANK0
   650  0038  0084               	movwf	4
   651  0039  120A  158A  21C8  120A  118A  	fcall	init_ram0
   652                           
   653                           ; Clear objects allocated to BANK3
   654  003E  1783               	bsf	3,7	;select IRP bank2
   655  003F  30D0               	movlw	low __pbssBANK3
   656  0040  0084               	movwf	4
   657  0041  30F0               	movlw	low (__pbssBANK3+32)
   658  0042  120A  158A  217F  120A  118A  	fcall	clear_ram0
   659                           
   660                           ; Clear objects allocated to BANK1
   661  0047  1383               	bcf	3,7	;select IRP bank0
   662  0048  30C8               	movlw	low __pbssBANK1
   663  0049  0084               	movwf	4
   664  004A  30EC               	movlw	low (__pbssBANK1+36)
   665  004B  120A  158A  217F  120A  118A  	fcall	clear_ram0
   666                           
   667                           ; Clear objects allocated to BANK0
   668  0050  3020               	movlw	low __pbssBANK0
   669  0051  0084               	movwf	4
   670  0052  304B               	movlw	low (__pbssBANK0+43)
   671  0053  120A  158A  217F   	fcall	clear_ram0
   672                           
   673                           ; Clear objects allocated to COMMON
   674  0056  01F6               	clrf	__pbssCOMMON& (0+127)
   675  0057  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   676  0058  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   677  0059  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   678                           
   679                           ; Clear objects allocated to BITCOMMON
   680  005A  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   681  005B                     end_of_initialization:	
   682                           ;End of C runtime variable initialization code
   683                           
   684  005B                     __end_of__initialization:	
   685  005B  0183               	clrf	3
   686  005C  120A  118A  285F   	ljmp	_main	;jump to C main() function
   687                           
   688                           	psect	bitbssCOMMON
   689  0380                     __pbitbssCOMMON:	
   690  0380                     _IR_Wall:	
   691  0380                     	ds	1
   692  0381                     _down:	
   693  0381                     	ds	1
   694  0382                     _left:	
   695  0382                     	ds	1
   696  0383                     _reset_flag:	
   697  0383                     	ds	1
   698  0384                     _right:	
   699  0384                     	ds	1
   700  0385                     _targets_found:	
   701  0385                     	ds	1
   702  0386                     _up:	
   703  0386                     	ds	1
   704                           
   705                           	psect	bssCOMMON
   706  0076                     __pbssCOMMON:	
   707  0076                     _adcRAW:	
   708  0076                     	ds	2
   709  0078                     _ADC_ADJUST:	
   710  0078                     	ds	2
   711                           
   712                           	psect	bssBANK0
   713  0020                     __pbssBANK0:	
   714  0020                     _ADJUSTED_SPEED_L:	
   715  0020                     	ds	2
   716  0022                     _ADJUSTED_SPEED_R:	
   717  0022                     	ds	2
   718  0024                     _Distance:	
   719  0024                     	ds	2
   720  0026                     _angle:	
   721  0026                     	ds	2
   722  0028                     _distance:	
   723  0028                     	ds	2
   724  002A                     _loop:	
   725  002A                     	ds	2
   726  002C                     _time_count:	
   727  002C                     	ds	2
   728  002E                     _timerLoop:	
   729  002E                     	ds	2
   730  0030                     _LeftSpeedH:	
   731  0030                     	ds	1
   732  0031                     _LeftSpeedL:	
   733  0031                     	ds	1
   734  0032                     _PB7Counter:	
   735  0032                     	ds	1
   736  0033                     _PB8Counter:	
   737  0033                     	ds	1
   738  0034                     _RightSpeedH:	
   739  0034                     	ds	1
   740  0035                     _RightSpeedL:	
   741  0035                     	ds	1
   742  0036                     _c:	
   743  0036                     	ds	1
   744  0037                     _intersection_orientation:	
   745  0037                     	ds	1
   746  0038                     _lowByte:	
   747  0038                     	ds	1
   748  0039                     _orientation_path:	
   749  0039                     	ds	1
   750  003A                     _pathCount:	
   751  003A                     	ds	1
   752  003B                     _r:	
   753  003B                     	ds	1
   754  003C                     _radH:	
   755  003C                     	ds	1
   756  003D                     _radL:	
   757  003D                     	ds	1
   758  003E                     _speedH:	
   759  003E                     	ds	1
   760  003F                     _speedL:	
   761  003F                     	ds	1
   762  0040                     _targets:	
   763  0040                     	ds	1
   764  0041                     _x_goto:	
   765  0041                     	ds	1
   766  0042                     _x_int:	
   767  0042                     	ds	1
   768  0043                     _x_path:	
   769  0043                     	ds	1
   770  0044                     _x_target:	
   771  0044                     	ds	1
   772  0045                     _y:	
   773  0045                     	ds	1
   774  0046                     _y_goto:	
   775  0046                     	ds	1
   776  0047                     _y_int:	
   777  0047                     	ds	1
   778  0048                     _y_path:	
   779  0048                     	ds	1
   780  0049                     _y_target:	
   781  0049                     	ds	1
   782  004A                     _highByte:	
   783  004A                     	ds	1
   784                           
   785                           	psect	dataBANK0
   786  0065                     __pdataBANK0:	
   787  0065                     _CURRENT_SPEED_L:	
   788  0065                     	ds	2
   789  0067                     _CURRENT_SPEED_R:	
   790  0067                     	ds	2
   791  0069                     _orientation:	
   792  0069                     	ds	1
   793  006A                     _pathCountShortest:	
   794  006A                     	ds	1
   795  006B                     _x:	
   796  006B                     	ds	1
   797                           
   798                           	psect	bssBANK1
   799  00C8                     __pbssBANK1:	
   800  00C8                     _pathShortest:	
   801  00C8                     	ds	32
   802  00E8                     _VelocityLeft:	
   803  00E8                     	ds	2
   804  00EA                     _VelocityRight:	
   805  00EA                     	ds	2
   806                           
   807                           	psect	dataBANK1
   808  00A0                     __pdataBANK1:	
   809  00A0                     _mazeGrid:	
   810  00A0                     	ds	20
   811  00B4                     _mazeGridDefault:	
   812  00B4                     	ds	20
   813                           
   814                           	psect	bssBANK3
   815  01D0                     __pbssBANK3:	
   816  01D0                     _path:	
   817  01D0                     	ds	32
   818                           
   819                           	psect	dataBANK3
   820  0190                     __pdataBANK3:	
   821  0190                     _gridWalls:	
   822  0190                     	ds	64
   823                           
   824                           	psect	inittext
   825  09C4                     init_fetch0:	
   826                           ;	Called with low address in FSR and high address in W
   827                           
   828  09C4  087E               	movf	126,w
   829  09C5  008A               	movwf	10
   830  09C6  087F               	movf	127,w
   831  09C7  0082               	movwf	2
   832  09C8                     init_ram0:	
   833                           ;Called with:
   834                           ;	high address of idata address in btemp 
   835                           ;	low address of idata address in btemp+1 
   836                           ;	low address of data in FSR
   837                           ;	high address + 1 of data in btemp-1
   838                           
   839  09C8  21C4  120A  158A   	fcall	init_fetch0
   840  09CB  0080               	movwf	0
   841  09CC  0A84               	incf	4,f
   842  09CD  0804               	movf	4,w
   843  09CE  067D               	xorwf	125,w
   844  09CF  1903               	btfsc	3,2
   845  09D0  3400               	retlw	0
   846  09D1  0AFF               	incf	127,f
   847  09D2  1903               	btfsc	3,2
   848  09D3  0AFE               	incf	126,f
   849  09D4  29C8               	goto	init_ram0
   850                           
   851                           	psect	clrtext
   852  097F                     clear_ram0:	
   853                           ;	Called with FSR containing the base address, and
   854                           ;	W with the last address+1
   855                           
   856  097F  0064               	clrwdt	;clear the watchdog before getting into this loop
   857  0980                     clrloop0:	
   858  0980  0180               	clrf	0	;clear RAM location pointed to by FSR
   859  0981  0A84               	incf	4,f	;increment pointer
   860  0982  0604               	xorwf	4,w	;XOR with final address
   861  0983  1903               	btfsc	3,2	;have we reached the end yet?
   862  0984  3400               	retlw	0	;all done for this memory range, return
   863  0985  0604               	xorwf	4,w	;XOR again to restore value
   864  0986  2980               	goto	clrloop0	;do the next byte
   865                           
   866                           	psect	cstackBANK2
   867  0110                     __pcstackBANK2:	
   868  0110                     main@controlByte:	
   869                           
   870                           ; 1 bytes @ 0x0
   871  0110                     	ds	1
   872  0111                     main@first:	
   873                           
   874                           ; 1 bytes @ 0x1
   875  0111                     	ds	1
   876  0112                     main@second:	
   877                           
   878                           ; 1 bytes @ 0x2
   879  0112                     	ds	1
   880  0113                     main@third:	
   881                           
   882                           ; 1 bytes @ 0x3
   883  0113                     	ds	1
   884  0114                     main@fourth:	
   885                           
   886                           ; 1 bytes @ 0x4
   887  0114                     	ds	1
   888  0115                     main@fifth:	
   889                           
   890                           ; 1 bytes @ 0x5
   891  0115                     	ds	1
   892                           
   893                           	psect	cstackCOMMON
   894  0071                     __pcstackCOMMON:	
   895  0071                     ?_lcdSetCursor:	
   896  0071                     ?_lcdWriteString:	
   897                           ; 1 bytes @ 0x0
   898                           
   899  0071                     ?_lcdWriteData:	
   900                           ; 1 bytes @ 0x0
   901                           
   902  0071                     ?_ser_putch:	
   903                           ; 1 bytes @ 0x0
   904                           
   905  0071                     ?_ser_init:	
   906                           ; 1 bytes @ 0x0
   907                           
   908  0071                     ?_setupSPI:	
   909                           ; 1 bytes @ 0x0
   910                           
   911  0071                     ?_setupLCD:	
   912                           ; 1 bytes @ 0x0
   913                           
   914  0071                     ?_setupADC:	
   915                           ; 1 bytes @ 0x0
   916                           
   917  0071                     ?_spi_transfer:	
   918                           ; 1 bytes @ 0x0
   919                           
   920  0071                     ?_Drive1m:	
   921                           ; 1 bytes @ 0x0
   922                           
   923  0071                     ?_Turn90:	
   924                           ; 1 bytes @ 0x0
   925                           
   926  0071                     ?_TravelPath:	
   927                           ; 1 bytes @ 0x0
   928                           
   929  0071                     ?_re_route:	
   930                           ; 1 bytes @ 0x0
   931                           
   932  0071                     ?_isr:	
   933                           ; 1 bytes @ 0x0
   934                           
   935  0071                     ??_isr:	
   936                           ; 1 bytes @ 0x0
   937                           
   938  0071                     ?_main:	
   939                           ; 1 bytes @ 0x0
   940                           
   941  0071                     ?_lcdWriteControl:	
   942                           ; 1 bytes @ 0x0
   943                           
   944  0071                     ?_ser_getch:	
   945                           ; 1 bytes @ 0x0
   946                           
   947                           
   948                           ; 1 bytes @ 0x0
   949  0071                     	ds	5
   950                           
   951                           	psect	cstackBANK0
   952  004B                     __pcstackBANK0:	
   953  004B                     ??_lcdWriteData:	
   954  004B                     ??_ser_putch:	
   955                           ; 1 bytes @ 0x0
   956                           
   957  004B                     ??_ser_init:	
   958                           ; 1 bytes @ 0x0
   959                           
   960  004B                     ??_setupSPI:	
   961                           ; 1 bytes @ 0x0
   962                           
   963  004B                     ??_setupADC:	
   964                           ; 1 bytes @ 0x0
   965                           
   966  004B                     ??_spi_transfer:	
   967                           ; 1 bytes @ 0x0
   968                           
   969  004B                     ??_lcdWriteControl:	
   970                           ; 1 bytes @ 0x0
   971                           
   972  004B                     ??_ser_getch:	
   973                           ; 1 bytes @ 0x0
   974                           
   975  004B                     ?___bmul:	
   976                           ; 1 bytes @ 0x0
   977                           
   978  004B                     ser_putch@c:	
   979                           ; 1 bytes @ 0x0
   980                           
   981  004B                     ___bmul@multiplicand:	
   982                           ; 1 bytes @ 0x0
   983                           
   984                           
   985                           ; 1 bytes @ 0x0
   986  004B                     	ds	1
   987  004C                     ?_DriveDirect:	
   988  004C                     ?_Drive:	
   989                           ; 1 bytes @ 0x1
   990                           
   991  004C                     ??___bmul:	
   992                           ; 1 bytes @ 0x1
   993                           
   994  004C                     ser_getch@rxbyte:	
   995                           ; 1 bytes @ 0x1
   996                           
   997  004C                     Drive@speedL:	
   998                           ; 1 bytes @ 0x1
   999                           
  1000  004C                     spi_transfer@temp:	
  1001                           ; 1 bytes @ 0x1
  1002                           
  1003  004C                     DriveDirect@VelocityRight:	
  1004                           ; 1 bytes @ 0x1
  1005                           
  1006                           
  1007                           ; 2 bytes @ 0x1
  1008  004C                     	ds	1
  1009  004D                     ?_getSensorData:	
  1010  004D                     lcdWriteControl@databyte:	
  1011                           ; 2 bytes @ 0x2
  1012                           
  1013  004D                     lcdWriteData@databyte:	
  1014                           ; 1 bytes @ 0x2
  1015                           
  1016  004D                     Drive@radH:	
  1017                           ; 1 bytes @ 0x2
  1018                           
  1019  004D                     getSensorData@bytes:	
  1020                           ; 1 bytes @ 0x2
  1021                           
  1022  004D                     spi_transfer@data:	
  1023                           ; 1 bytes @ 0x2
  1024                           
  1025  004D                     ___bmul@product:	
  1026                           ; 1 bytes @ 0x2
  1027                           
  1028                           
  1029                           ; 1 bytes @ 0x2
  1030  004D                     	ds	1
  1031  004E                     ??_lcdSetCursor:	
  1032  004E                     ??_lcdWriteString:	
  1033                           ; 1 bytes @ 0x3
  1034                           
  1035  004E                     ??_setupLCD:	
  1036                           ; 1 bytes @ 0x3
  1037                           
  1038  004E                     lcdSetCursor@address:	
  1039                           ; 1 bytes @ 0x3
  1040                           
  1041  004E                     Drive@radL:	
  1042                           ; 1 bytes @ 0x3
  1043                           
  1044  004E                     ___bmul@multiplier:	
  1045                           ; 1 bytes @ 0x3
  1046                           
  1047  004E                     DriveDirect@VelocityLeft:	
  1048                           ; 1 bytes @ 0x3
  1049                           
  1050                           
  1051                           ; 2 bytes @ 0x3
  1052  004E                     	ds	1
  1053  004F                     ??_getSensorData:	
  1054  004F                     ??_Drive:	
  1055                           ; 1 bytes @ 0x4
  1056                           
  1057  004F                     lcdWriteString@s:	
  1058                           ; 1 bytes @ 0x4
  1059                           
  1060  004F                     Drive@speedH:	
  1061                           ; 1 bytes @ 0x4
  1062                           
  1063                           
  1064                           ; 1 bytes @ 0x4
  1065  004F                     	ds	1
  1066  0050                     ??_DriveDirect:	
  1067  0050                     ?_PathTo:	
  1068                           ; 1 bytes @ 0x5
  1069                           
  1070  0050                     PathTo@y_target:	
  1071                           ; 1 bytes @ 0x5
  1072                           
  1073                           
  1074                           ; 1 bytes @ 0x5
  1075  0050                     	ds	1
  1076  0051                     ??_PathTo:	
  1077  0051                     getSensorData@packetID:	
  1078                           ; 1 bytes @ 0x6
  1079                           
  1080  0051                     DriveDirect@data:	
  1081                           ; 1 bytes @ 0x6
  1082                           
  1083                           
  1084                           ; 2 bytes @ 0x6
  1085  0051                     	ds	1
  1086  0052                     getSensorData@sensor:	
  1087                           
  1088                           ; 2 bytes @ 0x7
  1089  0052                     	ds	1
  1090  0053                     DriveDirect@data_467:	
  1091                           
  1092                           ; 2 bytes @ 0x8
  1093  0053                     	ds	2
  1094  0055                     ??_Drive1m:	
  1095  0055                     ??_Turn90:	
  1096                           ; 1 bytes @ 0xA
  1097                           
  1098                           
  1099                           ; 1 bytes @ 0xA
  1100  0055                     	ds	3
  1101  0058                     PathTo@x_target:	
  1102  0058                     Drive1m@n:	
  1103                           ; 1 bytes @ 0xD
  1104                           
  1105  0058                     Turn90@direction:	
  1106                           ; 1 bytes @ 0xD
  1107                           
  1108                           
  1109                           ; 1 bytes @ 0xD
  1110  0058                     	ds	1
  1111  0059                     PathTo@sum:	
  1112  0059                     Drive1m@omni_IR:	
  1113                           ; 1 bytes @ 0xE
  1114                           
  1115                           
  1116                           ; 1 bytes @ 0xE
  1117  0059                     	ds	1
  1118  005A                     ??_TravelPath:	
  1119  005A                     PathTo@loop:	
  1120                           ; 1 bytes @ 0xF
  1121                           
  1122                           
  1123                           ; 2 bytes @ 0xF
  1124  005A                     	ds	2
  1125  005C                     TravelPath@n:	
  1126                           
  1127                           ; 1 bytes @ 0x11
  1128  005C                     	ds	1
  1129  005D                     ??_re_route:	
  1130                           
  1131                           ; 1 bytes @ 0x12
  1132  005D                     	ds	5
  1133  0062                     ??_main:	
  1134                           
  1135                           ; 1 bytes @ 0x17
  1136  0062                     	ds	3
  1137                           
  1138                           	psect	maintext
  1139  005F                     __pmaintext:	
  1140 ;;
  1141 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1142 ;;
  1143 ;; *************** function _main *****************
  1144 ;; Defined at:
  1145 ;;		line 471 in file "main.c"
  1146 ;; Parameters:    Size  Location     Type
  1147 ;;		None
  1148 ;; Auto vars:     Size  Location     Type
  1149 ;;  fifth           1    5[BANK2 ] unsigned char 
  1150 ;;  fourth          1    4[BANK2 ] unsigned char 
  1151 ;;  third           1    3[BANK2 ] unsigned char 
  1152 ;;  second          1    2[BANK2 ] unsigned char 
  1153 ;;  first           1    1[BANK2 ] unsigned char 
  1154 ;;  controlByte     1    0[BANK2 ] unsigned char 
  1155 ;; Return value:  Size  Location     Type
  1156 ;;                  1    wreg      void 
  1157 ;; Registers used:
  1158 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1159 ;; Tracked objects:
  1160 ;;		On entry : B00/0
  1161 ;;		On exit  : 0/0
  1162 ;;		Unchanged: 0/0
  1163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1164 ;;      Params:         0       0       0       0       0
  1165 ;;      Locals:         0       0       0       0       6
  1166 ;;      Temps:          0       3       0       0       0
  1167 ;;      Totals:         0       3       0       0       6
  1168 ;;Total ram usage:        9 bytes
  1169 ;; Hardware stack levels required when called:    6
  1170 ;; This function calls:
  1171 ;;		_PathTo
  1172 ;;		_TravelPath
  1173 ;;		_re_route
  1174 ;;		_ser_init
  1175 ;;		_ser_putch
  1176 ;;		_setupADC
  1177 ;;		_setupLCD
  1178 ;;		_setupSPI
  1179 ;;		_spi_transfer
  1180 ;; This function is called by:
  1181 ;;		Startup code after reset
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185                           
  1186                           ;psect for function _main
  1187  005F                     _main:	
  1188                           
  1189                           ;main.c: 473: _delay((unsigned long)((5000)*(20000000/4000.0)));
  1190                           
  1191                           ;incstack = 0
  1192                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1193  005F  307F               	movlw	127
  1194  0060  1283               	bcf	3,5	;RP0=0, select bank0
  1195  0061  1303               	bcf	3,6	;RP1=0, select bank0
  1196  0062  00E4               	movwf	??_main+2
  1197  0063  30D4               	movlw	212
  1198  0064  00E3               	movwf	??_main+1
  1199  0065  30AE               	movlw	174
  1200  0066  00E2               	movwf	??_main
  1201  0067                     u3507:	
  1202  0067  0BE2               	decfsz	??_main,f
  1203  0068  2867               	goto	u3507
  1204  0069  0BE3               	decfsz	??_main+1,f
  1205  006A  2867               	goto	u3507
  1206  006B  0BE4               	decfsz	??_main+2,f
  1207  006C  2867               	goto	u3507
  1208  006D  286E               	nop2
  1209                           
  1210                           ;main.c: 475: ser_init();
  1211  006E  120A  158A  21A6  120A  118A  	fcall	_ser_init
  1212                           
  1213                           ;main.c: 476: setupSPI();
  1214  0073  120A  158A  2225  120A  118A  	fcall	_setupSPI
  1215                           
  1216                           ;main.c: 477: setupLCD();
  1217  0078  120A  158A  22D0  120A  118A  	fcall	_setupLCD
  1218                           
  1219                           ;main.c: 478: setupADC();
  1220  007D  120A  158A  220F  120A  118A  	fcall	_setupADC
  1221                           
  1222                           ;main.c: 480: TRISB = 0b00000011;
  1223  0082  3003               	movlw	3
  1224  0083  1683               	bsf	3,5	;RP0=1, select bank1
  1225  0084  1303               	bcf	3,6	;RP1=0, select bank1
  1226  0085  0086               	movwf	6	;volatile
  1227                           
  1228                           ;main.c: 481: PORTB = 0b11111100;
  1229  0086  30FC               	movlw	252
  1230  0087  1283               	bcf	3,5	;RP0=0, select bank0
  1231  0088  1303               	bcf	3,6	;RP1=0, select bank0
  1232  0089  0086               	movwf	6	;volatile
  1233                           
  1234                           ;main.c: 483: unsigned char controlByte = 0b00001101;
  1235  008A  300D               	movlw	13
  1236  008B  00E2               	movwf	??_main
  1237  008C  0862               	movf	??_main,w
  1238  008D  1283               	bcf	3,5	;RP0=0, select bank2
  1239  008E  1703               	bsf	3,6	;RP1=1, select bank2
  1240  008F  0090               	movwf	main@controlByte^(0+256)
  1241                           
  1242                           ;main.c: 484: spi_transfer(controlByte);
  1243  0090  0810               	movf	main@controlByte^(0+256),w
  1244  0091  120A  158A  21B5  120A  118A  	fcall	_spi_transfer
  1245                           
  1246                           ;main.c: 486: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1247  0096  301A               	movlw	26
  1248  0097  1283               	bcf	3,5	;RP0=0, select bank0
  1249  0098  1303               	bcf	3,6	;RP1=0, select bank0
  1250  0099  00E4               	movwf	??_main+2
  1251  009A  305E               	movlw	94
  1252  009B  00E3               	movwf	??_main+1
  1253  009C  3086               	movlw	134
  1254  009D  00E2               	movwf	??_main
  1255  009E                     u3517:	
  1256  009E  0BE2               	decfsz	??_main,f
  1257  009F  289E               	goto	u3517
  1258  00A0  0BE3               	decfsz	??_main+1,f
  1259  00A1  289E               	goto	u3517
  1260  00A2  0BE4               	decfsz	??_main+2,f
  1261  00A3  289E               	goto	u3517
  1262  00A4  0000               	nop
  1263                           
  1264                           ;main.c: 487: ser_putch(128);
  1265  00A5  3080               	movlw	128
  1266  00A6  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1267                           
  1268                           ;main.c: 488: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1269  00AB  301A               	movlw	26
  1270  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  1271  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  1272  00AE  00E4               	movwf	??_main+2
  1273  00AF  305E               	movlw	94
  1274  00B0  00E3               	movwf	??_main+1
  1275  00B1  3086               	movlw	134
  1276  00B2  00E2               	movwf	??_main
  1277  00B3                     u3527:	
  1278  00B3  0BE2               	decfsz	??_main,f
  1279  00B4  28B3               	goto	u3527
  1280  00B5  0BE3               	decfsz	??_main+1,f
  1281  00B6  28B3               	goto	u3527
  1282  00B7  0BE4               	decfsz	??_main+2,f
  1283  00B8  28B3               	goto	u3527
  1284  00B9  0000               	nop
  1285                           
  1286                           ;main.c: 489: ser_putch(132);
  1287  00BA  3084               	movlw	132
  1288  00BB  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1289                           
  1290                           ;main.c: 490: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1291  00C0  301A               	movlw	26
  1292  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  1293  00C2  1303               	bcf	3,6	;RP1=0, select bank0
  1294  00C3  00E4               	movwf	??_main+2
  1295  00C4  305E               	movlw	94
  1296  00C5  00E3               	movwf	??_main+1
  1297  00C6  3086               	movlw	134
  1298  00C7  00E2               	movwf	??_main
  1299  00C8                     u3537:	
  1300  00C8  0BE2               	decfsz	??_main,f
  1301  00C9  28C8               	goto	u3537
  1302  00CA  0BE3               	decfsz	??_main+1,f
  1303  00CB  28C8               	goto	u3537
  1304  00CC  0BE4               	decfsz	??_main+2,f
  1305  00CD  28C8               	goto	u3537
  1306  00CE  0000               	nop
  1307                           
  1308                           ;main.c: 493: x = 1;
  1309  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  1310  00D0  1303               	bcf	3,6	;RP1=0, select bank0
  1311  00D1  01EB               	clrf	_x
  1312  00D2  0AEB               	incf	_x,f
  1313                           
  1314                           ;main.c: 494: y = 0;
  1315  00D3  01C5               	clrf	_y
  1316                           
  1317                           ;main.c: 495: orientation = 3;
  1318  00D4  3003               	movlw	3
  1319  00D5  00E2               	movwf	??_main
  1320  00D6  0862               	movf	??_main,w
  1321  00D7  00E9               	movwf	_orientation
  1322                           
  1323                           ;main.c: 499: ser_putch(140);
  1324  00D8  308C               	movlw	140
  1325  00D9  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1326                           
  1327                           ;main.c: 500: ser_putch(2);
  1328  00DE  3002               	movlw	2
  1329  00DF  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1330                           
  1331                           ;main.c: 501: ser_putch(10);
  1332  00E4  300A               	movlw	10
  1333  00E5  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1334                           
  1335                           ;main.c: 502: ser_putch(67);
  1336  00EA  3043               	movlw	67
  1337  00EB  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1338                           
  1339                           ;main.c: 503: ser_putch(32);
  1340  00F0  3020               	movlw	32
  1341  00F1  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1342                           
  1343                           ;main.c: 504: ser_putch(77);
  1344  00F6  304D               	movlw	77
  1345  00F7  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1346                           
  1347                           ;main.c: 505: ser_putch(16);
  1348  00FC  3010               	movlw	16
  1349  00FD  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1350                           
  1351                           ;main.c: 506: ser_putch(77);
  1352  0102  304D               	movlw	77
  1353  0103  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1354                           
  1355                           ;main.c: 507: ser_putch(16);
  1356  0108  3010               	movlw	16
  1357  0109  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1358                           
  1359                           ;main.c: 508: ser_putch(77);
  1360  010E  304D               	movlw	77
  1361  010F  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1362                           
  1363                           ;main.c: 509: ser_putch(16);
  1364  0114  3010               	movlw	16
  1365  0115  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1366                           
  1367                           ;main.c: 510: ser_putch(77);
  1368  011A  304D               	movlw	77
  1369  011B  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1370                           
  1371                           ;main.c: 511: ser_putch(16);
  1372  0120  3010               	movlw	16
  1373  0121  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1374                           
  1375                           ;main.c: 512: ser_putch(76);
  1376  0126  304C               	movlw	76
  1377  0127  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1378                           
  1379                           ;main.c: 513: ser_putch(16);
  1380  012C  3010               	movlw	16
  1381  012D  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1382                           
  1383                           ;main.c: 514: ser_putch(74);
  1384  0132  304A               	movlw	74
  1385  0133  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1386                           
  1387                           ;main.c: 515: ser_putch(16);
  1388  0138  3010               	movlw	16
  1389  0139  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1390                           
  1391                           ;main.c: 516: ser_putch(72);
  1392  013E  3048               	movlw	72
  1393  013F  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1394                           
  1395                           ;main.c: 517: ser_putch(32);
  1396  0144  3020               	movlw	32
  1397  0145  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1398                           
  1399                           ;main.c: 518: ser_putch(79);
  1400  014A  304F               	movlw	79
  1401  014B  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1402                           
  1403                           ;main.c: 519: ser_putch(16);
  1404  0150  3010               	movlw	16
  1405  0151  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1406                           
  1407                           ;main.c: 520: ser_putch(84);
  1408  0156  3054               	movlw	84
  1409  0157  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1410                           
  1411                           ;main.c: 521: ser_putch(48);
  1412  015C  3030               	movlw	48
  1413  015D  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1414                           
  1415                           ;main.c: 524: char first = 16;
  1416  0162  3010               	movlw	16
  1417  0163  1283               	bcf	3,5	;RP0=0, select bank0
  1418  0164  1303               	bcf	3,6	;RP1=0, select bank0
  1419  0165  00E2               	movwf	??_main
  1420  0166  0862               	movf	??_main,w
  1421  0167  1283               	bcf	3,5	;RP0=0, select bank2
  1422  0168  1703               	bsf	3,6	;RP1=1, select bank2
  1423  0169  0091               	movwf	main@first^(0+256)
  1424                           
  1425                           ;main.c: 525: char second = 8;
  1426  016A  3008               	movlw	8
  1427  016B  1283               	bcf	3,5	;RP0=0, select bank0
  1428  016C  1303               	bcf	3,6	;RP1=0, select bank0
  1429  016D  00E2               	movwf	??_main
  1430  016E  0862               	movf	??_main,w
  1431  016F  1283               	bcf	3,5	;RP0=0, select bank2
  1432  0170  1703               	bsf	3,6	;RP1=1, select bank2
  1433  0171  0092               	movwf	main@second^(0+256)
  1434                           
  1435                           ;main.c: 526: char third = 12;
  1436  0172  300C               	movlw	12
  1437  0173  1283               	bcf	3,5	;RP0=0, select bank0
  1438  0174  1303               	bcf	3,6	;RP1=0, select bank0
  1439  0175  00E2               	movwf	??_main
  1440  0176  0862               	movf	??_main,w
  1441  0177  1283               	bcf	3,5	;RP0=0, select bank2
  1442  0178  1703               	bsf	3,6	;RP1=1, select bank2
  1443  0179  0093               	movwf	main@third^(0+256)
  1444                           
  1445                           ;main.c: 527: char fourth = 36;
  1446  017A  3024               	movlw	36
  1447  017B  1283               	bcf	3,5	;RP0=0, select bank0
  1448  017C  1303               	bcf	3,6	;RP1=0, select bank0
  1449  017D  00E2               	movwf	??_main
  1450  017E  0862               	movf	??_main,w
  1451  017F  1283               	bcf	3,5	;RP0=0, select bank2
  1452  0180  1703               	bsf	3,6	;RP1=1, select bank2
  1453  0181  0094               	movwf	main@fourth^(0+256)
  1454                           
  1455                           ;main.c: 528: char fifth = 32;
  1456  0182  3020               	movlw	32
  1457  0183  1283               	bcf	3,5	;RP0=0, select bank0
  1458  0184  1303               	bcf	3,6	;RP1=0, select bank0
  1459  0185  00E2               	movwf	??_main
  1460  0186  0862               	movf	??_main,w
  1461  0187  1283               	bcf	3,5	;RP0=0, select bank2
  1462  0188  1703               	bsf	3,6	;RP1=1, select bank2
  1463  0189  0095               	movwf	main@fifth^(0+256)
  1464                           
  1465                           ;main.c: 532: ser_putch(140);
  1466  018A  308C               	movlw	140
  1467  018B  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1468                           
  1469                           ;main.c: 533: ser_putch(3);
  1470  0190  3003               	movlw	3
  1471  0191  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1472                           
  1473                           ;main.c: 534: ser_putch(16);
  1474  0196  3010               	movlw	16
  1475  0197  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1476                           
  1477                           ;main.c: 535: ser_putch(62);
  1478  019C  303E               	movlw	62
  1479  019D  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1480                           
  1481                           ;main.c: 536: ser_putch(first);
  1482  01A2  1283               	bcf	3,5	;RP0=0, select bank2
  1483  01A3  1703               	bsf	3,6	;RP1=1, select bank2
  1484  01A4  0811               	movf	main@first^(0+256),w
  1485  01A5  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1486                           
  1487                           ;main.c: 537: ser_putch(69);
  1488  01AA  3045               	movlw	69
  1489  01AB  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1490                           
  1491                           ;main.c: 538: ser_putch(second);
  1492  01B0  1283               	bcf	3,5	;RP0=0, select bank2
  1493  01B1  1703               	bsf	3,6	;RP1=1, select bank2
  1494  01B2  0812               	movf	main@second^(0+256),w
  1495  01B3  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1496                           
  1497                           ;main.c: 539: ser_putch(62);
  1498  01B8  303E               	movlw	62
  1499  01B9  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1500                           
  1501                           ;main.c: 540: ser_putch(third);
  1502  01BE  1283               	bcf	3,5	;RP0=0, select bank2
  1503  01BF  1703               	bsf	3,6	;RP1=1, select bank2
  1504  01C0  0813               	movf	main@third^(0+256),w
  1505  01C1  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1506                           
  1507                           ;main.c: 541: ser_putch(65);
  1508  01C6  3041               	movlw	65
  1509  01C7  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1510                           
  1511                           ;main.c: 542: ser_putch(fourth);
  1512  01CC  1283               	bcf	3,5	;RP0=0, select bank2
  1513  01CD  1703               	bsf	3,6	;RP1=1, select bank2
  1514  01CE  0814               	movf	main@fourth^(0+256),w
  1515  01CF  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1516                           
  1517                           ;main.c: 543: ser_putch(62);
  1518  01D4  303E               	movlw	62
  1519  01D5  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1520                           
  1521                           ;main.c: 544: ser_putch(fifth);
  1522  01DA  1283               	bcf	3,5	;RP0=0, select bank2
  1523  01DB  1703               	bsf	3,6	;RP1=1, select bank2
  1524  01DC  0815               	movf	main@fifth^(0+256),w
  1525  01DD  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1526                           
  1527                           ;main.c: 546: ser_putch(65);
  1528  01E2  3041               	movlw	65
  1529  01E3  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1530                           
  1531                           ;main.c: 547: ser_putch(first);
  1532  01E8  1283               	bcf	3,5	;RP0=0, select bank2
  1533  01E9  1703               	bsf	3,6	;RP1=1, select bank2
  1534  01EA  0811               	movf	main@first^(0+256),w
  1535  01EB  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1536                           
  1537                           ;main.c: 548: ser_putch(62);
  1538  01F0  303E               	movlw	62
  1539  01F1  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1540                           
  1541                           ;main.c: 549: ser_putch(second);
  1542  01F6  1283               	bcf	3,5	;RP0=0, select bank2
  1543  01F7  1703               	bsf	3,6	;RP1=1, select bank2
  1544  01F8  0812               	movf	main@second^(0+256),w
  1545  01F9  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1546                           
  1547                           ;main.c: 550: ser_putch(65);
  1548  01FE  3041               	movlw	65
  1549  01FF  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1550                           
  1551                           ;main.c: 551: ser_putch(third);
  1552  0204  1283               	bcf	3,5	;RP0=0, select bank2
  1553  0205  1703               	bsf	3,6	;RP1=1, select bank2
  1554  0206  0813               	movf	main@third^(0+256),w
  1555  0207  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1556                           
  1557                           ;main.c: 552: ser_putch(69);
  1558  020C  3045               	movlw	69
  1559  020D  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1560                           
  1561                           ;main.c: 553: ser_putch(fourth);
  1562  0212  1283               	bcf	3,5	;RP0=0, select bank2
  1563  0213  1703               	bsf	3,6	;RP1=1, select bank2
  1564  0214  0814               	movf	main@fourth^(0+256),w
  1565  0215  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1566                           
  1567                           ;main.c: 554: ser_putch(65);
  1568  021A  3041               	movlw	65
  1569  021B  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1570                           
  1571                           ;main.c: 555: ser_putch(fifth);
  1572  0220  1283               	bcf	3,5	;RP0=0, select bank2
  1573  0221  1703               	bsf	3,6	;RP1=1, select bank2
  1574  0222  0815               	movf	main@fifth^(0+256),w
  1575  0223  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1576                           
  1577                           ;main.c: 557: ser_putch(69);
  1578  0228  3045               	movlw	69
  1579  0229  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1580                           
  1581                           ;main.c: 558: ser_putch(first);
  1582  022E  1283               	bcf	3,5	;RP0=0, select bank2
  1583  022F  1703               	bsf	3,6	;RP1=1, select bank2
  1584  0230  0811               	movf	main@first^(0+256),w
  1585  0231  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1586                           
  1587                           ;main.c: 559: ser_putch(65);
  1588  0236  3041               	movlw	65
  1589  0237  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1590                           
  1591                           ;main.c: 560: ser_putch(second);
  1592  023C  1283               	bcf	3,5	;RP0=0, select bank2
  1593  023D  1703               	bsf	3,6	;RP1=1, select bank2
  1594  023E  0812               	movf	main@second^(0+256),w
  1595  023F  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1596                           
  1597                           ;main.c: 561: ser_putch(69);
  1598  0244  3045               	movlw	69
  1599  0245  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1600                           
  1601                           ;main.c: 562: ser_putch(third);
  1602  024A  1283               	bcf	3,5	;RP0=0, select bank2
  1603  024B  1703               	bsf	3,6	;RP1=1, select bank2
  1604  024C  0813               	movf	main@third^(0+256),w
  1605  024D  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1606                           
  1607                           ;main.c: 563: ser_putch(60);
  1608  0252  303C               	movlw	60
  1609  0253  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1610                           
  1611                           ;main.c: 564: ser_putch(fourth);
  1612  0258  1283               	bcf	3,5	;RP0=0, select bank2
  1613  0259  1703               	bsf	3,6	;RP1=1, select bank2
  1614  025A  0814               	movf	main@fourth^(0+256),w
  1615  025B  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1616                           
  1617                           ;main.c: 565: ser_putch(48);
  1618  0260  3030               	movlw	48
  1619  0261  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1620                           
  1621                           ;main.c: 566: ser_putch(fifth);
  1622  0266  1283               	bcf	3,5	;RP0=0, select bank2
  1623  0267  1703               	bsf	3,6	;RP1=1, select bank2
  1624  0268  0815               	movf	main@fifth^(0+256),w
  1625  0269  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1626                           
  1627                           ;main.c: 568: ser_putch(65);
  1628  026E  3041               	movlw	65
  1629  026F  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1630                           
  1631                           ;main.c: 569: ser_putch(16);
  1632  0274  3010               	movlw	16
  1633  0275  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1634                           
  1635                           ;main.c: 572: ser_putch(140);
  1636  027A  308C               	movlw	140
  1637  027B  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1638                           
  1639                           ;main.c: 573: ser_putch(4);
  1640  0280  3004               	movlw	4
  1641  0281  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1642                           
  1643                           ;main.c: 574: ser_putch(3);
  1644  0286  3003               	movlw	3
  1645  0287  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1646                           
  1647                           ;main.c: 575: ser_putch(60);
  1648  028C  303C               	movlw	60
  1649  028D  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1650                           
  1651                           ;main.c: 576: ser_putch(12);
  1652  0292  300C               	movlw	12
  1653  0293  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1654                           
  1655                           ;main.c: 577: ser_putch(65);
  1656  0298  3041               	movlw	65
  1657  0299  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1658                           
  1659                           ;main.c: 578: ser_putch(12);
  1660  029E  300C               	movlw	12
  1661  029F  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1662                           
  1663                           ;main.c: 579: ser_putch(69);
  1664  02A4  3045               	movlw	69
  1665  02A5  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1666                           
  1667                           ;main.c: 580: ser_putch(96);
  1668  02AA  3060               	movlw	96
  1669  02AB  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1670                           
  1671                           ;main.c: 584: ser_putch(140);
  1672  02B0  308C               	movlw	140
  1673  02B1  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1674                           
  1675                           ;main.c: 585: ser_putch(5);
  1676  02B6  3005               	movlw	5
  1677  02B7  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1678                           
  1679                           ;main.c: 586: ser_putch(11);
  1680  02BC  300B               	movlw	11
  1681  02BD  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1682                           
  1683                           ;main.c: 587: ser_putch(70);
  1684  02C2  3046               	movlw	70
  1685  02C3  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1686                           
  1687                           ;main.c: 588: ser_putch(12);
  1688  02C8  300C               	movlw	12
  1689  02C9  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1690                           
  1691                           ;main.c: 589: ser_putch(67);
  1692  02CE  3043               	movlw	67
  1693  02CF  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1694                           
  1695                           ;main.c: 590: ser_putch(12);
  1696  02D4  300C               	movlw	12
  1697  02D5  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1698                           
  1699                           ;main.c: 591: ser_putch(62);
  1700  02DA  303E               	movlw	62
  1701  02DB  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1702                           
  1703                           ;main.c: 592: ser_putch(96);
  1704  02E0  3060               	movlw	96
  1705  02E1  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1706                           
  1707                           ;main.c: 593: ser_putch(70);
  1708  02E6  3046               	movlw	70
  1709  02E7  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1710                           
  1711                           ;main.c: 594: ser_putch(12);
  1712  02EC  300C               	movlw	12
  1713  02ED  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1714                           
  1715                           ;main.c: 595: ser_putch(67);
  1716  02F2  3043               	movlw	67
  1717  02F3  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1718                           
  1719                           ;main.c: 596: ser_putch(12);
  1720  02F8  300C               	movlw	12
  1721  02F9  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1722                           
  1723                           ;main.c: 597: ser_putch(61);
  1724  02FE  303D               	movlw	61
  1725  02FF  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1726                           
  1727                           ;main.c: 598: ser_putch(96);
  1728  0304  3060               	movlw	96
  1729  0305  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1730                           
  1731                           ;main.c: 599: ser_putch(70);
  1732  030A  3046               	movlw	70
  1733  030B  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1734                           
  1735                           ;main.c: 600: ser_putch(12);
  1736  0310  300C               	movlw	12
  1737  0311  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1738                           
  1739                           ;main.c: 601: ser_putch(67);
  1740  0316  3043               	movlw	67
  1741  0317  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1742                           
  1743                           ;main.c: 602: ser_putch(12);
  1744  031C  300C               	movlw	12
  1745  031D  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1746                           
  1747                           ;main.c: 603: ser_putch(60);
  1748  0322  303C               	movlw	60
  1749  0323  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1750                           
  1751                           ;main.c: 604: ser_putch(96);
  1752  0328  3060               	movlw	96
  1753  0329  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1754                           
  1755                           ;main.c: 605: ser_putch(70);
  1756  032E  3046               	movlw	70
  1757  032F  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1758                           
  1759                           ;main.c: 606: ser_putch(12);
  1760  0334  300C               	movlw	12
  1761  0335  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1762                           
  1763                           ;main.c: 607: ser_putch(60);
  1764  033A  303C               	movlw	60
  1765  033B  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1766                           
  1767                           ;main.c: 608: ser_putch(20);
  1768  0340  3014               	movlw	20
  1769  0341  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1770                           
  1771                           ;main.c: 611: ser_putch(140);
  1772  0346  308C               	movlw	140
  1773  0347  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1774                           
  1775                           ;main.c: 612: ser_putch(6);
  1776  034C  3006               	movlw	6
  1777  034D  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1778                           
  1779                           ;main.c: 613: ser_putch(11);
  1780  0352  300B               	movlw	11
  1781  0353  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1782                           
  1783                           ;main.c: 614: ser_putch(55);
  1784  0358  3037               	movlw	55
  1785  0359  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1786                           
  1787                           ;main.c: 615: ser_putch(22);
  1788  035E  3016               	movlw	22
  1789  035F  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1790                           
  1791                           ;main.c: 616: ser_putch(55);
  1792  0364  3037               	movlw	55
  1793  0365  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1794                           
  1795                           ;main.c: 617: ser_putch(22);
  1796  036A  3016               	movlw	22
  1797  036B  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1798                           
  1799                           ;main.c: 618: ser_putch(0);
  1800  0370  3000               	movlw	0
  1801  0371  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1802                           
  1803                           ;main.c: 619: ser_putch(2);
  1804  0376  3002               	movlw	2
  1805  0377  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1806                           
  1807                           ;main.c: 620: ser_putch(58);
  1808  037C  303A               	movlw	58
  1809  037D  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1810                           
  1811                           ;main.c: 621: ser_putch(18);
  1812  0382  3012               	movlw	18
  1813  0383  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1814                           
  1815                           ;main.c: 622: ser_putch(48);
  1816  0388  3030               	movlw	48
  1817  0389  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1818                           
  1819                           ;main.c: 623: ser_putch(24);
  1820  038E  3018               	movlw	24
  1821  038F  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1822                           
  1823                           ;main.c: 624: ser_putch(0);
  1824  0394  3000               	movlw	0
  1825  0395  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1826                           
  1827                           ;main.c: 625: ser_putch(10);
  1828  039A  300A               	movlw	10
  1829  039B  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1830                           
  1831                           ;main.c: 626: ser_putch(55);
  1832  03A0  3037               	movlw	55
  1833  03A1  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1834                           
  1835                           ;main.c: 627: ser_putch(22);
  1836  03A6  3016               	movlw	22
  1837  03A7  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1838                           
  1839                           ;main.c: 628: ser_putch(55);
  1840  03AC  3037               	movlw	55
  1841  03AD  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1842                           
  1843                           ;main.c: 629: ser_putch(22);
  1844  03B2  3016               	movlw	22
  1845  03B3  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1846                           
  1847                           ;main.c: 630: ser_putch(0);
  1848  03B8  3000               	movlw	0
  1849  03B9  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1850                           
  1851                           ;main.c: 631: ser_putch(2);
  1852  03BE  3002               	movlw	2
  1853  03BF  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1854                           
  1855                           ;main.c: 632: ser_putch(53);
  1856  03C4  3035               	movlw	53
  1857  03C5  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1858                           
  1859                           ;main.c: 633: ser_putch(18);
  1860  03CA  3012               	movlw	18
  1861  03CB  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1862                           
  1863                           ;main.c: 634: ser_putch(54);
  1864  03D0  3036               	movlw	54
  1865  03D1  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1866                           
  1867                           ;main.c: 635: ser_putch(24);
  1868  03D6  3018               	movlw	24
  1869  03D7  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1870  03DC                     l4648:	
  1871                           ;main.c: 643: while(1){
  1872                           
  1873                           
  1874                           ;main.c: 645: if(PB7Counter >= 10 && !RB1== 0){
  1875  03DC  300A               	movlw	10
  1876  03DD  1283               	bcf	3,5	;RP0=0, select bank0
  1877  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  1878  03DF  0232               	subwf	_PB7Counter,w
  1879  03E0  1803               	btfsc	3,0
  1880  03E1  1C86               	btfss	6,1	;volatile
  1881  03E2  2C28               	goto	l4664
  1882                           
  1883                           ;main.c: 648: ser_putch(141);
  1884  03E3  308D               	movlw	141
  1885  03E4  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1886                           
  1887                           ;main.c: 649: ser_putch(6);
  1888  03E9  3006               	movlw	6
  1889  03EA  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1890                           
  1891                           ;main.c: 650: _delay((unsigned long)((3000)*(20000000/4000.0)));
  1892  03EF  304D               	movlw	77
  1893  03F0  1283               	bcf	3,5	;RP0=0, select bank0
  1894  03F1  1303               	bcf	3,6	;RP1=0, select bank0
  1895  03F2  00E4               	movwf	??_main+2
  1896  03F3  3019               	movlw	25
  1897  03F4  00E3               	movwf	??_main+1
  1898  03F5  309A               	movlw	154
  1899  03F6  00E2               	movwf	??_main
  1900  03F7                     u3547:	
  1901  03F7  0BE2               	decfsz	??_main,f
  1902  03F8  2BF7               	goto	u3547
  1903  03F9  0BE3               	decfsz	??_main+1,f
  1904  03FA  2BF7               	goto	u3547
  1905  03FB  0BE4               	decfsz	??_main+2,f
  1906  03FC  2BF7               	goto	u3547
  1907  03FD  2BFE               	nop2
  1908                           
  1909                           ;main.c: 651: ser_putch(141);
  1910  03FE  308D               	movlw	141
  1911  03FF  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1912                           
  1913                           ;main.c: 652: ser_putch(6);
  1914  0404  3006               	movlw	6
  1915  0405  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1916                           
  1917                           ;main.c: 653: _delay((unsigned long)((3000)*(20000000/4000.0)));
  1918  040A  304D               	movlw	77
  1919  040B  1283               	bcf	3,5	;RP0=0, select bank0
  1920  040C  1303               	bcf	3,6	;RP1=0, select bank0
  1921  040D  00E4               	movwf	??_main+2
  1922  040E  3019               	movlw	25
  1923  040F  00E3               	movwf	??_main+1
  1924  0410  309A               	movlw	154
  1925  0411  00E2               	movwf	??_main
  1926  0412                     u3557:	
  1927  0412  0BE2               	decfsz	??_main,f
  1928  0413  2C12               	goto	u3557
  1929  0414  0BE3               	decfsz	??_main+1,f
  1930  0415  2C12               	goto	u3557
  1931  0416  0BE4               	decfsz	??_main+2,f
  1932  0417  2C12               	goto	u3557
  1933  0418  2C19               	nop2
  1934                           
  1935                           ;main.c: 654: ser_putch(141);
  1936  0419  308D               	movlw	141
  1937  041A  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1938                           
  1939                           ;main.c: 655: ser_putch(5);
  1940  041F  3005               	movlw	5
  1941  0420  120A  158A  219A  120A  118A  	fcall	_ser_putch
  1942                           
  1943                           ;main.c: 660: PB7Counter=0;
  1944  0425  1283               	bcf	3,5	;RP0=0, select bank0
  1945  0426  1303               	bcf	3,6	;RP1=0, select bank0
  1946  0427  01B2               	clrf	_PB7Counter
  1947  0428                     l4664:	
  1948                           
  1949                           ;main.c: 664: }
  1950                           ;main.c: 669: if(PB8Counter >= 10 && !RB0 == 0){
  1951  0428  300A               	movlw	10
  1952  0429  0233               	subwf	_PB8Counter,w
  1953  042A  1803               	btfsc	3,0
  1954  042B  1C06               	btfss	6,0	;volatile
  1955  042C  2BDC               	goto	l4648
  1956                           
  1957                           ;main.c: 672: PathTo(2,0);
  1958  042D  01D0               	clrf	PathTo@y_target
  1959  042E  3002               	movlw	2
  1960  042F  120A  158A  2469  120A  118A  	fcall	_PathTo
  1961                           
  1962                           ;main.c: 673: TravelPath();
  1963  0434  120A  118A  24C9  120A  118A  	fcall	_TravelPath
  1964                           
  1965                           ;main.c: 674: if (IR_Wall == 1)
  1966  0439  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  1967  043A  2C40               	goto	l4674
  1968                           
  1969                           ;main.c: 675: re_route();
  1970  043B  120A  118A  26D0  120A  118A  	fcall	_re_route
  1971  0440                     l4674:	
  1972                           
  1973                           ;main.c: 676: if (targets_found == 1){
  1974  0440  1EF0               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  1975  0441  2C50               	goto	l336
  1976                           
  1977                           ;main.c: 677: PathTo(1,0);
  1978  0442  1283               	bcf	3,5	;RP0=0, select bank0
  1979  0443  1303               	bcf	3,6	;RP1=0, select bank0
  1980  0444  01D0               	clrf	PathTo@y_target
  1981  0445  3001               	movlw	1
  1982  0446  120A  158A  2469  120A  118A  	fcall	_PathTo
  1983                           
  1984                           ;main.c: 678: TravelPath();
  1985  044B  120A  118A  24C9  120A  118A  	fcall	_TravelPath
  1986  0450                     l336:	
  1987                           
  1988                           ;main.c: 679: }
  1989                           ;main.c: 682: PathTo(3,0);
  1990  0450  1283               	bcf	3,5	;RP0=0, select bank0
  1991  0451  1303               	bcf	3,6	;RP1=0, select bank0
  1992  0452  01D0               	clrf	PathTo@y_target
  1993  0453  3003               	movlw	3
  1994  0454  120A  158A  2469  120A  118A  	fcall	_PathTo
  1995                           
  1996                           ;main.c: 683: TravelPath();
  1997  0459  120A  118A  24C9  120A  118A  	fcall	_TravelPath
  1998                           
  1999                           ;main.c: 684: if (IR_Wall == 1)
  2000  045E  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2001  045F  2C65               	goto	l4682
  2002                           
  2003                           ;main.c: 685: re_route();
  2004  0460  120A  118A  26D0  120A  118A  	fcall	_re_route
  2005  0465                     l4682:	
  2006                           
  2007                           ;main.c: 686: if (targets_found == 1){
  2008  0465  1EF0               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  2009  0466  2C75               	goto	l338
  2010                           
  2011                           ;main.c: 687: PathTo(1,0);
  2012  0467  1283               	bcf	3,5	;RP0=0, select bank0
  2013  0468  1303               	bcf	3,6	;RP1=0, select bank0
  2014  0469  01D0               	clrf	PathTo@y_target
  2015  046A  3001               	movlw	1
  2016  046B  120A  158A  2469  120A  118A  	fcall	_PathTo
  2017                           
  2018                           ;main.c: 688: TravelPath();
  2019  0470  120A  118A  24C9  120A  118A  	fcall	_TravelPath
  2020  0475                     l338:	
  2021                           
  2022                           ;main.c: 689: }
  2023                           ;main.c: 691: PathTo(0,3);
  2024  0475  3003               	movlw	3
  2025  0476  1283               	bcf	3,5	;RP0=0, select bank0
  2026  0477  1303               	bcf	3,6	;RP1=0, select bank0
  2027  0478  00E2               	movwf	??_main
  2028  0479  0862               	movf	??_main,w
  2029  047A  00D0               	movwf	PathTo@y_target
  2030  047B  3000               	movlw	0
  2031  047C  120A  158A  2469  120A  118A  	fcall	_PathTo
  2032                           
  2033                           ;main.c: 692: TravelPath();
  2034  0481  120A  118A  24C9  120A  118A  	fcall	_TravelPath
  2035                           
  2036                           ;main.c: 693: if (IR_Wall == 1)
  2037  0486  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2038  0487  2C8D               	goto	l4690
  2039                           
  2040                           ;main.c: 694: re_route();
  2041  0488  120A  118A  26D0  120A  118A  	fcall	_re_route
  2042  048D                     l4690:	
  2043                           
  2044                           ;main.c: 695: if (targets_found == 1){
  2045  048D  1EF0               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  2046  048E  2C9D               	goto	l340
  2047                           
  2048                           ;main.c: 696: PathTo(1,0);
  2049  048F  1283               	bcf	3,5	;RP0=0, select bank0
  2050  0490  1303               	bcf	3,6	;RP1=0, select bank0
  2051  0491  01D0               	clrf	PathTo@y_target
  2052  0492  3001               	movlw	1
  2053  0493  120A  158A  2469  120A  118A  	fcall	_PathTo
  2054                           
  2055                           ;main.c: 697: TravelPath();
  2056  0498  120A  118A  24C9  120A  118A  	fcall	_TravelPath
  2057  049D                     l340:	
  2058                           
  2059                           ;main.c: 698: }
  2060                           ;main.c: 700: PathTo(3,2);
  2061  049D  3002               	movlw	2
  2062  049E  1283               	bcf	3,5	;RP0=0, select bank0
  2063  049F  1303               	bcf	3,6	;RP1=0, select bank0
  2064  04A0  00E2               	movwf	??_main
  2065  04A1  0862               	movf	??_main,w
  2066  04A2  00D0               	movwf	PathTo@y_target
  2067  04A3  3003               	movlw	3
  2068  04A4  120A  158A  2469  120A  118A  	fcall	_PathTo
  2069                           
  2070                           ;main.c: 701: TravelPath();
  2071  04A9  120A  118A  24C9  120A  118A  	fcall	_TravelPath
  2072                           
  2073                           ;main.c: 702: if (IR_Wall == 1)
  2074  04AE  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2075  04AF  2CB5               	goto	l4698
  2076                           
  2077                           ;main.c: 703: re_route();
  2078  04B0  120A  118A  26D0  120A  118A  	fcall	_re_route
  2079  04B5                     l4698:	
  2080                           
  2081                           ;main.c: 704: if (targets_found == 1){
  2082  04B5  1EF0               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  2083  04B6  2CC5               	goto	l4702
  2084                           
  2085                           ;main.c: 705: PathTo(1,0);
  2086  04B7  1283               	bcf	3,5	;RP0=0, select bank0
  2087  04B8  1303               	bcf	3,6	;RP1=0, select bank0
  2088  04B9  01D0               	clrf	PathTo@y_target
  2089  04BA  3001               	movlw	1
  2090  04BB  120A  158A  2469  120A  118A  	fcall	_PathTo
  2091                           
  2092                           ;main.c: 706: TravelPath();
  2093  04C0  120A  118A  24C9  120A  118A  	fcall	_TravelPath
  2094  04C5                     l4702:	
  2095                           
  2096                           ;main.c: 707: }
  2097                           ;main.c: 709: PB8Counter = 0;
  2098  04C5  1283               	bcf	3,5	;RP0=0, select bank0
  2099  04C6  1303               	bcf	3,6	;RP1=0, select bank0
  2100  04C7  01B3               	clrf	_PB8Counter
  2101  04C8  2BDC               	goto	l4648
  2102  04C9                     __end_of_main:	
  2103                           
  2104                           	psect	text1
  2105  09B5                     __ptext1:	
  2106 ;; *************** function _spi_transfer *****************
  2107 ;; Defined at:
  2108 ;;		line 22 in file "SPI.c"
  2109 ;; Parameters:    Size  Location     Type
  2110 ;;  data            1    wreg     unsigned char 
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;  data            1    2[BANK0 ] unsigned char 
  2113 ;;  temp            1    1[BANK0 ] unsigned char 
  2114 ;; Return value:  Size  Location     Type
  2115 ;;                  1    wreg      unsigned char 
  2116 ;; Registers used:
  2117 ;;		wreg, status,2
  2118 ;; Tracked objects:
  2119 ;;		On entry : 0/0
  2120 ;;		On exit  : 0/0
  2121 ;;		Unchanged: 0/0
  2122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2123 ;;      Params:         0       0       0       0       0
  2124 ;;      Locals:         0       2       0       0       0
  2125 ;;      Temps:          0       1       0       0       0
  2126 ;;      Totals:         0       3       0       0       0
  2127 ;;Total ram usage:        3 bytes
  2128 ;; Hardware stack levels used:    1
  2129 ;; Hardware stack levels required when called:    1
  2130 ;; This function calls:
  2131 ;;		Nothing
  2132 ;; This function is called by:
  2133 ;;		_main
  2134 ;;		_stepCCW
  2135 ;;		_stepCW
  2136 ;; This function uses a non-reentrant model
  2137 ;;
  2138                           
  2139                           
  2140                           ;psect for function _spi_transfer
  2141  09B5                     _spi_transfer:	
  2142                           
  2143                           ;incstack = 0
  2144                           ; Regs used in _spi_transfer: [wreg+status,2]
  2145                           ;spi_transfer@data stored from wreg
  2146  09B5  1283               	bcf	3,5	;RP0=0, select bank0
  2147  09B6  1303               	bcf	3,6	;RP1=0, select bank0
  2148  09B7  00CD               	movwf	spi_transfer@data
  2149                           
  2150                           ;SPI.c: 23: unsigned char temp = 0;
  2151  09B8  01CC               	clrf	spi_transfer@temp
  2152                           
  2153                           ;SPI.c: 25: SSPIF = 0;
  2154  09B9  118C               	bcf	12,3	;volatile
  2155                           
  2156                           ;SPI.c: 26: SSPBUF = data;
  2157  09BA  084D               	movf	spi_transfer@data,w
  2158  09BB  0093               	movwf	19	;volatile
  2159  09BC                     l975:	
  2160                           ;SPI.c: 28: while (SSPIF == 0);
  2161                           
  2162  09BC  1D8C               	btfss	12,3	;volatile
  2163  09BD  29BC               	goto	l975
  2164                           
  2165                           ;SPI.c: 29: temp = SSPBUF;
  2166  09BE  0813               	movf	19,w	;volatile
  2167  09BF  00CB               	movwf	??_spi_transfer
  2168  09C0  084B               	movf	??_spi_transfer,w
  2169  09C1  00CC               	movwf	spi_transfer@temp
  2170                           
  2171                           ;SPI.c: 30: SSPIF = 0;
  2172  09C2  118C               	bcf	12,3	;volatile
  2173  09C3  0008               	return
  2174  09C4                     __end_of_spi_transfer:	
  2175                           ;SPI.c: 32: return temp;
  2176                           ;	Return value of _spi_transfer is never used
  2177                           
  2178                           
  2179                           	psect	text2
  2180  0A25                     __ptext2:	
  2181 ;; *************** function _setupSPI *****************
  2182 ;; Defined at:
  2183 ;;		line 4 in file "SPI.c"
  2184 ;; Parameters:    Size  Location     Type
  2185 ;;		None
  2186 ;; Auto vars:     Size  Location     Type
  2187 ;;		None
  2188 ;; Return value:  Size  Location     Type
  2189 ;;                  1    wreg      void 
  2190 ;; Registers used:
  2191 ;;		wreg
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2197 ;;      Params:         0       0       0       0       0
  2198 ;;      Locals:         0       0       0       0       0
  2199 ;;      Temps:          0       0       0       0       0
  2200 ;;      Totals:         0       0       0       0       0
  2201 ;;Total ram usage:        0 bytes
  2202 ;; Hardware stack levels used:    1
  2203 ;; Hardware stack levels required when called:    1
  2204 ;; This function calls:
  2205 ;;		Nothing
  2206 ;; This function is called by:
  2207 ;;		_main
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211                           
  2212                           ;psect for function _setupSPI
  2213  0A25                     _setupSPI:	
  2214                           
  2215                           ;SPI.c: 6: TRISB = 0b00000011;
  2216                           
  2217                           ;incstack = 0
  2218                           ; Regs used in _setupSPI: [wreg]
  2219  0A25  3003               	movlw	3
  2220  0A26  1683               	bsf	3,5	;RP0=1, select bank1
  2221  0A27  1303               	bcf	3,6	;RP1=0, select bank1
  2222  0A28  0086               	movwf	6	;volatile
  2223                           
  2224                           ;SPI.c: 8: SSPSTAT = 0b01000000;
  2225  0A29  3040               	movlw	64
  2226  0A2A  0094               	movwf	20	;volatile
  2227                           
  2228                           ;SPI.c: 9: SSPCON = 0b00100000;
  2229  0A2B  3020               	movlw	32
  2230  0A2C  1283               	bcf	3,5	;RP0=0, select bank0
  2231  0A2D  1303               	bcf	3,6	;RP1=0, select bank0
  2232  0A2E  0094               	movwf	20	;volatile
  2233                           
  2234                           ;SPI.c: 10: TRISC = 0b10000000;
  2235  0A2F  3080               	movlw	128
  2236  0A30  1683               	bsf	3,5	;RP0=1, select bank1
  2237  0A31  1303               	bcf	3,6	;RP1=0, select bank1
  2238  0A32  0087               	movwf	7	;volatile
  2239                           
  2240                           ;SPI.c: 11: PORTC = 0b00000011;
  2241  0A33  3003               	movlw	3
  2242  0A34  1283               	bcf	3,5	;RP0=0, select bank0
  2243  0A35  1303               	bcf	3,6	;RP1=0, select bank0
  2244  0A36  0087               	movwf	7	;volatile
  2245                           
  2246                           ;SPI.c: 14: OPTION_REG = 0b00000100;
  2247  0A37  3004               	movlw	4
  2248  0A38  1683               	bsf	3,5	;RP0=1, select bank1
  2249  0A39  1303               	bcf	3,6	;RP1=0, select bank1
  2250  0A3A  0081               	movwf	1	;volatile
  2251                           
  2252                           ;SPI.c: 16: TMR0IE = 1;
  2253  0A3B  168B               	bsf	11,5	;volatile
  2254                           
  2255                           ;SPI.c: 18: (GIE = 1);
  2256  0A3C  178B               	bsf	11,7	;volatile
  2257  0A3D  0008               	return
  2258  0A3E                     __end_of_setupSPI:	
  2259                           
  2260                           	psect	text3
  2261  0AD0                     __ptext3:	
  2262 ;; *************** function _setupLCD *****************
  2263 ;; Defined at:
  2264 ;;		line 86 in file "LCD.c"
  2265 ;; Parameters:    Size  Location     Type
  2266 ;;		None
  2267 ;; Auto vars:     Size  Location     Type
  2268 ;;		None
  2269 ;; Return value:  Size  Location     Type
  2270 ;;                  1    wreg      void 
  2271 ;; Registers used:
  2272 ;;		wreg, status,2, status,0, pclath, cstack
  2273 ;; Tracked objects:
  2274 ;;		On entry : 0/0
  2275 ;;		On exit  : 0/0
  2276 ;;		Unchanged: 0/0
  2277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2278 ;;      Params:         0       0       0       0       0
  2279 ;;      Locals:         0       0       0       0       0
  2280 ;;      Temps:          0       0       0       0       0
  2281 ;;      Totals:         0       0       0       0       0
  2282 ;;Total ram usage:        0 bytes
  2283 ;; Hardware stack levels used:    1
  2284 ;; Hardware stack levels required when called:    2
  2285 ;; This function calls:
  2286 ;;		_lcdWriteControl
  2287 ;; This function is called by:
  2288 ;;		_main
  2289 ;; This function uses a non-reentrant model
  2290 ;;
  2291                           
  2292                           
  2293                           ;psect for function _setupLCD
  2294  0AD0                     _setupLCD:	
  2295                           
  2296                           ;LCD.c: 88: ADCON1 = 0b00000010;
  2297                           
  2298                           ;incstack = 0
  2299                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  2300  0AD0  3002               	movlw	2
  2301  0AD1  1683               	bsf	3,5	;RP0=1, select bank1
  2302  0AD2  1303               	bcf	3,6	;RP1=0, select bank1
  2303  0AD3  009F               	movwf	31	;volatile
  2304                           
  2305                           ;LCD.c: 90: PORTD = 0;
  2306  0AD4  1283               	bcf	3,5	;RP0=0, select bank0
  2307  0AD5  1303               	bcf	3,6	;RP1=0, select bank0
  2308  0AD6  0188               	clrf	8	;volatile
  2309                           
  2310                           ;LCD.c: 91: PORTE = 0;
  2311  0AD7  0189               	clrf	9	;volatile
  2312                           
  2313                           ;LCD.c: 93: TRISD = 0b00000000;
  2314  0AD8  1683               	bsf	3,5	;RP0=1, select bank1
  2315  0AD9  1303               	bcf	3,6	;RP1=0, select bank1
  2316  0ADA  0188               	clrf	8	;volatile
  2317                           
  2318                           ;LCD.c: 94: TRISE = 0b00000000;
  2319  0ADB  0189               	clrf	9	;volatile
  2320                           
  2321                           ;LCD.c: 97: lcdWriteControl(0b00000001);
  2322  0ADC  3001               	movlw	1
  2323  0ADD  120A  158A  21FB  120A  158A  	fcall	_lcdWriteControl
  2324                           
  2325                           ;LCD.c: 98: lcdWriteControl(0b00111000);
  2326  0AE2  3038               	movlw	56
  2327  0AE3  120A  158A  21FB  120A  158A  	fcall	_lcdWriteControl
  2328                           
  2329                           ;LCD.c: 99: lcdWriteControl(0b00001100);
  2330  0AE8  300C               	movlw	12
  2331  0AE9  120A  158A  21FB  120A  158A  	fcall	_lcdWriteControl
  2332                           
  2333                           ;LCD.c: 100: lcdWriteControl(0b00000110);
  2334  0AEE  3006               	movlw	6
  2335  0AEF  120A  158A  21FB  120A  158A  	fcall	_lcdWriteControl
  2336                           
  2337                           ;LCD.c: 101: lcdWriteControl(0b00000010);
  2338  0AF4  3002               	movlw	2
  2339  0AF5  120A  158A  21FB   	fcall	_lcdWriteControl
  2340  0AF8  0008               	return
  2341  0AF9                     __end_of_setupLCD:	
  2342                           
  2343                           	psect	text4
  2344  0A0F                     __ptext4:	
  2345 ;; *************** function _setupADC *****************
  2346 ;; Defined at:
  2347 ;;		line 5 in file "ADC.c"
  2348 ;; Parameters:    Size  Location     Type
  2349 ;;		None
  2350 ;; Auto vars:     Size  Location     Type
  2351 ;;		None
  2352 ;; Return value:  Size  Location     Type
  2353 ;;                  1    wreg      void 
  2354 ;; Registers used:
  2355 ;;		wreg, status,2
  2356 ;; Tracked objects:
  2357 ;;		On entry : 0/0
  2358 ;;		On exit  : 0/0
  2359 ;;		Unchanged: 0/0
  2360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2361 ;;      Params:         0       0       0       0       0
  2362 ;;      Locals:         0       0       0       0       0
  2363 ;;      Temps:          0       1       0       0       0
  2364 ;;      Totals:         0       1       0       0       0
  2365 ;;Total ram usage:        1 bytes
  2366 ;; Hardware stack levels used:    1
  2367 ;; Hardware stack levels required when called:    1
  2368 ;; This function calls:
  2369 ;;		Nothing
  2370 ;; This function is called by:
  2371 ;;		_main
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375                           
  2376                           ;psect for function _setupADC
  2377  0A0F                     _setupADC:	
  2378                           
  2379                           ;ADC.c: 6: PORTA = 0;
  2380                           
  2381                           ;incstack = 0
  2382                           ; Regs used in _setupADC: [wreg+status,2]
  2383  0A0F  1283               	bcf	3,5	;RP0=0, select bank0
  2384  0A10  1303               	bcf	3,6	;RP1=0, select bank0
  2385  0A11  0185               	clrf	5	;volatile
  2386                           
  2387                           ;ADC.c: 7: TRISA = 0b11111111;
  2388  0A12  30FF               	movlw	255
  2389  0A13  1683               	bsf	3,5	;RP0=1, select bank1
  2390  0A14  1303               	bcf	3,6	;RP1=0, select bank1
  2391  0A15  0085               	movwf	5	;volatile
  2392                           
  2393                           ;ADC.c: 10: ADCON0 = 0b10001001;
  2394  0A16  3089               	movlw	137
  2395  0A17  1283               	bcf	3,5	;RP0=0, select bank0
  2396  0A18  1303               	bcf	3,6	;RP1=0, select bank0
  2397  0A19  009F               	movwf	31	;volatile
  2398                           
  2399                           ;ADC.c: 11: ADCON1 = 0b00000010;
  2400  0A1A  3002               	movlw	2
  2401  0A1B  1683               	bsf	3,5	;RP0=1, select bank1
  2402  0A1C  1303               	bcf	3,6	;RP1=0, select bank1
  2403  0A1D  009F               	movwf	31	;volatile
  2404                           
  2405                           ;ADC.c: 13: _delay((unsigned long)((50)*(20000000/4000000.0)));
  2406  0A1E  3053               	movlw	83
  2407  0A1F  1283               	bcf	3,5	;RP0=0, select bank0
  2408  0A20  1303               	bcf	3,6	;RP1=0, select bank0
  2409  0A21  00CB               	movwf	??_setupADC
  2410  0A22                     u3567:	
  2411  0A22  0BCB               	decfsz	??_setupADC,f
  2412  0A23  2A22               	goto	u3567
  2413  0A24  0008               	return
  2414  0A25                     __end_of_setupADC:	
  2415                           
  2416                           	psect	text5
  2417  09A6                     __ptext5:	
  2418 ;; *************** function _ser_init *****************
  2419 ;; Defined at:
  2420 ;;		line 5 in file "ser.c"
  2421 ;; Parameters:    Size  Location     Type
  2422 ;;		None
  2423 ;; Auto vars:     Size  Location     Type
  2424 ;;		None
  2425 ;; Return value:  Size  Location     Type
  2426 ;;                  1    wreg      void 
  2427 ;; Registers used:
  2428 ;;		wreg
  2429 ;; Tracked objects:
  2430 ;;		On entry : 0/0
  2431 ;;		On exit  : 0/0
  2432 ;;		Unchanged: 0/0
  2433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2434 ;;      Params:         0       0       0       0       0
  2435 ;;      Locals:         0       0       0       0       0
  2436 ;;      Temps:          0       0       0       0       0
  2437 ;;      Totals:         0       0       0       0       0
  2438 ;;Total ram usage:        0 bytes
  2439 ;; Hardware stack levels used:    1
  2440 ;; Hardware stack levels required when called:    1
  2441 ;; This function calls:
  2442 ;;		Nothing
  2443 ;; This function is called by:
  2444 ;;		_main
  2445 ;; This function uses a non-reentrant model
  2446 ;;
  2447                           
  2448                           
  2449                           ;psect for function _ser_init
  2450  09A6                     _ser_init:	
  2451                           
  2452                           ;ser.c: 7: TXSTA = 0b00100100;
  2453                           
  2454                           ;incstack = 0
  2455                           ; Regs used in _ser_init: [wreg]
  2456  09A6  3024               	movlw	36
  2457  09A7  1683               	bsf	3,5	;RP0=1, select bank1
  2458  09A8  1303               	bcf	3,6	;RP1=0, select bank1
  2459  09A9  0098               	movwf	24	;volatile
  2460                           
  2461                           ;ser.c: 8: RCSTA = 0b10011000;
  2462  09AA  3098               	movlw	152
  2463  09AB  1283               	bcf	3,5	;RP0=0, select bank0
  2464  09AC  1303               	bcf	3,6	;RP1=0, select bank0
  2465  09AD  0098               	movwf	24	;volatile
  2466                           
  2467                           ;ser.c: 24: SPBRG = 20;
  2468  09AE  3014               	movlw	20
  2469  09AF  1683               	bsf	3,5	;RP0=1, select bank1
  2470  09B0  1303               	bcf	3,6	;RP1=0, select bank1
  2471  09B1  0099               	movwf	25	;volatile
  2472                           
  2473                           ;ser.c: 26: PEIE = 1;
  2474  09B2  170B               	bsf	11,6	;volatile
  2475                           
  2476                           ;ser.c: 27: (GIE = 1);
  2477  09B3  178B               	bsf	11,7	;volatile
  2478  09B4  0008               	return
  2479  09B5                     __end_of_ser_init:	
  2480                           
  2481                           	psect	text6
  2482  06D0                     __ptext6:	
  2483 ;; *************** function _re_route *****************
  2484 ;; Defined at:
  2485 ;;		line 429 in file "main.c"
  2486 ;; Parameters:    Size  Location     Type
  2487 ;;		None
  2488 ;; Auto vars:     Size  Location     Type
  2489 ;;		None
  2490 ;; Return value:  Size  Location     Type
  2491 ;;                  1    wreg      void 
  2492 ;; Registers used:
  2493 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2494 ;; Tracked objects:
  2495 ;;		On entry : 0/0
  2496 ;;		On exit  : 0/0
  2497 ;;		Unchanged: 0/0
  2498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2499 ;;      Params:         0       0       0       0       0
  2500 ;;      Locals:         0       0       0       0       0
  2501 ;;      Temps:          0       5       0       0       0
  2502 ;;      Totals:         0       5       0       0       0
  2503 ;;Total ram usage:        5 bytes
  2504 ;; Hardware stack levels used:    1
  2505 ;; Hardware stack levels required when called:    5
  2506 ;; This function calls:
  2507 ;;		_DriveDirect
  2508 ;;		_PathTo
  2509 ;;		_TravelPath
  2510 ;;		_Turn90
  2511 ;;		___bmul
  2512 ;;		_getSensorData
  2513 ;; This function is called by:
  2514 ;;		_main
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518                           
  2519                           ;psect for function _re_route
  2520  06D0                     _re_route:	
  2521                           
  2522                           ;main.c: 430: switch(orientation){
  2523                           
  2524                           ;incstack = 0
  2525                           ; Regs used in _re_route: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2526  06D0  2F3C               	goto	l4266
  2527  06D1                     l4256:	
  2528                           ;main.c: 431: case 0: (mazeGridDefault[y][x]) = ((mazeGridDefault[y][x]) + 4);
  2529                           
  2530  06D1  3005               	movlw	5
  2531  06D2  1283               	bcf	3,5	;RP0=0, select bank0
  2532  06D3  1303               	bcf	3,6	;RP1=0, select bank0
  2533  06D4  00DD               	movwf	??_re_route
  2534  06D5  085D               	movf	??_re_route,w
  2535  06D6  00CB               	movwf	___bmul@multiplicand
  2536  06D7  0845               	movf	_y,w
  2537  06D8  120A  158A  21D5  120A  118A  	fcall	___bmul
  2538  06DD  3EB4               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2539  06DE  1283               	bcf	3,5	;RP0=0, select bank0
  2540  06DF  1303               	bcf	3,6	;RP1=0, select bank0
  2541  06E0  076B               	addwf	_x,w
  2542  06E1  00DE               	movwf	??_re_route+1
  2543  06E2  085E               	movf	??_re_route+1,w
  2544  06E3  0084               	movwf	4
  2545  06E4  1383               	bcf	3,7	;select IRP bank1
  2546  06E5  0800               	movf	0,w
  2547  06E6  3E04               	addlw	4
  2548  06E7  2F26               	goto	L4
  2549  06E8                     l4258:	
  2550                           ;main.c: 433: case 1: (mazeGridDefault[y][x]) = ((mazeGridDefault[y][x]) + 2);
  2551                           
  2552                           ;main.c: 432: break;
  2553                           
  2554  06E8  3005               	movlw	5
  2555  06E9  00DD               	movwf	??_re_route
  2556  06EA  085D               	movf	??_re_route,w
  2557  06EB  00CB               	movwf	___bmul@multiplicand
  2558  06EC  0845               	movf	_y,w
  2559  06ED  120A  158A  21D5  120A  118A  	fcall	___bmul
  2560  06F2  3EB4               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2561  06F3  1283               	bcf	3,5	;RP0=0, select bank0
  2562  06F4  1303               	bcf	3,6	;RP1=0, select bank0
  2563  06F5  076B               	addwf	_x,w
  2564  06F6  00DE               	movwf	??_re_route+1
  2565  06F7  085E               	movf	??_re_route+1,w
  2566  06F8  0084               	movwf	4
  2567  06F9  1383               	bcf	3,7	;select IRP bank1
  2568  06FA  0800               	movf	0,w
  2569  06FB  3E02               	addlw	2
  2570  06FC  2F26               	goto	L4
  2571  06FD                     l4260:	
  2572                           ;main.c: 435: case 2: (mazeGridDefault[y][x]) = ((mazeGridDefault[y][x]) + 1);
  2573                           
  2574                           ;main.c: 434: break;
  2575                           
  2576  06FD  3005               	movlw	5
  2577  06FE  00DD               	movwf	??_re_route
  2578  06FF  085D               	movf	??_re_route,w
  2579  0700  00CB               	movwf	___bmul@multiplicand
  2580  0701  0845               	movf	_y,w
  2581  0702  120A  158A  21D5  120A  118A  	fcall	___bmul
  2582  0707  3EB4               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2583  0708  1283               	bcf	3,5	;RP0=0, select bank0
  2584  0709  1303               	bcf	3,6	;RP1=0, select bank0
  2585  070A  076B               	addwf	_x,w
  2586  070B  00DE               	movwf	??_re_route+1
  2587  070C  085E               	movf	??_re_route+1,w
  2588  070D  0084               	movwf	4
  2589  070E  1383               	bcf	3,7	;select IRP bank1
  2590  070F  0800               	movf	0,w
  2591  0710  3E01               	addlw	1
  2592  0711  2F26               	goto	L4
  2593  0712                     l4262:	
  2594                           ;main.c: 437: case 3: (mazeGridDefault[y][x]) = ((mazeGridDefault[y][x]) + 8);
  2595                           
  2596                           ;main.c: 436: break;
  2597                           
  2598  0712  3005               	movlw	5
  2599  0713  00DD               	movwf	??_re_route
  2600  0714  085D               	movf	??_re_route,w
  2601  0715  00CB               	movwf	___bmul@multiplicand
  2602  0716  0845               	movf	_y,w
  2603  0717  120A  158A  21D5  120A  118A  	fcall	___bmul
  2604  071C  3EB4               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2605  071D  1283               	bcf	3,5	;RP0=0, select bank0
  2606  071E  1303               	bcf	3,6	;RP1=0, select bank0
  2607  071F  076B               	addwf	_x,w
  2608  0720  00DE               	movwf	??_re_route+1
  2609  0721  085E               	movf	??_re_route+1,w
  2610  0722  0084               	movwf	4
  2611  0723  1383               	bcf	3,7	;select IRP bank1
  2612  0724  0800               	movf	0,w
  2613  0725  3E08               	addlw	8
  2614  0726                     L4:	
  2615  0726  00DF               	movwf	??_re_route+2
  2616  0727  3005               	movlw	5
  2617  0728  00E0               	movwf	??_re_route+3
  2618  0729  0860               	movf	??_re_route+3,w
  2619  072A  00CB               	movwf	___bmul@multiplicand
  2620  072B  0845               	movf	_y,w
  2621  072C  120A  158A  21D5  120A  118A  	fcall	___bmul
  2622  0731  3EB4               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2623  0732  1283               	bcf	3,5	;RP0=0, select bank0
  2624  0733  1303               	bcf	3,6	;RP1=0, select bank0
  2625  0734  076B               	addwf	_x,w
  2626  0735  00E1               	movwf	??_re_route+4
  2627  0736  0861               	movf	??_re_route+4,w
  2628  0737  0084               	movwf	4
  2629  0738  085F               	movf	??_re_route+2,w
  2630  0739  1383               	bcf	3,7	;select IRP bank1
  2631  073A  0080               	movwf	0
  2632                           
  2633                           ;main.c: 439: }
  2634                           
  2635                           ;main.c: 438: break;
  2636  073B  2F4C               	goto	l4268
  2637  073C                     l4266:	
  2638  073C  1283               	bcf	3,5	;RP0=0, select bank0
  2639  073D  1303               	bcf	3,6	;RP1=0, select bank0
  2640  073E  0869               	movf	_orientation,w
  2641                           
  2642                           ; Switch size 1, requested type "space"
  2643                           ; Number of cases is 4, Range of values is 0 to 3
  2644                           ; switch strategies available:
  2645                           ; Name         Instructions Cycles
  2646                           ; simple_byte           13     7 (average)
  2647                           ; direct_byte           20     8 (fixed)
  2648                           ; jumptable            260     6 (fixed)
  2649                           ;	Chosen strategy is simple_byte
  2650  073F  3A00               	xorlw	0	; case 0
  2651  0740  1903               	skipnz
  2652  0741  2ED1               	goto	l4256
  2653  0742  3A01               	xorlw	1	; case 1
  2654  0743  1903               	skipnz
  2655  0744  2EE8               	goto	l4258
  2656  0745  3A03               	xorlw	3	; case 2
  2657  0746  1903               	skipnz
  2658  0747  2EFD               	goto	l4260
  2659  0748  3A01               	xorlw	1	; case 3
  2660  0749  1903               	skipnz
  2661  074A  2F12               	goto	l4262
  2662  074B  2F4C               	goto	l4268
  2663  074C                     l4268:	
  2664                           
  2665                           ;main.c: 441: Turn90(0);
  2666  074C  3000               	movlw	0
  2667  074D  120A  158A  23C4  120A  118A  	fcall	_Turn90
  2668                           
  2669                           ;main.c: 442: Turn90(0);
  2670  0752  3000               	movlw	0
  2671  0753  120A  158A  23C4  120A  118A  	fcall	_Turn90
  2672                           
  2673                           ;main.c: 443: distance = 0;
  2674  0758  1283               	bcf	3,5	;RP0=0, select bank0
  2675  0759  1303               	bcf	3,6	;RP1=0, select bank0
  2676  075A  01A8               	clrf	_distance
  2677  075B  01A9               	clrf	_distance+1
  2678                           
  2679                           ;main.c: 444: DriveDirect(250,250);
  2680  075C  30FA               	movlw	250
  2681  075D  00CC               	movwf	DriveDirect@VelocityRight
  2682  075E  3000               	movlw	0
  2683  075F  00CD               	movwf	DriveDirect@VelocityRight+1
  2684  0760  30FA               	movlw	250
  2685  0761  00CE               	movwf	DriveDirect@VelocityLeft
  2686  0762  3000               	movlw	0
  2687  0763  00CF               	movwf	DriveDirect@VelocityLeft+1
  2688  0764  120A  158A  2337  120A  118A  	fcall	_DriveDirect
  2689  0769                     l4276:	
  2690                           ;main.c: 445: while (distance < 500){
  2691                           
  2692  0769  1283               	bcf	3,5	;RP0=0, select bank0
  2693  076A  1303               	bcf	3,6	;RP1=0, select bank0
  2694  076B  0829               	movf	_distance+1,w
  2695  076C  3A80               	xorlw	128
  2696  076D  00FF               	movwf	127
  2697  076E  3081               	movlw	129
  2698  076F  027F               	subwf	127,w
  2699  0770  1D03               	skipz
  2700  0771  2F74               	goto	u3225
  2701  0772  30F4               	movlw	244
  2702  0773  0228               	subwf	_distance,w
  2703  0774                     u3225:	
  2704  0774  1803               	btfsc	3,0
  2705  0775  2F8D               	goto	l4278
  2706                           
  2707                           ;main.c: 446: distance = distance + getSensorData(19,2);
  2708  0776  3002               	movlw	2
  2709  0777  1283               	bcf	3,5	;RP0=0, select bank0
  2710  0778  1303               	bcf	3,6	;RP1=0, select bank0
  2711  0779  00DD               	movwf	??_re_route
  2712  077A  085D               	movf	??_re_route,w
  2713  077B  00CD               	movwf	getSensorData@bytes
  2714  077C  3013               	movlw	19
  2715  077D  120A  158A  22F9  120A  118A  	fcall	_getSensorData
  2716  0782  1283               	bcf	3,5	;RP0=0, select bank0
  2717  0783  1303               	bcf	3,6	;RP1=0, select bank0
  2718  0784  0828               	movf	_distance,w
  2719  0785  074D               	addwf	?_getSensorData,w
  2720  0786  00A8               	movwf	_distance
  2721  0787  0829               	movf	_distance+1,w
  2722  0788  1803               	skipnc
  2723  0789  0A29               	incf	_distance+1,w
  2724  078A  074E               	addwf	?_getSensorData+1,w
  2725  078B  00A9               	movwf	_distance+1
  2726  078C  2F69               	goto	l4276
  2727  078D                     l4278:	
  2728                           
  2729                           ;main.c: 447: }
  2730                           ;main.c: 448: DriveDirect(0,0);
  2731  078D  3000               	movlw	0
  2732  078E  1283               	bcf	3,5	;RP0=0, select bank0
  2733  078F  1303               	bcf	3,6	;RP1=0, select bank0
  2734  0790  00CC               	movwf	DriveDirect@VelocityRight
  2735  0791  00CD               	movwf	DriveDirect@VelocityRight+1
  2736  0792  3000               	movlw	0
  2737  0793  00CE               	movwf	DriveDirect@VelocityLeft
  2738  0794  00CF               	movwf	DriveDirect@VelocityLeft+1
  2739  0795  120A  158A  2337  120A  118A  	fcall	_DriveDirect
  2740                           
  2741                           ;main.c: 449: IR_Wall = 0;
  2742  079A  1070               	bcf	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2743                           
  2744                           ;main.c: 451: _delay((unsigned long)((1000)*(20000000/4000.0)));
  2745  079B  301A               	movlw	26
  2746  079C  1283               	bcf	3,5	;RP0=0, select bank0
  2747  079D  1303               	bcf	3,6	;RP1=0, select bank0
  2748  079E  00DF               	movwf	??_re_route+2
  2749  079F  305E               	movlw	94
  2750  07A0  00DE               	movwf	??_re_route+1
  2751  07A1  3086               	movlw	134
  2752  07A2  00DD               	movwf	??_re_route
  2753  07A3                     u3577:	
  2754  07A3  0BDD               	decfsz	??_re_route,f
  2755  07A4  2FA3               	goto	u3577
  2756  07A5  0BDE               	decfsz	??_re_route+1,f
  2757  07A6  2FA3               	goto	u3577
  2758  07A7  0BDF               	decfsz	??_re_route+2,f
  2759  07A8  2FA3               	goto	u3577
  2760  07A9  0000               	nop
  2761                           
  2762                           ;main.c: 452: PathTo(x_goto,y_goto);
  2763  07AA  1283               	bcf	3,5	;RP0=0, select bank0
  2764  07AB  1303               	bcf	3,6	;RP1=0, select bank0
  2765  07AC  0846               	movf	_y_goto,w
  2766  07AD  00DD               	movwf	??_re_route
  2767  07AE  085D               	movf	??_re_route,w
  2768  07AF  00D0               	movwf	PathTo@y_target
  2769  07B0  0841               	movf	_x_goto,w
  2770  07B1  120A  158A  2469  120A  118A  	fcall	_PathTo
  2771                           
  2772                           ;main.c: 453: TravelPath();
  2773  07B6  120A  118A  24C9   	fcall	_TravelPath
  2774  07B9  0008               	return
  2775  07BA                     __end_of_re_route:	
  2776                           
  2777                           	psect	text7
  2778  04C9                     __ptext7:	
  2779 ;; *************** function _TravelPath *****************
  2780 ;; Defined at:
  2781 ;;		line 362 in file "main.c"
  2782 ;; Parameters:    Size  Location     Type
  2783 ;;		None
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;  n               1   17[BANK0 ] unsigned char 
  2786 ;; Return value:  Size  Location     Type
  2787 ;;                  1    wreg      void 
  2788 ;; Registers used:
  2789 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2790 ;; Tracked objects:
  2791 ;;		On entry : 0/0
  2792 ;;		On exit  : 0/0
  2793 ;;		Unchanged: 0/0
  2794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2795 ;;      Params:         0       0       0       0       0
  2796 ;;      Locals:         0       1       0       0       0
  2797 ;;      Temps:          0       2       0       0       0
  2798 ;;      Totals:         0       3       0       0       0
  2799 ;;Total ram usage:        3 bytes
  2800 ;; Hardware stack levels used:    1
  2801 ;; Hardware stack levels required when called:    4
  2802 ;; This function calls:
  2803 ;;		_Drive1m
  2804 ;;		_Turn90
  2805 ;; This function is called by:
  2806 ;;		_re_route
  2807 ;;		_main
  2808 ;; This function uses a non-reentrant model
  2809 ;;
  2810                           
  2811                           
  2812                           ;psect for function _TravelPath
  2813  04C9                     _TravelPath:	
  2814                           
  2815                           ;main.c: 364: for (char n = 1; n <= (pathCountShortest); n++){
  2816                           
  2817                           ;incstack = 0
  2818                           ; Regs used in _TravelPath: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2819  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  2820  04CA  1303               	bcf	3,6	;RP1=0, select bank0
  2821  04CB  01DC               	clrf	TravelPath@n
  2822  04CC  0ADC               	incf	TravelPath@n,f
  2823  04CD                     l4252:	
  2824  04CD  085C               	movf	TravelPath@n,w
  2825  04CE  026A               	subwf	_pathCountShortest,w
  2826  04CF  1C03               	btfss	3,0
  2827  04D0  0008               	return
  2828                           
  2829                           ;main.c: 366: if (pathShortest[0][n] > x){
  2830  04D1  085C               	movf	TravelPath@n,w
  2831  04D2  3EC8               	addlw	(low (_pathShortest| 0))& (0+255)
  2832  04D3  0084               	movwf	4
  2833  04D4  1383               	bcf	3,7	;select IRP bank1
  2834  04D5  0800               	movf	0,w
  2835  04D6  026B               	subwf	_x,w
  2836  04D7  1C03               	btfss	3,0
  2837  04D8  2D00               	goto	l4182
  2838  04D9  2D0E               	goto	l4186
  2839  04DA                     l4170:	
  2840                           ;main.c: 368: case 0: Turn90(0);
  2841                           
  2842                           ;main.c: 367: switch (orientation){
  2843                           
  2844  04DA  3000               	movlw	0
  2845  04DB  120A  158A  23C4  120A  118A  	fcall	_Turn90
  2846                           
  2847                           ;main.c: 369: break;
  2848  04E0  2DCA               	goto	l4244
  2849  04E1                     l4172:	
  2850                           ;main.c: 370: case 2: Turn90(1);
  2851                           
  2852  04E1  3001               	movlw	1
  2853  04E2  120A  158A  23C4  120A  118A  	fcall	_Turn90
  2854                           
  2855                           ;main.c: 371: break;
  2856  04E7  2DCA               	goto	l4244
  2857  04E8                     l4174:	
  2858                           ;main.c: 372: case 3: Turn90(1);
  2859                           
  2860  04E8  3001               	movlw	1
  2861  04E9  120A  158A  23C4  120A  118A  	fcall	_Turn90
  2862                           
  2863                           ;main.c: 373: _delay((unsigned long)((5)*(20000000/4000.0)));
  2864  04EE  3021               	movlw	33
  2865  04EF  1283               	bcf	3,5	;RP0=0, select bank0
  2866  04F0  1303               	bcf	3,6	;RP1=0, select bank0
  2867  04F1  00DB               	movwf	??_TravelPath+1
  2868  04F2  3076               	movlw	118
  2869  04F3  00DA               	movwf	??_TravelPath
  2870  04F4                     u3587:	
  2871  04F4  0BDA               	decfsz	??_TravelPath,f
  2872  04F5  2CF4               	goto	u3587
  2873  04F6  0BDB               	decfsz	??_TravelPath+1,f
  2874  04F7  2CF4               	goto	u3587
  2875  04F8  0000               	nop
  2876                           
  2877                           ;main.c: 374: Turn90(1);
  2878  04F9  3001               	movlw	1
  2879  04FA  120A  158A  23C4  120A  118A  	fcall	_Turn90
  2880                           
  2881                           ;main.c: 376: }
  2882                           
  2883                           ;main.c: 375: break;
  2884  04FF  2DCA               	goto	l4244
  2885  0500                     l4182:	
  2886  0500  1283               	bcf	3,5	;RP0=0, select bank0
  2887  0501  1303               	bcf	3,6	;RP1=0, select bank0
  2888  0502  0869               	movf	_orientation,w
  2889                           
  2890                           ; Switch size 1, requested type "space"
  2891                           ; Number of cases is 3, Range of values is 0 to 3
  2892                           ; switch strategies available:
  2893                           ; Name         Instructions Cycles
  2894                           ; simple_byte           10     6 (average)
  2895                           ; direct_byte           20     8 (fixed)
  2896                           ; jumptable            260     6 (fixed)
  2897                           ;	Chosen strategy is simple_byte
  2898  0503  3A00               	xorlw	0	; case 0
  2899  0504  1903               	skipnz
  2900  0505  2CDA               	goto	l4170
  2901  0506  3A02               	xorlw	2	; case 2
  2902  0507  1903               	skipnz
  2903  0508  2CE1               	goto	l4172
  2904  0509  3A01               	xorlw	1	; case 3
  2905  050A  1903               	skipnz
  2906  050B  2CE8               	goto	l4174
  2907  050C  2D0D               	goto	l4184
  2908  050D                     l4184:	
  2909  050D  2DCA               	goto	l4244
  2910  050E                     l4186:	
  2911                           ;main.c: 378: }
  2912                           
  2913                           ;main.c: 377: Drive1m();
  2914                           
  2915                           
  2916                           ;main.c: 380: else if (pathShortest[0][n] < x){
  2917  050E  1283               	bcf	3,5	;RP0=0, select bank0
  2918  050F  1303               	bcf	3,6	;RP1=0, select bank0
  2919  0510  085C               	movf	TravelPath@n,w
  2920  0511  3EC8               	addlw	(low (_pathShortest| 0))& (0+255)
  2921  0512  0084               	movwf	4
  2922  0513  086B               	movf	_x,w
  2923  0514  1383               	bcf	3,7	;select IRP bank1
  2924  0515  0200               	subwf	0,w
  2925  0516  1C03               	btfss	3,0
  2926  0517  2D3F               	goto	l4202
  2927  0518  2D4D               	goto	l4206
  2928  0519                     l4190:	
  2929                           ;main.c: 382: case 0: Turn90(1);
  2930                           
  2931                           ;main.c: 381: switch (orientation){
  2932                           
  2933  0519  3001               	movlw	1
  2934  051A  120A  158A  23C4  120A  118A  	fcall	_Turn90
  2935                           
  2936                           ;main.c: 383: break;
  2937  051F  2DCA               	goto	l4244
  2938  0520                     l4192:	
  2939                           ;main.c: 384: case 2: Turn90(0);
  2940                           
  2941  0520  3000               	movlw	0
  2942  0521  120A  158A  23C4  120A  118A  	fcall	_Turn90
  2943                           
  2944                           ;main.c: 385: break;
  2945  0526  2DCA               	goto	l4244
  2946  0527                     l4194:	
  2947                           ;main.c: 386: case 1: Turn90(1);
  2948                           
  2949  0527  3001               	movlw	1
  2950  0528  120A  158A  23C4  120A  118A  	fcall	_Turn90
  2951                           
  2952                           ;main.c: 387: _delay((unsigned long)((5)*(20000000/4000.0)));
  2953  052D  3021               	movlw	33
  2954  052E  1283               	bcf	3,5	;RP0=0, select bank0
  2955  052F  1303               	bcf	3,6	;RP1=0, select bank0
  2956  0530  00DB               	movwf	??_TravelPath+1
  2957  0531  3076               	movlw	118
  2958  0532  00DA               	movwf	??_TravelPath
  2959  0533                     u3597:	
  2960  0533  0BDA               	decfsz	??_TravelPath,f
  2961  0534  2D33               	goto	u3597
  2962  0535  0BDB               	decfsz	??_TravelPath+1,f
  2963  0536  2D33               	goto	u3597
  2964  0537  0000               	nop
  2965                           
  2966                           ;main.c: 388: Turn90(1);
  2967  0538  3001               	movlw	1
  2968  0539  120A  158A  23C4  120A  118A  	fcall	_Turn90
  2969                           
  2970                           ;main.c: 390: }
  2971                           
  2972                           ;main.c: 389: break;
  2973  053E  2DCA               	goto	l4244
  2974  053F                     l4202:	
  2975  053F  1283               	bcf	3,5	;RP0=0, select bank0
  2976  0540  1303               	bcf	3,6	;RP1=0, select bank0
  2977  0541  0869               	movf	_orientation,w
  2978                           
  2979                           ; Switch size 1, requested type "space"
  2980                           ; Number of cases is 3, Range of values is 0 to 2
  2981                           ; switch strategies available:
  2982                           ; Name         Instructions Cycles
  2983                           ; simple_byte           10     6 (average)
  2984                           ; direct_byte           17     8 (fixed)
  2985                           ; jumptable            260     6 (fixed)
  2986                           ;	Chosen strategy is simple_byte
  2987  0542  3A00               	xorlw	0	; case 0
  2988  0543  1903               	skipnz
  2989  0544  2D19               	goto	l4190
  2990  0545  3A01               	xorlw	1	; case 1
  2991  0546  1903               	skipnz
  2992  0547  2D27               	goto	l4194
  2993  0548  3A03               	xorlw	3	; case 2
  2994  0549  1903               	skipnz
  2995  054A  2D20               	goto	l4192
  2996  054B  2D4C               	goto	l4204
  2997  054C                     l4204:	
  2998  054C  2DCA               	goto	l4244
  2999  054D                     l4206:	
  3000                           ;main.c: 392: }
  3001                           
  3002                           ;main.c: 391: Drive1m();
  3003                           
  3004                           
  3005                           ;main.c: 394: else if(pathShortest[1][n] > y){
  3006  054D  1283               	bcf	3,5	;RP0=0, select bank0
  3007  054E  1303               	bcf	3,6	;RP1=0, select bank0
  3008  054F  085C               	movf	TravelPath@n,w
  3009  0550  3ED8               	addlw	(low ((_pathShortest| 0+16)))& (0+255)
  3010  0551  0084               	movwf	4
  3011  0552  1383               	bcf	3,7	;select IRP bank1
  3012  0553  0800               	movf	0,w
  3013  0554  0245               	subwf	_y,w
  3014  0555  1C03               	btfss	3,0
  3015  0556  2D7E               	goto	l4222
  3016  0557  2D8C               	goto	l4226
  3017  0558                     l4210:	
  3018                           ;main.c: 396: case 1: Turn90(0);
  3019                           
  3020                           ;main.c: 395: switch(orientation){
  3021                           
  3022  0558  3000               	movlw	0
  3023  0559  120A  158A  23C4  120A  118A  	fcall	_Turn90
  3024                           
  3025                           ;main.c: 397: break;
  3026  055E  2DCA               	goto	l4244
  3027  055F                     l4212:	
  3028                           ;main.c: 398: case 3: Turn90(1);
  3029                           
  3030  055F  3001               	movlw	1
  3031  0560  120A  158A  23C4  120A  118A  	fcall	_Turn90
  3032                           
  3033                           ;main.c: 399: break;
  3034  0565  2DCA               	goto	l4244
  3035  0566                     l4214:	
  3036                           ;main.c: 400: case 0: Turn90(1);
  3037                           
  3038  0566  3001               	movlw	1
  3039  0567  120A  158A  23C4  120A  118A  	fcall	_Turn90
  3040                           
  3041                           ;main.c: 401: _delay((unsigned long)((5)*(20000000/4000.0)));
  3042  056C  3021               	movlw	33
  3043  056D  1283               	bcf	3,5	;RP0=0, select bank0
  3044  056E  1303               	bcf	3,6	;RP1=0, select bank0
  3045  056F  00DB               	movwf	??_TravelPath+1
  3046  0570  3076               	movlw	118
  3047  0571  00DA               	movwf	??_TravelPath
  3048  0572                     u3607:	
  3049  0572  0BDA               	decfsz	??_TravelPath,f
  3050  0573  2D72               	goto	u3607
  3051  0574  0BDB               	decfsz	??_TravelPath+1,f
  3052  0575  2D72               	goto	u3607
  3053  0576  0000               	nop
  3054                           
  3055                           ;main.c: 402: Turn90(1);
  3056  0577  3001               	movlw	1
  3057  0578  120A  158A  23C4  120A  118A  	fcall	_Turn90
  3058                           
  3059                           ;main.c: 404: }
  3060                           
  3061                           ;main.c: 403: break;
  3062  057D  2DCA               	goto	l4244
  3063  057E                     l4222:	
  3064  057E  1283               	bcf	3,5	;RP0=0, select bank0
  3065  057F  1303               	bcf	3,6	;RP1=0, select bank0
  3066  0580  0869               	movf	_orientation,w
  3067                           
  3068                           ; Switch size 1, requested type "space"
  3069                           ; Number of cases is 3, Range of values is 0 to 3
  3070                           ; switch strategies available:
  3071                           ; Name         Instructions Cycles
  3072                           ; simple_byte           10     6 (average)
  3073                           ; direct_byte           20     8 (fixed)
  3074                           ; jumptable            260     6 (fixed)
  3075                           ;	Chosen strategy is simple_byte
  3076  0581  3A00               	xorlw	0	; case 0
  3077  0582  1903               	skipnz
  3078  0583  2D66               	goto	l4214
  3079  0584  3A01               	xorlw	1	; case 1
  3080  0585  1903               	skipnz
  3081  0586  2D58               	goto	l4210
  3082  0587  3A02               	xorlw	2	; case 3
  3083  0588  1903               	skipnz
  3084  0589  2D5F               	goto	l4212
  3085  058A  2D8B               	goto	l4224
  3086  058B                     l4224:	
  3087  058B  2DCA               	goto	l4244
  3088  058C                     l4226:	
  3089                           ;main.c: 406: }
  3090                           
  3091                           ;main.c: 405: Drive1m();
  3092                           
  3093                           
  3094                           ;main.c: 408: else if (pathShortest[1][n] < y){
  3095  058C  1283               	bcf	3,5	;RP0=0, select bank0
  3096  058D  1303               	bcf	3,6	;RP1=0, select bank0
  3097  058E  085C               	movf	TravelPath@n,w
  3098  058F  3ED8               	addlw	(low ((_pathShortest| 0+16)))& (0+255)
  3099  0590  0084               	movwf	4
  3100  0591  0845               	movf	_y,w
  3101  0592  1383               	bcf	3,7	;select IRP bank1
  3102  0593  0200               	subwf	0,w
  3103  0594  1C03               	btfss	3,0
  3104  0595  2DBD               	goto	l4242
  3105  0596  2DCF               	goto	l4246
  3106  0597                     l4230:	
  3107                           ;main.c: 410: case 1: Turn90(1);
  3108                           
  3109                           ;main.c: 409: switch (orientation){
  3110                           
  3111  0597  3001               	movlw	1
  3112  0598  120A  158A  23C4  120A  118A  	fcall	_Turn90
  3113                           
  3114                           ;main.c: 411: break;
  3115  059D  2DCA               	goto	l4244
  3116  059E                     l4232:	
  3117                           ;main.c: 412: case 3: Turn90(0);
  3118                           
  3119  059E  3000               	movlw	0
  3120  059F  120A  158A  23C4  120A  118A  	fcall	_Turn90
  3121                           
  3122                           ;main.c: 413: break;
  3123  05A4  2DCA               	goto	l4244
  3124  05A5                     l4234:	
  3125                           ;main.c: 414: case 2: Turn90(1);
  3126                           
  3127  05A5  3001               	movlw	1
  3128  05A6  120A  158A  23C4  120A  118A  	fcall	_Turn90
  3129                           
  3130                           ;main.c: 415: _delay((unsigned long)((5)*(20000000/4000.0)));
  3131  05AB  3021               	movlw	33
  3132  05AC  1283               	bcf	3,5	;RP0=0, select bank0
  3133  05AD  1303               	bcf	3,6	;RP1=0, select bank0
  3134  05AE  00DB               	movwf	??_TravelPath+1
  3135  05AF  3076               	movlw	118
  3136  05B0  00DA               	movwf	??_TravelPath
  3137  05B1                     u3617:	
  3138  05B1  0BDA               	decfsz	??_TravelPath,f
  3139  05B2  2DB1               	goto	u3617
  3140  05B3  0BDB               	decfsz	??_TravelPath+1,f
  3141  05B4  2DB1               	goto	u3617
  3142  05B5  0000               	nop
  3143                           
  3144                           ;main.c: 416: Turn90(1);
  3145  05B6  3001               	movlw	1
  3146  05B7  120A  158A  23C4  120A  118A  	fcall	_Turn90
  3147                           
  3148                           ;main.c: 418: }
  3149                           
  3150                           ;main.c: 417: break;
  3151  05BC  2DCA               	goto	l4244
  3152  05BD                     l4242:	
  3153  05BD  1283               	bcf	3,5	;RP0=0, select bank0
  3154  05BE  1303               	bcf	3,6	;RP1=0, select bank0
  3155  05BF  0869               	movf	_orientation,w
  3156                           
  3157                           ; Switch size 1, requested type "space"
  3158                           ; Number of cases is 3, Range of values is 1 to 3
  3159                           ; switch strategies available:
  3160                           ; Name         Instructions Cycles
  3161                           ; simple_byte           10     6 (average)
  3162                           ; direct_byte           20    11 (fixed)
  3163                           ; jumptable            263     9 (fixed)
  3164                           ;	Chosen strategy is simple_byte
  3165  05C0  3A01               	xorlw	1	; case 1
  3166  05C1  1903               	skipnz
  3167  05C2  2D97               	goto	l4230
  3168  05C3  3A03               	xorlw	3	; case 2
  3169  05C4  1903               	skipnz
  3170  05C5  2DA5               	goto	l4234
  3171  05C6  3A01               	xorlw	1	; case 3
  3172  05C7  1903               	skipnz
  3173  05C8  2D9E               	goto	l4232
  3174  05C9  2DCA               	goto	l4244
  3175  05CA                     l4244:	
  3176                           
  3177                           ;main.c: 419: Drive1m();
  3178  05CA  120A  118A  25DE  120A  118A  	fcall	_Drive1m
  3179  05CF                     l4246:	
  3180                           
  3181                           ;main.c: 420: }
  3182                           ;main.c: 423: if (IR_Wall == 1){
  3183  05CF  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  3184  05D0  2DD7               	goto	l4250
  3185                           
  3186                           ;main.c: 424: n = 20;
  3187  05D1  3014               	movlw	20
  3188  05D2  1283               	bcf	3,5	;RP0=0, select bank0
  3189  05D3  1303               	bcf	3,6	;RP1=0, select bank0
  3190  05D4  00DA               	movwf	??_TravelPath
  3191  05D5  085A               	movf	??_TravelPath,w
  3192  05D6  00DC               	movwf	TravelPath@n
  3193  05D7                     l4250:	
  3194  05D7  3001               	movlw	1
  3195  05D8  1283               	bcf	3,5	;RP0=0, select bank0
  3196  05D9  1303               	bcf	3,6	;RP1=0, select bank0
  3197  05DA  00DA               	movwf	??_TravelPath
  3198  05DB  085A               	movf	??_TravelPath,w
  3199  05DC  07DC               	addwf	TravelPath@n,f
  3200  05DD  2CCD               	goto	l4252
  3201  05DE                     __end_of_TravelPath:	
  3202                           
  3203                           	psect	text8
  3204  0BC4                     __ptext8:	
  3205 ;; *************** function _Turn90 *****************
  3206 ;; Defined at:
  3207 ;;		line 331 in file "main.c"
  3208 ;; Parameters:    Size  Location     Type
  3209 ;;  direction       1    wreg     unsigned char 
  3210 ;; Auto vars:     Size  Location     Type
  3211 ;;  direction       1   13[BANK0 ] unsigned char 
  3212 ;; Return value:  Size  Location     Type
  3213 ;;                  1    wreg      void 
  3214 ;; Registers used:
  3215 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3216 ;; Tracked objects:
  3217 ;;		On entry : 0/0
  3218 ;;		On exit  : 0/0
  3219 ;;		Unchanged: 0/0
  3220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3221 ;;      Params:         0       0       0       0       0
  3222 ;;      Locals:         0       1       0       0       0
  3223 ;;      Temps:          0       3       0       0       0
  3224 ;;      Totals:         0       4       0       0       0
  3225 ;;Total ram usage:        4 bytes
  3226 ;; Hardware stack levels used:    1
  3227 ;; Hardware stack levels required when called:    3
  3228 ;; This function calls:
  3229 ;;		_Drive
  3230 ;;		_DriveDirect
  3231 ;;		_getSensorData
  3232 ;; This function is called by:
  3233 ;;		_TravelPath
  3234 ;;		_re_route
  3235 ;; This function uses a non-reentrant model
  3236 ;;
  3237                           
  3238                           
  3239                           ;psect for function _Turn90
  3240  0BC4                     _Turn90:	
  3241                           
  3242                           ;incstack = 0
  3243                           ; Regs used in _Turn90: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3244                           ;Turn90@direction stored from wreg
  3245  0BC4  1283               	bcf	3,5	;RP0=0, select bank0
  3246  0BC5  1303               	bcf	3,6	;RP1=0, select bank0
  3247  0BC6  00D8               	movwf	Turn90@direction
  3248                           
  3249                           ;main.c: 333: angle = 0;
  3250  0BC7  01A6               	clrf	_angle
  3251  0BC8  01A7               	clrf	_angle+1
  3252                           
  3253                           ;main.c: 335: if (direction == 1){
  3254  0BC9  0358               	decf	Turn90@direction,w
  3255  0BCA  1D03               	btfss	3,2
  3256  0BCB  2C07               	goto	l3878
  3257                           
  3258                           ;main.c: 337: if (orientation == 0)
  3259  0BCC  0869               	movf	_orientation,w
  3260  0BCD  1D03               	btfss	3,2
  3261  0BCE  2BD4               	goto	l3870
  3262                           
  3263                           ;main.c: 338: orientation = 3;
  3264  0BCF  3003               	movlw	3
  3265  0BD0  00D5               	movwf	??_Turn90
  3266  0BD1  0855               	movf	??_Turn90,w
  3267  0BD2  00E9               	movwf	_orientation
  3268  0BD3  2BD6               	goto	l3872
  3269  0BD4                     l3870:	
  3270                           
  3271                           ;main.c: 339: else orientation--;
  3272  0BD4  3001               	movlw	1
  3273  0BD5  02E9               	subwf	_orientation,f
  3274  0BD6                     l3872:	
  3275                           
  3276                           ;main.c: 341: Drive(0,150,0x00,0x01);
  3277  0BD6  3096               	movlw	150
  3278  0BD7  00D5               	movwf	??_Turn90
  3279  0BD8  0855               	movf	??_Turn90,w
  3280  0BD9  00CC               	movwf	Drive@speedL
  3281  0BDA  01CD               	clrf	Drive@radH
  3282  0BDB  01CE               	clrf	Drive@radL
  3283  0BDC  0ACE               	incf	Drive@radL,f
  3284  0BDD  3000               	movlw	0
  3285  0BDE  120A  158A  2280  120A  158A  	fcall	_Drive
  3286  0BE3                     l3876:	
  3287                           ;main.c: 342: while (angle < 86){
  3288                           
  3289  0BE3  1283               	bcf	3,5	;RP0=0, select bank0
  3290  0BE4  1303               	bcf	3,6	;RP1=0, select bank0
  3291  0BE5  0827               	movf	_angle+1,w
  3292  0BE6  3A80               	xorlw	128
  3293  0BE7  00FF               	movwf	127
  3294  0BE8  3080               	movlw	128
  3295  0BE9  027F               	subwf	127,w
  3296  0BEA  1D03               	skipz
  3297  0BEB  2BEE               	goto	u2595
  3298  0BEC  3056               	movlw	86
  3299  0BED  0226               	subwf	_angle,w
  3300  0BEE                     u2595:	
  3301  0BEE  1803               	btfsc	3,0
  3302  0BEF  2C07               	goto	l3878
  3303                           
  3304                           ;main.c: 343: angle = angle + getSensorData(20,2);
  3305  0BF0  3002               	movlw	2
  3306  0BF1  1283               	bcf	3,5	;RP0=0, select bank0
  3307  0BF2  1303               	bcf	3,6	;RP1=0, select bank0
  3308  0BF3  00D5               	movwf	??_Turn90
  3309  0BF4  0855               	movf	??_Turn90,w
  3310  0BF5  00CD               	movwf	getSensorData@bytes
  3311  0BF6  3014               	movlw	20
  3312  0BF7  120A  158A  22F9  120A  158A  	fcall	_getSensorData
  3313  0BFC  1283               	bcf	3,5	;RP0=0, select bank0
  3314  0BFD  1303               	bcf	3,6	;RP1=0, select bank0
  3315  0BFE  0826               	movf	_angle,w
  3316  0BFF  074D               	addwf	?_getSensorData,w
  3317  0C00  00A6               	movwf	_angle
  3318  0C01  0827               	movf	_angle+1,w
  3319  0C02  1803               	skipnc
  3320  0C03  0A27               	incf	_angle+1,w
  3321  0C04  074E               	addwf	?_getSensorData+1,w
  3322  0C05  00A7               	movwf	_angle+1
  3323  0C06  2BE3               	goto	l3876
  3324  0C07                     l3878:	
  3325                           
  3326                           ;main.c: 344: }
  3327                           ;main.c: 345: }
  3328                           ;main.c: 347: if (direction == 0){
  3329  0C07  1283               	bcf	3,5	;RP0=0, select bank0
  3330  0C08  1303               	bcf	3,6	;RP1=0, select bank0
  3331  0C09  0858               	movf	Turn90@direction,w
  3332  0C0A  1D03               	btfss	3,2
  3333  0C0B  2C4C               	goto	l3892
  3334                           
  3335                           ;main.c: 349: if (orientation == 3)
  3336  0C0C  3003               	movlw	3
  3337  0C0D  0669               	xorwf	_orientation,w
  3338  0C0E  1D03               	btfss	3,2
  3339  0C0F  2C12               	goto	l3884
  3340                           
  3341                           ;main.c: 350: orientation = 0;
  3342  0C10  01E9               	clrf	_orientation
  3343  0C11  2C16               	goto	l3886
  3344  0C12                     l3884:	
  3345                           
  3346                           ;main.c: 351: else orientation++;
  3347  0C12  3001               	movlw	1
  3348  0C13  00D5               	movwf	??_Turn90
  3349  0C14  0855               	movf	??_Turn90,w
  3350  0C15  07E9               	addwf	_orientation,f
  3351  0C16                     l3886:	
  3352                           
  3353                           ;main.c: 353: Drive(0,150,0xFF,0xFF);
  3354  0C16  3096               	movlw	150
  3355  0C17  00D5               	movwf	??_Turn90
  3356  0C18  0855               	movf	??_Turn90,w
  3357  0C19  00CC               	movwf	Drive@speedL
  3358  0C1A  30FF               	movlw	255
  3359  0C1B  00D6               	movwf	??_Turn90+1
  3360  0C1C  0856               	movf	??_Turn90+1,w
  3361  0C1D  00CD               	movwf	Drive@radH
  3362  0C1E  30FF               	movlw	255
  3363  0C1F  00D7               	movwf	??_Turn90+2
  3364  0C20  0857               	movf	??_Turn90+2,w
  3365  0C21  00CE               	movwf	Drive@radL
  3366  0C22  3000               	movlw	0
  3367  0C23  120A  158A  2280  120A  158A  	fcall	_Drive
  3368  0C28                     l3890:	
  3369                           ;main.c: 354: while (angle > -86){
  3370                           
  3371  0C28  1283               	bcf	3,5	;RP0=0, select bank0
  3372  0C29  1303               	bcf	3,6	;RP1=0, select bank0
  3373  0C2A  0827               	movf	_angle+1,w
  3374  0C2B  3A80               	xorlw	128
  3375  0C2C  00FF               	movwf	127
  3376  0C2D  307F               	movlw	127
  3377  0C2E  027F               	subwf	127,w
  3378  0C2F  1D03               	skipz
  3379  0C30  2C33               	goto	u2625
  3380  0C31  30AB               	movlw	171
  3381  0C32  0226               	subwf	_angle,w
  3382  0C33                     u2625:	
  3383  0C33  1C03               	btfss	3,0
  3384  0C34  2C4C               	goto	l3892
  3385                           
  3386                           ;main.c: 355: angle = angle + getSensorData(20,2);
  3387  0C35  3002               	movlw	2
  3388  0C36  1283               	bcf	3,5	;RP0=0, select bank0
  3389  0C37  1303               	bcf	3,6	;RP1=0, select bank0
  3390  0C38  00D5               	movwf	??_Turn90
  3391  0C39  0855               	movf	??_Turn90,w
  3392  0C3A  00CD               	movwf	getSensorData@bytes
  3393  0C3B  3014               	movlw	20
  3394  0C3C  120A  158A  22F9  120A  158A  	fcall	_getSensorData
  3395  0C41  1283               	bcf	3,5	;RP0=0, select bank0
  3396  0C42  1303               	bcf	3,6	;RP1=0, select bank0
  3397  0C43  0826               	movf	_angle,w
  3398  0C44  074D               	addwf	?_getSensorData,w
  3399  0C45  00A6               	movwf	_angle
  3400  0C46  0827               	movf	_angle+1,w
  3401  0C47  1803               	skipnc
  3402  0C48  0A27               	incf	_angle+1,w
  3403  0C49  074E               	addwf	?_getSensorData+1,w
  3404  0C4A  00A7               	movwf	_angle+1
  3405  0C4B  2C28               	goto	l3890
  3406  0C4C                     l3892:	
  3407                           
  3408                           ;main.c: 356: }
  3409                           ;main.c: 357: }
  3410                           ;main.c: 358: DriveDirect(0,0);
  3411  0C4C  3000               	movlw	0
  3412  0C4D  1283               	bcf	3,5	;RP0=0, select bank0
  3413  0C4E  1303               	bcf	3,6	;RP1=0, select bank0
  3414  0C4F  00CC               	movwf	DriveDirect@VelocityRight
  3415  0C50  00CD               	movwf	DriveDirect@VelocityRight+1
  3416  0C51  3000               	movlw	0
  3417  0C52  00CE               	movwf	DriveDirect@VelocityLeft
  3418  0C53  00CF               	movwf	DriveDirect@VelocityLeft+1
  3419  0C54  120A  158A  2337  120A  158A  	fcall	_DriveDirect
  3420                           
  3421                           ;main.c: 359: _delay((unsigned long)((100)*(20000000/4000.0)));
  3422  0C59  3003               	movlw	3
  3423  0C5A  1283               	bcf	3,5	;RP0=0, select bank0
  3424  0C5B  1303               	bcf	3,6	;RP1=0, select bank0
  3425  0C5C  00D7               	movwf	??_Turn90+2
  3426  0C5D  308A               	movlw	138
  3427  0C5E  00D6               	movwf	??_Turn90+1
  3428  0C5F  3056               	movlw	86
  3429  0C60  00D5               	movwf	??_Turn90
  3430  0C61                     u3627:	
  3431  0C61  0BD5               	decfsz	??_Turn90,f
  3432  0C62  2C61               	goto	u3627
  3433  0C63  0BD6               	decfsz	??_Turn90+1,f
  3434  0C64  2C61               	goto	u3627
  3435  0C65  0BD7               	decfsz	??_Turn90+2,f
  3436  0C66  2C61               	goto	u3627
  3437  0C67  2C68               	nop2
  3438  0C68  0008               	return
  3439  0C69                     __end_of_Turn90:	
  3440                           
  3441                           	psect	text9
  3442  0A80                     __ptext9:	
  3443 ;; *************** function _Drive *****************
  3444 ;; Defined at:
  3445 ;;		line 45 in file "ser.c"
  3446 ;; Parameters:    Size  Location     Type
  3447 ;;  speedH          1    wreg     unsigned char 
  3448 ;;  speedL          1    1[BANK0 ] unsigned char 
  3449 ;;  radH            1    2[BANK0 ] unsigned char 
  3450 ;;  radL            1    3[BANK0 ] unsigned char 
  3451 ;; Auto vars:     Size  Location     Type
  3452 ;;  speedH          1    4[BANK0 ] unsigned char 
  3453 ;; Return value:  Size  Location     Type
  3454 ;;                  1    wreg      void 
  3455 ;; Registers used:
  3456 ;;		wreg, status,2, status,0, pclath, cstack
  3457 ;; Tracked objects:
  3458 ;;		On entry : 0/0
  3459 ;;		On exit  : 0/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3462 ;;      Params:         0       3       0       0       0
  3463 ;;      Locals:         0       1       0       0       0
  3464 ;;      Temps:          0       0       0       0       0
  3465 ;;      Totals:         0       4       0       0       0
  3466 ;;Total ram usage:        4 bytes
  3467 ;; Hardware stack levels used:    1
  3468 ;; Hardware stack levels required when called:    2
  3469 ;; This function calls:
  3470 ;;		_ser_putch
  3471 ;; This function is called by:
  3472 ;;		_Turn90
  3473 ;; This function uses a non-reentrant model
  3474 ;;
  3475                           
  3476                           
  3477                           ;psect for function _Drive
  3478  0A80                     _Drive:	
  3479                           
  3480                           ;incstack = 0
  3481                           ; Regs used in _Drive: [wreg+status,2+status,0+pclath+cstack]
  3482                           ;Drive@speedH stored from wreg
  3483  0A80  1283               	bcf	3,5	;RP0=0, select bank0
  3484  0A81  1303               	bcf	3,6	;RP1=0, select bank0
  3485  0A82  00CF               	movwf	Drive@speedH
  3486                           
  3487                           ;ser.c: 46: ser_putch(137);
  3488  0A83  3089               	movlw	137
  3489  0A84  120A  158A  219A  120A  158A  	fcall	_ser_putch
  3490                           
  3491                           ;ser.c: 47: ser_putch(speedH);
  3492  0A89  1283               	bcf	3,5	;RP0=0, select bank0
  3493  0A8A  1303               	bcf	3,6	;RP1=0, select bank0
  3494  0A8B  084F               	movf	Drive@speedH,w
  3495  0A8C  120A  158A  219A  120A  158A  	fcall	_ser_putch
  3496                           
  3497                           ;ser.c: 48: ser_putch(speedL);
  3498  0A91  1283               	bcf	3,5	;RP0=0, select bank0
  3499  0A92  1303               	bcf	3,6	;RP1=0, select bank0
  3500  0A93  084C               	movf	Drive@speedL,w
  3501  0A94  120A  158A  219A  120A  158A  	fcall	_ser_putch
  3502                           
  3503                           ;ser.c: 49: ser_putch(radH);
  3504  0A99  1283               	bcf	3,5	;RP0=0, select bank0
  3505  0A9A  1303               	bcf	3,6	;RP1=0, select bank0
  3506  0A9B  084D               	movf	Drive@radH,w
  3507  0A9C  120A  158A  219A  120A  158A  	fcall	_ser_putch
  3508                           
  3509                           ;ser.c: 50: ser_putch(radL);
  3510  0AA1  1283               	bcf	3,5	;RP0=0, select bank0
  3511  0AA2  1303               	bcf	3,6	;RP1=0, select bank0
  3512  0AA3  084E               	movf	Drive@radL,w
  3513  0AA4  120A  158A  219A   	fcall	_ser_putch
  3514  0AA7  0008               	return
  3515  0AA8                     __end_of_Drive:	
  3516                           
  3517                           	psect	text10
  3518  05DE                     __ptext10:	
  3519 ;; *************** function _Drive1m *****************
  3520 ;; Defined at:
  3521 ;;		line 254 in file "main.c"
  3522 ;; Parameters:    Size  Location     Type
  3523 ;;		None
  3524 ;; Auto vars:     Size  Location     Type
  3525 ;;  omni_IR         1   14[BANK0 ] unsigned char 
  3526 ;;  n               1   13[BANK0 ] unsigned char 
  3527 ;; Return value:  Size  Location     Type
  3528 ;;                  1    wreg      void 
  3529 ;; Registers used:
  3530 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3531 ;; Tracked objects:
  3532 ;;		On entry : 0/0
  3533 ;;		On exit  : 0/0
  3534 ;;		Unchanged: 0/0
  3535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3536 ;;      Params:         0       0       0       0       0
  3537 ;;      Locals:         0       2       0       0       0
  3538 ;;      Temps:          0       3       0       0       0
  3539 ;;      Totals:         0       5       0       0       0
  3540 ;;Total ram usage:        5 bytes
  3541 ;; Hardware stack levels used:    1
  3542 ;; Hardware stack levels required when called:    3
  3543 ;; This function calls:
  3544 ;;		_DriveDirect
  3545 ;;		_getSensorData
  3546 ;;		_ser_putch
  3547 ;; This function is called by:
  3548 ;;		_TravelPath
  3549 ;; This function uses a non-reentrant model
  3550 ;;
  3551                           
  3552                           
  3553                           ;psect for function _Drive1m
  3554  05DE                     _Drive1m:	
  3555                           
  3556                           ;main.c: 262: distance = 0;
  3557                           
  3558                           ;incstack = 0
  3559                           ; Regs used in _Drive1m: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3560  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  3561  05DF  1303               	bcf	3,6	;RP1=0, select bank0
  3562  05E0  01A8               	clrf	_distance
  3563  05E1  01A9               	clrf	_distance+1
  3564                           
  3565                           ;main.c: 263: DriveDirect(250,250);
  3566  05E2  30FA               	movlw	250
  3567  05E3  00CC               	movwf	DriveDirect@VelocityRight
  3568  05E4  3000               	movlw	0
  3569  05E5  00CD               	movwf	DriveDirect@VelocityRight+1
  3570  05E6  30FA               	movlw	250
  3571  05E7  00CE               	movwf	DriveDirect@VelocityLeft
  3572  05E8  3000               	movlw	0
  3573  05E9  00CF               	movwf	DriveDirect@VelocityLeft+1
  3574  05EA  120A  158A  2337  120A  118A  	fcall	_DriveDirect
  3575                           
  3576                           ;main.c: 264: RB2 = 1;
  3577  05EF  1283               	bcf	3,5	;RP0=0, select bank0
  3578  05F0  1303               	bcf	3,6	;RP1=0, select bank0
  3579  05F1  1506               	bsf	6,2	;volatile
  3580                           
  3581                           ;main.c: 265: RB3 = 1;
  3582  05F2  1586               	bsf	6,3	;volatile
  3583  05F3                     l3836:	
  3584                           ;main.c: 268: while (distance < 1000){
  3585                           
  3586  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  3587  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  3588  05F5  0829               	movf	_distance+1,w
  3589  05F6  3A80               	xorlw	128
  3590  05F7  00FF               	movwf	127
  3591  05F8  3083               	movlw	131
  3592  05F9  027F               	subwf	127,w
  3593  05FA  1D03               	skipz
  3594  05FB  2DFE               	goto	u2545
  3595  05FC  30E8               	movlw	232
  3596  05FD  0228               	subwf	_distance,w
  3597  05FE                     u2545:	
  3598  05FE  1803               	btfsc	3,0
  3599  05FF  2E88               	goto	l3838
  3600                           
  3601                           ;main.c: 271: distance = distance + getSensorData(19,2);
  3602  0600  3002               	movlw	2
  3603  0601  1283               	bcf	3,5	;RP0=0, select bank0
  3604  0602  1303               	bcf	3,6	;RP1=0, select bank0
  3605  0603  00D5               	movwf	??_Drive1m
  3606  0604  0855               	movf	??_Drive1m,w
  3607  0605  00CD               	movwf	getSensorData@bytes
  3608  0606  3013               	movlw	19
  3609  0607  120A  158A  22F9  120A  118A  	fcall	_getSensorData
  3610  060C  1283               	bcf	3,5	;RP0=0, select bank0
  3611  060D  1303               	bcf	3,6	;RP1=0, select bank0
  3612  060E  0828               	movf	_distance,w
  3613  060F  074D               	addwf	?_getSensorData,w
  3614  0610  00A8               	movwf	_distance
  3615  0611  0829               	movf	_distance+1,w
  3616  0612  1803               	skipnc
  3617  0613  0A29               	incf	_distance+1,w
  3618  0614  074E               	addwf	?_getSensorData+1,w
  3619  0615  00A9               	movwf	_distance+1
  3620                           
  3621                           ;main.c: 273: if ((getSensorData(13,1)) == 1){
  3622  0616  01CD               	clrf	getSensorData@bytes
  3623  0617  0ACD               	incf	getSensorData@bytes,f
  3624  0618  300D               	movlw	13
  3625  0619  120A  158A  22F9  120A  118A  	fcall	_getSensorData
  3626  061E  1283               	bcf	3,5	;RP0=0, select bank0
  3627  061F  1303               	bcf	3,6	;RP1=0, select bank0
  3628  0620  034D               	decf	?_getSensorData,w
  3629  0621  044E               	iorwf	?_getSensorData+1,w
  3630  0622  1D03               	btfss	3,2
  3631  0623  2DF3               	goto	l3836
  3632                           
  3633                           ;main.c: 275: if((getSensorData(17,1)) != 242){
  3634  0624  01CD               	clrf	getSensorData@bytes
  3635  0625  0ACD               	incf	getSensorData@bytes,f
  3636  0626  3011               	movlw	17
  3637  0627  120A  158A  22F9  120A  118A  	fcall	_getSensorData
  3638  062C  30F2               	movlw	242
  3639  062D  1283               	bcf	3,5	;RP0=0, select bank0
  3640  062E  1303               	bcf	3,6	;RP1=0, select bank0
  3641  062F  064D               	xorwf	?_getSensorData,w
  3642  0630  044E               	iorwf	?_getSensorData+1,w
  3643  0631  1903               	btfsc	3,2
  3644  0632  2E39               	goto	l3816
  3645                           
  3646                           ;main.c: 276: IR_Wall = 1;
  3647  0633  1470               	bsf	_IR_Wall/(0+8),_IR_Wall& (0+7)
  3648                           
  3649                           ;main.c: 277: distance = 1001;
  3650  0634  30E9               	movlw	233
  3651  0635  00A8               	movwf	_distance
  3652  0636  3003               	movlw	3
  3653  0637  00A9               	movwf	_distance+1
  3654                           
  3655                           ;main.c: 278: RB3 = 0;
  3656  0638  1186               	bcf	6,3	;volatile
  3657  0639                     l3816:	
  3658                           
  3659                           ;main.c: 279: }
  3660                           ;main.c: 282: unsigned char omni_IR = (getSensorData(17,1));
  3661  0639  01CD               	clrf	getSensorData@bytes
  3662  063A  0ACD               	incf	getSensorData@bytes,f
  3663  063B  3011               	movlw	17
  3664  063C  120A  158A  22F9  120A  118A  	fcall	_getSensorData
  3665  0641  1283               	bcf	3,5	;RP0=0, select bank0
  3666  0642  1303               	bcf	3,6	;RP1=0, select bank0
  3667  0643  084D               	movf	?_getSensorData,w
  3668  0644  00D5               	movwf	??_Drive1m
  3669  0645  0855               	movf	??_Drive1m,w
  3670  0646  00D9               	movwf	Drive1m@omni_IR
  3671                           
  3672                           ;main.c: 283: if (omni_IR == 250 || omni_IR == 246){
  3673  0647  30FA               	movlw	250
  3674  0648  0659               	xorwf	Drive1m@omni_IR,w
  3675  0649  1903               	btfsc	3,2
  3676  064A  2E4F               	goto	l3822
  3677  064B  30F6               	movlw	246
  3678  064C  0659               	xorwf	Drive1m@omni_IR,w
  3679  064D  1D03               	btfss	3,2
  3680  064E  2DF3               	goto	l3836
  3681  064F                     l3822:	
  3682                           
  3683                           ;main.c: 285: targets++;
  3684  064F  3001               	movlw	1
  3685  0650  00D5               	movwf	??_Drive1m
  3686  0651  0855               	movf	??_Drive1m,w
  3687  0652  07C0               	addwf	_targets,f
  3688                           
  3689                           ;main.c: 287: switch(targets){
  3690  0653  2E6F               	goto	l3832
  3691  0654                     l3824:	
  3692                           ;main.c: 288: case 1: ser_putch(141);
  3693                           
  3694  0654  308D               	movlw	141
  3695  0655  120A  158A  219A  120A  118A  	fcall	_ser_putch
  3696                           
  3697                           ;main.c: 289: ser_putch(5);
  3698  065A  3005               	movlw	5
  3699  065B  120A  158A  219A  120A  118A  	fcall	_ser_putch
  3700                           
  3701                           ;main.c: 290: break;
  3702  0660  2E79               	goto	l3834
  3703  0661                     l3826:	
  3704                           ;main.c: 291: case 2: ser_putch(141);
  3705                           
  3706  0661  308D               	movlw	141
  3707  0662  120A  158A  219A  120A  118A  	fcall	_ser_putch
  3708                           
  3709                           ;main.c: 292: ser_putch(3);
  3710  0667  3003               	movlw	3
  3711  0668  120A  158A  219A  120A  118A  	fcall	_ser_putch
  3712                           
  3713                           ;main.c: 293: targets_found = 1;
  3714  066D  16F0               	bsf	_targets_found/(0+8),_targets_found& (0+7)
  3715                           
  3716                           ;main.c: 295: }
  3717                           
  3718                           ;main.c: 294: break;
  3719  066E  2E79               	goto	l3834
  3720  066F                     l3832:	
  3721  066F  1283               	bcf	3,5	;RP0=0, select bank0
  3722  0670  1303               	bcf	3,6	;RP1=0, select bank0
  3723  0671  0840               	movf	_targets,w
  3724                           
  3725                           ; Switch size 1, requested type "space"
  3726                           ; Number of cases is 2, Range of values is 1 to 2
  3727                           ; switch strategies available:
  3728                           ; Name         Instructions Cycles
  3729                           ; simple_byte            7     4 (average)
  3730                           ; direct_byte           17    11 (fixed)
  3731                           ; jumptable            263     9 (fixed)
  3732                           ;	Chosen strategy is simple_byte
  3733  0672  3A01               	xorlw	1	; case 1
  3734  0673  1903               	skipnz
  3735  0674  2E54               	goto	l3824
  3736  0675  3A03               	xorlw	3	; case 2
  3737  0676  1903               	skipnz
  3738  0677  2E61               	goto	l3826
  3739  0678  2E79               	goto	l3834
  3740  0679                     l3834:	
  3741                           
  3742                           ;main.c: 297: _delay((unsigned long)((2000)*(20000000/4000.0)));
  3743  0679  3033               	movlw	51
  3744  067A  1283               	bcf	3,5	;RP0=0, select bank0
  3745  067B  1303               	bcf	3,6	;RP1=0, select bank0
  3746  067C  00D7               	movwf	??_Drive1m+2
  3747  067D  30BC               	movlw	188
  3748  067E  00D6               	movwf	??_Drive1m+1
  3749  067F  3010               	movlw	16
  3750  0680  00D5               	movwf	??_Drive1m
  3751  0681                     u3637:	
  3752  0681  0BD5               	decfsz	??_Drive1m,f
  3753  0682  2E81               	goto	u3637
  3754  0683  0BD6               	decfsz	??_Drive1m+1,f
  3755  0684  2E81               	goto	u3637
  3756  0685  0BD7               	decfsz	??_Drive1m+2,f
  3757  0686  2E81               	goto	u3637
  3758  0687  2DF3               	goto	l3836
  3759  0688                     l3838:	
  3760                           
  3761                           ;main.c: 299: }
  3762                           ;main.c: 301: }
  3763                           ;main.c: 302: }
  3764                           ;main.c: 305: DriveDirect(0,0);
  3765  0688  3000               	movlw	0
  3766  0689  1283               	bcf	3,5	;RP0=0, select bank0
  3767  068A  1303               	bcf	3,6	;RP1=0, select bank0
  3768  068B  00CC               	movwf	DriveDirect@VelocityRight
  3769  068C  00CD               	movwf	DriveDirect@VelocityRight+1
  3770  068D  3000               	movlw	0
  3771  068E  00CE               	movwf	DriveDirect@VelocityLeft
  3772  068F  00CF               	movwf	DriveDirect@VelocityLeft+1
  3773  0690  120A  158A  2337  120A  118A  	fcall	_DriveDirect
  3774                           
  3775                           ;main.c: 307: if(IR_Wall == 0){
  3776  0695  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  3777  0696  2EAA               	goto	l3854
  3778  0697  2EC7               	goto	l3858
  3779  0698                     l3844:	
  3780                           ;main.c: 309: case 0: y--;
  3781                           
  3782                           ;main.c: 308: switch(orientation){
  3783                           
  3784  0698  3001               	movlw	1
  3785  0699  1283               	bcf	3,5	;RP0=0, select bank0
  3786  069A  1303               	bcf	3,6	;RP1=0, select bank0
  3787  069B  02C5               	subwf	_y,f
  3788                           
  3789                           ;main.c: 310: break;
  3790  069C  2EBA               	goto	l3856
  3791  069D                     l3846:	
  3792                           ;main.c: 311: case 1: x++;
  3793                           
  3794  069D  3001               	movlw	1
  3795  069E  00D5               	movwf	??_Drive1m
  3796  069F  0855               	movf	??_Drive1m,w
  3797  06A0  07EB               	addwf	_x,f
  3798                           
  3799                           ;main.c: 312: break;
  3800  06A1  2EBA               	goto	l3856
  3801  06A2                     l3848:	
  3802                           ;main.c: 313: case 2: y++;
  3803                           
  3804  06A2  3001               	movlw	1
  3805  06A3  00D5               	movwf	??_Drive1m
  3806  06A4  0855               	movf	??_Drive1m,w
  3807  06A5  07C5               	addwf	_y,f
  3808                           
  3809                           ;main.c: 314: break;
  3810  06A6  2EBA               	goto	l3856
  3811  06A7                     l3850:	
  3812                           ;main.c: 315: case 3: x--;
  3813                           
  3814  06A7  3001               	movlw	1
  3815  06A8  02EB               	subwf	_x,f
  3816                           
  3817                           ;main.c: 317: }
  3818                           
  3819                           ;main.c: 316: break;
  3820  06A9  2EBA               	goto	l3856
  3821  06AA                     l3854:	
  3822  06AA  1283               	bcf	3,5	;RP0=0, select bank0
  3823  06AB  1303               	bcf	3,6	;RP1=0, select bank0
  3824  06AC  0869               	movf	_orientation,w
  3825                           
  3826                           ; Switch size 1, requested type "space"
  3827                           ; Number of cases is 4, Range of values is 0 to 3
  3828                           ; switch strategies available:
  3829                           ; Name         Instructions Cycles
  3830                           ; simple_byte           13     7 (average)
  3831                           ; direct_byte           20     8 (fixed)
  3832                           ; jumptable            260     6 (fixed)
  3833                           ;	Chosen strategy is simple_byte
  3834  06AD  3A00               	xorlw	0	; case 0
  3835  06AE  1903               	skipnz
  3836  06AF  2E98               	goto	l3844
  3837  06B0  3A01               	xorlw	1	; case 1
  3838  06B1  1903               	skipnz
  3839  06B2  2E9D               	goto	l3846
  3840  06B3  3A03               	xorlw	3	; case 2
  3841  06B4  1903               	skipnz
  3842  06B5  2EA2               	goto	l3848
  3843  06B6  3A01               	xorlw	1	; case 3
  3844  06B7  1903               	skipnz
  3845  06B8  2EA7               	goto	l3850
  3846  06B9  2EBA               	goto	l3856
  3847  06BA                     l3856:	
  3848                           
  3849                           ;main.c: 318: _delay((unsigned long)((100)*(20000000/4000.0)));
  3850  06BA  3003               	movlw	3
  3851  06BB  00D7               	movwf	??_Drive1m+2
  3852  06BC  308A               	movlw	138
  3853  06BD  00D6               	movwf	??_Drive1m+1
  3854  06BE  3056               	movlw	86
  3855  06BF  00D5               	movwf	??_Drive1m
  3856  06C0                     u3647:	
  3857  06C0  0BD5               	decfsz	??_Drive1m,f
  3858  06C1  2EC0               	goto	u3647
  3859  06C2  0BD6               	decfsz	??_Drive1m+1,f
  3860  06C3  2EC0               	goto	u3647
  3861  06C4  0BD7               	decfsz	??_Drive1m+2,f
  3862  06C5  2EC0               	goto	u3647
  3863  06C6  2EC7               	nop2
  3864  06C7                     l3858:	
  3865                           
  3866                           ;main.c: 319: }
  3867                           ;main.c: 324: if (targets_found == 1){
  3868  06C7  1EF0               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  3869  06C8  0008               	return
  3870                           
  3871                           ;main.c: 325: char n = 20;
  3872  06C9  3014               	movlw	20
  3873  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  3874  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  3875  06CC  00D5               	movwf	??_Drive1m
  3876  06CD  0855               	movf	??_Drive1m,w
  3877  06CE  00D8               	movwf	Drive1m@n
  3878  06CF  0008               	return
  3879  06D0                     __end_of_Drive1m:	
  3880                           
  3881                           	psect	text11
  3882  0AF9                     __ptext11:	
  3883 ;; *************** function _getSensorData *****************
  3884 ;; Defined at:
  3885 ;;		line 85 in file "ser.c"
  3886 ;; Parameters:    Size  Location     Type
  3887 ;;  packetID        1    wreg     unsigned char 
  3888 ;;  bytes           1    2[BANK0 ] unsigned char 
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;  packetID        1    6[BANK0 ] unsigned char 
  3891 ;;  sensor          2    7[BANK0 ] int 
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  2    2[BANK0 ] int 
  3894 ;; Registers used:
  3895 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3901 ;;      Params:         0       2       0       0       0
  3902 ;;      Locals:         0       3       0       0       0
  3903 ;;      Temps:          0       2       0       0       0
  3904 ;;      Totals:         0       7       0       0       0
  3905 ;;Total ram usage:        7 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; Hardware stack levels required when called:    2
  3908 ;; This function calls:
  3909 ;;		_ser_getch
  3910 ;;		_ser_putch
  3911 ;; This function is called by:
  3912 ;;		_Drive1m
  3913 ;;		_Turn90
  3914 ;;		_re_route
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918                           
  3919                           ;psect for function _getSensorData
  3920  0AF9                     _getSensorData:	
  3921                           
  3922                           ;incstack = 0
  3923                           ; Regs used in _getSensorData: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3924                           ;getSensorData@packetID stored from wreg
  3925  0AF9  1283               	bcf	3,5	;RP0=0, select bank0
  3926  0AFA  1303               	bcf	3,6	;RP1=0, select bank0
  3927  0AFB  00D1               	movwf	getSensorData@packetID
  3928                           
  3929                           ;ser.c: 86: ser_putch(142);
  3930  0AFC  308E               	movlw	142
  3931  0AFD  120A  158A  219A  120A  158A  	fcall	_ser_putch
  3932                           
  3933                           ;ser.c: 87: ser_putch(packetID);
  3934  0B02  1283               	bcf	3,5	;RP0=0, select bank0
  3935  0B03  1303               	bcf	3,6	;RP1=0, select bank0
  3936  0B04  0851               	movf	getSensorData@packetID,w
  3937  0B05  120A  158A  219A  120A  158A  	fcall	_ser_putch
  3938                           
  3939                           ;ser.c: 89: if (bytes == 2)
  3940  0B0A  3002               	movlw	2
  3941  0B0B  1283               	bcf	3,5	;RP0=0, select bank0
  3942  0B0C  1303               	bcf	3,6	;RP1=0, select bank0
  3943  0B0D  064D               	xorwf	getSensorData@bytes,w
  3944  0B0E  1D03               	btfss	3,2
  3945  0B0F  2B1B               	goto	l3766
  3946                           
  3947                           ;ser.c: 90: highByte = ser_getch();
  3948  0B10  120A  158A  2190  120A  158A  	fcall	_ser_getch
  3949  0B15  1283               	bcf	3,5	;RP0=0, select bank0
  3950  0B16  1303               	bcf	3,6	;RP1=0, select bank0
  3951  0B17  00CF               	movwf	??_getSensorData
  3952  0B18  084F               	movf	??_getSensorData,w
  3953  0B19  00CA               	movwf	_highByte
  3954  0B1A  2B1C               	goto	l3768
  3955  0B1B                     l3766:	
  3956                           
  3957                           ;ser.c: 91: else
  3958                           ;ser.c: 92: highByte = 0;
  3959  0B1B  01CA               	clrf	_highByte
  3960  0B1C                     l3768:	
  3961                           
  3962                           ;ser.c: 94: lowByte = ser_getch();
  3963  0B1C  120A  158A  2190   	fcall	_ser_getch
  3964  0B1F  1283               	bcf	3,5	;RP0=0, select bank0
  3965  0B20  1303               	bcf	3,6	;RP1=0, select bank0
  3966  0B21  00CF               	movwf	??_getSensorData
  3967  0B22  084F               	movf	??_getSensorData,w
  3968  0B23  00B8               	movwf	_lowByte
  3969                           
  3970                           ;ser.c: 96: signed int sensor = (256*highByte + lowByte);
  3971  0B24  084A               	movf	_highByte,w
  3972  0B25  00CF               	movwf	??_getSensorData
  3973  0B26  01D0               	clrf	??_getSensorData+1
  3974  0B27  084F               	movf	??_getSensorData,w
  3975  0B28  00D0               	movwf	??_getSensorData+1
  3976  0B29  01CF               	clrf	??_getSensorData
  3977  0B2A  0838               	movf	_lowByte,w
  3978  0B2B  074F               	addwf	??_getSensorData,w
  3979  0B2C  00D2               	movwf	getSensorData@sensor
  3980  0B2D  3000               	movlw	0
  3981  0B2E  1803               	skipnc
  3982  0B2F  3001               	movlw	1
  3983  0B30  0750               	addwf	??_getSensorData+1,w
  3984  0B31  00D3               	movwf	getSensorData@sensor+1
  3985                           
  3986                           ;ser.c: 98: return sensor;
  3987  0B32  0853               	movf	getSensorData@sensor+1,w
  3988  0B33  00CE               	movwf	?_getSensorData+1
  3989  0B34  0852               	movf	getSensorData@sensor,w
  3990  0B35  00CD               	movwf	?_getSensorData
  3991  0B36  0008               	return
  3992  0B37                     __end_of_getSensorData:	
  3993                           
  3994                           	psect	text12
  3995  0990                     __ptext12:	
  3996 ;; *************** function _ser_getch *****************
  3997 ;; Defined at:
  3998 ;;		line 35 in file "ser.c"
  3999 ;; Parameters:    Size  Location     Type
  4000 ;;		None
  4001 ;; Auto vars:     Size  Location     Type
  4002 ;;  rxbyte          1    1[BANK0 ] unsigned char 
  4003 ;; Return value:  Size  Location     Type
  4004 ;;                  1    wreg      unsigned char 
  4005 ;; Registers used:
  4006 ;;		wreg
  4007 ;; Tracked objects:
  4008 ;;		On entry : 0/0
  4009 ;;		On exit  : 0/0
  4010 ;;		Unchanged: 0/0
  4011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4012 ;;      Params:         0       0       0       0       0
  4013 ;;      Locals:         0       1       0       0       0
  4014 ;;      Temps:          0       1       0       0       0
  4015 ;;      Totals:         0       2       0       0       0
  4016 ;;Total ram usage:        2 bytes
  4017 ;; Hardware stack levels used:    1
  4018 ;; Hardware stack levels required when called:    1
  4019 ;; This function calls:
  4020 ;;		Nothing
  4021 ;; This function is called by:
  4022 ;;		_getSensorData
  4023 ;; This function uses a non-reentrant model
  4024 ;;
  4025                           
  4026                           
  4027                           ;psect for function _ser_getch
  4028  0990                     _ser_getch:	
  4029  0990                     l845:	
  4030                           ;ser.c: 36: while(!RCIF);
  4031                           
  4032                           ;incstack = 0
  4033                           ; Regs used in _ser_getch: [wreg]
  4034                           
  4035  0990  1283               	bcf	3,5	;RP0=0, select bank0
  4036  0991  1303               	bcf	3,6	;RP1=0, select bank0
  4037  0992  1E8C               	btfss	12,5	;volatile
  4038  0993  2990               	goto	l845
  4039                           
  4040                           ;ser.c: 37: unsigned char rxbyte = RCREG;
  4041  0994  081A               	movf	26,w	;volatile
  4042  0995  00CB               	movwf	??_ser_getch
  4043  0996  084B               	movf	??_ser_getch,w
  4044  0997  00CC               	movwf	ser_getch@rxbyte
  4045                           
  4046                           ;ser.c: 38: return rxbyte;
  4047  0998  084C               	movf	ser_getch@rxbyte,w
  4048  0999  0008               	return
  4049  099A                     __end_of_ser_getch:	
  4050                           
  4051                           	psect	text13
  4052  0B37                     __ptext13:	
  4053 ;; *************** function _DriveDirect *****************
  4054 ;; Defined at:
  4055 ;;		line 54 in file "ser.c"
  4056 ;; Parameters:    Size  Location     Type
  4057 ;;  VelocityRigh    2    1[BANK0 ] int 
  4058 ;;  VelocityLeft    2    3[BANK0 ] int 
  4059 ;; Auto vars:     Size  Location     Type
  4060 ;;  data            2    8[BANK0 ] unsigned int 
  4061 ;;  data            2    6[BANK0 ] unsigned int 
  4062 ;; Return value:  Size  Location     Type
  4063 ;;                  1    wreg      void 
  4064 ;; Registers used:
  4065 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4066 ;; Tracked objects:
  4067 ;;		On entry : 0/0
  4068 ;;		On exit  : 0/0
  4069 ;;		Unchanged: 0/0
  4070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4071 ;;      Params:         0       4       0       0       0
  4072 ;;      Locals:         0       4       0       0       0
  4073 ;;      Temps:          0       1       0       0       0
  4074 ;;      Totals:         0       9       0       0       0
  4075 ;;Total ram usage:        9 bytes
  4076 ;; Hardware stack levels used:    1
  4077 ;; Hardware stack levels required when called:    2
  4078 ;; This function calls:
  4079 ;;		_ser_putch
  4080 ;; This function is called by:
  4081 ;;		_Drive1m
  4082 ;;		_Turn90
  4083 ;;		_re_route
  4084 ;;		_wallFollow
  4085 ;; This function uses a non-reentrant model
  4086 ;;
  4087                           
  4088                           
  4089                           ;psect for function _DriveDirect
  4090  0B37                     _DriveDirect:	
  4091                           
  4092                           ;ser.c: 55: RightSpeedH = 0;
  4093                           
  4094                           ;incstack = 0
  4095                           ; Regs used in _DriveDirect: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4096  0B37  1283               	bcf	3,5	;RP0=0, select bank0
  4097  0B38  1303               	bcf	3,6	;RP1=0, select bank0
  4098  0B39  01B4               	clrf	_RightSpeedH
  4099                           
  4100                           ;ser.c: 56: LeftSpeedH = 0;
  4101  0B3A  01B0               	clrf	_LeftSpeedH
  4102                           
  4103                           ;ser.c: 58: if(VelocityRight > 255){
  4104  0B3B  084D               	movf	DriveDirect@VelocityRight+1,w
  4105  0B3C  3A80               	xorlw	128
  4106  0B3D  00FF               	movwf	127
  4107  0B3E  3081               	movlw	129
  4108  0B3F  027F               	subwf	127,w
  4109  0B40  1D03               	skipz
  4110  0B41  2B44               	goto	u2425
  4111  0B42  3000               	movlw	0
  4112  0B43  024C               	subwf	DriveDirect@VelocityRight,w
  4113  0B44                     u2425:	
  4114  0B44  1C03               	skipc
  4115  0B45  2B67               	goto	l3724
  4116                           
  4117                           ;ser.c: 59: unsigned int data = VelocityRight;
  4118  0B46  1283               	bcf	3,5	;RP0=0, select bank0
  4119  0B47  1303               	bcf	3,6	;RP1=0, select bank0
  4120  0B48  084D               	movf	DriveDirect@VelocityRight+1,w
  4121  0B49  00D2               	movwf	DriveDirect@data+1
  4122  0B4A  084C               	movf	DriveDirect@VelocityRight,w
  4123  0B4B  00D1               	movwf	DriveDirect@data
  4124                           
  4125                           ;ser.c: 60: for (RightSpeedH = 0; data > 255; RightSpeedH++){
  4126  0B4C  01B4               	clrf	_RightSpeedH
  4127  0B4D  3001               	movlw	1
  4128  0B4E  0252               	subwf	DriveDirect@data+1,w
  4129  0B4F  3000               	movlw	0
  4130  0B50  1903               	skipnz
  4131  0B51  0251               	subwf	DriveDirect@data,w
  4132  0B52  1C03               	btfss	3,0
  4133  0B53  2B67               	goto	l3724
  4134  0B54                     l3720:	
  4135                           
  4136                           ;ser.c: 61: data = data - 256;
  4137  0B54  0851               	movf	DriveDirect@data,w
  4138  0B55  3E00               	addlw	0
  4139  0B56  00D1               	movwf	DriveDirect@data
  4140  0B57  0852               	movf	DriveDirect@data+1,w
  4141  0B58  1803               	skipnc
  4142  0B59  3E01               	addlw	1
  4143  0B5A  3EFF               	addlw	255
  4144  0B5B  00D2               	movwf	DriveDirect@data+1
  4145  0B5C  3001               	movlw	1
  4146  0B5D  00D0               	movwf	??_DriveDirect
  4147  0B5E  0850               	movf	??_DriveDirect,w
  4148  0B5F  07B4               	addwf	_RightSpeedH,f
  4149  0B60  3001               	movlw	1
  4150  0B61  0252               	subwf	DriveDirect@data+1,w
  4151  0B62  3000               	movlw	0
  4152  0B63  1903               	skipnz
  4153  0B64  0251               	subwf	DriveDirect@data,w
  4154  0B65  1803               	skipnc
  4155  0B66  2B54               	goto	l3720
  4156  0B67                     l3724:	
  4157                           
  4158                           ;ser.c: 62: }
  4159                           ;ser.c: 63: }
  4160                           ;ser.c: 64: RightSpeedL = VelocityRight;
  4161  0B67  1283               	bcf	3,5	;RP0=0, select bank0
  4162  0B68  1303               	bcf	3,6	;RP1=0, select bank0
  4163  0B69  084C               	movf	DriveDirect@VelocityRight,w
  4164  0B6A  00D0               	movwf	??_DriveDirect
  4165  0B6B  0850               	movf	??_DriveDirect,w
  4166  0B6C  00B5               	movwf	_RightSpeedL
  4167                           
  4168                           ;ser.c: 67: if(VelocityLeft > 255){
  4169  0B6D  084F               	movf	DriveDirect@VelocityLeft+1,w
  4170  0B6E  3A80               	xorlw	128
  4171  0B6F  00FF               	movwf	127
  4172  0B70  3081               	movlw	129
  4173  0B71  027F               	subwf	127,w
  4174  0B72  1D03               	skipz
  4175  0B73  2B76               	goto	u2455
  4176  0B74  3000               	movlw	0
  4177  0B75  024E               	subwf	DriveDirect@VelocityLeft,w
  4178  0B76                     u2455:	
  4179  0B76  1C03               	skipc
  4180  0B77  2B99               	goto	l3740
  4181                           
  4182                           ;ser.c: 68: unsigned int data = VelocityLeft;
  4183  0B78  1283               	bcf	3,5	;RP0=0, select bank0
  4184  0B79  1303               	bcf	3,6	;RP1=0, select bank0
  4185  0B7A  084F               	movf	DriveDirect@VelocityLeft+1,w
  4186  0B7B  00D4               	movwf	DriveDirect@data_467+1
  4187  0B7C  084E               	movf	DriveDirect@VelocityLeft,w
  4188  0B7D  00D3               	movwf	DriveDirect@data_467
  4189                           
  4190                           ;ser.c: 69: for (LeftSpeedH = 0; data > 255; LeftSpeedH++){
  4191  0B7E  01B0               	clrf	_LeftSpeedH
  4192  0B7F  3001               	movlw	1
  4193  0B80  0254               	subwf	DriveDirect@data_467+1,w
  4194  0B81  3000               	movlw	0
  4195  0B82  1903               	skipnz
  4196  0B83  0253               	subwf	DriveDirect@data_467,w
  4197  0B84  1C03               	btfss	3,0
  4198  0B85  2B99               	goto	l3740
  4199  0B86                     l3736:	
  4200                           
  4201                           ;ser.c: 70: data = data - 256;
  4202  0B86  0853               	movf	DriveDirect@data_467,w
  4203  0B87  3E00               	addlw	0
  4204  0B88  00D3               	movwf	DriveDirect@data_467
  4205  0B89  0854               	movf	DriveDirect@data_467+1,w
  4206  0B8A  1803               	skipnc
  4207  0B8B  3E01               	addlw	1
  4208  0B8C  3EFF               	addlw	255
  4209  0B8D  00D4               	movwf	DriveDirect@data_467+1
  4210  0B8E  3001               	movlw	1
  4211  0B8F  00D0               	movwf	??_DriveDirect
  4212  0B90  0850               	movf	??_DriveDirect,w
  4213  0B91  07B0               	addwf	_LeftSpeedH,f
  4214  0B92  3001               	movlw	1
  4215  0B93  0254               	subwf	DriveDirect@data_467+1,w
  4216  0B94  3000               	movlw	0
  4217  0B95  1903               	skipnz
  4218  0B96  0253               	subwf	DriveDirect@data_467,w
  4219  0B97  1803               	skipnc
  4220  0B98  2B86               	goto	l3736
  4221  0B99                     l3740:	
  4222                           
  4223                           ;ser.c: 71: }
  4224                           ;ser.c: 72: }
  4225                           ;ser.c: 73: LeftSpeedL = VelocityLeft;
  4226  0B99  1283               	bcf	3,5	;RP0=0, select bank0
  4227  0B9A  1303               	bcf	3,6	;RP1=0, select bank0
  4228  0B9B  084E               	movf	DriveDirect@VelocityLeft,w
  4229  0B9C  00D0               	movwf	??_DriveDirect
  4230  0B9D  0850               	movf	??_DriveDirect,w
  4231  0B9E  00B1               	movwf	_LeftSpeedL
  4232                           
  4233                           ;ser.c: 76: ser_putch(145);
  4234  0B9F  3091               	movlw	145
  4235  0BA0  120A  158A  219A  120A  158A  	fcall	_ser_putch
  4236                           
  4237                           ;ser.c: 77: ser_putch(RightSpeedH);
  4238  0BA5  1283               	bcf	3,5	;RP0=0, select bank0
  4239  0BA6  1303               	bcf	3,6	;RP1=0, select bank0
  4240  0BA7  0834               	movf	_RightSpeedH,w
  4241  0BA8  120A  158A  219A  120A  158A  	fcall	_ser_putch
  4242                           
  4243                           ;ser.c: 78: ser_putch(RightSpeedL);
  4244  0BAD  1283               	bcf	3,5	;RP0=0, select bank0
  4245  0BAE  1303               	bcf	3,6	;RP1=0, select bank0
  4246  0BAF  0835               	movf	_RightSpeedL,w
  4247  0BB0  120A  158A  219A  120A  158A  	fcall	_ser_putch
  4248                           
  4249                           ;ser.c: 79: ser_putch(LeftSpeedH);
  4250  0BB5  1283               	bcf	3,5	;RP0=0, select bank0
  4251  0BB6  1303               	bcf	3,6	;RP1=0, select bank0
  4252  0BB7  0830               	movf	_LeftSpeedH,w
  4253  0BB8  120A  158A  219A  120A  158A  	fcall	_ser_putch
  4254                           
  4255                           ;ser.c: 80: ser_putch(LeftSpeedL);
  4256  0BBD  1283               	bcf	3,5	;RP0=0, select bank0
  4257  0BBE  1303               	bcf	3,6	;RP1=0, select bank0
  4258  0BBF  0831               	movf	_LeftSpeedL,w
  4259  0BC0  120A  158A  219A   	fcall	_ser_putch
  4260  0BC3  0008               	return
  4261  0BC4                     __end_of_DriveDirect:	
  4262                           
  4263                           	psect	text14
  4264  099A                     __ptext14:	
  4265 ;; *************** function _ser_putch *****************
  4266 ;; Defined at:
  4267 ;;		line 30 in file "ser.c"
  4268 ;; Parameters:    Size  Location     Type
  4269 ;;  c               1    wreg     unsigned char 
  4270 ;; Auto vars:     Size  Location     Type
  4271 ;;  c               1    0[BANK0 ] unsigned char 
  4272 ;; Return value:  Size  Location     Type
  4273 ;;                  1    wreg      void 
  4274 ;; Registers used:
  4275 ;;		wreg
  4276 ;; Tracked objects:
  4277 ;;		On entry : 0/0
  4278 ;;		On exit  : 0/0
  4279 ;;		Unchanged: 0/0
  4280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4281 ;;      Params:         0       0       0       0       0
  4282 ;;      Locals:         0       1       0       0       0
  4283 ;;      Temps:          0       0       0       0       0
  4284 ;;      Totals:         0       1       0       0       0
  4285 ;;Total ram usage:        1 bytes
  4286 ;; Hardware stack levels used:    1
  4287 ;; Hardware stack levels required when called:    1
  4288 ;; This function calls:
  4289 ;;		Nothing
  4290 ;; This function is called by:
  4291 ;;		_Drive1m
  4292 ;;		_main
  4293 ;;		_Drive
  4294 ;;		_DriveDirect
  4295 ;;		_getSensorData
  4296 ;; This function uses a non-reentrant model
  4297 ;;
  4298                           
  4299                           
  4300                           ;psect for function _ser_putch
  4301  099A                     _ser_putch:	
  4302                           
  4303                           ;incstack = 0
  4304                           ; Regs used in _ser_putch: [wreg]
  4305                           ;ser_putch@c stored from wreg
  4306  099A  1283               	bcf	3,5	;RP0=0, select bank0
  4307  099B  1303               	bcf	3,6	;RP1=0, select bank0
  4308  099C  00CB               	movwf	ser_putch@c
  4309  099D                     l839:	
  4310                           ;ser.c: 31: while(!TRMT);
  4311                           
  4312  099D  1683               	bsf	3,5	;RP0=1, select bank1
  4313  099E  1303               	bcf	3,6	;RP1=0, select bank1
  4314  099F  1C98               	btfss	24,1	;volatile
  4315  09A0  299D               	goto	l839
  4316                           
  4317                           ;ser.c: 32: TXREG=c;
  4318  09A1  1283               	bcf	3,5	;RP0=0, select bank0
  4319  09A2  1303               	bcf	3,6	;RP1=0, select bank0
  4320  09A3  084B               	movf	ser_putch@c,w
  4321  09A4  0099               	movwf	25	;volatile
  4322  09A5  0008               	return
  4323  09A6                     __end_of_ser_putch:	
  4324                           
  4325                           	psect	text15
  4326  0C69                     __ptext15:	
  4327 ;; *************** function _PathTo *****************
  4328 ;; Defined at:
  4329 ;;		line 46 in file "main.c"
  4330 ;; Parameters:    Size  Location     Type
  4331 ;;  x_target        1    wreg     unsigned char 
  4332 ;;  y_target        1    5[BANK0 ] unsigned char 
  4333 ;; Auto vars:     Size  Location     Type
  4334 ;;  x_target        1   13[BANK0 ] unsigned char 
  4335 ;;  sum             1   14[BANK0 ] unsigned char 
  4336 ;;  loop            2   15[BANK0 ] int 
  4337 ;; Return value:  Size  Location     Type
  4338 ;;                  1    wreg      void 
  4339 ;; Registers used:
  4340 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4341 ;; Tracked objects:
  4342 ;;		On entry : 0/0
  4343 ;;		On exit  : 0/0
  4344 ;;		Unchanged: 0/0
  4345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4346 ;;      Params:         0       1       0       0       0
  4347 ;;      Locals:         0       4       0       0       0
  4348 ;;      Temps:          0       7       0       0       0
  4349 ;;      Totals:         0      12       0       0       0
  4350 ;;Total ram usage:       12 bytes
  4351 ;; Hardware stack levels used:    1
  4352 ;; Hardware stack levels required when called:    3
  4353 ;; This function calls:
  4354 ;;		___bmul
  4355 ;;		_lcdSetCursor
  4356 ;;		_lcdWriteData
  4357 ;;		_lcdWriteString
  4358 ;; This function is called by:
  4359 ;;		_re_route
  4360 ;;		_main
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           
  4365                           ;psect for function _PathTo
  4366  0C69                     _PathTo:	
  4367                           
  4368                           ;incstack = 0
  4369                           ; Regs used in _PathTo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4370                           ;PathTo@x_target stored from wreg
  4371  0C69  1283               	bcf	3,5	;RP0=0, select bank0
  4372  0C6A  1303               	bcf	3,6	;RP1=0, select bank0
  4373  0C6B  00D8               	movwf	PathTo@x_target
  4374                           
  4375                           ;main.c: 50: for (r = 0; r <= 3; r++){
  4376  0C6C  01BB               	clrf	_r
  4377  0C6D  3004               	movlw	4
  4378  0C6E  023B               	subwf	_r,w
  4379  0C6F  1803               	btfsc	3,0
  4380  0C70  2CAE               	goto	l3932
  4381  0C71                     l3916:	
  4382                           
  4383                           ;main.c: 51: for (c = 0; c <= 4; c++){
  4384  0C71  01B6               	clrf	_c
  4385  0C72  3005               	movlw	5
  4386  0C73  0236               	subwf	_c,w
  4387  0C74  1803               	btfsc	3,0
  4388  0C75  2CA6               	goto	l3928
  4389  0C76                     l3922:	
  4390                           
  4391                           ;main.c: 52: mazeGrid[r][c] = mazeGridDefault[r][c];
  4392  0C76  3005               	movlw	5
  4393  0C77  00D1               	movwf	??_PathTo
  4394  0C78  0851               	movf	??_PathTo,w
  4395  0C79  00CB               	movwf	___bmul@multiplicand
  4396  0C7A  083B               	movf	_r,w
  4397  0C7B  120A  158A  21D5  120A  158A  	fcall	___bmul
  4398  0C80  3EB4               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  4399  0C81  1283               	bcf	3,5	;RP0=0, select bank0
  4400  0C82  1303               	bcf	3,6	;RP1=0, select bank0
  4401  0C83  0736               	addwf	_c,w
  4402  0C84  00D2               	movwf	??_PathTo+1
  4403  0C85  0852               	movf	??_PathTo+1,w
  4404  0C86  0084               	movwf	4
  4405  0C87  1383               	bcf	3,7	;select IRP bank1
  4406  0C88  0800               	movf	0,w
  4407  0C89  00D3               	movwf	??_PathTo+2
  4408  0C8A  3005               	movlw	5
  4409  0C8B  00D4               	movwf	??_PathTo+3
  4410  0C8C  0854               	movf	??_PathTo+3,w
  4411  0C8D  00CB               	movwf	___bmul@multiplicand
  4412  0C8E  083B               	movf	_r,w
  4413  0C8F  120A  158A  21D5  120A  158A  	fcall	___bmul
  4414  0C94  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  4415  0C95  1283               	bcf	3,5	;RP0=0, select bank0
  4416  0C96  1303               	bcf	3,6	;RP1=0, select bank0
  4417  0C97  0736               	addwf	_c,w
  4418  0C98  00D5               	movwf	??_PathTo+4
  4419  0C99  0855               	movf	??_PathTo+4,w
  4420  0C9A  0084               	movwf	4
  4421  0C9B  0853               	movf	??_PathTo+2,w
  4422  0C9C  1383               	bcf	3,7	;select IRP bank1
  4423  0C9D  0080               	movwf	0
  4424  0C9E  3001               	movlw	1
  4425  0C9F  00D1               	movwf	??_PathTo
  4426  0CA0  0851               	movf	??_PathTo,w
  4427  0CA1  07B6               	addwf	_c,f
  4428  0CA2  3005               	movlw	5
  4429  0CA3  0236               	subwf	_c,w
  4430  0CA4  1C03               	skipc
  4431  0CA5  2C76               	goto	l3922
  4432  0CA6                     l3928:	
  4433  0CA6  3001               	movlw	1
  4434  0CA7  00D1               	movwf	??_PathTo
  4435  0CA8  0851               	movf	??_PathTo,w
  4436  0CA9  07BB               	addwf	_r,f
  4437  0CAA  3004               	movlw	4
  4438  0CAB  023B               	subwf	_r,w
  4439  0CAC  1C03               	skipc
  4440  0CAD  2C71               	goto	l3916
  4441  0CAE                     l3932:	
  4442                           
  4443                           ;main.c: 53: }
  4444                           ;main.c: 54: }
  4445                           ;main.c: 56: pathCountShortest = 20;
  4446  0CAE  3014               	movlw	20
  4447  0CAF  00D1               	movwf	??_PathTo
  4448  0CB0  0851               	movf	??_PathTo,w
  4449  0CB1  00EA               	movwf	_pathCountShortest
  4450                           
  4451                           ;main.c: 57: for (r = 0; r <= 1; r++){
  4452  0CB2  01BB               	clrf	_r
  4453  0CB3  3002               	movlw	2
  4454  0CB4  023B               	subwf	_r,w
  4455  0CB5  1803               	btfsc	3,0
  4456  0CB6  2CDE               	goto	l3956
  4457  0CB7                     l3940:	
  4458                           
  4459                           ;main.c: 58: for (c = 0; c <= 15; c++){
  4460  0CB7  01B6               	clrf	_c
  4461  0CB8  3010               	movlw	16
  4462  0CB9  0236               	subwf	_c,w
  4463  0CBA  1803               	btfsc	3,0
  4464  0CBB  2CD6               	goto	l3952
  4465  0CBC                     l3946:	
  4466                           
  4467                           ;main.c: 59: pathShortest[r][c] = 0;
  4468  0CBC  083B               	movf	_r,w
  4469  0CBD  00D1               	movwf	??_PathTo
  4470  0CBE  3004               	movlw	4
  4471  0CBF                     u2715:	
  4472  0CBF  1003               	clrc
  4473  0CC0  0DD1               	rlf	??_PathTo,f
  4474  0CC1  3EFF               	addlw	-1
  4475  0CC2  1D03               	skipz
  4476  0CC3  2CBF               	goto	u2715
  4477  0CC4  30C8               	movlw	(low (_pathShortest| 0))& (0+255)
  4478  0CC5  0751               	addwf	??_PathTo,w
  4479  0CC6  00D2               	movwf	??_PathTo+1
  4480  0CC7  0836               	movf	_c,w
  4481  0CC8  0752               	addwf	??_PathTo+1,w
  4482  0CC9  00D3               	movwf	??_PathTo+2
  4483  0CCA  0853               	movf	??_PathTo+2,w
  4484  0CCB  0084               	movwf	4
  4485  0CCC  1383               	bcf	3,7	;select IRP bank1
  4486  0CCD  0180               	clrf	0
  4487  0CCE  3001               	movlw	1
  4488  0CCF  00D1               	movwf	??_PathTo
  4489  0CD0  0851               	movf	??_PathTo,w
  4490  0CD1  07B6               	addwf	_c,f
  4491  0CD2  3010               	movlw	16
  4492  0CD3  0236               	subwf	_c,w
  4493  0CD4  1C03               	skipc
  4494  0CD5  2CBC               	goto	l3946
  4495  0CD6                     l3952:	
  4496  0CD6  3001               	movlw	1
  4497  0CD7  00D1               	movwf	??_PathTo
  4498  0CD8  0851               	movf	??_PathTo,w
  4499  0CD9  07BB               	addwf	_r,f
  4500  0CDA  3002               	movlw	2
  4501  0CDB  023B               	subwf	_r,w
  4502  0CDC  1C03               	skipc
  4503  0CDD  2CB7               	goto	l3940
  4504  0CDE                     l3956:	
  4505                           
  4506                           ;main.c: 60: }
  4507                           ;main.c: 61: }
  4508                           ;main.c: 63: x_goto = x_target;
  4509  0CDE  0858               	movf	PathTo@x_target,w
  4510  0CDF  00D1               	movwf	??_PathTo
  4511  0CE0  0851               	movf	??_PathTo,w
  4512  0CE1  00C1               	movwf	_x_goto
  4513                           
  4514                           ;main.c: 64: y_goto = y_target;
  4515  0CE2  0850               	movf	PathTo@y_target,w
  4516  0CE3  00D1               	movwf	??_PathTo
  4517  0CE4  0851               	movf	??_PathTo,w
  4518  0CE5  00C6               	movwf	_y_goto
  4519                           
  4520                           ;main.c: 66: x_path = x;
  4521  0CE6  086B               	movf	_x,w
  4522  0CE7  00D1               	movwf	??_PathTo
  4523  0CE8  0851               	movf	??_PathTo,w
  4524  0CE9  00C3               	movwf	_x_path
  4525                           
  4526                           ;main.c: 67: y_path = y;
  4527  0CEA  0845               	movf	_y,w
  4528  0CEB  00D1               	movwf	??_PathTo
  4529  0CEC  0851               	movf	??_PathTo,w
  4530  0CED  00C8               	movwf	_y_path
  4531                           
  4532                           ;main.c: 68: orientation_path = orientation;
  4533  0CEE  0869               	movf	_orientation,w
  4534  0CEF  00D1               	movwf	??_PathTo
  4535  0CF0  0851               	movf	??_PathTo,w
  4536  0CF1  00B9               	movwf	_orientation_path
  4537                           
  4538                           ;main.c: 70: pathCount = 0;
  4539  0CF2  01BA               	clrf	_pathCount
  4540                           
  4541                           ;main.c: 73: lcdSetCursor(0b10000000);
  4542  0CF3  3080               	movlw	128
  4543  0CF4  120A  158A  2187  120A  158A  	fcall	_lcdSetCursor
  4544                           
  4545                           ;main.c: 74: lcdWriteString("Working...");
  4546  0CF9  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  4547  0CFA  120A  158A  223E  120A  158A  	fcall	_lcdWriteString
  4548                           
  4549                           ;main.c: 76: for (int loop = 0; loop <= 2000; loop++){
  4550  0CFF  1283               	bcf	3,5	;RP0=0, select bank0
  4551  0D00  1303               	bcf	3,6	;RP1=0, select bank0
  4552  0D01  01DA               	clrf	PathTo@loop
  4553  0D02  01DB               	clrf	PathTo@loop+1
  4554  0D03  085B               	movf	PathTo@loop+1,w
  4555  0D04  3A80               	xorlw	128
  4556  0D05  00FF               	movwf	127
  4557  0D06  3087               	movlw	135
  4558  0D07  027F               	subwf	127,w
  4559  0D08  1D03               	skipz
  4560  0D09  2D0C               	goto	u2745
  4561  0D0A  30D1               	movlw	209
  4562  0D0B  025A               	subwf	PathTo@loop,w
  4563  0D0C                     u2745:	
  4564  0D0C  1803               	btfsc	3,0
  4565  0D0D  2FBF               	goto	l4136
  4566  0D0E                     l180:	
  4567                           
  4568                           ;main.c: 78: reset_flag = 0;
  4569  0D0E  11F0               	bcf	_reset_flag/(0+8),_reset_flag& (0+7)
  4570                           
  4571                           ;main.c: 80: path[0][pathCount] = x_path;
  4572  0D0F  1283               	bcf	3,5	;RP0=0, select bank0
  4573  0D10  1303               	bcf	3,6	;RP1=0, select bank0
  4574  0D11  0843               	movf	_x_path,w
  4575  0D12  00D1               	movwf	??_PathTo
  4576  0D13  083A               	movf	_pathCount,w
  4577  0D14  3ED0               	addlw	(low (_path| (0+256)))& (0+255)
  4578  0D15  0084               	movwf	4
  4579  0D16  0851               	movf	??_PathTo,w
  4580  0D17  1783               	bsf	3,7	;select IRP bank3
  4581  0D18  0080               	movwf	0
  4582                           
  4583                           ;main.c: 81: path[1][pathCount] = y_path;
  4584  0D19  0848               	movf	_y_path,w
  4585  0D1A  00D1               	movwf	??_PathTo
  4586  0D1B  083A               	movf	_pathCount,w
  4587  0D1C  3EE0               	addlw	(low ((_path| (0+256)+16)))& (0+255)
  4588  0D1D  0084               	movwf	4
  4589  0D1E  0851               	movf	??_PathTo,w
  4590  0D1F  0080               	movwf	0
  4591                           
  4592                           ;main.c: 86: left = gridWalls[0][(mazeGrid[y_path][x_path])];
  4593  0D20  3005               	movlw	5
  4594  0D21  00D1               	movwf	??_PathTo
  4595  0D22  0851               	movf	??_PathTo,w
  4596  0D23  00CB               	movwf	___bmul@multiplicand
  4597  0D24  0848               	movf	_y_path,w
  4598  0D25  120A  158A  21D5  120A  158A  	fcall	___bmul
  4599  0D2A  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  4600  0D2B  1283               	bcf	3,5	;RP0=0, select bank0
  4601  0D2C  1303               	bcf	3,6	;RP1=0, select bank0
  4602  0D2D  0743               	addwf	_x_path,w
  4603  0D2E  00D2               	movwf	??_PathTo+1
  4604  0D2F  0852               	movf	??_PathTo+1,w
  4605  0D30  0084               	movwf	4
  4606  0D31  1383               	bcf	3,7	;select IRP bank1
  4607  0D32  0800               	movf	0,w
  4608  0D33  3E90               	addlw	(low (_gridWalls| (0+256)))& (0+255)
  4609  0D34  0084               	movwf	4
  4610  0D35  1170               	bcf	_left/(0+8),_left& (0+7)
  4611  0D36  1783               	bsf	3,7	;select IRP bank3
  4612  0D37  1800               	btfsc	0,0
  4613  0D38  1570               	bsf	_left/(0+8),_left& (0+7)
  4614                           
  4615                           ;main.c: 87: up = gridWalls[1][(mazeGrid[y_path][x_path])];
  4616  0D39  3005               	movlw	5
  4617  0D3A  1283               	bcf	3,5	;RP0=0, select bank0
  4618  0D3B  1303               	bcf	3,6	;RP1=0, select bank0
  4619  0D3C  00D1               	movwf	??_PathTo
  4620  0D3D  0851               	movf	??_PathTo,w
  4621  0D3E  00CB               	movwf	___bmul@multiplicand
  4622  0D3F  0848               	movf	_y_path,w
  4623  0D40  120A  158A  21D5  120A  158A  	fcall	___bmul
  4624  0D45  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  4625  0D46  1283               	bcf	3,5	;RP0=0, select bank0
  4626  0D47  1303               	bcf	3,6	;RP1=0, select bank0
  4627  0D48  0743               	addwf	_x_path,w
  4628  0D49  00D2               	movwf	??_PathTo+1
  4629  0D4A  0852               	movf	??_PathTo+1,w
  4630  0D4B  0084               	movwf	4
  4631  0D4C  1383               	bcf	3,7	;select IRP bank1
  4632  0D4D  0800               	movf	0,w
  4633  0D4E  3EA0               	addlw	(low ((_gridWalls| (0+256)+16)))& (0+255)
  4634  0D4F  0084               	movwf	4
  4635  0D50  1370               	bcf	_up/(0+8),_up& (0+7)
  4636  0D51  1783               	bsf	3,7	;select IRP bank3
  4637  0D52  1800               	btfsc	0,0
  4638  0D53  1770               	bsf	_up/(0+8),_up& (0+7)
  4639                           
  4640                           ;main.c: 88: right = gridWalls[2][(mazeGrid[y_path][x_path])];
  4641  0D54  3005               	movlw	5
  4642  0D55  1283               	bcf	3,5	;RP0=0, select bank0
  4643  0D56  1303               	bcf	3,6	;RP1=0, select bank0
  4644  0D57  00D1               	movwf	??_PathTo
  4645  0D58  0851               	movf	??_PathTo,w
  4646  0D59  00CB               	movwf	___bmul@multiplicand
  4647  0D5A  0848               	movf	_y_path,w
  4648  0D5B  120A  158A  21D5  120A  158A  	fcall	___bmul
  4649  0D60  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  4650  0D61  1283               	bcf	3,5	;RP0=0, select bank0
  4651  0D62  1303               	bcf	3,6	;RP1=0, select bank0
  4652  0D63  0743               	addwf	_x_path,w
  4653  0D64  00D2               	movwf	??_PathTo+1
  4654  0D65  0852               	movf	??_PathTo+1,w
  4655  0D66  0084               	movwf	4
  4656  0D67  1383               	bcf	3,7	;select IRP bank1
  4657  0D68  0800               	movf	0,w
  4658  0D69  3EB0               	addlw	(low ((_gridWalls| (0+256)+32)))& (0+255)
  4659  0D6A  0084               	movwf	4
  4660  0D6B  1270               	bcf	_right/(0+8),_right& (0+7)
  4661  0D6C  1783               	bsf	3,7	;select IRP bank3
  4662  0D6D  1800               	btfsc	0,0
  4663  0D6E  1670               	bsf	_right/(0+8),_right& (0+7)
  4664                           
  4665                           ;main.c: 89: down = gridWalls[3][(mazeGrid[y_path][x_path])];
  4666  0D6F  3005               	movlw	5
  4667  0D70  1283               	bcf	3,5	;RP0=0, select bank0
  4668  0D71  1303               	bcf	3,6	;RP1=0, select bank0
  4669  0D72  00D1               	movwf	??_PathTo
  4670  0D73  0851               	movf	??_PathTo,w
  4671  0D74  00CB               	movwf	___bmul@multiplicand
  4672  0D75  0848               	movf	_y_path,w
  4673  0D76  120A  158A  21D5  120A  158A  	fcall	___bmul
  4674  0D7B  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  4675  0D7C  1283               	bcf	3,5	;RP0=0, select bank0
  4676  0D7D  1303               	bcf	3,6	;RP1=0, select bank0
  4677  0D7E  0743               	addwf	_x_path,w
  4678  0D7F  00D2               	movwf	??_PathTo+1
  4679  0D80  0852               	movf	??_PathTo+1,w
  4680  0D81  0084               	movwf	4
  4681  0D82  1383               	bcf	3,7	;select IRP bank1
  4682  0D83  0800               	movf	0,w
  4683  0D84  3EC0               	addlw	(low ((_gridWalls| (0+256)+48)))& (0+255)
  4684  0D85  0084               	movwf	4
  4685  0D86  10F0               	bcf	_down/(0+8),_down& (0+7)
  4686  0D87  1783               	bsf	3,7	;select IRP bank3
  4687  0D88  1800               	btfsc	0,0
  4688  0D89  14F0               	bsf	_down/(0+8),_down& (0+7)
  4689                           
  4690                           ;main.c: 93: if (pathCount != 0){
  4691  0D8A  1283               	bcf	3,5	;RP0=0, select bank0
  4692  0D8B  1303               	bcf	3,6	;RP1=0, select bank0
  4693  0D8C  083A               	movf	_pathCount,w
  4694  0D8D  1D03               	btfss	3,2
  4695  0D8E  2D98               	goto	l3986
  4696  0D8F  2DA6               	goto	l3988
  4697  0D90                     l184:	
  4698                           ;main.c: 95: case 0: down = 1;
  4699                           
  4700                           ;main.c: 94: switch(orientation_path){
  4701                           
  4702  0D90  14F0               	bsf	_down/(0+8),_down& (0+7)
  4703                           
  4704                           ;main.c: 96: break;
  4705  0D91  2DA6               	goto	l3988
  4706  0D92                     l186:	
  4707                           ;main.c: 97: case 1: left = 1;
  4708                           
  4709  0D92  1570               	bsf	_left/(0+8),_left& (0+7)
  4710                           
  4711                           ;main.c: 98: break;
  4712  0D93  2DA6               	goto	l3988
  4713  0D94                     l187:	
  4714                           ;main.c: 99: case 2: up = 1;
  4715                           
  4716  0D94  1770               	bsf	_up/(0+8),_up& (0+7)
  4717                           
  4718                           ;main.c: 100: break;
  4719  0D95  2DA6               	goto	l3988
  4720  0D96                     l188:	
  4721                           ;main.c: 101: case 3: right = 1;
  4722                           
  4723  0D96  1670               	bsf	_right/(0+8),_right& (0+7)
  4724                           
  4725                           ;main.c: 103: }
  4726                           
  4727                           ;main.c: 102: break;
  4728  0D97  2DA6               	goto	l3988
  4729  0D98                     l3986:	
  4730  0D98  0839               	movf	_orientation_path,w
  4731                           
  4732                           ; Switch size 1, requested type "space"
  4733                           ; Number of cases is 4, Range of values is 0 to 3
  4734                           ; switch strategies available:
  4735                           ; Name         Instructions Cycles
  4736                           ; simple_byte           13     7 (average)
  4737                           ; direct_byte           20     8 (fixed)
  4738                           ; jumptable            260     6 (fixed)
  4739                           ;	Chosen strategy is simple_byte
  4740  0D99  3A00               	xorlw	0	; case 0
  4741  0D9A  1903               	skipnz
  4742  0D9B  2D90               	goto	l184
  4743  0D9C  3A01               	xorlw	1	; case 1
  4744  0D9D  1903               	skipnz
  4745  0D9E  2D92               	goto	l186
  4746  0D9F  3A03               	xorlw	3	; case 2
  4747  0DA0  1903               	skipnz
  4748  0DA1  2D94               	goto	l187
  4749  0DA2  3A01               	xorlw	1	; case 3
  4750  0DA3  1903               	skipnz
  4751  0DA4  2D96               	goto	l188
  4752  0DA5  2DA6               	goto	l3988
  4753  0DA6                     l3988:	
  4754                           
  4755                           ;main.c: 104: }
  4756                           ;main.c: 108: char sum = (left + up + down + right);
  4757  0DA6  3000               	movlw	0
  4758  0DA7  1970               	btfsc	_left/(0+8),_left& (0+7)
  4759  0DA8  3001               	movlw	1
  4760  0DA9  1B70               	btfsc	_up/(0+8),_up& (0+7)
  4761  0DAA  3E01               	addlw	1
  4762  0DAB  18F0               	btfsc	_down/(0+8),_down& (0+7)
  4763  0DAC  3E01               	addlw	1
  4764  0DAD  1A70               	btfsc	_right/(0+8),_right& (0+7)
  4765  0DAE  3E01               	addlw	1
  4766  0DAF  00D1               	movwf	??_PathTo
  4767  0DB0  0851               	movf	??_PathTo,w
  4768  0DB1  00D9               	movwf	PathTo@sum
  4769                           
  4770                           ;main.c: 109: if(sum <= 2){
  4771  0DB2  3003               	movlw	3
  4772  0DB3  0259               	subwf	PathTo@sum,w
  4773  0DB4  1803               	skipnc
  4774  0DB5  2DD1               	goto	l189
  4775                           
  4776                           ;main.c: 110: x_int = x_path;
  4777  0DB6  0843               	movf	_x_path,w
  4778  0DB7  00D1               	movwf	??_PathTo
  4779  0DB8  0851               	movf	??_PathTo,w
  4780  0DB9  00C2               	movwf	_x_int
  4781                           
  4782                           ;main.c: 111: y_int = y_path;
  4783  0DBA  0848               	movf	_y_path,w
  4784  0DBB  00D1               	movwf	??_PathTo
  4785  0DBC  0851               	movf	??_PathTo,w
  4786  0DBD  00C7               	movwf	_y_int
  4787                           
  4788                           ;main.c: 117: if (left == 0)
  4789  0DBE  1970               	btfsc	_left/(0+8),_left& (0+7)
  4790  0DBF  2DC2               	goto	l190
  4791                           
  4792                           ;main.c: 118: intersection_orientation = 3;
  4793  0DC0  3003               	movlw	3
  4794  0DC1  2DCE               	goto	L5
  4795  0DC2                     l190:	
  4796                           
  4797                           ;main.c: 119: else if (up == 0)
  4798  0DC2  1B70               	btfsc	_up/(0+8),_up& (0+7)
  4799  0DC3  2DC6               	goto	l192
  4800                           
  4801                           ;main.c: 120: intersection_orientation = 0;
  4802  0DC4  01B7               	clrf	_intersection_orientation
  4803  0DC5  2DD1               	goto	l189
  4804  0DC6                     l192:	
  4805                           
  4806                           ;main.c: 121: else if (right == 0)
  4807  0DC6  1A70               	btfsc	_right/(0+8),_right& (0+7)
  4808  0DC7  2DCB               	goto	l194
  4809                           
  4810                           ;main.c: 122: intersection_orientation = 1;
  4811  0DC8  01B7               	clrf	_intersection_orientation
  4812  0DC9  0AB7               	incf	_intersection_orientation,f
  4813  0DCA  2DD1               	goto	l189
  4814  0DCB                     l194:	
  4815                           
  4816                           ;main.c: 123: else if (down == 0)
  4817  0DCB  18F0               	btfsc	_down/(0+8),_down& (0+7)
  4818  0DCC  2DD1               	goto	l189
  4819                           
  4820                           ;main.c: 124: intersection_orientation = 2;
  4821  0DCD  3002               	movlw	2
  4822  0DCE                     L5:	
  4823  0DCE  00D1               	movwf	??_PathTo
  4824  0DCF  0851               	movf	??_PathTo,w
  4825  0DD0  00B7               	movwf	_intersection_orientation
  4826  0DD1                     l189:	
  4827                           
  4828                           ;main.c: 125: }
  4829                           ;main.c: 132: if ((x_path == x_target)){
  4830  0DD1  0843               	movf	_x_path,w
  4831  0DD2  0658               	xorwf	PathTo@x_target,w
  4832  0DD3  1D03               	skipz
  4833  0DD4  2ECF               	goto	l4068
  4834                           
  4835                           ;main.c: 133: if (y_path == y_target){
  4836  0DD5  0848               	movf	_y_path,w
  4837  0DD6  0650               	xorwf	PathTo@y_target,w
  4838  0DD7  1D03               	skipz
  4839  0DD8  2ECF               	goto	l4068
  4840                           
  4841                           ;main.c: 137: if(pathCount < pathCountShortest){
  4842  0DD9  086A               	movf	_pathCountShortest,w
  4843  0DDA  023A               	subwf	_pathCount,w
  4844  0DDB  1803               	skipnc
  4845  0DDC  2E87               	goto	l4040
  4846                           
  4847                           ;main.c: 138: pathCountShortest = pathCount;
  4848  0DDD  083A               	movf	_pathCount,w
  4849  0DDE  00D1               	movwf	??_PathTo
  4850  0DDF  0851               	movf	??_PathTo,w
  4851  0DE0  00EA               	movwf	_pathCountShortest
  4852                           
  4853                           ;main.c: 139: for (r = 0; r <= 1; r++){
  4854  0DE1  01BB               	clrf	_r
  4855  0DE2                     L13:	
  4856  0DE2  3002               	movlw	2
  4857  0DE3  023B               	subwf	_r,w
  4858  0DE4  1803               	btfsc	3,0
  4859  0DE5  2E87               	goto	l4040
  4860                           
  4861                           ;main.c: 140: for (c = 0; c <= 15; c++){
  4862  0DE6  01B6               	clrf	_c
  4863  0DE7  3010               	movlw	16
  4864  0DE8  0236               	subwf	_c,w
  4865  0DE9  1803               	btfsc	3,0
  4866  0DEA  2E19               	goto	l4026
  4867  0DEB                     l4020:	
  4868                           
  4869                           ;main.c: 141: pathShortest[r][c] = path[r][c];
  4870  0DEB  083B               	movf	_r,w
  4871  0DEC  00D1               	movwf	??_PathTo
  4872  0DED  3004               	movlw	4
  4873  0DEE                     u2905:	
  4874  0DEE  1003               	clrc
  4875  0DEF  0DD1               	rlf	??_PathTo,f
  4876  0DF0  3EFF               	addlw	-1
  4877  0DF1  1D03               	skipz
  4878  0DF2  2DEE               	goto	u2905
  4879  0DF3  30D0               	movlw	(low (_path| (0+256)))& (0+255)
  4880  0DF4  0751               	addwf	??_PathTo,w
  4881  0DF5  00D2               	movwf	??_PathTo+1
  4882  0DF6  0836               	movf	_c,w
  4883  0DF7  0752               	addwf	??_PathTo+1,w
  4884  0DF8  00D3               	movwf	??_PathTo+2
  4885  0DF9  0853               	movf	??_PathTo+2,w
  4886  0DFA  0084               	movwf	4
  4887  0DFB  1783               	bsf	3,7	;select IRP bank3
  4888  0DFC  0800               	movf	0,w
  4889  0DFD  00D4               	movwf	??_PathTo+3
  4890  0DFE  083B               	movf	_r,w
  4891  0DFF  00D5               	movwf	??_PathTo+4
  4892  0E00  3004               	movlw	4
  4893  0E01                     u2915:	
  4894  0E01  1003               	clrc
  4895  0E02  0DD5               	rlf	??_PathTo+4,f
  4896  0E03  3EFF               	addlw	-1
  4897  0E04  1D03               	skipz
  4898  0E05  2E01               	goto	u2915
  4899  0E06  30C8               	movlw	(low (_pathShortest| 0))& (0+255)
  4900  0E07  0755               	addwf	??_PathTo+4,w
  4901  0E08  00D6               	movwf	??_PathTo+5
  4902  0E09  0836               	movf	_c,w
  4903  0E0A  0756               	addwf	??_PathTo+5,w
  4904  0E0B  00D7               	movwf	??_PathTo+6
  4905  0E0C  0857               	movf	??_PathTo+6,w
  4906  0E0D  0084               	movwf	4
  4907  0E0E  0854               	movf	??_PathTo+3,w
  4908  0E0F  1383               	bcf	3,7	;select IRP bank1
  4909  0E10  0080               	movwf	0
  4910  0E11  3001               	movlw	1
  4911  0E12  00D1               	movwf	??_PathTo
  4912  0E13  0851               	movf	??_PathTo,w
  4913  0E14  07B6               	addwf	_c,f
  4914  0E15  3010               	movlw	16
  4915  0E16  0236               	subwf	_c,w
  4916  0E17  1C03               	skipc
  4917  0E18  2DEB               	goto	l4020
  4918  0E19                     l4026:	
  4919  0E19  3001               	movlw	1
  4920  0E1A  00D1               	movwf	??_PathTo
  4921  0E1B  0851               	movf	??_PathTo,w
  4922  0E1C  07BB               	addwf	_r,f
  4923  0E1D  2DE2               	goto	L13
  4924  0E1E                     l4030:	
  4925                           ;main.c: 151: case 0: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 4);
  4926                           
  4927                           ;main.c: 142: }
  4928                           ;main.c: 143: }
  4929                           ;main.c: 144: }
  4930                           ;main.c: 150: switch(intersection_orientation){
  4931                           
  4932  0E1E  3005               	movlw	5
  4933  0E1F  00D1               	movwf	??_PathTo
  4934  0E20  0851               	movf	??_PathTo,w
  4935  0E21  00CB               	movwf	___bmul@multiplicand
  4936  0E22  0847               	movf	_y_int,w
  4937  0E23  120A  158A  21D5  120A  158A  	fcall	___bmul
  4938  0E28  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  4939  0E29  1283               	bcf	3,5	;RP0=0, select bank0
  4940  0E2A  1303               	bcf	3,6	;RP1=0, select bank0
  4941  0E2B  0742               	addwf	_x_int,w
  4942  0E2C  00D2               	movwf	??_PathTo+1
  4943  0E2D  0852               	movf	??_PathTo+1,w
  4944  0E2E  0084               	movwf	4
  4945  0E2F  1383               	bcf	3,7	;select IRP bank1
  4946  0E30  0800               	movf	0,w
  4947  0E31  3E04               	addlw	4
  4948  0E32  2E71               	goto	L15
  4949  0E33                     l4032:	
  4950                           ;main.c: 153: case 1: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 2);
  4951                           
  4952                           ;main.c: 152: break;
  4953                           
  4954  0E33  3005               	movlw	5
  4955  0E34  00D1               	movwf	??_PathTo
  4956  0E35  0851               	movf	??_PathTo,w
  4957  0E36  00CB               	movwf	___bmul@multiplicand
  4958  0E37  0847               	movf	_y_int,w
  4959  0E38  120A  158A  21D5  120A  158A  	fcall	___bmul
  4960  0E3D  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  4961  0E3E  1283               	bcf	3,5	;RP0=0, select bank0
  4962  0E3F  1303               	bcf	3,6	;RP1=0, select bank0
  4963  0E40  0742               	addwf	_x_int,w
  4964  0E41  00D2               	movwf	??_PathTo+1
  4965  0E42  0852               	movf	??_PathTo+1,w
  4966  0E43  0084               	movwf	4
  4967  0E44  1383               	bcf	3,7	;select IRP bank1
  4968  0E45  0800               	movf	0,w
  4969  0E46  3E02               	addlw	2
  4970  0E47  2E71               	goto	L15
  4971  0E48                     l4034:	
  4972                           ;main.c: 155: case 2: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 1);
  4973                           
  4974                           ;main.c: 154: break;
  4975                           
  4976  0E48  3005               	movlw	5
  4977  0E49  00D1               	movwf	??_PathTo
  4978  0E4A  0851               	movf	??_PathTo,w
  4979  0E4B  00CB               	movwf	___bmul@multiplicand
  4980  0E4C  0847               	movf	_y_int,w
  4981  0E4D  120A  158A  21D5  120A  158A  	fcall	___bmul
  4982  0E52  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  4983  0E53  1283               	bcf	3,5	;RP0=0, select bank0
  4984  0E54  1303               	bcf	3,6	;RP1=0, select bank0
  4985  0E55  0742               	addwf	_x_int,w
  4986  0E56  00D2               	movwf	??_PathTo+1
  4987  0E57  0852               	movf	??_PathTo+1,w
  4988  0E58  0084               	movwf	4
  4989  0E59  1383               	bcf	3,7	;select IRP bank1
  4990  0E5A  0800               	movf	0,w
  4991  0E5B  3E01               	addlw	1
  4992  0E5C  2E71               	goto	L15
  4993  0E5D                     l4036:	
  4994                           ;main.c: 157: case 3: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 8);
  4995                           
  4996                           ;main.c: 156: break;
  4997                           
  4998  0E5D  3005               	movlw	5
  4999  0E5E  00D1               	movwf	??_PathTo
  5000  0E5F  0851               	movf	??_PathTo,w
  5001  0E60  00CB               	movwf	___bmul@multiplicand
  5002  0E61  0847               	movf	_y_int,w
  5003  0E62  120A  158A  21D5  120A  158A  	fcall	___bmul
  5004  0E67  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5005  0E68  1283               	bcf	3,5	;RP0=0, select bank0
  5006  0E69  1303               	bcf	3,6	;RP1=0, select bank0
  5007  0E6A  0742               	addwf	_x_int,w
  5008  0E6B  00D2               	movwf	??_PathTo+1
  5009  0E6C  0852               	movf	??_PathTo+1,w
  5010  0E6D  0084               	movwf	4
  5011  0E6E  1383               	bcf	3,7	;select IRP bank1
  5012  0E6F  0800               	movf	0,w
  5013  0E70  3E08               	addlw	8
  5014  0E71                     L15:	
  5015  0E71  00D3               	movwf	??_PathTo+2
  5016  0E72  3005               	movlw	5
  5017  0E73  00D4               	movwf	??_PathTo+3
  5018  0E74  0854               	movf	??_PathTo+3,w
  5019  0E75  00CB               	movwf	___bmul@multiplicand
  5020  0E76  0847               	movf	_y_int,w
  5021  0E77  120A  158A  21D5  120A  158A  	fcall	___bmul
  5022  0E7C  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5023  0E7D  1283               	bcf	3,5	;RP0=0, select bank0
  5024  0E7E  1303               	bcf	3,6	;RP1=0, select bank0
  5025  0E7F  0742               	addwf	_x_int,w
  5026  0E80  00D5               	movwf	??_PathTo+4
  5027  0E81  0855               	movf	??_PathTo+4,w
  5028  0E82  0084               	movwf	4
  5029  0E83  0853               	movf	??_PathTo+2,w
  5030  0E84  1383               	bcf	3,7	;select IRP bank1
  5031  0E85  0080               	movwf	0
  5032                           
  5033                           ;main.c: 159: }
  5034                           
  5035                           ;main.c: 158: break;
  5036  0E86  2E95               	goto	l4042
  5037  0E87                     l4040:	
  5038  0E87  0837               	movf	_intersection_orientation,w
  5039                           
  5040                           ; Switch size 1, requested type "space"
  5041                           ; Number of cases is 4, Range of values is 0 to 3
  5042                           ; switch strategies available:
  5043                           ; Name         Instructions Cycles
  5044                           ; simple_byte           13     7 (average)
  5045                           ; direct_byte           20     8 (fixed)
  5046                           ; jumptable            260     6 (fixed)
  5047                           ;	Chosen strategy is simple_byte
  5048  0E88  3A00               	xorlw	0	; case 0
  5049  0E89  1903               	skipnz
  5050  0E8A  2E1E               	goto	l4030
  5051  0E8B  3A01               	xorlw	1	; case 1
  5052  0E8C  1903               	skipnz
  5053  0E8D  2E33               	goto	l4032
  5054  0E8E  3A03               	xorlw	3	; case 2
  5055  0E8F  1903               	skipnz
  5056  0E90  2E48               	goto	l4034
  5057  0E91  3A01               	xorlw	1	; case 3
  5058  0E92  1903               	skipnz
  5059  0E93  2E5D               	goto	l4036
  5060  0E94  2E95               	goto	l4042
  5061  0E95                     l4042:	
  5062                           
  5063                           ;main.c: 162: x_path = x;
  5064  0E95  086B               	movf	_x,w
  5065  0E96  00D1               	movwf	??_PathTo
  5066  0E97  0851               	movf	??_PathTo,w
  5067  0E98  00C3               	movwf	_x_path
  5068                           
  5069                           ;main.c: 163: y_path = y;
  5070  0E99  0845               	movf	_y,w
  5071  0E9A  00D1               	movwf	??_PathTo
  5072  0E9B  0851               	movf	??_PathTo,w
  5073  0E9C  00C8               	movwf	_y_path
  5074                           
  5075                           ;main.c: 164: orientation_path = orientation;
  5076  0E9D  0869               	movf	_orientation,w
  5077  0E9E  00D1               	movwf	??_PathTo
  5078  0E9F  0851               	movf	??_PathTo,w
  5079  0EA0  00B9               	movwf	_orientation_path
  5080                           
  5081                           ;main.c: 165: pathCount = 0;
  5082  0EA1  01BA               	clrf	_pathCount
  5083                           
  5084                           ;main.c: 166: reset_flag = 1;
  5085  0EA2  15F0               	bsf	_reset_flag/(0+8),_reset_flag& (0+7)
  5086                           
  5087                           ;main.c: 169: for (r = 0; r <= 1; r++){
  5088  0EA3  01BB               	clrf	_r
  5089  0EA4  3002               	movlw	2
  5090  0EA5  023B               	subwf	_r,w
  5091  0EA6  1803               	btfsc	3,0
  5092  0EA7  2ECF               	goto	l4068
  5093  0EA8                     l4052:	
  5094                           
  5095                           ;main.c: 170: for (c = 0; c <= 15; c++){
  5096  0EA8  01B6               	clrf	_c
  5097  0EA9  3010               	movlw	16
  5098  0EAA  0236               	subwf	_c,w
  5099  0EAB  1803               	btfsc	3,0
  5100  0EAC  2EC7               	goto	l4064
  5101  0EAD                     l4058:	
  5102                           
  5103                           ;main.c: 171: path[r][c] = 0;
  5104  0EAD  083B               	movf	_r,w
  5105  0EAE  00D1               	movwf	??_PathTo
  5106  0EAF  3004               	movlw	4
  5107  0EB0                     u2965:	
  5108  0EB0  1003               	clrc
  5109  0EB1  0DD1               	rlf	??_PathTo,f
  5110  0EB2  3EFF               	addlw	-1
  5111  0EB3  1D03               	skipz
  5112  0EB4  2EB0               	goto	u2965
  5113  0EB5  30D0               	movlw	(low (_path| (0+256)))& (0+255)
  5114  0EB6  0751               	addwf	??_PathTo,w
  5115  0EB7  00D2               	movwf	??_PathTo+1
  5116  0EB8  0836               	movf	_c,w
  5117  0EB9  0752               	addwf	??_PathTo+1,w
  5118  0EBA  00D3               	movwf	??_PathTo+2
  5119  0EBB  0853               	movf	??_PathTo+2,w
  5120  0EBC  0084               	movwf	4
  5121  0EBD  1783               	bsf	3,7	;select IRP bank3
  5122  0EBE  0180               	clrf	0
  5123  0EBF  3001               	movlw	1
  5124  0EC0  00D1               	movwf	??_PathTo
  5125  0EC1  0851               	movf	??_PathTo,w
  5126  0EC2  07B6               	addwf	_c,f
  5127  0EC3  3010               	movlw	16
  5128  0EC4  0236               	subwf	_c,w
  5129  0EC5  1C03               	skipc
  5130  0EC6  2EAD               	goto	l4058
  5131  0EC7                     l4064:	
  5132  0EC7  3001               	movlw	1
  5133  0EC8  00D1               	movwf	??_PathTo
  5134  0EC9  0851               	movf	??_PathTo,w
  5135  0ECA  07BB               	addwf	_r,f
  5136  0ECB  3002               	movlw	2
  5137  0ECC  023B               	subwf	_r,w
  5138  0ECD  1C03               	skipc
  5139  0ECE  2EA8               	goto	l4052
  5140  0ECF                     l4068:	
  5141                           
  5142                           ;main.c: 172: }
  5143                           ;main.c: 173: }
  5144                           ;main.c: 174: }
  5145                           ;main.c: 175: }
  5146                           ;main.c: 181: if((sum == 4) || (pathCount >= 15)){
  5147  0ECF  3004               	movlw	4
  5148  0ED0  0659               	xorwf	PathTo@sum,w
  5149  0ED1  1903               	btfsc	3,2
  5150  0ED2  2F41               	goto	l4082
  5151  0ED3  300F               	movlw	15
  5152  0ED4  023A               	subwf	_pathCount,w
  5153  0ED5  1803               	btfsc	3,0
  5154  0ED6  2F41               	goto	l4082
  5155  0ED7  2F89               	goto	l214
  5156  0ED8                     l4072:	
  5157                           ;main.c: 185: case 0: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 4);
  5158                           
  5159                           ;main.c: 184: switch(intersection_orientation){
  5160                           
  5161  0ED8  3005               	movlw	5
  5162  0ED9  00D1               	movwf	??_PathTo
  5163  0EDA  0851               	movf	??_PathTo,w
  5164  0EDB  00CB               	movwf	___bmul@multiplicand
  5165  0EDC  0847               	movf	_y_int,w
  5166  0EDD  120A  158A  21D5  120A  158A  	fcall	___bmul
  5167  0EE2  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5168  0EE3  1283               	bcf	3,5	;RP0=0, select bank0
  5169  0EE4  1303               	bcf	3,6	;RP1=0, select bank0
  5170  0EE5  0742               	addwf	_x_int,w
  5171  0EE6  00D2               	movwf	??_PathTo+1
  5172  0EE7  0852               	movf	??_PathTo+1,w
  5173  0EE8  0084               	movwf	4
  5174  0EE9  1383               	bcf	3,7	;select IRP bank1
  5175  0EEA  0800               	movf	0,w
  5176  0EEB  3E04               	addlw	4
  5177  0EEC  2F2B               	goto	L16
  5178  0EED                     l4074:	
  5179                           ;main.c: 187: case 1: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 2);
  5180                           
  5181                           ;main.c: 186: break;
  5182                           
  5183  0EED  3005               	movlw	5
  5184  0EEE  00D1               	movwf	??_PathTo
  5185  0EEF  0851               	movf	??_PathTo,w
  5186  0EF0  00CB               	movwf	___bmul@multiplicand
  5187  0EF1  0847               	movf	_y_int,w
  5188  0EF2  120A  158A  21D5  120A  158A  	fcall	___bmul
  5189  0EF7  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5190  0EF8  1283               	bcf	3,5	;RP0=0, select bank0
  5191  0EF9  1303               	bcf	3,6	;RP1=0, select bank0
  5192  0EFA  0742               	addwf	_x_int,w
  5193  0EFB  00D2               	movwf	??_PathTo+1
  5194  0EFC  0852               	movf	??_PathTo+1,w
  5195  0EFD  0084               	movwf	4
  5196  0EFE  1383               	bcf	3,7	;select IRP bank1
  5197  0EFF  0800               	movf	0,w
  5198  0F00  3E02               	addlw	2
  5199  0F01  2F2B               	goto	L16
  5200  0F02                     l4076:	
  5201                           ;main.c: 189: case 2: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 1);
  5202                           
  5203                           ;main.c: 188: break;
  5204                           
  5205  0F02  3005               	movlw	5
  5206  0F03  00D1               	movwf	??_PathTo
  5207  0F04  0851               	movf	??_PathTo,w
  5208  0F05  00CB               	movwf	___bmul@multiplicand
  5209  0F06  0847               	movf	_y_int,w
  5210  0F07  120A  158A  21D5  120A  158A  	fcall	___bmul
  5211  0F0C  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5212  0F0D  1283               	bcf	3,5	;RP0=0, select bank0
  5213  0F0E  1303               	bcf	3,6	;RP1=0, select bank0
  5214  0F0F  0742               	addwf	_x_int,w
  5215  0F10  00D2               	movwf	??_PathTo+1
  5216  0F11  0852               	movf	??_PathTo+1,w
  5217  0F12  0084               	movwf	4
  5218  0F13  1383               	bcf	3,7	;select IRP bank1
  5219  0F14  0800               	movf	0,w
  5220  0F15  3E01               	addlw	1
  5221  0F16  2F2B               	goto	L16
  5222  0F17                     l4078:	
  5223                           ;main.c: 191: case 3: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 8);
  5224                           
  5225                           ;main.c: 190: break;
  5226                           
  5227  0F17  3005               	movlw	5
  5228  0F18  00D1               	movwf	??_PathTo
  5229  0F19  0851               	movf	??_PathTo,w
  5230  0F1A  00CB               	movwf	___bmul@multiplicand
  5231  0F1B  0847               	movf	_y_int,w
  5232  0F1C  120A  158A  21D5  120A  158A  	fcall	___bmul
  5233  0F21  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5234  0F22  1283               	bcf	3,5	;RP0=0, select bank0
  5235  0F23  1303               	bcf	3,6	;RP1=0, select bank0
  5236  0F24  0742               	addwf	_x_int,w
  5237  0F25  00D2               	movwf	??_PathTo+1
  5238  0F26  0852               	movf	??_PathTo+1,w
  5239  0F27  0084               	movwf	4
  5240  0F28  1383               	bcf	3,7	;select IRP bank1
  5241  0F29  0800               	movf	0,w
  5242  0F2A  3E08               	addlw	8
  5243  0F2B                     L16:	
  5244  0F2B  00D3               	movwf	??_PathTo+2
  5245  0F2C  3005               	movlw	5
  5246  0F2D  00D4               	movwf	??_PathTo+3
  5247  0F2E  0854               	movf	??_PathTo+3,w
  5248  0F2F  00CB               	movwf	___bmul@multiplicand
  5249  0F30  0847               	movf	_y_int,w
  5250  0F31  120A  158A  21D5  120A  158A  	fcall	___bmul
  5251  0F36  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  5252  0F37  1283               	bcf	3,5	;RP0=0, select bank0
  5253  0F38  1303               	bcf	3,6	;RP1=0, select bank0
  5254  0F39  0742               	addwf	_x_int,w
  5255  0F3A  00D5               	movwf	??_PathTo+4
  5256  0F3B  0855               	movf	??_PathTo+4,w
  5257  0F3C  0084               	movwf	4
  5258  0F3D  0853               	movf	??_PathTo+2,w
  5259  0F3E  1383               	bcf	3,7	;select IRP bank1
  5260  0F3F  0080               	movwf	0
  5261                           
  5262                           ;main.c: 193: }
  5263                           
  5264                           ;main.c: 192: break;
  5265  0F40  2F4F               	goto	l4084
  5266  0F41                     l4082:	
  5267  0F41  0837               	movf	_intersection_orientation,w
  5268                           
  5269                           ; Switch size 1, requested type "space"
  5270                           ; Number of cases is 4, Range of values is 0 to 3
  5271                           ; switch strategies available:
  5272                           ; Name         Instructions Cycles
  5273                           ; simple_byte           13     7 (average)
  5274                           ; direct_byte           20     8 (fixed)
  5275                           ; jumptable            260     6 (fixed)
  5276                           ;	Chosen strategy is simple_byte
  5277  0F42  3A00               	xorlw	0	; case 0
  5278  0F43  1903               	skipnz
  5279  0F44  2ED8               	goto	l4072
  5280  0F45  3A01               	xorlw	1	; case 1
  5281  0F46  1903               	skipnz
  5282  0F47  2EED               	goto	l4074
  5283  0F48  3A03               	xorlw	3	; case 2
  5284  0F49  1903               	skipnz
  5285  0F4A  2F02               	goto	l4076
  5286  0F4B  3A01               	xorlw	1	; case 3
  5287  0F4C  1903               	skipnz
  5288  0F4D  2F17               	goto	l4078
  5289  0F4E  2F4F               	goto	l4084
  5290  0F4F                     l4084:	
  5291                           
  5292                           ;main.c: 196: x_path = x;
  5293  0F4F  086B               	movf	_x,w
  5294  0F50  00D1               	movwf	??_PathTo
  5295  0F51  0851               	movf	??_PathTo,w
  5296  0F52  00C3               	movwf	_x_path
  5297                           
  5298                           ;main.c: 197: y_path = y;
  5299  0F53  0845               	movf	_y,w
  5300  0F54  00D1               	movwf	??_PathTo
  5301  0F55  0851               	movf	??_PathTo,w
  5302  0F56  00C8               	movwf	_y_path
  5303                           
  5304                           ;main.c: 198: orientation_path = orientation;
  5305  0F57  0869               	movf	_orientation,w
  5306  0F58  00D1               	movwf	??_PathTo
  5307  0F59  0851               	movf	??_PathTo,w
  5308  0F5A  00B9               	movwf	_orientation_path
  5309                           
  5310                           ;main.c: 199: pathCount = 0;
  5311  0F5B  01BA               	clrf	_pathCount
  5312                           
  5313                           ;main.c: 200: reset_flag = 1;
  5314  0F5C  15F0               	bsf	_reset_flag/(0+8),_reset_flag& (0+7)
  5315                           
  5316                           ;main.c: 202: for (r = 0; r <= 1; r++){
  5317  0F5D  01BB               	clrf	_r
  5318  0F5E  3002               	movlw	2
  5319  0F5F  023B               	subwf	_r,w
  5320  0F60  1803               	btfsc	3,0
  5321  0F61  2F89               	goto	l214
  5322  0F62                     l4094:	
  5323                           
  5324                           ;main.c: 203: for (c = 0; c <= 15; c++){
  5325  0F62  01B6               	clrf	_c
  5326  0F63  3010               	movlw	16
  5327  0F64  0236               	subwf	_c,w
  5328  0F65  1803               	btfsc	3,0
  5329  0F66  2F81               	goto	l4106
  5330  0F67                     l4100:	
  5331                           
  5332                           ;main.c: 204: path[r][c] = 0;
  5333  0F67  083B               	movf	_r,w
  5334  0F68  00D1               	movwf	??_PathTo
  5335  0F69  3004               	movlw	4
  5336  0F6A                     u3035:	
  5337  0F6A  1003               	clrc
  5338  0F6B  0DD1               	rlf	??_PathTo,f
  5339  0F6C  3EFF               	addlw	-1
  5340  0F6D  1D03               	skipz
  5341  0F6E  2F6A               	goto	u3035
  5342  0F6F  30D0               	movlw	(low (_path| (0+256)))& (0+255)
  5343  0F70  0751               	addwf	??_PathTo,w
  5344  0F71  00D2               	movwf	??_PathTo+1
  5345  0F72  0836               	movf	_c,w
  5346  0F73  0752               	addwf	??_PathTo+1,w
  5347  0F74  00D3               	movwf	??_PathTo+2
  5348  0F75  0853               	movf	??_PathTo+2,w
  5349  0F76  0084               	movwf	4
  5350  0F77  1783               	bsf	3,7	;select IRP bank3
  5351  0F78  0180               	clrf	0
  5352  0F79  3001               	movlw	1
  5353  0F7A  00D1               	movwf	??_PathTo
  5354  0F7B  0851               	movf	??_PathTo,w
  5355  0F7C  07B6               	addwf	_c,f
  5356  0F7D  3010               	movlw	16
  5357  0F7E  0236               	subwf	_c,w
  5358  0F7F  1C03               	skipc
  5359  0F80  2F67               	goto	l4100
  5360  0F81                     l4106:	
  5361  0F81  3001               	movlw	1
  5362  0F82  00D1               	movwf	??_PathTo
  5363  0F83  0851               	movf	??_PathTo,w
  5364  0F84  07BB               	addwf	_r,f
  5365  0F85  3002               	movlw	2
  5366  0F86  023B               	subwf	_r,w
  5367  0F87  1C03               	skipc
  5368  0F88  2F62               	goto	l4094
  5369  0F89                     l214:	
  5370                           
  5371                           ;main.c: 205: }
  5372                           ;main.c: 206: }
  5373                           ;main.c: 207: }
  5374                           ;main.c: 216: if (reset_flag != 1){
  5375  0F89  19F0               	btfsc	_reset_flag/(0+8),_reset_flag& (0+7)
  5376  0F8A  2FAE               	goto	l227
  5377                           
  5378                           ;main.c: 219: if(left == 0){
  5379  0F8B  1970               	btfsc	_left/(0+8),_left& (0+7)
  5380  0F8C  2F91               	goto	l228
  5381                           
  5382                           ;main.c: 220: x_path--;
  5383  0F8D  3001               	movlw	1
  5384  0F8E  02C3               	subwf	_x_path,f
  5385                           
  5386                           ;main.c: 221: orientation_path = 3;
  5387  0F8F  3003               	movlw	3
  5388  0F90  2FA7               	goto	L17
  5389  0F91                     l228:	
  5390                           ;main.c: 223: }
  5391                           
  5392                           ;main.c: 222: pathCount++;
  5393                           
  5394                           
  5395                           ;main.c: 224: else if(up == 0){
  5396  0F91  1B70               	btfsc	_up/(0+8),_up& (0+7)
  5397  0F92  2F97               	goto	l230
  5398                           
  5399                           ;main.c: 225: y_path--;
  5400  0F93  3001               	movlw	1
  5401  0F94  02C8               	subwf	_y_path,f
  5402                           
  5403                           ;main.c: 226: orientation_path = 0;
  5404  0F95  01B9               	clrf	_orientation_path
  5405  0F96  2FAA               	goto	l4132
  5406  0F97                     l230:	
  5407                           ;main.c: 228: }
  5408                           
  5409                           ;main.c: 227: pathCount++;
  5410                           
  5411                           
  5412                           ;main.c: 229: else if(right == 0){
  5413  0F97  1A70               	btfsc	_right/(0+8),_right& (0+7)
  5414  0F98  2FA0               	goto	l232
  5415                           
  5416                           ;main.c: 230: x_path++;
  5417  0F99  3001               	movlw	1
  5418  0F9A  00D1               	movwf	??_PathTo
  5419  0F9B  0851               	movf	??_PathTo,w
  5420  0F9C  07C3               	addwf	_x_path,f
  5421                           
  5422                           ;main.c: 231: orientation_path = 1;
  5423  0F9D  01B9               	clrf	_orientation_path
  5424  0F9E  0AB9               	incf	_orientation_path,f
  5425  0F9F  2FAA               	goto	l4132
  5426  0FA0                     l232:	
  5427                           ;main.c: 233: }
  5428                           
  5429                           ;main.c: 232: pathCount++;
  5430                           
  5431                           
  5432                           ;main.c: 234: else if(down == 0){
  5433  0FA0  18F0               	btfsc	_down/(0+8),_down& (0+7)
  5434  0FA1  2FAE               	goto	l227
  5435                           
  5436                           ;main.c: 235: y_path++;
  5437  0FA2  3001               	movlw	1
  5438  0FA3  00D1               	movwf	??_PathTo
  5439  0FA4  0851               	movf	??_PathTo,w
  5440  0FA5  07C8               	addwf	_y_path,f
  5441                           
  5442                           ;main.c: 236: orientation_path = 2;
  5443  0FA6  3002               	movlw	2
  5444  0FA7                     L17:	
  5445  0FA7  00D1               	movwf	??_PathTo
  5446  0FA8  0851               	movf	??_PathTo,w
  5447  0FA9  00B9               	movwf	_orientation_path
  5448  0FAA                     l4132:	
  5449                           
  5450                           ;main.c: 237: pathCount++;
  5451  0FAA  3001               	movlw	1
  5452  0FAB  00D1               	movwf	??_PathTo
  5453  0FAC  0851               	movf	??_PathTo,w
  5454  0FAD  07BA               	addwf	_pathCount,f
  5455  0FAE                     l227:	
  5456  0FAE  3001               	movlw	1
  5457  0FAF  07DA               	addwf	PathTo@loop,f
  5458  0FB0  1803               	skipnc
  5459  0FB1  0ADB               	incf	PathTo@loop+1,f
  5460  0FB2  3000               	movlw	0
  5461  0FB3  07DB               	addwf	PathTo@loop+1,f
  5462  0FB4  085B               	movf	PathTo@loop+1,w
  5463  0FB5  3A80               	xorlw	128
  5464  0FB6  00FF               	movwf	127
  5465  0FB7  3087               	movlw	135
  5466  0FB8  027F               	subwf	127,w
  5467  0FB9  1D03               	skipz
  5468  0FBA  2FBD               	goto	u3115
  5469  0FBB  30D1               	movlw	209
  5470  0FBC  025A               	subwf	PathTo@loop,w
  5471  0FBD                     u3115:	
  5472  0FBD  1C03               	skipc
  5473  0FBE  2D0E               	goto	l180
  5474  0FBF                     l4136:	
  5475                           
  5476                           ;main.c: 238: }
  5477                           ;main.c: 239: }
  5478                           ;main.c: 240: }
  5479                           ;main.c: 242: lcdSetCursor(0b10000000);
  5480  0FBF  3080               	movlw	128
  5481  0FC0  120A  158A  2187  120A  158A  	fcall	_lcdSetCursor
  5482                           
  5483                           ;main.c: 243: for (c = 0; c <= 15; c++){
  5484  0FC5  1283               	bcf	3,5	;RP0=0, select bank0
  5485  0FC6  1303               	bcf	3,6	;RP1=0, select bank0
  5486  0FC7  01B6               	clrf	_c
  5487  0FC8  3010               	movlw	16
  5488  0FC9  0236               	subwf	_c,w
  5489  0FCA  1803               	btfsc	3,0
  5490  0FCB  2FE1               	goto	l4150
  5491  0FCC                     l4144:	
  5492                           
  5493                           ;main.c: 244: lcdWriteData(pathShortest[0][c]+48);
  5494  0FCC  0836               	movf	_c,w
  5495  0FCD  3EC8               	addlw	(low (_pathShortest| 0))& (0+255)
  5496  0FCE  0084               	movwf	4
  5497  0FCF  1383               	bcf	3,7	;select IRP bank1
  5498  0FD0  0800               	movf	0,w
  5499  0FD1  3E30               	addlw	48
  5500  0FD2  120A  158A  21E8  120A  158A  	fcall	_lcdWriteData
  5501  0FD7  3001               	movlw	1
  5502  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  5503  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  5504  0FDA  00D1               	movwf	??_PathTo
  5505  0FDB  0851               	movf	??_PathTo,w
  5506  0FDC  07B6               	addwf	_c,f
  5507  0FDD  3010               	movlw	16
  5508  0FDE  0236               	subwf	_c,w
  5509  0FDF  1C03               	skipc
  5510  0FE0  2FCC               	goto	l4144
  5511  0FE1                     l4150:	
  5512                           
  5513                           ;main.c: 245: }
  5514                           ;main.c: 246: lcdSetCursor(0x40);
  5515  0FE1  3040               	movlw	64
  5516  0FE2  120A  158A  2187  120A  158A  	fcall	_lcdSetCursor
  5517                           
  5518                           ;main.c: 247: for (c = 0; c<=15; c++){
  5519  0FE7  1283               	bcf	3,5	;RP0=0, select bank0
  5520  0FE8  1303               	bcf	3,6	;RP1=0, select bank0
  5521  0FE9  01B6               	clrf	_c
  5522  0FEA                     L14:	
  5523  0FEA  3010               	movlw	16
  5524  0FEB  0236               	subwf	_c,w
  5525  0FEC  1803               	btfsc	3,0
  5526  0FED  0008               	return
  5527                           
  5528                           ;main.c: 248: lcdWriteData(pathShortest[1][c]+48);
  5529  0FEE  0836               	movf	_c,w
  5530  0FEF  3ED8               	addlw	(low ((_pathShortest| 0+16)))& (0+255)
  5531  0FF0  0084               	movwf	4
  5532  0FF1  1383               	bcf	3,7	;select IRP bank1
  5533  0FF2  0800               	movf	0,w
  5534  0FF3  3E30               	addlw	48
  5535  0FF4  120A  158A  21E8  120A  158A  	fcall	_lcdWriteData
  5536  0FF9  3001               	movlw	1
  5537  0FFA  1283               	bcf	3,5	;RP0=0, select bank0
  5538  0FFB  1303               	bcf	3,6	;RP1=0, select bank0
  5539  0FFC  00D1               	movwf	??_PathTo
  5540  0FFD  0851               	movf	??_PathTo,w
  5541  0FFE  07B6               	addwf	_c,f
  5542  0FFF  2FEA               	goto	L14
  5543  1000                     __end_of_PathTo:	
  5544                           
  5545                           	psect	text16
  5546  0A3E                     __ptext16:	
  5547 ;; *************** function _lcdWriteString *****************
  5548 ;; Defined at:
  5549 ;;		line 32 in file "LCD.c"
  5550 ;; Parameters:    Size  Location     Type
  5551 ;;  s               1    wreg     PTR unsigned char 
  5552 ;;		 -> STR_1(11), 
  5553 ;; Auto vars:     Size  Location     Type
  5554 ;;  s               1    4[BANK0 ] PTR unsigned char 
  5555 ;;		 -> STR_1(11), 
  5556 ;; Return value:  Size  Location     Type
  5557 ;;                  1    wreg      void 
  5558 ;; Registers used:
  5559 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5560 ;; Tracked objects:
  5561 ;;		On entry : 0/0
  5562 ;;		On exit  : 0/0
  5563 ;;		Unchanged: 0/0
  5564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5565 ;;      Params:         0       0       0       0       0
  5566 ;;      Locals:         0       1       0       0       0
  5567 ;;      Temps:          0       1       0       0       0
  5568 ;;      Totals:         0       2       0       0       0
  5569 ;;Total ram usage:        2 bytes
  5570 ;; Hardware stack levels used:    1
  5571 ;; Hardware stack levels required when called:    2
  5572 ;; This function calls:
  5573 ;;		_lcdWriteData
  5574 ;; This function is called by:
  5575 ;;		_PathTo
  5576 ;; This function uses a non-reentrant model
  5577 ;;
  5578                           
  5579                           
  5580                           ;psect for function _lcdWriteString
  5581  0A3E                     _lcdWriteString:	
  5582                           
  5583                           ;incstack = 0
  5584                           ; Regs used in _lcdWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5585                           ;lcdWriteString@s stored from wreg
  5586  0A3E  1283               	bcf	3,5	;RP0=0, select bank0
  5587  0A3F  1303               	bcf	3,6	;RP1=0, select bank0
  5588  0A40  00CF               	movwf	lcdWriteString@s
  5589  0A41                     l3796:	
  5590                           ;LCD.c: 34: while(*s) lcdWriteData(*s++);
  5591                           
  5592  0A41  084F               	movf	lcdWriteString@s,w
  5593  0A42  0084               	movwf	4
  5594  0A43  120A  158A  2000  120A  158A  	fcall	stringdir
  5595  0A48  3A00               	xorlw	0
  5596  0A49  1903               	btfsc	3,2
  5597  0A4A  0008               	return
  5598  0A4B  084F               	movf	lcdWriteString@s,w
  5599  0A4C  0084               	movwf	4
  5600  0A4D  120A  158A  2000  120A  158A  	fcall	stringdir
  5601  0A52  120A  158A  21E8  120A  158A  	fcall	_lcdWriteData
  5602  0A57  3001               	movlw	1
  5603  0A58  1283               	bcf	3,5	;RP0=0, select bank0
  5604  0A59  1303               	bcf	3,6	;RP1=0, select bank0
  5605  0A5A  00CE               	movwf	??_lcdWriteString
  5606  0A5B  084E               	movf	??_lcdWriteString,w
  5607  0A5C  07CF               	addwf	lcdWriteString@s,f
  5608  0A5D  2A41               	goto	l3796
  5609  0A5E                     __end_of_lcdWriteString:	
  5610                           
  5611                           	psect	text17
  5612  09E8                     __ptext17:	
  5613 ;; *************** function _lcdWriteData *****************
  5614 ;; Defined at:
  5615 ;;		line 16 in file "LCD.c"
  5616 ;; Parameters:    Size  Location     Type
  5617 ;;  databyte        1    wreg     unsigned char 
  5618 ;; Auto vars:     Size  Location     Type
  5619 ;;  databyte        1    2[BANK0 ] unsigned char 
  5620 ;; Return value:  Size  Location     Type
  5621 ;;                  1    wreg      void 
  5622 ;; Registers used:
  5623 ;;		wreg
  5624 ;; Tracked objects:
  5625 ;;		On entry : 0/0
  5626 ;;		On exit  : 0/0
  5627 ;;		Unchanged: 0/0
  5628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5629 ;;      Params:         0       0       0       0       0
  5630 ;;      Locals:         0       1       0       0       0
  5631 ;;      Temps:          0       2       0       0       0
  5632 ;;      Totals:         0       3       0       0       0
  5633 ;;Total ram usage:        3 bytes
  5634 ;; Hardware stack levels used:    1
  5635 ;; Hardware stack levels required when called:    1
  5636 ;; This function calls:
  5637 ;;		Nothing
  5638 ;; This function is called by:
  5639 ;;		_PathTo
  5640 ;;		_lcdWriteString
  5641 ;;		_lcdWriteToDigitBCD
  5642 ;; This function uses a non-reentrant model
  5643 ;;
  5644                           
  5645                           
  5646                           ;psect for function _lcdWriteData
  5647  09E8                     _lcdWriteData:	
  5648                           
  5649                           ;incstack = 0
  5650                           ; Regs used in _lcdWriteData: [wreg]
  5651                           ;lcdWriteData@databyte stored from wreg
  5652  09E8  1283               	bcf	3,5	;RP0=0, select bank0
  5653  09E9  1303               	bcf	3,6	;RP1=0, select bank0
  5654  09EA  00CD               	movwf	lcdWriteData@databyte
  5655                           
  5656                           ;LCD.c: 17: RE2 = 0;
  5657  09EB  1109               	bcf	9,2	;volatile
  5658                           
  5659                           ;LCD.c: 18: RE1 = 0;
  5660  09EC  1089               	bcf	9,1	;volatile
  5661                           
  5662                           ;LCD.c: 19: RE0 = 1;
  5663  09ED  1409               	bsf	9,0	;volatile
  5664                           
  5665                           ;LCD.c: 20: PORTD = databyte;
  5666  09EE  084D               	movf	lcdWriteData@databyte,w
  5667  09EF  0088               	movwf	8	;volatile
  5668                           
  5669                           ;LCD.c: 21: RE2 = 1;
  5670  09F0  1509               	bsf	9,2	;volatile
  5671                           
  5672                           ;LCD.c: 22: RE2 = 0;
  5673  09F1  1109               	bcf	9,2	;volatile
  5674                           
  5675                           ;LCD.c: 23: _delay((unsigned long)((1)*(20000000/4000.0)));
  5676  09F2  3007               	movlw	7
  5677  09F3  00CC               	movwf	??_lcdWriteData+1
  5678  09F4  307D               	movlw	125
  5679  09F5  00CB               	movwf	??_lcdWriteData
  5680  09F6                     u3657:	
  5681  09F6  0BCB               	decfsz	??_lcdWriteData,f
  5682  09F7  29F6               	goto	u3657
  5683  09F8  0BCC               	decfsz	??_lcdWriteData+1,f
  5684  09F9  29F6               	goto	u3657
  5685  09FA  0008               	return
  5686  09FB                     __end_of_lcdWriteData:	
  5687                           
  5688                           	psect	text18
  5689  0987                     __ptext18:	
  5690 ;; *************** function _lcdSetCursor *****************
  5691 ;; Defined at:
  5692 ;;		line 27 in file "LCD.c"
  5693 ;; Parameters:    Size  Location     Type
  5694 ;;  address         1    wreg     unsigned char 
  5695 ;; Auto vars:     Size  Location     Type
  5696 ;;  address         1    3[BANK0 ] unsigned char 
  5697 ;; Return value:  Size  Location     Type
  5698 ;;                  1    wreg      void 
  5699 ;; Registers used:
  5700 ;;		wreg, status,2, status,0, pclath, cstack
  5701 ;; Tracked objects:
  5702 ;;		On entry : 0/0
  5703 ;;		On exit  : 0/0
  5704 ;;		Unchanged: 0/0
  5705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5706 ;;      Params:         0       0       0       0       0
  5707 ;;      Locals:         0       1       0       0       0
  5708 ;;      Temps:          0       0       0       0       0
  5709 ;;      Totals:         0       1       0       0       0
  5710 ;;Total ram usage:        1 bytes
  5711 ;; Hardware stack levels used:    1
  5712 ;; Hardware stack levels required when called:    2
  5713 ;; This function calls:
  5714 ;;		_lcdWriteControl
  5715 ;; This function is called by:
  5716 ;;		_PathTo
  5717 ;; This function uses a non-reentrant model
  5718 ;;
  5719                           
  5720                           
  5721                           ;psect for function _lcdSetCursor
  5722  0987                     _lcdSetCursor:	
  5723                           
  5724                           ;incstack = 0
  5725                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  5726                           ;lcdSetCursor@address stored from wreg
  5727  0987  1283               	bcf	3,5	;RP0=0, select bank0
  5728  0988  1303               	bcf	3,6	;RP1=0, select bank0
  5729  0989  00CE               	movwf	lcdSetCursor@address
  5730                           
  5731                           ;LCD.c: 28: address |= 0b10000000;
  5732  098A  17CE               	bsf	lcdSetCursor@address,7
  5733                           
  5734                           ;LCD.c: 29: lcdWriteControl(address);
  5735  098B  084E               	movf	lcdSetCursor@address,w
  5736  098C  120A  158A  21FB   	fcall	_lcdWriteControl
  5737  098F  0008               	return
  5738  0990                     __end_of_lcdSetCursor:	
  5739                           
  5740                           	psect	text19
  5741  09FB                     __ptext19:	
  5742 ;; *************** function _lcdWriteControl *****************
  5743 ;; Defined at:
  5744 ;;		line 5 in file "LCD.c"
  5745 ;; Parameters:    Size  Location     Type
  5746 ;;  databyte        1    wreg     unsigned char 
  5747 ;; Auto vars:     Size  Location     Type
  5748 ;;  databyte        1    2[BANK0 ] unsigned char 
  5749 ;; Return value:  Size  Location     Type
  5750 ;;                  1    wreg      void 
  5751 ;; Registers used:
  5752 ;;		wreg
  5753 ;; Tracked objects:
  5754 ;;		On entry : 0/0
  5755 ;;		On exit  : 0/0
  5756 ;;		Unchanged: 0/0
  5757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5758 ;;      Params:         0       0       0       0       0
  5759 ;;      Locals:         0       1       0       0       0
  5760 ;;      Temps:          0       2       0       0       0
  5761 ;;      Totals:         0       3       0       0       0
  5762 ;;Total ram usage:        3 bytes
  5763 ;; Hardware stack levels used:    1
  5764 ;; Hardware stack levels required when called:    1
  5765 ;; This function calls:
  5766 ;;		Nothing
  5767 ;; This function is called by:
  5768 ;;		_lcdSetCursor
  5769 ;;		_setupLCD
  5770 ;; This function uses a non-reentrant model
  5771 ;;
  5772                           
  5773                           
  5774                           ;psect for function _lcdWriteControl
  5775  09FB                     _lcdWriteControl:	
  5776                           
  5777                           ;incstack = 0
  5778                           ; Regs used in _lcdWriteControl: [wreg]
  5779                           ;lcdWriteControl@databyte stored from wreg
  5780  09FB  1283               	bcf	3,5	;RP0=0, select bank0
  5781  09FC  1303               	bcf	3,6	;RP1=0, select bank0
  5782  09FD  00CD               	movwf	lcdWriteControl@databyte
  5783                           
  5784                           ;LCD.c: 6: RE2 = 0;
  5785  09FE  1109               	bcf	9,2	;volatile
  5786                           
  5787                           ;LCD.c: 7: RE1 = 0;
  5788  09FF  1089               	bcf	9,1	;volatile
  5789                           
  5790                           ;LCD.c: 8: RE0 = 0;
  5791  0A00  1009               	bcf	9,0	;volatile
  5792                           
  5793                           ;LCD.c: 9: PORTD = databyte;
  5794  0A01  084D               	movf	lcdWriteControl@databyte,w
  5795  0A02  0088               	movwf	8	;volatile
  5796                           
  5797                           ;LCD.c: 10: RE2 = 1;
  5798  0A03  1509               	bsf	9,2	;volatile
  5799                           
  5800                           ;LCD.c: 11: RE2 = 0;
  5801  0A04  1109               	bcf	9,2	;volatile
  5802                           
  5803                           ;LCD.c: 12: _delay((unsigned long)((2)*(20000000/4000.0)));
  5804  0A05  300D               	movlw	13
  5805  0A06  00CC               	movwf	??_lcdWriteControl+1
  5806  0A07  30FB               	movlw	251
  5807  0A08  00CB               	movwf	??_lcdWriteControl
  5808  0A09                     u3667:	
  5809  0A09  0BCB               	decfsz	??_lcdWriteControl,f
  5810  0A0A  2A09               	goto	u3667
  5811  0A0B  0BCC               	decfsz	??_lcdWriteControl+1,f
  5812  0A0C  2A09               	goto	u3667
  5813  0A0D  2A0E               	nop2
  5814  0A0E  0008               	return
  5815  0A0F                     __end_of_lcdWriteControl:	
  5816                           
  5817                           	psect	text20
  5818  09D5                     __ptext20:	
  5819 ;; *************** function ___bmul *****************
  5820 ;; Defined at:
  5821 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
  5822 ;; Parameters:    Size  Location     Type
  5823 ;;  multiplier      1    wreg     unsigned char 
  5824 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  5825 ;; Auto vars:     Size  Location     Type
  5826 ;;  multiplier      1    3[BANK0 ] unsigned char 
  5827 ;;  product         1    2[BANK0 ] unsigned char 
  5828 ;; Return value:  Size  Location     Type
  5829 ;;                  1    wreg      unsigned char 
  5830 ;; Registers used:
  5831 ;;		wreg, status,2, status,0
  5832 ;; Tracked objects:
  5833 ;;		On entry : 0/0
  5834 ;;		On exit  : 0/0
  5835 ;;		Unchanged: 0/0
  5836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5837 ;;      Params:         0       1       0       0       0
  5838 ;;      Locals:         0       2       0       0       0
  5839 ;;      Temps:          0       1       0       0       0
  5840 ;;      Totals:         0       4       0       0       0
  5841 ;;Total ram usage:        4 bytes
  5842 ;; Hardware stack levels used:    1
  5843 ;; Hardware stack levels required when called:    1
  5844 ;; This function calls:
  5845 ;;		Nothing
  5846 ;; This function is called by:
  5847 ;;		_PathTo
  5848 ;;		_re_route
  5849 ;; This function uses a non-reentrant model
  5850 ;;
  5851                           
  5852                           
  5853                           ;psect for function ___bmul
  5854  09D5                     ___bmul:	
  5855                           
  5856                           ;incstack = 0
  5857                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5858                           ;___bmul@multiplier stored from wreg
  5859  09D5  1283               	bcf	3,5	;RP0=0, select bank0
  5860  09D6  1303               	bcf	3,6	;RP1=0, select bank0
  5861  09D7  00CE               	movwf	___bmul@multiplier
  5862  09D8  01CD               	clrf	___bmul@product
  5863  09D9                     l3898:	
  5864  09D9  1C4E               	btfss	___bmul@multiplier,0
  5865  09DA  29DF               	goto	l3902
  5866  09DB  084B               	movf	___bmul@multiplicand,w
  5867  09DC  00CC               	movwf	??___bmul
  5868  09DD  084C               	movf	??___bmul,w
  5869  09DE  07CD               	addwf	___bmul@product,f
  5870  09DF                     l3902:	
  5871  09DF  1003               	clrc
  5872  09E0  0DCB               	rlf	___bmul@multiplicand,f
  5873  09E1  1003               	clrc
  5874  09E2  0CCE               	rrf	___bmul@multiplier,f
  5875  09E3  084E               	movf	___bmul@multiplier,w
  5876  09E4  1D03               	btfss	3,2
  5877  09E5  29D9               	goto	l3898
  5878  09E6  084D               	movf	___bmul@product,w
  5879  09E7  0008               	return
  5880  09E8                     __end_of___bmul:	
  5881                           
  5882                           	psect	text21
  5883  0A5E                     __ptext21:	
  5884 ;; *************** function _isr *****************
  5885 ;; Defined at:
  5886 ;;		line 458 in file "main.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;		None
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;		None
  5891 ;; Return value:  Size  Location     Type
  5892 ;;                  1    wreg      void 
  5893 ;; Registers used:
  5894 ;;		wreg, status,2, status,0
  5895 ;; Tracked objects:
  5896 ;;		On entry : 0/0
  5897 ;;		On exit  : 0/0
  5898 ;;		Unchanged: 0/0
  5899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5900 ;;      Params:         0       0       0       0       0
  5901 ;;      Locals:         0       0       0       0       0
  5902 ;;      Temps:          5       0       0       0       0
  5903 ;;      Totals:         5       0       0       0       0
  5904 ;;Total ram usage:        5 bytes
  5905 ;; Hardware stack levels used:    1
  5906 ;; This function calls:
  5907 ;;		Nothing
  5908 ;; This function is called by:
  5909 ;;		Interrupt level 1
  5910 ;; This function uses a non-reentrant model
  5911 ;;
  5912                           
  5913                           
  5914                           ;psect for function _isr
  5915  0A5E                     _isr:	
  5916                           
  5917                           ;main.c: 459: if(TMR0IF){
  5918  0A5E  1D0B               	btfss	11,2	;volatile
  5919  0A5F  2A75               	goto	i1l329
  5920                           
  5921                           ;main.c: 460: TMR0IF = 0;
  5922  0A60  110B               	bcf	11,2	;volatile
  5923                           
  5924                           ;main.c: 461: TMR0 = 100;
  5925  0A61  3064               	movlw	100
  5926  0A62  0081               	movwf	1	;volatile
  5927                           
  5928                           ;main.c: 462: time_count++;
  5929  0A63  3001               	movlw	1
  5930  0A64  07AC               	addwf	_time_count,f	;volatile
  5931  0A65  1803               	skipnc
  5932  0A66  0AAD               	incf	_time_count+1,f	;volatile
  5933  0A67  3000               	movlw	0
  5934  0A68  07AD               	addwf	_time_count+1,f	;volatile
  5935                           
  5936                           ;main.c: 464: if(!RB0)
  5937  0A69  1806               	btfsc	6,0	;volatile
  5938  0A6A  2A6F               	goto	i1l3242
  5939                           
  5940                           ;main.c: 465: PB8Counter++;
  5941  0A6B  3001               	movlw	1
  5942  0A6C  00F1               	movwf	??_isr
  5943  0A6D  0871               	movf	??_isr,w
  5944  0A6E  07B3               	addwf	_PB8Counter,f
  5945  0A6F                     i1l3242:	
  5946                           
  5947                           ;main.c: 466: if(!RB1)
  5948  0A6F  1886               	btfsc	6,1	;volatile
  5949  0A70  2A75               	goto	i1l329
  5950                           
  5951                           ;main.c: 467: PB7Counter++;
  5952  0A71  3001               	movlw	1
  5953  0A72  00F1               	movwf	??_isr
  5954  0A73  0871               	movf	??_isr,w
  5955  0A74  07B2               	addwf	_PB7Counter,f
  5956  0A75                     i1l329:	
  5957  0A75  0875               	movf	??_isr+4,w
  5958  0A76  00FF               	movwf	127
  5959  0A77  0874               	movf	??_isr+3,w
  5960  0A78  008A               	movwf	10
  5961  0A79  0873               	movf	??_isr+2,w
  5962  0A7A  0084               	movwf	4
  5963  0A7B  0E72               	swapf	(??_isr+1)^(0+-128),w
  5964  0A7C  0083               	movwf	3
  5965  0A7D  0EFE               	swapf	126,f
  5966  0A7E  0E7E               	swapf	126,w
  5967  0A7F  0009               	retfie
  5968  0A80                     __end_of_isr:	
  5969  007E                     btemp	set	126	;btemp
  5970  007E                     wtemp	set	126
  5971  007E                     wtemp0	set	126
  5972  0080                     wtemp1	set	128
  5973  0082                     wtemp2	set	130
  5974  0084                     wtemp3	set	132
  5975  0086                     wtemp4	set	134
  5976  0088                     wtemp5	set	136
  5977  007F                     wtemp6	set	127
  5978  007E                     ttemp	set	126
  5979  007E                     ttemp0	set	126
  5980  0081                     ttemp1	set	129
  5981  0084                     ttemp2	set	132
  5982  0087                     ttemp3	set	135
  5983  007F                     ttemp4	set	127
  5984  007E                     ltemp	set	126
  5985  007E                     ltemp0	set	126
  5986  0082                     ltemp1	set	130
  5987  0086                     ltemp2	set	134
  5988  0080                     ltemp3	set	128
  5989                           
  5990                           	psect	intentry
  5991  0004                     __pintentry:	
  5992                           ;incstack = 0
  5993                           ; Regs used in _isr: [wreg+status,2+status,0]
  5994                           
  5995  0004                     interrupt_function:	
  5996  007E                     saved_w	set	btemp
  5997  0004  00FE               	movwf	btemp
  5998  0005  0E03               	swapf	3,w
  5999  0006  00F2               	movwf	??_isr+1
  6000  0007  0804               	movf	4,w
  6001  0008  00F3               	movwf	??_isr+2
  6002  0009  080A               	movf	10,w
  6003  000A  00F4               	movwf	??_isr+3
  6004  000B  1283               	bcf	3,5	;RP0=0, select bank0
  6005  000C  1303               	bcf	3,6	;RP1=0, select bank0
  6006  000D  087F               	movf	btemp+1,w
  6007  000E  00F5               	movwf	??_isr+4
  6008  000F  120A  158A  2A5E   	ljmp	_isr


Data Sizes:
    Strings     11
    Constant    0
    Data        111
    BSS         115
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     26      76
    BANK1            80      0      76
    BANK3            96      0      96
    BANK2            96      6       6

Pointer List with Targets:

    lcdWriteString@s	PTR unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_re_route
    _setupLCD->_lcdWriteControl
    _re_route->_TravelPath
    _TravelPath->_Drive1m
    _Turn90->_DriveDirect
    _Drive->_ser_putch
    _Drive1m->_DriveDirect
    _getSensorData->_ser_getch
    _DriveDirect->_ser_putch
    _PathTo->_lcdWriteString
    _lcdWriteString->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   21079
                                             23 BANK0      3     3      0
                                              0 BANK2      6     6      0
                             _PathTo
                         _TravelPath
                           _re_route
                           _ser_init
                          _ser_putch
                           _setupADC
                           _setupLCD
                           _setupSPI
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _spi_transfer                                         3     3      0      44
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      31
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _re_route                                             5     5      0   13197
                                             18 BANK0      5     5      0
                        _DriveDirect
                             _PathTo
                         _TravelPath
                             _Turn90
                             ___bmul
                      _getSensorData
 ---------------------------------------------------------------------------------
 (2) _TravelPath                                           3     3      0    5012
                                             15 BANK0      3     3      0
                            _Drive1m
                             _Turn90
 ---------------------------------------------------------------------------------
 (2) _Turn90                                               4     4      0    2678
                                             10 BANK0      4     4      0
                              _Drive
                        _DriveDirect
                      _getSensorData
 ---------------------------------------------------------------------------------
 (3) _Drive                                                4     1      3     545
                                              1 BANK0      4     1      3
                          _ser_putch
 ---------------------------------------------------------------------------------
 (3) _Drive1m                                              5     5      0    2170
                                             10 BANK0      5     5      0
                        _DriveDirect
                      _getSensorData
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _getSensorData                                        7     5      2     616
                                              2 BANK0      7     5      2
                          _ser_getch
                          _ser_putch
 ---------------------------------------------------------------------------------
 (3) _ser_getch                                            2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _DriveDirect                                          9     5      4    1455
                                              1 BANK0      9     5      4
                          _ser_putch
 ---------------------------------------------------------------------------------
 (1) _ser_putch                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _PathTo                                              12    11      1    2250
                                              5 BANK0     12    11      1
                             ___bmul
                       _lcdSetCursor
                       _lcdWriteData
                     _lcdWriteString
 ---------------------------------------------------------------------------------
 (3) _lcdWriteString                                       2     2      0     126
                                              3 BANK0      2     2      0
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (4) _lcdWriteData                                         3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _lcdSetCursor                                         1     1      0      65
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1    1186
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PathTo
     ___bmul
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteData
     _lcdWriteString
       _lcdWriteData
   _TravelPath
     _Drive1m
       _DriveDirect
         _ser_putch
       _getSensorData
         _ser_getch
         _ser_putch
       _ser_putch
     _Turn90
       _Drive
         _ser_putch
       _DriveDirect
         _ser_putch
       _getSensorData
         _ser_getch
         _ser_putch
   _re_route
     _DriveDirect
       _ser_putch
     _PathTo
       ___bmul
       _lcdSetCursor
         _lcdWriteControl
       _lcdWriteData
       _lcdWriteString
         _lcdWriteData
     _TravelPath
       _Drive1m
         _DriveDirect
           _ser_putch
         _getSensorData
           _ser_getch
           _ser_putch
         _ser_putch
       _Turn90
         _Drive
           _ser_putch
         _DriveDirect
           _ser_putch
         _getSensorData
           _ser_getch
           _ser_putch
     _Turn90
       _Drive
         _ser_putch
       _DriveDirect
         _ser_putch
       _getSensorData
         _ser_getch
         _ser_putch
     ___bmul
     _getSensorData
       _ser_getch
       _ser_putch
   _ser_init
   _ser_putch
   _setupADC
   _setupLCD
     _lcdWriteControl
   _setupSPI
   _spi_transfer

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      60       9      100.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      6       6      11        6.3%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      4C       7       95.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1A      4C       5       95.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0     108      12        0.0%
ABS                  0      0     108       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri Oct 07 13:14:02 2016

                       _c 0036                         _r 003B                         _x 006B  
         ??_getSensorData 004F                         _y 0045                         pc 0002  
          ___bmul@product 004D               __CFG_CP$OFF 0000                        _GO 00FA  
                      _up 0386                        fsr 0004               Drive@speedH 004F  
             Drive@speedL 004C                       l230 0F97                       l214 0F89  
                     l232 0FA0                       l227 0FAE                       l228 0F91  
                     l180 0D0E                       l340 049D                       l190 0DC2  
                     l192 0DC6                       l184 0D90                       l336 0450  
                     l194 0DCB                       l186 0D92                       l338 0475  
                     l187 0D94                       l188 0D96                       l189 0DD1  
                     l845 0990                       l839 099D                       l975 09BC  
                     _GIE 005F                       _RB0 0030                       _RB1 0031  
                     _RB2 0032             ??_DriveDirect 0050                       _RB3 0033  
                     _RC2 003A                       _RE0 0048                       _RE1 0049  
                     _RE2 004A              __CFG_CPD$OFF 0000                       _isr 0A5E  
                     fsr0 0004                       indf 0000              __CFG_FOSC$HS 0000  
          ??_lcdWriteData 004B              __CFG_LVP$OFF 0000                      l4100 0F67  
                    l4020 0DEB                      l4030 0E1E                      l4032 0E33  
                    l4040 0E87                      l4106 0F81                      l4034 0E48  
                    l4042 0E95                      l4026 0E19                      l4210 0558  
                    l4202 053F                      l4132 0FAA                      l4052 0EA8  
                    l4036 0E5D                      l4212 055F                      l4204 054C  
                    l4150 0FE1                      l4230 0597                      l4214 0566  
                    l4222 057E                      l4206 054D                      l4144 0FCC  
                    l4072 0ED8                      l4064 0EC7                      l4136 0FBF  
                    l4232 059E                      l4224 058B                      l4074 0EED  
                    l4082 0F41                      l4058 0EAD                      l4250 05D7  
                    l4234 05A5                      l4242 05BD                      l4226 058C  
                    l4170 04DA                      l4076 0F02                      l4084 0F4F  
                    l4068 0ECF                      l4244 05CA                      l4172 04E1  
                    l4252 04CD                      l4260 06FD                      l4094 0F62  
                    l4078 0F17                      l4190 0519                      l4246 05CF  
                    l4174 04E8                      l4182 0500                      l4262 0712  
                    l3720 0B54                      l4192 0520                      l4184 050D  
                    l4256 06D1                      l4194 0527                      l4186 050E  
                    l4258 06E8                      l4266 073C                      l3740 0B99  
                    l3724 0B67                      l4276 0769                      l4268 074C  
                    l3902 09DF                      l3822 064F                      l4278 078D  
                    l4702 04C5                      l3736 0B86                      l3824 0654  
                    l3832 066F                      l3816 0639                      l3922 0C76  
                    l3850 06A7                      l3826 0661                      l3834 0679  
                    l3940 0CB7                      l3932 0CAE                      l3916 0C71  
                    l3844 0698                      l3836 05F3                      l3766 0B1B  
                    l3846 069D                      l3854 06AA                      l3838 0688  
                    l3870 0BD4                      l3952 0CD6                      l3928 0CA6  
                    l3768 0B1C                      l3848 06A2                      l3856 06BA  
                    l3872 0BD6                      l4664 0428                      l4648 03DC  
                    l3946 0CBC                      l3858 06C7                      l3890 0C28  
                    l4690 048D                      l4682 0465                      l4674 0440  
                    l3796 0A41                      l3956 0CDE                      l3884 0C12  
                    l3892 0C4C                      l3876 0BE3                      l3886 0C16  
                    l3878 0C07                      l3898 09D9                      l3986 0D98  
                    l4698 04B5                      l3988 0DA6                      ?_isr 0071  
                    STR_1 0806                      u3115 0FBD                      u3035 0F6A  
                    u2425 0B44                      u3225 0774                      u2455 0B76  
                    u2545 05FE                      u2625 0C33                      u2715 0CBF  
                    u3507 0067                      u3517 009E                      u3607 0572  
                    u3527 00B3                      u2905 0DEE                      u2745 0D0C  
                    u3617 05B1                      u3537 00C8                      u2915 0E01  
                    u3627 0C61                      u2595 0BEE                      u3547 03F7  
                    _PEIE 005E                      u3637 0681                      u3557 0412  
                    u3647 06C0                      u3567 0A22                      u3657 09F6  
                    u3577 07A3                      u3667 0A09                      u3587 04F4  
                    _RCIF 0065                      u2965 0EB0                      u3597 0533  
                    _TMR0 0001                      _TRMT 04C1              __CFG_WRT$OFF 0000  
                    _radH 003C                      _radL 003D                      _main 005F  
                    _left 0382                      _down 0381                      _path 01D0  
                    _loop 002A                      btemp 007E                      ltemp 007E  
                    start 0012                      ttemp 007E                      wtemp 007E  
       ___bmul@multiplier 004E           __end_of_Drive1m 06D0                     ??_isr 0071  
              PathTo@loop 005A                     ?_main 0071             __CFG_WDTE$OFF 0000  
                   i1l329 0A75                     _RCREG 001A                     _RCSTA 0018  
                   _SPBRG 0099                     _PORTA 0005                     _PORTB 0006  
                   _PORTC 0007                     _PORTD 0008                     _PORTE 0009  
                   _TRISA 0085                     _TRISB 0086                     _TRISC 0087  
                   _TRISD 0088                     _TRISE 0089                     _SSPIF 0063  
                   _TXREG 0019                     _TXSTA 0098  _intersection_orientation 0037  
                   _Drive 0A80                     _angle 0026       __end_of_DriveDirect 0BC4  
                   _right 0384                     _x_int 0042                     _y_int 0047  
          __pbitbssCOMMON 0380            __CFG_BOREN$OFF 0000                     pclath 000A  
                   ltemp0 007E                     ltemp1 0082                     ltemp2 0086  
                   ltemp3 0080                _LeftSpeedH 0030                _LeftSpeedL 0031  
                   ttemp0 007E                     ttemp1 0081                     ttemp2 0084  
                   ttemp3 0087                     ttemp4 007F                     status 0003  
                   wtemp0 007E                     wtemp1 0080                     wtemp2 0082  
                   wtemp3 0084                     wtemp4 0086                     wtemp5 0088  
                   wtemp6 007F           __initialization 0015              __end_of_main 04C9  
__size_of_lcdWriteControl 0014                    ??_main 0062      __end_of_lcdSetCursor 0990  
        ??_lcdWriteString 004E                    ?_Drive 004C                    _ADCON0 001F  
                  _ADCON1 009F                    _ADRESH 001E                    _ADRESL 009E  
                  i1l3242 0A6F                    _TMR0IE 005D                    _TMR0IF 005A  
                  _SSPCON 0014                    _SSPBUF 0013                 ??_Drive1m 0055  
          __CFG_PWRTE$OFF 0000                    _PathTo 0C69                    _adcRAW 0076  
                  _Turn90 0BC4                    ___bmul 09D5      __end_of_lcdWriteData 09FB  
         lcdWriteString@s 004F                    _speedH 003E                    _speedL 003F  
                  _x_goto 0041                    _x_path 0043                    _y_goto 0046  
                  _y_path 0048          __end_of_re_route 07BA               _DriveDirect 0B37  
        __end_of_ser_init 09B5          __end_of_setupADC 0A25          __end_of_setupLCD 0AF9  
        __end_of_setupSPI 0A3E                    saved_w 007E           Turn90@direction 0058  
              _TravelPath 04C9   __end_of__initialization 005B       ___bmul@multiplicand 004B  
           __end_of_Drive 0AA8            __pcstackCOMMON 0071              __pidataBANK0 0978  
            __pidataBANK1 0AA8              __pidataBANK3 07BA            PathTo@x_target 0058  
          PathTo@y_target 0050           DriveDirect@data 0051                   ??_Drive 004F  
       ??_lcdWriteControl 004B                __pbssBANK0 0020                __pbssBANK1 00C8  
              __pbssBANK3 01D0         _pathCountShortest 006A       lcdSetCursor@address 004E  
                 ?_PathTo 0050                __pmaintext 005F                   ?_Turn90 0071  
                 ?___bmul 004B                __pintentry 0004     __size_of_lcdSetCursor 0009  
   __end_of_getSensorData 0B37        __size_of_ser_getch 000A        __size_of_ser_putch 000C  
             ?_TravelPath 0071               _RightSpeedH 0034               _RightSpeedL 0035  
                 _IR_Wall 0380                   _SSPSTAT 0094                __stringtab 0800  
                 _Drive1m 05DE   DriveDirect@VelocityLeft 004E     __size_of_lcdWriteData 0013  
               ?_re_route 0071              _lcdSetCursor 0987                 ?_ser_init 0071  
         __size_of_PathTo 0397                 ?_setupADC 0071                 ?_setupLCD 0071  
               ?_setupSPI 0071           __size_of_Turn90 00A5           __size_of___bmul 0013  
                 __ptext1 09B5                   __ptext2 0A25                   __ptext3 0AD0  
                 __ptext4 0A0F                   __ptext5 09A6                   __ptext6 06D0  
                 __ptext7 04C9                   __ptext8 0BC4                   __ptext9 0A80  
            __size_of_isr 0022                   _lowByte 0038          _orientation_path 0039  
                 _targets 0040                   clrloop0 0980              _lcdWriteData 09E8  
    end_of_initialization 005B         __end_of_ser_getch 099A         __end_of_ser_putch 09A6  
              ??_re_route 005D                _reset_flag 0383                ??_ser_init 004B  
              ??_setupADC 004B                ??_setupLCD 004E                ??_setupSPI 004B  
     __size_of_TravelPath 0115                _time_count 002C              ?_DriveDirect 004C  
               Drive@radH 004D                 Drive@radL 004E               TravelPath@n 005C  
           ?_spi_transfer 0071           ser_getch@rxbyte 004C                main@fourth 0114  
              main@second 0112            __end_of_PathTo 1000                 PathTo@sum 0059  
          __end_of_Turn90 0C69            __end_of___bmul 09E8       DriveDirect@data_467 0053  
         _lcdWriteControl 09FB       start_initialization 0015               __end_of_isr 0A80  
          ??_spi_transfer 004B   __size_of_lcdWriteString 0020                  ??_PathTo 0051  
                ??_Turn90 0055                  ??___bmul 004C                init_fetch0 09C4  
             __pdataBANK0 0065               __pdataBANK1 00A0               __pdataBANK3 0190  
             __pbssCOMMON 0076                 ___latbits 0002             __pcstackBANK0 004B  
           __pcstackBANK2 0110              ??_TravelPath 005A                  ?_Drive1m 0071  
 __end_of_lcdWriteControl 0A0F         __size_of_re_route 00EA         __size_of_ser_init 000F  
       __size_of_setupADC 0016         __size_of_setupLCD 0029        __end_of_TravelPath 05DE  
       __size_of_setupSPI 0019                 __pstrings 0800              _pathShortest 00C8  
               _gridWalls 0190            __size_of_Drive 0028      __size_of_DriveDirect 008D  
           _targets_found 0385           main@controlByte 0110                 _pathCount 003A  
 lcdWriteControl@databyte 004D         interrupt_function 0004    __size_of_getSensorData 003E  
              ser_putch@c 004B     getSensorData@packetID 0051                 clear_ram0 097F  
               _ser_getch 0990                 _ser_putch 099A                 _timerLoop 002E  
                Drive1m@n 0058             _VelocityRight 00EA      __end_of_spi_transfer 09C4  
             __stringbase 0805          spi_transfer@data 004D                 main@fifth 0115  
               main@first 0111          spi_transfer@temp 004C                _ADC_ADJUST 0078  
               main@third 0113                  _Distance 0024      lcdWriteData@databyte 004D  
          _lcdWriteString 0A3E  DriveDirect@VelocityRight 004C          __size_of_Drive1m 00F2  
        _ADJUSTED_SPEED_L 0020          _ADJUSTED_SPEED_R 0022                ?_ser_getch 0071  
        ?_lcdWriteControl 0071           _mazeGridDefault 00B4                ?_ser_putch 0071  
           _getSensorData 0AF9        __end_of__stringtab 0806                  __ptext10 05DE  
                __ptext11 0AF9                  __ptext20 09D5                  __ptext12 0990  
                __ptext21 0A5E                  __ptext13 0B37                  __ptext14 099A  
                __ptext15 0C69                  __ptext16 0A3E                  __ptext17 09E8  
                __ptext18 0987                  __ptext19 09FB                  _highByte 004A  
  __end_of_lcdWriteString 0A5E                  _distance 0028                  _mazeGrid 00A0  
           __size_of_main 046A                  _re_route 06D0                  _ser_init 09A6  
                _setupADC 0A0F                  _setupLCD 0AD0                  _setupSPI 0A25  
              _PB7Counter 0032                  _x_target 0044                _PB8Counter 0033  
                _y_target 0049              _VelocityLeft 00E8            ?_getSensorData 004D  
                init_ram0 09C8           ?_lcdWriteString 0071            Drive1m@omni_IR 0059  
                intlevel1 0000             ?_lcdSetCursor 0071                 stringcode 0800  
             ??_ser_getch 004B               ??_ser_putch 004B       getSensorData@sensor 0052  
   __size_of_spi_transfer 000F               _orientation 0069                _OPTION_REG 0081  
                stringdir 0800                  stringtab 0800        getSensorData@bytes 004D  
           ?_lcdWriteData 0071              _spi_transfer 09B5            ??_lcdSetCursor 004E  
         _CURRENT_SPEED_L 0065           _CURRENT_SPEED_R 0067  
