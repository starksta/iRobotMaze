

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Thu Sep 29 10:55:54 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	idataBANK3,global,class=CODE,delta=2
     8                           	psect	strings,global,class=STRING,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	dabs	1,0x7E,2
    35  0000                     	;# 
    36  0001                     	;# 
    37  0002                     	;# 
    38  0003                     	;# 
    39  0004                     	;# 
    40  0005                     	;# 
    41  0006                     	;# 
    42  0007                     	;# 
    43  0008                     	;# 
    44  0009                     	;# 
    45  000A                     	;# 
    46  000B                     	;# 
    47  000C                     	;# 
    48  000D                     	;# 
    49  000E                     	;# 
    50  000E                     	;# 
    51  000F                     	;# 
    52  0010                     	;# 
    53  0011                     	;# 
    54  0012                     	;# 
    55  0013                     	;# 
    56  0014                     	;# 
    57  0015                     	;# 
    58  0015                     	;# 
    59  0016                     	;# 
    60  0017                     	;# 
    61  0018                     	;# 
    62  0019                     	;# 
    63  001A                     	;# 
    64  001B                     	;# 
    65  001B                     	;# 
    66  001C                     	;# 
    67  001D                     	;# 
    68  001E                     	;# 
    69  001F                     	;# 
    70  0081                     	;# 
    71  0085                     	;# 
    72  0086                     	;# 
    73  0087                     	;# 
    74  0088                     	;# 
    75  0089                     	;# 
    76  008C                     	;# 
    77  008D                     	;# 
    78  008E                     	;# 
    79  0091                     	;# 
    80  0092                     	;# 
    81  0093                     	;# 
    82  0094                     	;# 
    83  0098                     	;# 
    84  0099                     	;# 
    85  009C                     	;# 
    86  009D                     	;# 
    87  009E                     	;# 
    88  009F                     	;# 
    89  010C                     	;# 
    90  010D                     	;# 
    91  010E                     	;# 
    92  010F                     	;# 
    93  018C                     	;# 
    94  018D                     	;# 
    95  0000                     	;# 
    96  0001                     	;# 
    97  0002                     	;# 
    98  0003                     	;# 
    99  0004                     	;# 
   100  0005                     	;# 
   101  0006                     	;# 
   102  0007                     	;# 
   103  0008                     	;# 
   104  0009                     	;# 
   105  000A                     	;# 
   106  000B                     	;# 
   107  000C                     	;# 
   108  000D                     	;# 
   109  000E                     	;# 
   110  000E                     	;# 
   111  000F                     	;# 
   112  0010                     	;# 
   113  0011                     	;# 
   114  0012                     	;# 
   115  0013                     	;# 
   116  0014                     	;# 
   117  0015                     	;# 
   118  0015                     	;# 
   119  0016                     	;# 
   120  0017                     	;# 
   121  0018                     	;# 
   122  0019                     	;# 
   123  001A                     	;# 
   124  001B                     	;# 
   125  001B                     	;# 
   126  001C                     	;# 
   127  001D                     	;# 
   128  001E                     	;# 
   129  001F                     	;# 
   130  0081                     	;# 
   131  0085                     	;# 
   132  0086                     	;# 
   133  0087                     	;# 
   134  0088                     	;# 
   135  0089                     	;# 
   136  008C                     	;# 
   137  008D                     	;# 
   138  008E                     	;# 
   139  0091                     	;# 
   140  0092                     	;# 
   141  0093                     	;# 
   142  0094                     	;# 
   143  0098                     	;# 
   144  0099                     	;# 
   145  009C                     	;# 
   146  009D                     	;# 
   147  009E                     	;# 
   148  009F                     	;# 
   149  010C                     	;# 
   150  010D                     	;# 
   151  010E                     	;# 
   152  010F                     	;# 
   153  018C                     	;# 
   154  018D                     	;# 
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0008                     	;# 
   164  0009                     	;# 
   165  000A                     	;# 
   166  000B                     	;# 
   167  000C                     	;# 
   168  000D                     	;# 
   169  000E                     	;# 
   170  000E                     	;# 
   171  000F                     	;# 
   172  0010                     	;# 
   173  0011                     	;# 
   174  0012                     	;# 
   175  0013                     	;# 
   176  0014                     	;# 
   177  0015                     	;# 
   178  0015                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001B                     	;# 
   186  001C                     	;# 
   187  001D                     	;# 
   188  001E                     	;# 
   189  001F                     	;# 
   190  0081                     	;# 
   191  0085                     	;# 
   192  0086                     	;# 
   193  0087                     	;# 
   194  0088                     	;# 
   195  0089                     	;# 
   196  008C                     	;# 
   197  008D                     	;# 
   198  008E                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0093                     	;# 
   202  0094                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  009F                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  010F                     	;# 
   213  018C                     	;# 
   214  018D                     	;# 
   215  0000                     	;# 
   216  0001                     	;# 
   217  0002                     	;# 
   218  0003                     	;# 
   219  0004                     	;# 
   220  0005                     	;# 
   221  0006                     	;# 
   222  0007                     	;# 
   223  0008                     	;# 
   224  0009                     	;# 
   225  000A                     	;# 
   226  000B                     	;# 
   227  000C                     	;# 
   228  000D                     	;# 
   229  000E                     	;# 
   230  000E                     	;# 
   231  000F                     	;# 
   232  0010                     	;# 
   233  0011                     	;# 
   234  0012                     	;# 
   235  0013                     	;# 
   236  0014                     	;# 
   237  0015                     	;# 
   238  0015                     	;# 
   239  0016                     	;# 
   240  0017                     	;# 
   241  0018                     	;# 
   242  0019                     	;# 
   243  001A                     	;# 
   244  001B                     	;# 
   245  001B                     	;# 
   246  001C                     	;# 
   247  001D                     	;# 
   248  001E                     	;# 
   249  001F                     	;# 
   250  0081                     	;# 
   251  0085                     	;# 
   252  0086                     	;# 
   253  0087                     	;# 
   254  0088                     	;# 
   255  0089                     	;# 
   256  008C                     	;# 
   257  008D                     	;# 
   258  008E                     	;# 
   259  0091                     	;# 
   260  0092                     	;# 
   261  0093                     	;# 
   262  0094                     	;# 
   263  0098                     	;# 
   264  0099                     	;# 
   265  009C                     	;# 
   266  009D                     	;# 
   267  009E                     	;# 
   268  009F                     	;# 
   269  010C                     	;# 
   270  010D                     	;# 
   271  010E                     	;# 
   272  010F                     	;# 
   273  018C                     	;# 
   274  018D                     	;# 
   275  0000                     	;# 
   276  0001                     	;# 
   277  0002                     	;# 
   278  0003                     	;# 
   279  0004                     	;# 
   280  0005                     	;# 
   281  0006                     	;# 
   282  0007                     	;# 
   283  0008                     	;# 
   284  0009                     	;# 
   285  000A                     	;# 
   286  000B                     	;# 
   287  000C                     	;# 
   288  000D                     	;# 
   289  000E                     	;# 
   290  000E                     	;# 
   291  000F                     	;# 
   292  0010                     	;# 
   293  0011                     	;# 
   294  0012                     	;# 
   295  0013                     	;# 
   296  0014                     	;# 
   297  0015                     	;# 
   298  0015                     	;# 
   299  0016                     	;# 
   300  0017                     	;# 
   301  0018                     	;# 
   302  0019                     	;# 
   303  001A                     	;# 
   304  001B                     	;# 
   305  001B                     	;# 
   306  001C                     	;# 
   307  001D                     	;# 
   308  001E                     	;# 
   309  001F                     	;# 
   310  0081                     	;# 
   311  0085                     	;# 
   312  0086                     	;# 
   313  0087                     	;# 
   314  0088                     	;# 
   315  0089                     	;# 
   316  008C                     	;# 
   317  008D                     	;# 
   318  008E                     	;# 
   319  0091                     	;# 
   320  0092                     	;# 
   321  0093                     	;# 
   322  0094                     	;# 
   323  0098                     	;# 
   324  0099                     	;# 
   325  009C                     	;# 
   326  009D                     	;# 
   327  009E                     	;# 
   328  009F                     	;# 
   329  010C                     	;# 
   330  010D                     	;# 
   331  010E                     	;# 
   332  010F                     	;# 
   333  018C                     	;# 
   334  018D                     	;# 
   335  0000                     	;# 
   336  0001                     	;# 
   337  0002                     	;# 
   338  0003                     	;# 
   339  0004                     	;# 
   340  0005                     	;# 
   341  0006                     	;# 
   342  0007                     	;# 
   343  0008                     	;# 
   344  0009                     	;# 
   345  000A                     	;# 
   346  000B                     	;# 
   347  000C                     	;# 
   348  000D                     	;# 
   349  000E                     	;# 
   350  000E                     	;# 
   351  000F                     	;# 
   352  0010                     	;# 
   353  0011                     	;# 
   354  0012                     	;# 
   355  0013                     	;# 
   356  0014                     	;# 
   357  0015                     	;# 
   358  0015                     	;# 
   359  0016                     	;# 
   360  0017                     	;# 
   361  0018                     	;# 
   362  0019                     	;# 
   363  001A                     	;# 
   364  001B                     	;# 
   365  001B                     	;# 
   366  001C                     	;# 
   367  001D                     	;# 
   368  001E                     	;# 
   369  001F                     	;# 
   370  0081                     	;# 
   371  0085                     	;# 
   372  0086                     	;# 
   373  0087                     	;# 
   374  0088                     	;# 
   375  0089                     	;# 
   376  008C                     	;# 
   377  008D                     	;# 
   378  008E                     	;# 
   379  0091                     	;# 
   380  0092                     	;# 
   381  0093                     	;# 
   382  0094                     	;# 
   383  0098                     	;# 
   384  0099                     	;# 
   385  009C                     	;# 
   386  009D                     	;# 
   387  009E                     	;# 
   388  009F                     	;# 
   389  010C                     	;# 
   390  010D                     	;# 
   391  010E                     	;# 
   392  010F                     	;# 
   393  018C                     	;# 
   394  018D                     	;# 
   395                           
   396                           	psect	idataBANK0
   397  06CC                     __pidataBANK0:	
   398                           
   399                           ;initializer for _a
   400  06CC  3401               	retlw	1
   401                           
   402                           ;initializer for _orientation
   403  06CD  3403               	retlw	3
   404                           
   405                           ;initializer for _pathCountShortest
   406  06CE  3414               	retlw	20
   407                           
   408                           ;initializer for _x
   409  06CF  3401               	retlw	1
   410                           
   411                           	psect	idataBANK1
   412  05C2                     __pidataBANK1:	
   413                           
   414                           ;initializer for _mazeGrid
   415  05C2  340C               	retlw	12
   416  05C3  3407               	retlw	7
   417  05C4  340E               	retlw	14
   418  05C5  340D               	retlw	13
   419  05C6  3406               	retlw	6
   420  05C7  3409               	retlw	9
   421  05C8  3405               	retlw	5
   422  05C9  3400               	retlw	0
   423  05CA  3405               	retlw	5
   424  05CB  3402               	retlw	2
   425  05CC  340C               	retlw	12
   426  05CD  3406               	retlw	6
   427  05CE  340A               	retlw	10
   428  05CF  340E               	retlw	14
   429  05D0  340A               	retlw	10
   430  05D1  340B               	retlw	11
   431  05D2  3409               	retlw	9
   432  05D3  3401               	retlw	1
   433  05D4  3401               	retlw	1
   434  05D5  3403               	retlw	3
   435                           
   436                           ;initializer for _mazeGridDefault
   437  05D6  340C               	retlw	12
   438  05D7  3407               	retlw	7
   439  05D8  340E               	retlw	14
   440  05D9  340D               	retlw	13
   441  05DA  3406               	retlw	6
   442  05DB  3409               	retlw	9
   443  05DC  3405               	retlw	5
   444  05DD  3400               	retlw	0
   445  05DE  3405               	retlw	5
   446  05DF  3402               	retlw	2
   447  05E0  340C               	retlw	12
   448  05E1  3406               	retlw	6
   449  05E2  340A               	retlw	10
   450  05E3  340E               	retlw	14
   451  05E4  340A               	retlw	10
   452  05E5  340B               	retlw	11
   453  05E6  3409               	retlw	9
   454  05E7  3401               	retlw	1
   455  05E8  3401               	retlw	1
   456  05E9  3403               	retlw	3
   457                           
   458                           	psect	idataBANK2
   459  0549                     __pidataBANK2:	
   460                           
   461                           ;initializer for _squareWalls
   462  0549  3400               	retlw	0
   463  054A  3401               	retlw	1
   464  054B  3402               	retlw	2
   465  054C  3403               	retlw	3
   466  054D  3404               	retlw	4
   467  054E  3405               	retlw	5
   468  054F  3406               	retlw	6
   469  0550  3407               	retlw	7
   470  0551  3408               	retlw	8
   471  0552  3409               	retlw	9
   472  0553  340A               	retlw	10
   473  0554  340B               	retlw	11
   474  0555  340C               	retlw	12
   475  0556  340D               	retlw	13
   476  0557  340E               	retlw	14
   477  0558  340F               	retlw	15
   478  0559  3400               	retlw	0
   479  055A  3400               	retlw	0
   480  055B  3400               	retlw	0
   481  055C  3400               	retlw	0
   482  055D  3400               	retlw	0
   483  055E  3400               	retlw	0
   484  055F  3400               	retlw	0
   485  0560  3400               	retlw	0
   486  0561  3401               	retlw	1
   487  0562  3401               	retlw	1
   488  0563  3401               	retlw	1
   489  0564  3401               	retlw	1
   490  0565  3401               	retlw	1
   491  0566  3401               	retlw	1
   492  0567  3401               	retlw	1
   493  0568  3401               	retlw	1
   494  0569  3400               	retlw	0
   495  056A  3400               	retlw	0
   496  056B  3400               	retlw	0
   497  056C  3400               	retlw	0
   498  056D  3401               	retlw	1
   499  056E  3401               	retlw	1
   500  056F  3401               	retlw	1
   501  0570  3401               	retlw	1
   502  0571  3400               	retlw	0
   503  0572  3400               	retlw	0
   504  0573  3400               	retlw	0
   505  0574  3400               	retlw	0
   506  0575  3401               	retlw	1
   507  0576  3401               	retlw	1
   508  0577  3401               	retlw	1
   509  0578  3401               	retlw	1
   510  0579  3400               	retlw	0
   511  057A  3400               	retlw	0
   512  057B  3401               	retlw	1
   513  057C  3401               	retlw	1
   514  057D  3400               	retlw	0
   515  057E  3400               	retlw	0
   516  057F  3401               	retlw	1
   517  0580  3401               	retlw	1
   518  0581  3400               	retlw	0
   519  0582  3400               	retlw	0
   520  0583  3401               	retlw	1
   521  0584  3401               	retlw	1
   522  0585  3400               	retlw	0
   523  0586  3400               	retlw	0
   524  0587  3401               	retlw	1
   525  0588  3401               	retlw	1
   526  0589  3400               	retlw	0
   527  058A  3401               	retlw	1
   528  058B  3400               	retlw	0
   529  058C  3401               	retlw	1
   530  058D  3400               	retlw	0
   531  058E  3401               	retlw	1
   532  058F  3400               	retlw	0
   533  0590  3401               	retlw	1
   534  0591  3400               	retlw	0
   535  0592  3401               	retlw	1
   536  0593  3400               	retlw	0
   537  0594  3401               	retlw	1
   538  0595  3400               	retlw	0
   539  0596  3401               	retlw	1
   540  0597  3400               	retlw	0
   541  0598  3401               	retlw	1
   542                           
   543                           	psect	idataBANK3
   544  04E9                     __pidataBANK3:	
   545                           
   546                           ;initializer for _path
   547  04E9  3400               	retlw	0
   548  04EA  3401               	retlw	1
   549  04EB  3402               	retlw	2
   550  04EC  3403               	retlw	3
   551  04ED  3404               	retlw	4
   552  04EE  3405               	retlw	5
   553  04EF  3406               	retlw	6
   554  04F0  3407               	retlw	7
   555  04F1  3408               	retlw	8
   556  04F2  3409               	retlw	9
   557  04F3  340A               	retlw	10
   558  04F4  340B               	retlw	11
   559  04F5  340C               	retlw	12
   560  04F6  340D               	retlw	13
   561  04F7  340E               	retlw	14
   562  04F8  340F               	retlw	15
   563  04F9  3400               	retlw	0
   564  04FA  3400               	retlw	0
   565  04FB  3400               	retlw	0
   566  04FC  3400               	retlw	0
   567  04FD  3400               	retlw	0
   568  04FE  3400               	retlw	0
   569  04FF  3400               	retlw	0
   570  0500  3400               	retlw	0
   571  0501  3400               	retlw	0
   572  0502  3400               	retlw	0
   573  0503  3400               	retlw	0
   574  0504  3400               	retlw	0
   575  0505  3400               	retlw	0
   576  0506  3400               	retlw	0
   577  0507  3400               	retlw	0
   578  0508  3400               	retlw	0
   579  0509  3400               	retlw	0
   580  050A  3400               	retlw	0
   581  050B  3400               	retlw	0
   582  050C  3400               	retlw	0
   583  050D  3400               	retlw	0
   584  050E  3400               	retlw	0
   585  050F  3400               	retlw	0
   586  0510  3400               	retlw	0
   587  0511  3400               	retlw	0
   588  0512  3400               	retlw	0
   589  0513  3400               	retlw	0
   590  0514  3400               	retlw	0
   591  0515  3400               	retlw	0
   592  0516  3400               	retlw	0
   593  0517  3400               	retlw	0
   594  0518  3400               	retlw	0
   595                           
   596                           ;initializer for _shortest_path
   597  0519  3400               	retlw	0
   598  051A  3401               	retlw	1
   599  051B  3402               	retlw	2
   600  051C  3403               	retlw	3
   601  051D  3404               	retlw	4
   602  051E  3405               	retlw	5
   603  051F  3406               	retlw	6
   604  0520  3407               	retlw	7
   605  0521  3408               	retlw	8
   606  0522  3409               	retlw	9
   607  0523  340A               	retlw	10
   608  0524  340B               	retlw	11
   609  0525  340C               	retlw	12
   610  0526  340D               	retlw	13
   611  0527  340E               	retlw	14
   612  0528  340F               	retlw	15
   613  0529  3400               	retlw	0
   614  052A  3400               	retlw	0
   615  052B  3400               	retlw	0
   616  052C  3400               	retlw	0
   617  052D  3400               	retlw	0
   618  052E  3400               	retlw	0
   619  052F  3400               	retlw	0
   620  0530  3400               	retlw	0
   621  0531  3400               	retlw	0
   622  0532  3400               	retlw	0
   623  0533  3400               	retlw	0
   624  0534  3400               	retlw	0
   625  0535  3400               	retlw	0
   626  0536  3400               	retlw	0
   627  0537  3400               	retlw	0
   628  0538  3400               	retlw	0
   629  0539  3400               	retlw	0
   630  053A  3400               	retlw	0
   631  053B  3400               	retlw	0
   632  053C  3400               	retlw	0
   633  053D  3400               	retlw	0
   634  053E  3400               	retlw	0
   635  053F  3400               	retlw	0
   636  0540  3400               	retlw	0
   637  0541  3400               	retlw	0
   638  0542  3400               	retlw	0
   639  0543  3400               	retlw	0
   640  0544  3400               	retlw	0
   641  0545  3400               	retlw	0
   642  0546  3400               	retlw	0
   643  0547  3400               	retlw	0
   644  0548  3400               	retlw	0
   645  001F                     _ADCON0	set	31
   646  0005                     _PORTA	set	5
   647  0007                     _PORTC	set	7
   648  0008                     _PORTD	set	8
   649  0009                     _PORTE	set	9
   650  001A                     _RCREG	set	26
   651  0018                     _RCSTA	set	24
   652  0013                     _SSPBUF	set	19
   653  0014                     _SSPCON	set	20
   654  0001                     _TMR0	set	1
   655  0019                     _TXREG	set	25
   656  001E                     _ADRESH	set	30
   657  005F                     _GIE	set	95
   658  00FA                     _GO	set	250
   659  005E                     _PEIE	set	94
   660  0030                     _RB0	set	48
   661  0065                     _RCIF	set	101
   662  0048                     _RE0	set	72
   663  0049                     _RE1	set	73
   664  004A                     _RE2	set	74
   665  0063                     _SSPIF	set	99
   666  005D                     _TMR0IE	set	93
   667  005A                     _TMR0IF	set	90
   668  009F                     _ADCON1	set	159
   669  009E                     _ADRESL	set	158
   670  0081                     _OPTION_REG	set	129
   671  0099                     _SPBRG	set	153
   672  0094                     _SSPSTAT	set	148
   673  0085                     _TRISA	set	133
   674  0086                     _TRISB	set	134
   675  0087                     _TRISC	set	135
   676  0088                     _TRISD	set	136
   677  0089                     _TRISE	set	137
   678  0098                     _TXSTA	set	152
   679  04C1                     _TRMT	set	1217
   680                           
   681                           	psect	strings
   682  06AF                     __pstrings:	
   683  06AF                     stringtab:	
   684  06AF                     __stringtab:	
   685  06AF                     stringcode:	
   686                           ;	String table - string pointers are 1 byte each
   687                           
   688  06AF                     stringdir:	
   689  06AF  3006               	movlw	high stringdir
   690  06B0  008A               	movwf	10
   691  06B1  0804               	movf	4,w
   692  06B2  0A84               	incf	4,f
   693  06B3  0782               	addwf	2,f
   694  06B4                     __stringbase:	
   695  06B4  3400               	retlw	0
   696  06B5                     __end_of__stringtab:	
   697  06B5                     STR_1:	
   698  06B5  3458               	retlw	88	;'X'
   699  06B6  343A               	retlw	58	;':'
   700  06B7  3400               	retlw	0
   701  06B8                     STR_2:	
   702  06B8  3459               	retlw	89	;'Y'
   703  06B9  343A               	retlw	58	;':'
   704  06BA  3400               	retlw	0
   705                           
   706                           ; #config settings
   707  0000                     
   708                           	psect	cinit
   709  0015                     start_initialization:	
   710  0015                     __initialization:	
   711                           
   712                           ; Initialize objects allocated to BANK3
   713  0015  1783               	bsf	3,7	;select IRP bank2
   714  0016  30F0               	movlw	low (__pdataBANK3+96)
   715  0017  00FD               	movwf	btemp+-1
   716  0018  3004               	movlw	high __pidataBANK3
   717  0019  00FE               	movwf	btemp
   718  001A  30E9               	movlw	low __pidataBANK3
   719  001B  00FF               	movwf	btemp+1
   720  001C  3090               	movlw	low __pdataBANK3
   721  001D  0084               	movwf	4
   722  001E  120A  118A  2693  120A  118A  	fcall	init_ram0
   723                           
   724                           ; Initialize objects allocated to BANK2
   725  0023  3060               	movlw	low (__pdataBANK2+80)
   726  0024  00FD               	movwf	btemp+-1
   727  0025  3005               	movlw	high __pidataBANK2
   728  0026  00FE               	movwf	btemp
   729  0027  3049               	movlw	low __pidataBANK2
   730  0028  00FF               	movwf	btemp+1
   731  0029  3010               	movlw	low __pdataBANK2
   732  002A  0084               	movwf	4
   733  002B  120A  118A  2693  120A  118A  	fcall	init_ram0
   734                           
   735                           ; Initialize objects allocated to BANK1
   736  0030  1383               	bcf	3,7	;select IRP bank0
   737  0031  30C8               	movlw	low (__pdataBANK1+40)
   738  0032  00FD               	movwf	btemp+-1
   739  0033  3005               	movlw	high __pidataBANK1
   740  0034  00FE               	movwf	btemp
   741  0035  30C2               	movlw	low __pidataBANK1
   742  0036  00FF               	movwf	btemp+1
   743  0037  30A0               	movlw	low __pdataBANK1
   744  0038  0084               	movwf	4
   745  0039  120A  118A  2693  120A  118A  	fcall	init_ram0
   746                           
   747                           ; Initialize objects allocated to BANK0
   748  003E  306B               	movlw	low (__pdataBANK0+4)
   749  003F  00FD               	movwf	btemp+-1
   750  0040  3006               	movlw	high __pidataBANK0
   751  0041  00FE               	movwf	btemp
   752  0042  30CC               	movlw	low __pidataBANK0
   753  0043  00FF               	movwf	btemp+1
   754  0044  3067               	movlw	low __pdataBANK0
   755  0045  0084               	movwf	4
   756  0046  120A  118A  2693  120A  118A  	fcall	init_ram0
   757                           
   758                           ; Clear objects allocated to BANK0
   759  004B  3020               	movlw	low __pbssBANK0
   760  004C  0084               	movwf	4
   761  004D  3048               	movlw	low (__pbssBANK0+40)
   762  004E  120A  118A  26C4   	fcall	clear_ram0
   763                           
   764                           ; Clear objects allocated to COMMON
   765  0051  01F0               	clrf	__pbssCOMMON& (0+127)
   766  0052  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   767  0053  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   768  0054  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   769  0055  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   770  0056                     end_of_initialization:	
   771                           ;End of C runtime variable initialization code
   772                           
   773  0056                     __end_of__initialization:	
   774  0056  0183               	clrf	3
   775  0057  120A  118A  2B8A   	ljmp	_main	;jump to C main() function
   776                           
   777                           	psect	bssCOMMON
   778  0070                     __pbssCOMMON:	
   779  0070                     _angle:	
   780  0070                     	ds	2
   781  0072                     _RightSpeedH:	
   782  0072                     	ds	1
   783  0073                     _lowByte:	
   784  0073                     	ds	1
   785  0074                     _highByte:	
   786  0074                     	ds	1
   787                           
   788                           	psect	bssBANK0
   789  0020                     __pbssBANK0:	
   790  0020                     _VelocityLeft:	
   791  0020                     	ds	2
   792  0022                     _VelocityRight:	
   793  0022                     	ds	2
   794  0024                     _adcRAW:	
   795  0024                     	ds	2
   796  0026                     _distance:	
   797  0026                     	ds	2
   798  0028                     _time_count:	
   799  0028                     	ds	2
   800  002A                     _LeftSpeedH:	
   801  002A                     	ds	1
   802  002B                     _LeftSpeedL:	
   803  002B                     	ds	1
   804  002C                     _PB8Counter:	
   805  002C                     	ds	1
   806  002D                     _RightSpeedL:	
   807  002D                     	ds	1
   808  002E                     _c:	
   809  002E                     	ds	1
   810  002F                     _down:	
   811  002F                     	ds	1
   812  0030                     _intFound:	
   813  0030                     	ds	1
   814  0031                     _intersection_Orientation:	
   815  0031                     	ds	1
   816  0032                     _left:	
   817  0032                     	ds	1
   818  0033                     _orientation_path:	
   819  0033                     	ds	1
   820  0034                     _pathCount:	
   821  0034                     	ds	1
   822  0035                     _r:	
   823  0035                     	ds	1
   824  0036                     _radH:	
   825  0036                     	ds	1
   826  0037                     _radL:	
   827  0037                     	ds	1
   828  0038                     _reset_flag:	
   829  0038                     	ds	1
   830  0039                     _right:	
   831  0039                     	ds	1
   832  003A                     _speedH:	
   833  003A                     	ds	1
   834  003B                     _speedL:	
   835  003B                     	ds	1
   836  003C                     _up:	
   837  003C                     	ds	1
   838  003D                     _x_int:	
   839  003D                     	ds	1
   840  003E                     _x_origin:	
   841  003E                     	ds	1
   842  003F                     _x_path:	
   843  003F                     	ds	1
   844  0040                     _x_target:	
   845  0040                     	ds	1
   846  0041                     _x_test:	
   847  0041                     	ds	1
   848  0042                     _y:	
   849  0042                     	ds	1
   850  0043                     _y_int:	
   851  0043                     	ds	1
   852  0044                     _y_origin:	
   853  0044                     	ds	1
   854  0045                     _y_path:	
   855  0045                     	ds	1
   856  0046                     _y_target:	
   857  0046                     	ds	1
   858  0047                     _y_test:	
   859  0047                     	ds	1
   860                           
   861                           	psect	dataBANK0
   862  0067                     __pdataBANK0:	
   863  0067                     _a:	
   864  0067                     	ds	1
   865  0068                     _orientation:	
   866  0068                     	ds	1
   867  0069                     _pathCountShortest:	
   868  0069                     	ds	1
   869  006A                     _x:	
   870  006A                     	ds	1
   871                           
   872                           	psect	dataBANK1
   873  00A0                     __pdataBANK1:	
   874  00A0                     _mazeGrid:	
   875  00A0                     	ds	20
   876  00B4                     _mazeGridDefault:	
   877  00B4                     	ds	20
   878                           
   879                           	psect	dataBANK3
   880  0190                     __pdataBANK3:	
   881  0190                     _path:	
   882  0190                     	ds	48
   883  01C0                     _shortest_path:	
   884  01C0                     	ds	48
   885                           
   886                           	psect	dataBANK2
   887  0110                     __pdataBANK2:	
   888  0110                     _squareWalls:	
   889  0110                     	ds	80
   890                           
   891                           	psect	inittext
   892  068F                     init_fetch0:	
   893                           ;	Called with low address in FSR and high address in W
   894                           
   895  068F  087E               	movf	126,w
   896  0690  008A               	movwf	10
   897  0691  087F               	movf	127,w
   898  0692  0082               	movwf	2
   899  0693                     init_ram0:	
   900                           ;Called with:
   901                           ;	high address of idata address in btemp 
   902                           ;	low address of idata address in btemp+1 
   903                           ;	low address of data in FSR
   904                           ;	high address + 1 of data in btemp-1
   905                           
   906  0693  268F  120A  118A   	fcall	init_fetch0
   907  0696  0080               	movwf	0
   908  0697  0A84               	incf	4,f
   909  0698  0804               	movf	4,w
   910  0699  067D               	xorwf	125,w
   911  069A  1903               	btfsc	3,2
   912  069B  3400               	retlw	0
   913  069C  0AFF               	incf	127,f
   914  069D  1903               	btfsc	3,2
   915  069E  0AFE               	incf	126,f
   916  069F  2E93               	goto	init_ram0
   917                           
   918                           	psect	clrtext
   919  06C4                     clear_ram0:	
   920                           ;	Called with FSR containing the base address, and
   921                           ;	W with the last address+1
   922                           
   923  06C4  0064               	clrwdt	;clear the watchdog before getting into this loop
   924  06C5                     clrloop0:	
   925  06C5  0180               	clrf	0	;clear RAM location pointed to by FSR
   926  06C6  0A84               	incf	4,f	;increment pointer
   927  06C7  0604               	xorwf	4,w	;XOR with final address
   928  06C8  1903               	btfsc	3,2	;have we reached the end yet?
   929  06C9  3400               	retlw	0	;all done for this memory range, return
   930  06CA  0604               	xorwf	4,w	;XOR again to restore value
   931  06CB  2EC5               	goto	clrloop0	;do the next byte
   932                           
   933                           	psect	cstackCOMMON
   934  0075                     __pcstackCOMMON:	
   935  0075                     ?_lcdWriteControl:	
   936  0075                     ?_lcdSetCursor:	
   937                           ; 1 bytes @ 0x0
   938                           
   939  0075                     ?_ser_init:	
   940                           ; 1 bytes @ 0x0
   941                           
   942  0075                     ?_setupSPI:	
   943                           ; 1 bytes @ 0x0
   944                           
   945  0075                     ?_setupLCD:	
   946                           ; 1 bytes @ 0x0
   947                           
   948  0075                     ?_setupADC:	
   949                           ; 1 bytes @ 0x0
   950                           
   951  0075                     ?_lcdWriteString:	
   952                           ; 1 bytes @ 0x0
   953                           
   954  0075                     ?_lcdWriteData:	
   955                           ; 1 bytes @ 0x0
   956                           
   957  0075                     ?_isr:	
   958                           ; 1 bytes @ 0x0
   959                           
   960  0075                     ??_isr:	
   961                           ; 1 bytes @ 0x0
   962                           
   963  0075                     ?_main:	
   964                           ; 1 bytes @ 0x0
   965                           
   966                           
   967                           ; 1 bytes @ 0x0
   968  0075                     	ds	5
   969                           
   970                           	psect	cstackBANK0
   971  0048                     __pcstackBANK0:	
   972  0048                     ??_lcdWriteControl:	
   973  0048                     ??_ser_init:	
   974                           ; 1 bytes @ 0x0
   975                           
   976  0048                     ??_setupSPI:	
   977                           ; 1 bytes @ 0x0
   978                           
   979  0048                     ??_setupADC:	
   980                           ; 1 bytes @ 0x0
   981                           
   982  0048                     ??_lcdWriteData:	
   983                           ; 1 bytes @ 0x0
   984                           
   985  0048                     ?___bmul:	
   986                           ; 1 bytes @ 0x0
   987                           
   988  0048                     ___bmul@multiplicand:	
   989                           ; 1 bytes @ 0x0
   990                           
   991                           
   992                           ; 1 bytes @ 0x0
   993  0048                     	ds	1
   994  0049                     ??___bmul:	
   995                           
   996                           ; 1 bytes @ 0x1
   997  0049                     	ds	1
   998  004A                     lcdWriteControl@databyte:	
   999  004A                     lcdWriteData@databyte:	
  1000                           ; 1 bytes @ 0x2
  1001                           
  1002  004A                     ___bmul@product:	
  1003                           ; 1 bytes @ 0x2
  1004                           
  1005                           
  1006                           ; 1 bytes @ 0x2
  1007  004A                     	ds	1
  1008  004B                     ??_lcdSetCursor:	
  1009  004B                     ?_lcdWriteToDigitBCD:	
  1010                           ; 1 bytes @ 0x3
  1011                           
  1012  004B                     ??_setupLCD:	
  1013                           ; 1 bytes @ 0x3
  1014                           
  1015  004B                     ??_lcdWriteString:	
  1016                           ; 1 bytes @ 0x3
  1017                           
  1018  004B                     lcdSetCursor@address:	
  1019                           ; 1 bytes @ 0x3
  1020                           
  1021  004B                     ___bmul@multiplier:	
  1022                           ; 1 bytes @ 0x3
  1023                           
  1024  004B                     lcdWriteToDigitBCD@data:	
  1025                           ; 1 bytes @ 0x3
  1026                           
  1027                           
  1028                           ; 2 bytes @ 0x3
  1029  004B                     	ds	1
  1030  004C                     lcdWriteString@s:	
  1031                           
  1032                           ; 1 bytes @ 0x4
  1033  004C                     	ds	1
  1034  004D                     ??_lcdWriteToDigitBCD:	
  1035  004D                     lcdWriteToDigitBCD@TensDigit:	
  1036                           ; 1 bytes @ 0x5
  1037                           
  1038                           
  1039                           ; 2 bytes @ 0x5
  1040  004D                     	ds	2
  1041  004F                     lcdWriteToDigitBCD@HunsDigit:	
  1042                           
  1043                           ; 2 bytes @ 0x7
  1044  004F                     	ds	2
  1045  0051                     lcdWriteToDigitBCD@ThouDigit:	
  1046                           
  1047                           ; 2 bytes @ 0x9
  1048  0051                     	ds	2
  1049  0053                     lcdWriteToDigitBCD@TenThouDigit:	
  1050                           
  1051                           ; 2 bytes @ 0xB
  1052  0053                     	ds	2
  1053  0055                     lcdWriteToDigitBCD@OnesDigit:	
  1054                           
  1055                           ; 2 bytes @ 0xD
  1056  0055                     	ds	2
  1057  0057                     ?_PathTo:	
  1058  0057                     PathTo@y_target:	
  1059                           ; 1 bytes @ 0xF
  1060                           
  1061                           
  1062                           ; 1 bytes @ 0xF
  1063  0057                     	ds	1
  1064  0058                     ??_PathTo:	
  1065                           
  1066                           ; 1 bytes @ 0x10
  1067  0058                     	ds	7
  1068  005F                     PathTo@x_target:	
  1069                           
  1070                           ; 1 bytes @ 0x17
  1071  005F                     	ds	1
  1072  0060                     PathTo@sum:	
  1073                           
  1074                           ; 1 bytes @ 0x18
  1075  0060                     	ds	1
  1076  0061                     PathTo@loop:	
  1077                           
  1078                           ; 2 bytes @ 0x19
  1079  0061                     	ds	2
  1080  0063                     ??_main:	
  1081                           
  1082                           ; 1 bytes @ 0x1B
  1083  0063                     	ds	3
  1084  0066                     main@n:	
  1085                           
  1086                           ; 1 bytes @ 0x1E
  1087  0066                     	ds	1
  1088                           
  1089                           	psect	maintext
  1090  038A                     __pmaintext:	
  1091 ;;
  1092 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1093 ;;
  1094 ;; *************** function _main *****************
  1095 ;; Defined at:
  1096 ;;		line 292 in file "main.c"
  1097 ;; Parameters:    Size  Location     Type
  1098 ;;		None
  1099 ;; Auto vars:     Size  Location     Type
  1100 ;;  n               1   30[BANK0 ] unsigned char 
  1101 ;; Return value:  Size  Location     Type
  1102 ;;                  1    wreg      void 
  1103 ;; Registers used:
  1104 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1105 ;; Tracked objects:
  1106 ;;		On entry : B00/0
  1107 ;;		On exit  : 0/0
  1108 ;;		Unchanged: 0/0
  1109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1110 ;;      Params:         0       0       0       0       0
  1111 ;;      Locals:         0       1       0       0       0
  1112 ;;      Temps:          0       3       0       0       0
  1113 ;;      Totals:         0       4       0       0       0
  1114 ;;Total ram usage:        4 bytes
  1115 ;; Hardware stack levels required when called:    4
  1116 ;; This function calls:
  1117 ;;		_PathTo
  1118 ;;		_lcdSetCursor
  1119 ;;		_lcdWriteControl
  1120 ;;		_lcdWriteData
  1121 ;;		_lcdWriteString
  1122 ;;		_lcdWriteToDigitBCD
  1123 ;;		_ser_init
  1124 ;;		_setupADC
  1125 ;;		_setupLCD
  1126 ;;		_setupSPI
  1127 ;; This function is called by:
  1128 ;;		Startup code after reset
  1129 ;; This function uses a non-reentrant model
  1130 ;;
  1131                           
  1132                           
  1133                           ;psect for function _main
  1134  038A                     _main:	
  1135                           
  1136                           ;main.c: 294: ser_init();
  1137                           
  1138                           ;incstack = 0
  1139                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1140  038A  120A  118A  26A0  120A  118A  	fcall	_ser_init
  1141                           
  1142                           ;main.c: 295: setupSPI();
  1143  038F  120A  118A  2626  120A  118A  	fcall	_setupSPI
  1144                           
  1145                           ;main.c: 296: setupLCD();
  1146  0394  120A  118A  2599  120A  118A  	fcall	_setupLCD
  1147                           
  1148                           ;main.c: 297: setupADC();
  1149  0399  120A  118A  263F  120A  118A  	fcall	_setupADC
  1150                           
  1151                           ;main.c: 298: TRISB = 0b00000000;
  1152  039E  1683               	bsf	3,5	;RP0=1, select bank1
  1153  039F  1303               	bcf	3,6	;RP1=0, select bank1
  1154  03A0  0186               	clrf	6	;volatile
  1155                           
  1156                           ;main.c: 301: x = 1;
  1157  03A1  1283               	bcf	3,5	;RP0=0, select bank0
  1158  03A2  1303               	bcf	3,6	;RP1=0, select bank0
  1159  03A3  01EA               	clrf	_x
  1160  03A4  0AEA               	incf	_x,f
  1161                           
  1162                           ;main.c: 302: y = 0;
  1163  03A5  01C2               	clrf	_y
  1164                           
  1165                           ;main.c: 303: orientation = 3;
  1166  03A6  3003               	movlw	3
  1167  03A7  00E3               	movwf	??_main
  1168  03A8  0863               	movf	??_main,w
  1169  03A9  00E8               	movwf	_orientation
  1170                           
  1171                           ;main.c: 310: PathTo(0,3);
  1172  03AA  3003               	movlw	3
  1173  03AB  00E3               	movwf	??_main
  1174  03AC  0863               	movf	??_main,w
  1175  03AD  00D7               	movwf	PathTo@y_target
  1176  03AE  3000               	movlw	0
  1177  03AF  120A  118A  205A  120A  118A  	fcall	_PathTo
  1178                           
  1179                           ;main.c: 311: _delay((unsigned long)((3000)*(20000000/4000.0)));
  1180  03B4  304D               	movlw	77
  1181  03B5  1283               	bcf	3,5	;RP0=0, select bank0
  1182  03B6  1303               	bcf	3,6	;RP1=0, select bank0
  1183  03B7  00E5               	movwf	??_main+2
  1184  03B8  3019               	movlw	25
  1185  03B9  00E4               	movwf	??_main+1
  1186  03BA  309A               	movlw	154
  1187  03BB  00E3               	movwf	??_main
  1188  03BC                     u1847:	
  1189  03BC  0BE3               	decfsz	??_main,f
  1190  03BD  2BBC               	goto	u1847
  1191  03BE  0BE4               	decfsz	??_main+1,f
  1192  03BF  2BBC               	goto	u1847
  1193  03C0  0BE5               	decfsz	??_main+2,f
  1194  03C1  2BBC               	goto	u1847
  1195  03C2  2BC3               	nop2
  1196                           
  1197                           ;main.c: 312: lcdWriteControl(0b00000001);
  1198  03C3  3001               	movlw	1
  1199  03C4  120A  118A  2655  120A  118A  	fcall	_lcdWriteControl
  1200                           
  1201                           ;main.c: 314: lcdSetCursor(0b10000000);
  1202  03C9  3080               	movlw	128
  1203  03CA  120A  118A  26BB  120A  118A  	fcall	_lcdSetCursor
  1204                           
  1205                           ;main.c: 315: lcdWriteString("X:");
  1206  03CF  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1207  03D0  120A  118A  25EA  120A  118A  	fcall	_lcdWriteString
  1208                           
  1209                           ;main.c: 316: lcdSetCursor(0b11000000);
  1210  03D5  30C0               	movlw	192
  1211  03D6  120A  118A  26BB  120A  118A  	fcall	_lcdSetCursor
  1212                           
  1213                           ;main.c: 317: lcdWriteString("Y:");
  1214  03DB  3004               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1215  03DC  120A  118A  25EA  120A  118A  	fcall	_lcdWriteString
  1216                           
  1217                           ;main.c: 319: for (char n = 0; n <= pathCountShortest; n++){
  1218  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  1219  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  1220  03E3  01E6               	clrf	main@n
  1221  03E4                     l2666:	
  1222  03E4  0866               	movf	main@n,w
  1223  03E5  0269               	subwf	_pathCountShortest,w
  1224  03E6  1C03               	btfss	3,0
  1225  03E7  2C19               	goto	l2668
  1226                           
  1227                           ;main.c: 320: lcdSetCursor(0b10000000 + n + 2);
  1228  03E8  0866               	movf	main@n,w
  1229  03E9  3E82               	addlw	130
  1230  03EA  120A  118A  26BB  120A  118A  	fcall	_lcdSetCursor
  1231                           
  1232                           ;main.c: 321: lcdWriteData(shortest_path[1][n] + 48);
  1233  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  1234  03F0  1303               	bcf	3,6	;RP1=0, select bank0
  1235  03F1  0866               	movf	main@n,w
  1236  03F2  3ED0               	addlw	(low ((_shortest_path| (0+256)+16)))& (0+255)
  1237  03F3  0084               	movwf	4
  1238  03F4  1783               	bsf	3,7	;select IRP bank3
  1239  03F5  0800               	movf	0,w
  1240  03F6  3E30               	addlw	48
  1241  03F7  120A  118A  2669  120A  118A  	fcall	_lcdWriteData
  1242                           
  1243                           ;main.c: 322: lcdSetCursor(0b11000000 + n + 2);
  1244  03FC  1283               	bcf	3,5	;RP0=0, select bank0
  1245  03FD  1303               	bcf	3,6	;RP1=0, select bank0
  1246  03FE  0866               	movf	main@n,w
  1247  03FF  3EC2               	addlw	194
  1248  0400  120A  118A  26BB  120A  118A  	fcall	_lcdSetCursor
  1249                           
  1250                           ;main.c: 323: lcdWriteData(shortest_path[2][n] + 48);
  1251  0405  1283               	bcf	3,5	;RP0=0, select bank0
  1252  0406  1303               	bcf	3,6	;RP1=0, select bank0
  1253  0407  0866               	movf	main@n,w
  1254  0408  3EE0               	addlw	(low ((_shortest_path| (0+256)+32)))& (0+255)
  1255  0409  0084               	movwf	4
  1256  040A  1783               	bsf	3,7	;select IRP bank3
  1257  040B  0800               	movf	0,w
  1258  040C  3E30               	addlw	48
  1259  040D  120A  118A  2669  120A  118A  	fcall	_lcdWriteData
  1260  0412  3001               	movlw	1
  1261  0413  1283               	bcf	3,5	;RP0=0, select bank0
  1262  0414  1303               	bcf	3,6	;RP1=0, select bank0
  1263  0415  00E3               	movwf	??_main
  1264  0416  0863               	movf	??_main,w
  1265  0417  07E6               	addwf	main@n,f
  1266  0418  2BE4               	goto	l2666
  1267  0419                     l2668:	
  1268                           
  1269                           ;main.c: 324: }
  1270                           ;main.c: 325: lcdSetCursor(0b10001110);
  1271  0419  308E               	movlw	142
  1272  041A  120A  118A  26BB  120A  118A  	fcall	_lcdSetCursor
  1273                           
  1274                           ;main.c: 326: lcdWriteToDigitBCD(pathCountShortest);
  1275  041F  1283               	bcf	3,5	;RP0=0, select bank0
  1276  0420  1303               	bcf	3,6	;RP1=0, select bank0
  1277  0421  0869               	movf	_pathCountShortest,w
  1278  0422  00E3               	movwf	??_main
  1279  0423  01E4               	clrf	??_main+1
  1280  0424  0863               	movf	??_main,w
  1281  0425  00CB               	movwf	lcdWriteToDigitBCD@data
  1282  0426  0864               	movf	??_main+1,w
  1283  0427  00CC               	movwf	lcdWriteToDigitBCD@data+1
  1284  0428  120A  118A  244E  120A  118A  	fcall	_lcdWriteToDigitBCD
  1285  042D                     l2670:	
  1286                           ;main.c: 328: while(1){
  1287                           
  1288                           
  1289                           ;main.c: 329: RB0 = 1;
  1290  042D  1283               	bcf	3,5	;RP0=0, select bank0
  1291  042E  1303               	bcf	3,6	;RP1=0, select bank0
  1292  042F  1406               	bsf	6,0	;volatile
  1293                           
  1294                           ;main.c: 330: _delay((unsigned long)((500)*(20000000/4000.0)));
  1295  0430  300D               	movlw	13
  1296  0431  00E5               	movwf	??_main+2
  1297  0432  30AF               	movlw	175
  1298  0433  00E4               	movwf	??_main+1
  1299  0434  30C1               	movlw	193
  1300  0435  00E3               	movwf	??_main
  1301  0436                     u1857:	
  1302  0436  0BE3               	decfsz	??_main,f
  1303  0437  2C36               	goto	u1857
  1304  0438  0BE4               	decfsz	??_main+1,f
  1305  0439  2C36               	goto	u1857
  1306  043A  0BE5               	decfsz	??_main+2,f
  1307  043B  2C36               	goto	u1857
  1308  043C  0000               	nop
  1309                           
  1310                           ;main.c: 331: RB0 = 0;
  1311  043D  1283               	bcf	3,5	;RP0=0, select bank0
  1312  043E  1303               	bcf	3,6	;RP1=0, select bank0
  1313  043F  1006               	bcf	6,0	;volatile
  1314                           
  1315                           ;main.c: 332: _delay((unsigned long)((500)*(20000000/4000.0)));
  1316  0440  300D               	movlw	13
  1317  0441  00E5               	movwf	??_main+2
  1318  0442  30AF               	movlw	175
  1319  0443  00E4               	movwf	??_main+1
  1320  0444  30C1               	movlw	193
  1321  0445  00E3               	movwf	??_main
  1322  0446                     u1867:	
  1323  0446  0BE3               	decfsz	??_main,f
  1324  0447  2C46               	goto	u1867
  1325  0448  0BE4               	decfsz	??_main+1,f
  1326  0449  2C46               	goto	u1867
  1327  044A  0BE5               	decfsz	??_main+2,f
  1328  044B  2C46               	goto	u1867
  1329  044C  0000               	nop
  1330  044D  2C2D               	goto	l2670
  1331  044E                     __end_of_main:	
  1332                           
  1333                           	psect	text1
  1334  0626                     __ptext1:	
  1335 ;; *************** function _setupSPI *****************
  1336 ;; Defined at:
  1337 ;;		line 4 in file "SPI.c"
  1338 ;; Parameters:    Size  Location     Type
  1339 ;;		None
  1340 ;; Auto vars:     Size  Location     Type
  1341 ;;		None
  1342 ;; Return value:  Size  Location     Type
  1343 ;;                  1    wreg      void 
  1344 ;; Registers used:
  1345 ;;		wreg
  1346 ;; Tracked objects:
  1347 ;;		On entry : 0/0
  1348 ;;		On exit  : 0/0
  1349 ;;		Unchanged: 0/0
  1350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1351 ;;      Params:         0       0       0       0       0
  1352 ;;      Locals:         0       0       0       0       0
  1353 ;;      Temps:          0       0       0       0       0
  1354 ;;      Totals:         0       0       0       0       0
  1355 ;;Total ram usage:        0 bytes
  1356 ;; Hardware stack levels used:    1
  1357 ;; Hardware stack levels required when called:    1
  1358 ;; This function calls:
  1359 ;;		Nothing
  1360 ;; This function is called by:
  1361 ;;		_main
  1362 ;; This function uses a non-reentrant model
  1363 ;;
  1364                           
  1365                           
  1366                           ;psect for function _setupSPI
  1367  0626                     _setupSPI:	
  1368                           
  1369                           ;SPI.c: 6: TRISB = 0b00000011;
  1370                           
  1371                           ;incstack = 0
  1372                           ; Regs used in _setupSPI: [wreg]
  1373  0626  3003               	movlw	3
  1374  0627  1683               	bsf	3,5	;RP0=1, select bank1
  1375  0628  1303               	bcf	3,6	;RP1=0, select bank1
  1376  0629  0086               	movwf	6	;volatile
  1377                           
  1378                           ;SPI.c: 8: SSPSTAT = 0b01000000;
  1379  062A  3040               	movlw	64
  1380  062B  0094               	movwf	20	;volatile
  1381                           
  1382                           ;SPI.c: 9: SSPCON = 0b00100000;
  1383  062C  3020               	movlw	32
  1384  062D  1283               	bcf	3,5	;RP0=0, select bank0
  1385  062E  1303               	bcf	3,6	;RP1=0, select bank0
  1386  062F  0094               	movwf	20	;volatile
  1387                           
  1388                           ;SPI.c: 10: TRISC = 0b10000000;
  1389  0630  3080               	movlw	128
  1390  0631  1683               	bsf	3,5	;RP0=1, select bank1
  1391  0632  1303               	bcf	3,6	;RP1=0, select bank1
  1392  0633  0087               	movwf	7	;volatile
  1393                           
  1394                           ;SPI.c: 11: PORTC = 0b00000011;
  1395  0634  3003               	movlw	3
  1396  0635  1283               	bcf	3,5	;RP0=0, select bank0
  1397  0636  1303               	bcf	3,6	;RP1=0, select bank0
  1398  0637  0087               	movwf	7	;volatile
  1399                           
  1400                           ;SPI.c: 14: OPTION_REG = 0b00000100;
  1401  0638  3004               	movlw	4
  1402  0639  1683               	bsf	3,5	;RP0=1, select bank1
  1403  063A  1303               	bcf	3,6	;RP1=0, select bank1
  1404  063B  0081               	movwf	1	;volatile
  1405                           
  1406                           ;SPI.c: 16: TMR0IE = 1;
  1407  063C  168B               	bsf	11,5	;volatile
  1408                           
  1409                           ;SPI.c: 18: (GIE = 1);
  1410  063D  178B               	bsf	11,7	;volatile
  1411  063E  0008               	return
  1412  063F                     __end_of_setupSPI:	
  1413                           
  1414                           	psect	text2
  1415  0599                     __ptext2:	
  1416 ;; *************** function _setupLCD *****************
  1417 ;; Defined at:
  1418 ;;		line 86 in file "LCD.c"
  1419 ;; Parameters:    Size  Location     Type
  1420 ;;		None
  1421 ;; Auto vars:     Size  Location     Type
  1422 ;;		None
  1423 ;; Return value:  Size  Location     Type
  1424 ;;                  1    wreg      void 
  1425 ;; Registers used:
  1426 ;;		wreg, status,2, status,0, pclath, cstack
  1427 ;; Tracked objects:
  1428 ;;		On entry : 0/0
  1429 ;;		On exit  : 0/0
  1430 ;;		Unchanged: 0/0
  1431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1432 ;;      Params:         0       0       0       0       0
  1433 ;;      Locals:         0       0       0       0       0
  1434 ;;      Temps:          0       0       0       0       0
  1435 ;;      Totals:         0       0       0       0       0
  1436 ;;Total ram usage:        0 bytes
  1437 ;; Hardware stack levels used:    1
  1438 ;; Hardware stack levels required when called:    2
  1439 ;; This function calls:
  1440 ;;		_lcdWriteControl
  1441 ;; This function is called by:
  1442 ;;		_main
  1443 ;; This function uses a non-reentrant model
  1444 ;;
  1445                           
  1446                           
  1447                           ;psect for function _setupLCD
  1448  0599                     _setupLCD:	
  1449                           
  1450                           ;LCD.c: 88: ADCON1 = 0b00000010;
  1451                           
  1452                           ;incstack = 0
  1453                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  1454  0599  3002               	movlw	2
  1455  059A  1683               	bsf	3,5	;RP0=1, select bank1
  1456  059B  1303               	bcf	3,6	;RP1=0, select bank1
  1457  059C  009F               	movwf	31	;volatile
  1458                           
  1459                           ;LCD.c: 90: PORTD = 0;
  1460  059D  1283               	bcf	3,5	;RP0=0, select bank0
  1461  059E  1303               	bcf	3,6	;RP1=0, select bank0
  1462  059F  0188               	clrf	8	;volatile
  1463                           
  1464                           ;LCD.c: 91: PORTE = 0;
  1465  05A0  0189               	clrf	9	;volatile
  1466                           
  1467                           ;LCD.c: 93: TRISD = 0b00000000;
  1468  05A1  1683               	bsf	3,5	;RP0=1, select bank1
  1469  05A2  1303               	bcf	3,6	;RP1=0, select bank1
  1470  05A3  0188               	clrf	8	;volatile
  1471                           
  1472                           ;LCD.c: 94: TRISE = 0b00000000;
  1473  05A4  0189               	clrf	9	;volatile
  1474                           
  1475                           ;LCD.c: 97: lcdWriteControl(0b00000001);
  1476  05A5  3001               	movlw	1
  1477  05A6  120A  118A  2655  120A  118A  	fcall	_lcdWriteControl
  1478                           
  1479                           ;LCD.c: 98: lcdWriteControl(0b00111000);
  1480  05AB  3038               	movlw	56
  1481  05AC  120A  118A  2655  120A  118A  	fcall	_lcdWriteControl
  1482                           
  1483                           ;LCD.c: 99: lcdWriteControl(0b00001100);
  1484  05B1  300C               	movlw	12
  1485  05B2  120A  118A  2655  120A  118A  	fcall	_lcdWriteControl
  1486                           
  1487                           ;LCD.c: 100: lcdWriteControl(0b00000110);
  1488  05B7  3006               	movlw	6
  1489  05B8  120A  118A  2655  120A  118A  	fcall	_lcdWriteControl
  1490                           
  1491                           ;LCD.c: 101: lcdWriteControl(0b00000010);
  1492  05BD  3002               	movlw	2
  1493  05BE  120A  118A  2655   	fcall	_lcdWriteControl
  1494  05C1  0008               	return
  1495  05C2                     __end_of_setupLCD:	
  1496                           
  1497                           	psect	text3
  1498  063F                     __ptext3:	
  1499 ;; *************** function _setupADC *****************
  1500 ;; Defined at:
  1501 ;;		line 5 in file "ADC.c"
  1502 ;; Parameters:    Size  Location     Type
  1503 ;;		None
  1504 ;; Auto vars:     Size  Location     Type
  1505 ;;		None
  1506 ;; Return value:  Size  Location     Type
  1507 ;;                  1    wreg      void 
  1508 ;; Registers used:
  1509 ;;		wreg, status,2
  1510 ;; Tracked objects:
  1511 ;;		On entry : 0/0
  1512 ;;		On exit  : 0/0
  1513 ;;		Unchanged: 0/0
  1514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1515 ;;      Params:         0       0       0       0       0
  1516 ;;      Locals:         0       0       0       0       0
  1517 ;;      Temps:          0       1       0       0       0
  1518 ;;      Totals:         0       1       0       0       0
  1519 ;;Total ram usage:        1 bytes
  1520 ;; Hardware stack levels used:    1
  1521 ;; Hardware stack levels required when called:    1
  1522 ;; This function calls:
  1523 ;;		Nothing
  1524 ;; This function is called by:
  1525 ;;		_main
  1526 ;; This function uses a non-reentrant model
  1527 ;;
  1528                           
  1529                           
  1530                           ;psect for function _setupADC
  1531  063F                     _setupADC:	
  1532                           
  1533                           ;ADC.c: 6: PORTA = 0;
  1534                           
  1535                           ;incstack = 0
  1536                           ; Regs used in _setupADC: [wreg+status,2]
  1537  063F  1283               	bcf	3,5	;RP0=0, select bank0
  1538  0640  1303               	bcf	3,6	;RP1=0, select bank0
  1539  0641  0185               	clrf	5	;volatile
  1540                           
  1541                           ;ADC.c: 7: TRISA = 0b11111111;
  1542  0642  30FF               	movlw	255
  1543  0643  1683               	bsf	3,5	;RP0=1, select bank1
  1544  0644  1303               	bcf	3,6	;RP1=0, select bank1
  1545  0645  0085               	movwf	5	;volatile
  1546                           
  1547                           ;ADC.c: 10: ADCON0 = 0b10001001;
  1548  0646  3089               	movlw	137
  1549  0647  1283               	bcf	3,5	;RP0=0, select bank0
  1550  0648  1303               	bcf	3,6	;RP1=0, select bank0
  1551  0649  009F               	movwf	31	;volatile
  1552                           
  1553                           ;ADC.c: 11: ADCON1 = 0b00000010;
  1554  064A  3002               	movlw	2
  1555  064B  1683               	bsf	3,5	;RP0=1, select bank1
  1556  064C  1303               	bcf	3,6	;RP1=0, select bank1
  1557  064D  009F               	movwf	31	;volatile
  1558                           
  1559                           ;ADC.c: 13: _delay((unsigned long)((50)*(20000000/4000000.0)));
  1560  064E  3053               	movlw	83
  1561  064F  1283               	bcf	3,5	;RP0=0, select bank0
  1562  0650  1303               	bcf	3,6	;RP1=0, select bank0
  1563  0651  00C8               	movwf	??_setupADC
  1564  0652                     u1877:	
  1565  0652  0BC8               	decfsz	??_setupADC,f
  1566  0653  2E52               	goto	u1877
  1567  0654  0008               	return
  1568  0655                     __end_of_setupADC:	
  1569                           
  1570                           	psect	text4
  1571  06A0                     __ptext4:	
  1572 ;; *************** function _ser_init *****************
  1573 ;; Defined at:
  1574 ;;		line 5 in file "ser.c"
  1575 ;; Parameters:    Size  Location     Type
  1576 ;;		None
  1577 ;; Auto vars:     Size  Location     Type
  1578 ;;		None
  1579 ;; Return value:  Size  Location     Type
  1580 ;;                  1    wreg      void 
  1581 ;; Registers used:
  1582 ;;		wreg
  1583 ;; Tracked objects:
  1584 ;;		On entry : 0/0
  1585 ;;		On exit  : 0/0
  1586 ;;		Unchanged: 0/0
  1587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1588 ;;      Params:         0       0       0       0       0
  1589 ;;      Locals:         0       0       0       0       0
  1590 ;;      Temps:          0       0       0       0       0
  1591 ;;      Totals:         0       0       0       0       0
  1592 ;;Total ram usage:        0 bytes
  1593 ;; Hardware stack levels used:    1
  1594 ;; Hardware stack levels required when called:    1
  1595 ;; This function calls:
  1596 ;;		Nothing
  1597 ;; This function is called by:
  1598 ;;		_main
  1599 ;; This function uses a non-reentrant model
  1600 ;;
  1601                           
  1602                           
  1603                           ;psect for function _ser_init
  1604  06A0                     _ser_init:	
  1605                           
  1606                           ;ser.c: 7: TXSTA = 0b00100100;
  1607                           
  1608                           ;incstack = 0
  1609                           ; Regs used in _ser_init: [wreg]
  1610  06A0  3024               	movlw	36
  1611  06A1  1683               	bsf	3,5	;RP0=1, select bank1
  1612  06A2  1303               	bcf	3,6	;RP1=0, select bank1
  1613  06A3  0098               	movwf	24	;volatile
  1614                           
  1615                           ;ser.c: 8: RCSTA = 0b10011000;
  1616  06A4  3098               	movlw	152
  1617  06A5  1283               	bcf	3,5	;RP0=0, select bank0
  1618  06A6  1303               	bcf	3,6	;RP1=0, select bank0
  1619  06A7  0098               	movwf	24	;volatile
  1620                           
  1621                           ;ser.c: 24: SPBRG = 20;
  1622  06A8  3014               	movlw	20
  1623  06A9  1683               	bsf	3,5	;RP0=1, select bank1
  1624  06AA  1303               	bcf	3,6	;RP1=0, select bank1
  1625  06AB  0099               	movwf	25	;volatile
  1626                           
  1627                           ;ser.c: 26: PEIE = 1;
  1628  06AC  170B               	bsf	11,6	;volatile
  1629                           
  1630                           ;ser.c: 27: (GIE = 1);
  1631  06AD  178B               	bsf	11,7	;volatile
  1632  06AE  0008               	return
  1633  06AF                     __end_of_ser_init:	
  1634                           
  1635                           	psect	text5
  1636  05EA                     __ptext5:	
  1637 ;; *************** function _lcdWriteString *****************
  1638 ;; Defined at:
  1639 ;;		line 32 in file "LCD.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;  s               1    wreg     PTR unsigned char 
  1642 ;;		 -> STR_2(3), STR_1(3), 
  1643 ;; Auto vars:     Size  Location     Type
  1644 ;;  s               1    4[BANK0 ] PTR unsigned char 
  1645 ;;		 -> STR_2(3), STR_1(3), 
  1646 ;; Return value:  Size  Location     Type
  1647 ;;                  1    wreg      void 
  1648 ;; Registers used:
  1649 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1650 ;; Tracked objects:
  1651 ;;		On entry : 0/0
  1652 ;;		On exit  : 0/0
  1653 ;;		Unchanged: 0/0
  1654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1655 ;;      Params:         0       0       0       0       0
  1656 ;;      Locals:         0       1       0       0       0
  1657 ;;      Temps:          0       1       0       0       0
  1658 ;;      Totals:         0       2       0       0       0
  1659 ;;Total ram usage:        2 bytes
  1660 ;; Hardware stack levels used:    1
  1661 ;; Hardware stack levels required when called:    2
  1662 ;; This function calls:
  1663 ;;		_lcdWriteData
  1664 ;; This function is called by:
  1665 ;;		_main
  1666 ;; This function uses a non-reentrant model
  1667 ;;
  1668                           
  1669                           
  1670                           ;psect for function _lcdWriteString
  1671  05EA                     _lcdWriteString:	
  1672                           
  1673                           ;incstack = 0
  1674                           ; Regs used in _lcdWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1675                           ;lcdWriteString@s stored from wreg
  1676  05EA  1283               	bcf	3,5	;RP0=0, select bank0
  1677  05EB  1303               	bcf	3,6	;RP1=0, select bank0
  1678  05EC  00CC               	movwf	lcdWriteString@s
  1679  05ED                     l2630:	
  1680                           ;LCD.c: 34: while(*s) lcdWriteData(*s++);
  1681                           
  1682  05ED  084C               	movf	lcdWriteString@s,w
  1683  05EE  0084               	movwf	4
  1684  05EF  120A  118A  26AF  120A  118A  	fcall	stringdir
  1685  05F4  3A00               	xorlw	0
  1686  05F5  1903               	btfsc	3,2
  1687  05F6  0008               	return
  1688  05F7  084C               	movf	lcdWriteString@s,w
  1689  05F8  0084               	movwf	4
  1690  05F9  120A  118A  26AF  120A  118A  	fcall	stringdir
  1691  05FE  120A  118A  2669  120A  118A  	fcall	_lcdWriteData
  1692  0603  3001               	movlw	1
  1693  0604  1283               	bcf	3,5	;RP0=0, select bank0
  1694  0605  1303               	bcf	3,6	;RP1=0, select bank0
  1695  0606  00CB               	movwf	??_lcdWriteString
  1696  0607  084B               	movf	??_lcdWriteString,w
  1697  0608  07CC               	addwf	lcdWriteString@s,f
  1698  0609  2DED               	goto	l2630
  1699  060A                     __end_of_lcdWriteString:	
  1700                           
  1701                           	psect	text6
  1702  005A                     __ptext6:	
  1703 ;; *************** function _PathTo *****************
  1704 ;; Defined at:
  1705 ;;		line 76 in file "main.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;  x_target        1    wreg     unsigned char 
  1708 ;;  y_target        1   15[BANK0 ] unsigned char 
  1709 ;; Auto vars:     Size  Location     Type
  1710 ;;  x_target        1   23[BANK0 ] unsigned char 
  1711 ;;  sum             1   24[BANK0 ] unsigned char 
  1712 ;;  loop            2   25[BANK0 ] int 
  1713 ;; Return value:  Size  Location     Type
  1714 ;;                  1    wreg      void 
  1715 ;; Registers used:
  1716 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1717 ;; Tracked objects:
  1718 ;;		On entry : 0/0
  1719 ;;		On exit  : 0/0
  1720 ;;		Unchanged: 0/0
  1721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1722 ;;      Params:         0       1       0       0       0
  1723 ;;      Locals:         0       4       0       0       0
  1724 ;;      Temps:          0       7       0       0       0
  1725 ;;      Totals:         0      12       0       0       0
  1726 ;;Total ram usage:       12 bytes
  1727 ;; Hardware stack levels used:    1
  1728 ;; Hardware stack levels required when called:    3
  1729 ;; This function calls:
  1730 ;;		___bmul
  1731 ;;		_lcdSetCursor
  1732 ;;		_lcdWriteControl
  1733 ;;		_lcdWriteToDigitBCD
  1734 ;; This function is called by:
  1735 ;;		_main
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           
  1740                           ;psect for function _PathTo
  1741  005A                     _PathTo:	
  1742                           
  1743                           ;incstack = 0
  1744                           ; Regs used in _PathTo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1745                           ;PathTo@x_target stored from wreg
  1746  005A  1283               	bcf	3,5	;RP0=0, select bank0
  1747  005B  1303               	bcf	3,6	;RP1=0, select bank0
  1748  005C  00DF               	movwf	PathTo@x_target
  1749                           
  1750                           ;main.c: 80: for (r = 0; r <= 3; r++){
  1751  005D  01B5               	clrf	_r
  1752  005E  3004               	movlw	4
  1753  005F  0235               	subwf	_r,w
  1754  0060  1803               	btfsc	3,0
  1755  0061  289F               	goto	l2382
  1756  0062                     l2366:	
  1757                           
  1758                           ;main.c: 81: for (c = 0; c <= 4; c++){
  1759  0062  01AE               	clrf	_c
  1760  0063  3005               	movlw	5
  1761  0064  022E               	subwf	_c,w
  1762  0065  1803               	btfsc	3,0
  1763  0066  2897               	goto	l2378
  1764  0067                     l2372:	
  1765                           
  1766                           ;main.c: 82: mazeGrid[r][c] = mazeGridDefault[r][c];
  1767  0067  3005               	movlw	5
  1768  0068  00D8               	movwf	??_PathTo
  1769  0069  0858               	movf	??_PathTo,w
  1770  006A  00C8               	movwf	___bmul@multiplicand
  1771  006B  0835               	movf	_r,w
  1772  006C  120A  118A  267C  120A  118A  	fcall	___bmul
  1773  0071  3EB4               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  1774  0072  1283               	bcf	3,5	;RP0=0, select bank0
  1775  0073  1303               	bcf	3,6	;RP1=0, select bank0
  1776  0074  072E               	addwf	_c,w
  1777  0075  00D9               	movwf	??_PathTo+1
  1778  0076  0859               	movf	??_PathTo+1,w
  1779  0077  0084               	movwf	4
  1780  0078  1383               	bcf	3,7	;select IRP bank1
  1781  0079  0800               	movf	0,w
  1782  007A  00DA               	movwf	??_PathTo+2
  1783  007B  3005               	movlw	5
  1784  007C  00DB               	movwf	??_PathTo+3
  1785  007D  085B               	movf	??_PathTo+3,w
  1786  007E  00C8               	movwf	___bmul@multiplicand
  1787  007F  0835               	movf	_r,w
  1788  0080  120A  118A  267C  120A  118A  	fcall	___bmul
  1789  0085  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  1790  0086  1283               	bcf	3,5	;RP0=0, select bank0
  1791  0087  1303               	bcf	3,6	;RP1=0, select bank0
  1792  0088  072E               	addwf	_c,w
  1793  0089  00DC               	movwf	??_PathTo+4
  1794  008A  085C               	movf	??_PathTo+4,w
  1795  008B  0084               	movwf	4
  1796  008C  085A               	movf	??_PathTo+2,w
  1797  008D  1383               	bcf	3,7	;select IRP bank1
  1798  008E  0080               	movwf	0
  1799  008F  3001               	movlw	1
  1800  0090  00D8               	movwf	??_PathTo
  1801  0091  0858               	movf	??_PathTo,w
  1802  0092  07AE               	addwf	_c,f
  1803  0093  3005               	movlw	5
  1804  0094  022E               	subwf	_c,w
  1805  0095  1C03               	skipc
  1806  0096  2867               	goto	l2372
  1807  0097                     l2378:	
  1808  0097  3001               	movlw	1
  1809  0098  00D8               	movwf	??_PathTo
  1810  0099  0858               	movf	??_PathTo,w
  1811  009A  07B5               	addwf	_r,f
  1812  009B  3004               	movlw	4
  1813  009C  0235               	subwf	_r,w
  1814  009D  1C03               	skipc
  1815  009E  2862               	goto	l2366
  1816  009F                     l2382:	
  1817                           
  1818                           ;main.c: 83: }
  1819                           ;main.c: 84: }
  1820                           ;main.c: 86: x_origin = x;
  1821  009F  086A               	movf	_x,w
  1822  00A0  00D8               	movwf	??_PathTo
  1823  00A1  0858               	movf	??_PathTo,w
  1824  00A2  00BE               	movwf	_x_origin
  1825                           
  1826                           ;main.c: 87: y_origin = y;
  1827  00A3  0842               	movf	_y,w
  1828  00A4  00D8               	movwf	??_PathTo
  1829  00A5  0858               	movf	??_PathTo,w
  1830  00A6  00C4               	movwf	_y_origin
  1831                           
  1832                           ;main.c: 88: x_path = x;
  1833  00A7  086A               	movf	_x,w
  1834  00A8  00D8               	movwf	??_PathTo
  1835  00A9  0858               	movf	??_PathTo,w
  1836  00AA  00BF               	movwf	_x_path
  1837                           
  1838                           ;main.c: 89: y_path = y;
  1839  00AB  0842               	movf	_y,w
  1840  00AC  00D8               	movwf	??_PathTo
  1841  00AD  0858               	movf	??_PathTo,w
  1842  00AE  00C5               	movwf	_y_path
  1843                           
  1844                           ;main.c: 90: orientation_path = orientation;
  1845  00AF  0868               	movf	_orientation,w
  1846  00B0  00D8               	movwf	??_PathTo
  1847  00B1  0858               	movf	??_PathTo,w
  1848  00B2  00B3               	movwf	_orientation_path
  1849                           
  1850                           ;main.c: 91: pathCount = 0;
  1851  00B3  01B4               	clrf	_pathCount
  1852                           
  1853                           ;main.c: 93: for (int loop = 0; loop <= 1000; loop++){
  1854  00B4  01E1               	clrf	PathTo@loop
  1855  00B5  01E2               	clrf	PathTo@loop+1
  1856  00B6                     L12:	
  1857  00B6  0862               	movf	PathTo@loop+1,w
  1858  00B7  3A80               	xorlw	128
  1859  00B8  00FF               	movwf	127
  1860  00B9  3083               	movlw	131
  1861  00BA  027F               	subwf	127,w
  1862  00BB  1D03               	skipz
  1863  00BC  28BF               	goto	u1495
  1864  00BD  30E9               	movlw	233
  1865  00BE  0261               	subwf	PathTo@loop,w
  1866  00BF                     u1495:	
  1867  00BF  1803               	btfsc	3,0
  1868  00C0  0008               	return
  1869                           
  1870                           ;main.c: 95: reset_flag = 0;
  1871  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  1872  00C2  1303               	bcf	3,6	;RP1=0, select bank0
  1873  00C3  01B8               	clrf	_reset_flag
  1874                           
  1875                           ;main.c: 97: path[1][pathCount] = x_path;
  1876  00C4  083F               	movf	_x_path,w
  1877  00C5  00D8               	movwf	??_PathTo
  1878  00C6  0834               	movf	_pathCount,w
  1879  00C7  3EA0               	addlw	(low ((_path| (0+256)+16)))& (0+255)
  1880  00C8  0084               	movwf	4
  1881  00C9  0858               	movf	??_PathTo,w
  1882  00CA  1783               	bsf	3,7	;select IRP bank3
  1883  00CB  0080               	movwf	0
  1884                           
  1885                           ;main.c: 98: path[2][pathCount] = y_path;
  1886  00CC  0845               	movf	_y_path,w
  1887  00CD  00D8               	movwf	??_PathTo
  1888  00CE  0834               	movf	_pathCount,w
  1889  00CF  3EB0               	addlw	(low ((_path| (0+256)+32)))& (0+255)
  1890  00D0  0084               	movwf	4
  1891  00D1  0858               	movf	??_PathTo,w
  1892  00D2  0080               	movwf	0
  1893                           
  1894                           ;main.c: 102: lcdWriteControl(0b00000001);
  1895  00D3  3001               	movlw	1
  1896  00D4  120A  118A  2655  120A  118A  	fcall	_lcdWriteControl
  1897                           
  1898                           ;main.c: 103: lcdSetCursor(0b10001110);
  1899  00D9  308E               	movlw	142
  1900  00DA  120A  118A  26BB  120A  118A  	fcall	_lcdSetCursor
  1901                           
  1902                           ;main.c: 104: lcdWriteToDigitBCD(loop);
  1903  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  1904  00E0  1303               	bcf	3,6	;RP1=0, select bank0
  1905  00E1  0862               	movf	PathTo@loop+1,w
  1906  00E2  00CC               	movwf	lcdWriteToDigitBCD@data+1
  1907  00E3  0861               	movf	PathTo@loop,w
  1908  00E4  00CB               	movwf	lcdWriteToDigitBCD@data
  1909  00E5  120A  118A  244E  120A  118A  	fcall	_lcdWriteToDigitBCD
  1910                           
  1911                           ;main.c: 128: left = squareWalls[1][(mazeGrid[y_path][x_path])];
  1912  00EA  3005               	movlw	5
  1913  00EB  1283               	bcf	3,5	;RP0=0, select bank0
  1914  00EC  1303               	bcf	3,6	;RP1=0, select bank0
  1915  00ED  00D8               	movwf	??_PathTo
  1916  00EE  0858               	movf	??_PathTo,w
  1917  00EF  00C8               	movwf	___bmul@multiplicand
  1918  00F0  0845               	movf	_y_path,w
  1919  00F1  120A  118A  267C  120A  118A  	fcall	___bmul
  1920  00F6  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  1921  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  1922  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  1923  00F9  073F               	addwf	_x_path,w
  1924  00FA  00D9               	movwf	??_PathTo+1
  1925  00FB  0859               	movf	??_PathTo+1,w
  1926  00FC  0084               	movwf	4
  1927  00FD  1383               	bcf	3,7	;select IRP bank1
  1928  00FE  0800               	movf	0,w
  1929  00FF  3E20               	addlw	(low ((_squareWalls| (0+256)+16)))& (0+255)
  1930  0100  0084               	movwf	4
  1931  0101  1783               	bsf	3,7	;select IRP bank2
  1932  0102  0800               	movf	0,w
  1933  0103  00DA               	movwf	??_PathTo+2
  1934  0104  085A               	movf	??_PathTo+2,w
  1935  0105  00B2               	movwf	_left
  1936                           
  1937                           ;main.c: 129: up = squareWalls[2][(mazeGrid[y_path][x_path])];
  1938  0106  3005               	movlw	5
  1939  0107  00D8               	movwf	??_PathTo
  1940  0108  0858               	movf	??_PathTo,w
  1941  0109  00C8               	movwf	___bmul@multiplicand
  1942  010A  0845               	movf	_y_path,w
  1943  010B  120A  118A  267C  120A  118A  	fcall	___bmul
  1944  0110  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  1945  0111  1283               	bcf	3,5	;RP0=0, select bank0
  1946  0112  1303               	bcf	3,6	;RP1=0, select bank0
  1947  0113  073F               	addwf	_x_path,w
  1948  0114  00D9               	movwf	??_PathTo+1
  1949  0115  0859               	movf	??_PathTo+1,w
  1950  0116  0084               	movwf	4
  1951  0117  1383               	bcf	3,7	;select IRP bank1
  1952  0118  0800               	movf	0,w
  1953  0119  3E30               	addlw	(low ((_squareWalls| (0+256)+32)))& (0+255)
  1954  011A  0084               	movwf	4
  1955  011B  1783               	bsf	3,7	;select IRP bank2
  1956  011C  0800               	movf	0,w
  1957  011D  00DA               	movwf	??_PathTo+2
  1958  011E  085A               	movf	??_PathTo+2,w
  1959  011F  00BC               	movwf	_up
  1960                           
  1961                           ;main.c: 130: right = squareWalls[3][(mazeGrid[y_path][x_path])];
  1962  0120  3005               	movlw	5
  1963  0121  00D8               	movwf	??_PathTo
  1964  0122  0858               	movf	??_PathTo,w
  1965  0123  00C8               	movwf	___bmul@multiplicand
  1966  0124  0845               	movf	_y_path,w
  1967  0125  120A  118A  267C  120A  118A  	fcall	___bmul
  1968  012A  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  1969  012B  1283               	bcf	3,5	;RP0=0, select bank0
  1970  012C  1303               	bcf	3,6	;RP1=0, select bank0
  1971  012D  073F               	addwf	_x_path,w
  1972  012E  00D9               	movwf	??_PathTo+1
  1973  012F  0859               	movf	??_PathTo+1,w
  1974  0130  0084               	movwf	4
  1975  0131  1383               	bcf	3,7	;select IRP bank1
  1976  0132  0800               	movf	0,w
  1977  0133  3E40               	addlw	(low ((_squareWalls| (0+256)+48)))& (0+255)
  1978  0134  0084               	movwf	4
  1979  0135  1783               	bsf	3,7	;select IRP bank2
  1980  0136  0800               	movf	0,w
  1981  0137  00DA               	movwf	??_PathTo+2
  1982  0138  085A               	movf	??_PathTo+2,w
  1983  0139  00B9               	movwf	_right
  1984                           
  1985                           ;main.c: 131: down = squareWalls[4][(mazeGrid[y_path][x_path])];
  1986  013A  3005               	movlw	5
  1987  013B  00D8               	movwf	??_PathTo
  1988  013C  0858               	movf	??_PathTo,w
  1989  013D  00C8               	movwf	___bmul@multiplicand
  1990  013E  0845               	movf	_y_path,w
  1991  013F  120A  118A  267C  120A  118A  	fcall	___bmul
  1992  0144  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  1993  0145  1283               	bcf	3,5	;RP0=0, select bank0
  1994  0146  1303               	bcf	3,6	;RP1=0, select bank0
  1995  0147  073F               	addwf	_x_path,w
  1996  0148  00D9               	movwf	??_PathTo+1
  1997  0149  0859               	movf	??_PathTo+1,w
  1998  014A  0084               	movwf	4
  1999  014B  1383               	bcf	3,7	;select IRP bank1
  2000  014C  0800               	movf	0,w
  2001  014D  3E50               	addlw	(low ((_squareWalls| (0+256)+64)))& (0+255)
  2002  014E  0084               	movwf	4
  2003  014F  1783               	bsf	3,7	;select IRP bank2
  2004  0150  0800               	movf	0,w
  2005  0151  00DA               	movwf	??_PathTo+2
  2006  0152  085A               	movf	??_PathTo+2,w
  2007  0153  00AF               	movwf	_down
  2008                           
  2009                           ;main.c: 134: switch(orientation_path){
  2010  0154  2961               	goto	l2414
  2011  0155                     l165:	
  2012                           ;main.c: 135: case 0: down = 1;
  2013                           
  2014  0155  01AF               	clrf	_down
  2015  0156  0AAF               	incf	_down,f
  2016                           
  2017                           ;main.c: 136: break;
  2018  0157  296F               	goto	l2416
  2019  0158                     l167:	
  2020                           ;main.c: 137: case 1: left = 1;
  2021                           
  2022  0158  01B2               	clrf	_left
  2023  0159  0AB2               	incf	_left,f
  2024                           
  2025                           ;main.c: 138: break;
  2026  015A  296F               	goto	l2416
  2027  015B                     l168:	
  2028                           ;main.c: 139: case 2: up = 1;
  2029                           
  2030  015B  01BC               	clrf	_up
  2031  015C  0ABC               	incf	_up,f
  2032                           
  2033                           ;main.c: 140: break;
  2034  015D  296F               	goto	l2416
  2035  015E                     l169:	
  2036                           ;main.c: 141: case 3: right = 1;
  2037                           
  2038  015E  01B9               	clrf	_right
  2039  015F  0AB9               	incf	_right,f
  2040                           
  2041                           ;main.c: 143: }
  2042                           
  2043                           ;main.c: 142: break;
  2044  0160  296F               	goto	l2416
  2045  0161                     l2414:	
  2046  0161  0833               	movf	_orientation_path,w
  2047                           
  2048                           ; Switch size 1, requested type "space"
  2049                           ; Number of cases is 4, Range of values is 0 to 3
  2050                           ; switch strategies available:
  2051                           ; Name         Instructions Cycles
  2052                           ; simple_byte           13     7 (average)
  2053                           ; direct_byte           20     8 (fixed)
  2054                           ; jumptable            260     6 (fixed)
  2055                           ;	Chosen strategy is simple_byte
  2056  0162  3A00               	xorlw	0	; case 0
  2057  0163  1903               	skipnz
  2058  0164  2955               	goto	l165
  2059  0165  3A01               	xorlw	1	; case 1
  2060  0166  1903               	skipnz
  2061  0167  2958               	goto	l167
  2062  0168  3A03               	xorlw	3	; case 2
  2063  0169  1903               	skipnz
  2064  016A  295B               	goto	l168
  2065  016B  3A01               	xorlw	1	; case 3
  2066  016C  1903               	skipnz
  2067  016D  295E               	goto	l169
  2068  016E  296F               	goto	l2416
  2069  016F                     l2416:	
  2070                           
  2071                           ;main.c: 146: char sum = (left + up + down + right);
  2072  016F  083C               	movf	_up,w
  2073  0170  0732               	addwf	_left,w
  2074  0171  00D8               	movwf	??_PathTo
  2075  0172  082F               	movf	_down,w
  2076  0173  0758               	addwf	??_PathTo,w
  2077  0174  00D9               	movwf	??_PathTo+1
  2078  0175  0839               	movf	_right,w
  2079  0176  0759               	addwf	??_PathTo+1,w
  2080  0177  00DA               	movwf	??_PathTo+2
  2081  0178  085A               	movf	??_PathTo+2,w
  2082  0179  00E0               	movwf	PathTo@sum
  2083                           
  2084                           ;main.c: 147: if(sum <= 2){
  2085  017A  3003               	movlw	3
  2086  017B  0260               	subwf	PathTo@sum,w
  2087  017C  1803               	skipnc
  2088  017D  299D               	goto	l170
  2089                           
  2090                           ;main.c: 148: x_int = x_path;
  2091  017E  083F               	movf	_x_path,w
  2092  017F  00D8               	movwf	??_PathTo
  2093  0180  0858               	movf	??_PathTo,w
  2094  0181  00BD               	movwf	_x_int
  2095                           
  2096                           ;main.c: 149: y_int = y_path;
  2097  0182  0845               	movf	_y_path,w
  2098  0183  00D8               	movwf	??_PathTo
  2099  0184  0858               	movf	??_PathTo,w
  2100  0185  00C3               	movwf	_y_int
  2101                           
  2102                           ;main.c: 151: if (left == 0)
  2103  0186  0832               	movf	_left,w
  2104  0187  1D03               	btfss	3,2
  2105  0188  298B               	goto	l2426
  2106                           
  2107                           ;main.c: 152: intersection_Orientation = 3;
  2108  0189  3003               	movlw	3
  2109  018A  299A               	goto	L1
  2110  018B                     l2426:	
  2111                           
  2112                           ;main.c: 153: else if (up == 0)
  2113  018B  083C               	movf	_up,w
  2114  018C  1D03               	btfss	3,2
  2115  018D  2990               	goto	l2430
  2116                           
  2117                           ;main.c: 154: intersection_Orientation = 0;
  2118  018E  01B1               	clrf	_intersection_Orientation
  2119  018F  299D               	goto	l170
  2120  0190                     l2430:	
  2121                           
  2122                           ;main.c: 155: else if (right == 0)
  2123  0190  0839               	movf	_right,w
  2124  0191  1D03               	btfss	3,2
  2125  0192  2996               	goto	l2434
  2126                           
  2127                           ;main.c: 156: intersection_Orientation = 1;
  2128  0193  01B1               	clrf	_intersection_Orientation
  2129  0194  0AB1               	incf	_intersection_Orientation,f
  2130  0195  299D               	goto	l170
  2131  0196                     l2434:	
  2132                           
  2133                           ;main.c: 157: else if (down == 0)
  2134  0196  082F               	movf	_down,w
  2135  0197  1D03               	btfss	3,2
  2136  0198  299D               	goto	l170
  2137                           
  2138                           ;main.c: 158: intersection_Orientation = 2;
  2139  0199  3002               	movlw	2
  2140  019A                     L1:	
  2141  019A  00D8               	movwf	??_PathTo
  2142  019B  0858               	movf	??_PathTo,w
  2143  019C  00B1               	movwf	_intersection_Orientation
  2144  019D                     l170:	
  2145                           
  2146                           ;main.c: 159: }
  2147                           ;main.c: 166: if ((x_path == x_target) && (y_path == y_target)){
  2148  019D  083F               	movf	_x_path,w
  2149  019E  065F               	xorwf	PathTo@x_target,w
  2150  019F  1D03               	skipz
  2151  01A0  2A9D               	goto	l2504
  2152  01A1  0845               	movf	_y_path,w
  2153  01A2  0657               	xorwf	PathTo@y_target,w
  2154  01A3  1D03               	skipz
  2155  01A4  2A9D               	goto	l2504
  2156                           
  2157                           ;main.c: 176: if(pathCount < pathCountShortest){
  2158  01A5  0869               	movf	_pathCountShortest,w
  2159  01A6  0234               	subwf	_pathCount,w
  2160  01A7  1803               	skipnc
  2161  01A8  2A53               	goto	l2474
  2162                           
  2163                           ;main.c: 177: pathCountShortest = pathCount;
  2164  01A9  0834               	movf	_pathCount,w
  2165  01AA  00D8               	movwf	??_PathTo
  2166  01AB  0858               	movf	??_PathTo,w
  2167  01AC  00E9               	movwf	_pathCountShortest
  2168                           
  2169                           ;main.c: 178: for (r = 1; r <= 2; r++){
  2170  01AD  01B5               	clrf	_r
  2171  01AE  0AB5               	incf	_r,f
  2172  01AF                     L9:	
  2173  01AF  3003               	movlw	3
  2174  01B0  0235               	subwf	_r,w
  2175  01B1  1803               	btfsc	3,0
  2176  01B2  2A53               	goto	l2474
  2177                           
  2178                           ;main.c: 179: for (c = 0; c <= 15; c++){
  2179  01B3  01AE               	clrf	_c
  2180  01B4  3010               	movlw	16
  2181  01B5  022E               	subwf	_c,w
  2182  01B6  1803               	btfsc	3,0
  2183  01B7  29E5               	goto	l2460
  2184  01B8                     l2454:	
  2185                           
  2186                           ;main.c: 180: shortest_path[r][c] = path[r][c];
  2187  01B8  0835               	movf	_r,w
  2188  01B9  00D8               	movwf	??_PathTo
  2189  01BA  3004               	movlw	4
  2190  01BB                     u1605:	
  2191  01BB  1003               	clrc
  2192  01BC  0DD8               	rlf	??_PathTo,f
  2193  01BD  3EFF               	addlw	-1
  2194  01BE  1D03               	skipz
  2195  01BF  29BB               	goto	u1605
  2196  01C0  3090               	movlw	(low (_path| (0+256)))& (0+255)
  2197  01C1  0758               	addwf	??_PathTo,w
  2198  01C2  00D9               	movwf	??_PathTo+1
  2199  01C3  082E               	movf	_c,w
  2200  01C4  0759               	addwf	??_PathTo+1,w
  2201  01C5  00DA               	movwf	??_PathTo+2
  2202  01C6  085A               	movf	??_PathTo+2,w
  2203  01C7  0084               	movwf	4
  2204  01C8  1783               	bsf	3,7	;select IRP bank3
  2205  01C9  0800               	movf	0,w
  2206  01CA  00DB               	movwf	??_PathTo+3
  2207  01CB  0835               	movf	_r,w
  2208  01CC  00DC               	movwf	??_PathTo+4
  2209  01CD  3004               	movlw	4
  2210  01CE                     u1615:	
  2211  01CE  1003               	clrc
  2212  01CF  0DDC               	rlf	??_PathTo+4,f
  2213  01D0  3EFF               	addlw	-1
  2214  01D1  1D03               	skipz
  2215  01D2  29CE               	goto	u1615
  2216  01D3  30C0               	movlw	(low (_shortest_path| (0+256)))& (0+255)
  2217  01D4  075C               	addwf	??_PathTo+4,w
  2218  01D5  00DD               	movwf	??_PathTo+5
  2219  01D6  082E               	movf	_c,w
  2220  01D7  075D               	addwf	??_PathTo+5,w
  2221  01D8  00DE               	movwf	??_PathTo+6
  2222  01D9  085E               	movf	??_PathTo+6,w
  2223  01DA  0084               	movwf	4
  2224  01DB  085B               	movf	??_PathTo+3,w
  2225  01DC  0080               	movwf	0
  2226  01DD  3001               	movlw	1
  2227  01DE  00D8               	movwf	??_PathTo
  2228  01DF  0858               	movf	??_PathTo,w
  2229  01E0  07AE               	addwf	_c,f
  2230  01E1  3010               	movlw	16
  2231  01E2  022E               	subwf	_c,w
  2232  01E3  1C03               	skipc
  2233  01E4  29B8               	goto	l2454
  2234  01E5                     l2460:	
  2235  01E5  3001               	movlw	1
  2236  01E6  00D8               	movwf	??_PathTo
  2237  01E7  0858               	movf	??_PathTo,w
  2238  01E8  07B5               	addwf	_r,f
  2239  01E9  29AF               	goto	L9
  2240  01EA                     l2464:	
  2241                           ;main.c: 188: case 0: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 4);
  2242                           
  2243                           ;main.c: 181: }
  2244                           ;main.c: 182: }
  2245                           ;main.c: 183: }
  2246                           ;main.c: 187: switch(intersection_Orientation){
  2247                           
  2248  01EA  3005               	movlw	5
  2249  01EB  00D8               	movwf	??_PathTo
  2250  01EC  0858               	movf	??_PathTo,w
  2251  01ED  00C8               	movwf	___bmul@multiplicand
  2252  01EE  0843               	movf	_y_int,w
  2253  01EF  120A  118A  267C  120A  118A  	fcall	___bmul
  2254  01F4  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  2255  01F5  1283               	bcf	3,5	;RP0=0, select bank0
  2256  01F6  1303               	bcf	3,6	;RP1=0, select bank0
  2257  01F7  073D               	addwf	_x_int,w
  2258  01F8  00D9               	movwf	??_PathTo+1
  2259  01F9  0859               	movf	??_PathTo+1,w
  2260  01FA  0084               	movwf	4
  2261  01FB  1383               	bcf	3,7	;select IRP bank1
  2262  01FC  0800               	movf	0,w
  2263  01FD  3E04               	addlw	4
  2264  01FE  2A3D               	goto	L10
  2265  01FF                     l2466:	
  2266                           ;main.c: 190: case 1: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 2);
  2267                           
  2268                           ;main.c: 189: break;
  2269                           
  2270  01FF  3005               	movlw	5
  2271  0200  00D8               	movwf	??_PathTo
  2272  0201  0858               	movf	??_PathTo,w
  2273  0202  00C8               	movwf	___bmul@multiplicand
  2274  0203  0843               	movf	_y_int,w
  2275  0204  120A  118A  267C  120A  118A  	fcall	___bmul
  2276  0209  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  2277  020A  1283               	bcf	3,5	;RP0=0, select bank0
  2278  020B  1303               	bcf	3,6	;RP1=0, select bank0
  2279  020C  073D               	addwf	_x_int,w
  2280  020D  00D9               	movwf	??_PathTo+1
  2281  020E  0859               	movf	??_PathTo+1,w
  2282  020F  0084               	movwf	4
  2283  0210  1383               	bcf	3,7	;select IRP bank1
  2284  0211  0800               	movf	0,w
  2285  0212  3E02               	addlw	2
  2286  0213  2A3D               	goto	L10
  2287  0214                     l2468:	
  2288                           ;main.c: 192: case 2: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 1);
  2289                           
  2290                           ;main.c: 191: break;
  2291                           
  2292  0214  3005               	movlw	5
  2293  0215  00D8               	movwf	??_PathTo
  2294  0216  0858               	movf	??_PathTo,w
  2295  0217  00C8               	movwf	___bmul@multiplicand
  2296  0218  0843               	movf	_y_int,w
  2297  0219  120A  118A  267C  120A  118A  	fcall	___bmul
  2298  021E  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  2299  021F  1283               	bcf	3,5	;RP0=0, select bank0
  2300  0220  1303               	bcf	3,6	;RP1=0, select bank0
  2301  0221  073D               	addwf	_x_int,w
  2302  0222  00D9               	movwf	??_PathTo+1
  2303  0223  0859               	movf	??_PathTo+1,w
  2304  0224  0084               	movwf	4
  2305  0225  1383               	bcf	3,7	;select IRP bank1
  2306  0226  0800               	movf	0,w
  2307  0227  3E01               	addlw	1
  2308  0228  2A3D               	goto	L10
  2309  0229                     l2470:	
  2310                           ;main.c: 194: case 3: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 8);
  2311                           
  2312                           ;main.c: 193: break;
  2313                           
  2314  0229  3005               	movlw	5
  2315  022A  00D8               	movwf	??_PathTo
  2316  022B  0858               	movf	??_PathTo,w
  2317  022C  00C8               	movwf	___bmul@multiplicand
  2318  022D  0843               	movf	_y_int,w
  2319  022E  120A  118A  267C  120A  118A  	fcall	___bmul
  2320  0233  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  2321  0234  1283               	bcf	3,5	;RP0=0, select bank0
  2322  0235  1303               	bcf	3,6	;RP1=0, select bank0
  2323  0236  073D               	addwf	_x_int,w
  2324  0237  00D9               	movwf	??_PathTo+1
  2325  0238  0859               	movf	??_PathTo+1,w
  2326  0239  0084               	movwf	4
  2327  023A  1383               	bcf	3,7	;select IRP bank1
  2328  023B  0800               	movf	0,w
  2329  023C  3E08               	addlw	8
  2330  023D                     L10:	
  2331  023D  00DA               	movwf	??_PathTo+2
  2332  023E  3005               	movlw	5
  2333  023F  00DB               	movwf	??_PathTo+3
  2334  0240  085B               	movf	??_PathTo+3,w
  2335  0241  00C8               	movwf	___bmul@multiplicand
  2336  0242  0843               	movf	_y_int,w
  2337  0243  120A  118A  267C  120A  118A  	fcall	___bmul
  2338  0248  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  2339  0249  1283               	bcf	3,5	;RP0=0, select bank0
  2340  024A  1303               	bcf	3,6	;RP1=0, select bank0
  2341  024B  073D               	addwf	_x_int,w
  2342  024C  00DC               	movwf	??_PathTo+4
  2343  024D  085C               	movf	??_PathTo+4,w
  2344  024E  0084               	movwf	4
  2345  024F  085A               	movf	??_PathTo+2,w
  2346  0250  1383               	bcf	3,7	;select IRP bank1
  2347  0251  0080               	movwf	0
  2348                           
  2349                           ;main.c: 196: }
  2350                           
  2351                           ;main.c: 195: break;
  2352  0252  2A61               	goto	l2476
  2353  0253                     l2474:	
  2354  0253  0831               	movf	_intersection_Orientation,w
  2355                           
  2356                           ; Switch size 1, requested type "space"
  2357                           ; Number of cases is 4, Range of values is 0 to 3
  2358                           ; switch strategies available:
  2359                           ; Name         Instructions Cycles
  2360                           ; simple_byte           13     7 (average)
  2361                           ; direct_byte           20     8 (fixed)
  2362                           ; jumptable            260     6 (fixed)
  2363                           ;	Chosen strategy is simple_byte
  2364  0254  3A00               	xorlw	0	; case 0
  2365  0255  1903               	skipnz
  2366  0256  29EA               	goto	l2464
  2367  0257  3A01               	xorlw	1	; case 1
  2368  0258  1903               	skipnz
  2369  0259  29FF               	goto	l2466
  2370  025A  3A03               	xorlw	3	; case 2
  2371  025B  1903               	skipnz
  2372  025C  2A14               	goto	l2468
  2373  025D  3A01               	xorlw	1	; case 3
  2374  025E  1903               	skipnz
  2375  025F  2A29               	goto	l2470
  2376  0260  2A61               	goto	l2476
  2377  0261                     l2476:	
  2378                           
  2379                           ;main.c: 199: x_path = x_origin;
  2380  0261  083E               	movf	_x_origin,w
  2381  0262  00D8               	movwf	??_PathTo
  2382  0263  0858               	movf	??_PathTo,w
  2383  0264  00BF               	movwf	_x_path
  2384                           
  2385                           ;main.c: 200: y_path = y_origin;
  2386  0265  0844               	movf	_y_origin,w
  2387  0266  00D8               	movwf	??_PathTo
  2388  0267  0858               	movf	??_PathTo,w
  2389  0268  00C5               	movwf	_y_path
  2390                           
  2391                           ;main.c: 201: orientation_path = orientation;
  2392  0269  0868               	movf	_orientation,w
  2393  026A  00D8               	movwf	??_PathTo
  2394  026B  0858               	movf	??_PathTo,w
  2395  026C  00B3               	movwf	_orientation_path
  2396                           
  2397                           ;main.c: 202: pathCount = 0;
  2398  026D  01B4               	clrf	_pathCount
  2399                           
  2400                           ;main.c: 203: reset_flag = 1;
  2401  026E  01B8               	clrf	_reset_flag
  2402  026F  0AB8               	incf	_reset_flag,f
  2403                           
  2404                           ;main.c: 205: for (r = 1; r <= 2; r++){
  2405  0270  01B5               	clrf	_r
  2406  0271  0AB5               	incf	_r,f
  2407  0272  3003               	movlw	3
  2408  0273  0235               	subwf	_r,w
  2409  0274  1803               	btfsc	3,0
  2410  0275  2A9D               	goto	l2504
  2411  0276                     l2488:	
  2412                           
  2413                           ;main.c: 206: for (c = 0; c <= 15; c++){
  2414  0276  01AE               	clrf	_c
  2415  0277  3010               	movlw	16
  2416  0278  022E               	subwf	_c,w
  2417  0279  1803               	btfsc	3,0
  2418  027A  2A95               	goto	l2500
  2419  027B                     l2494:	
  2420                           
  2421                           ;main.c: 207: path[r][c] = 0;
  2422  027B  0835               	movf	_r,w
  2423  027C  00D8               	movwf	??_PathTo
  2424  027D  3004               	movlw	4
  2425  027E                     u1665:	
  2426  027E  1003               	clrc
  2427  027F  0DD8               	rlf	??_PathTo,f
  2428  0280  3EFF               	addlw	-1
  2429  0281  1D03               	skipz
  2430  0282  2A7E               	goto	u1665
  2431  0283  3090               	movlw	(low (_path| (0+256)))& (0+255)
  2432  0284  0758               	addwf	??_PathTo,w
  2433  0285  00D9               	movwf	??_PathTo+1
  2434  0286  082E               	movf	_c,w
  2435  0287  0759               	addwf	??_PathTo+1,w
  2436  0288  00DA               	movwf	??_PathTo+2
  2437  0289  085A               	movf	??_PathTo+2,w
  2438  028A  0084               	movwf	4
  2439  028B  1783               	bsf	3,7	;select IRP bank3
  2440  028C  0180               	clrf	0
  2441  028D  3001               	movlw	1
  2442  028E  00D8               	movwf	??_PathTo
  2443  028F  0858               	movf	??_PathTo,w
  2444  0290  07AE               	addwf	_c,f
  2445  0291  3010               	movlw	16
  2446  0292  022E               	subwf	_c,w
  2447  0293  1C03               	skipc
  2448  0294  2A7B               	goto	l2494
  2449  0295                     l2500:	
  2450  0295  3001               	movlw	1
  2451  0296  00D8               	movwf	??_PathTo
  2452  0297  0858               	movf	??_PathTo,w
  2453  0298  07B5               	addwf	_r,f
  2454  0299  3003               	movlw	3
  2455  029A  0235               	subwf	_r,w
  2456  029B  1C03               	skipc
  2457  029C  2A76               	goto	l2488
  2458  029D                     l2504:	
  2459                           
  2460                           ;main.c: 208: }
  2461                           ;main.c: 209: }
  2462                           ;main.c: 210: }
  2463                           ;main.c: 215: if((sum == 4) || (pathCount >= 15)){
  2464  029D  3004               	movlw	4
  2465  029E  0660               	xorwf	PathTo@sum,w
  2466  029F  1903               	btfsc	3,2
  2467  02A0  2B0F               	goto	l2518
  2468  02A1  300F               	movlw	15
  2469  02A2  0234               	subwf	_pathCount,w
  2470  02A3  1803               	btfsc	3,0
  2471  02A4  2B0F               	goto	l2518
  2472  02A5  2B59               	goto	l2548
  2473  02A6                     l2508:	
  2474                           ;main.c: 219: case 0: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 4);
  2475                           
  2476                           ;main.c: 218: switch(intersection_Orientation){
  2477                           
  2478  02A6  3005               	movlw	5
  2479  02A7  00D8               	movwf	??_PathTo
  2480  02A8  0858               	movf	??_PathTo,w
  2481  02A9  00C8               	movwf	___bmul@multiplicand
  2482  02AA  0843               	movf	_y_int,w
  2483  02AB  120A  118A  267C  120A  118A  	fcall	___bmul
  2484  02B0  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  2485  02B1  1283               	bcf	3,5	;RP0=0, select bank0
  2486  02B2  1303               	bcf	3,6	;RP1=0, select bank0
  2487  02B3  073D               	addwf	_x_int,w
  2488  02B4  00D9               	movwf	??_PathTo+1
  2489  02B5  0859               	movf	??_PathTo+1,w
  2490  02B6  0084               	movwf	4
  2491  02B7  1383               	bcf	3,7	;select IRP bank1
  2492  02B8  0800               	movf	0,w
  2493  02B9  3E04               	addlw	4
  2494  02BA  2AF9               	goto	L11
  2495  02BB                     l2510:	
  2496                           ;main.c: 221: case 1: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 2);
  2497                           
  2498                           ;main.c: 220: break;
  2499                           
  2500  02BB  3005               	movlw	5
  2501  02BC  00D8               	movwf	??_PathTo
  2502  02BD  0858               	movf	??_PathTo,w
  2503  02BE  00C8               	movwf	___bmul@multiplicand
  2504  02BF  0843               	movf	_y_int,w
  2505  02C0  120A  118A  267C  120A  118A  	fcall	___bmul
  2506  02C5  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  2507  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  2508  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  2509  02C8  073D               	addwf	_x_int,w
  2510  02C9  00D9               	movwf	??_PathTo+1
  2511  02CA  0859               	movf	??_PathTo+1,w
  2512  02CB  0084               	movwf	4
  2513  02CC  1383               	bcf	3,7	;select IRP bank1
  2514  02CD  0800               	movf	0,w
  2515  02CE  3E02               	addlw	2
  2516  02CF  2AF9               	goto	L11
  2517  02D0                     l2512:	
  2518                           ;main.c: 223: case 2: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 1);
  2519                           
  2520                           ;main.c: 222: break;
  2521                           
  2522  02D0  3005               	movlw	5
  2523  02D1  00D8               	movwf	??_PathTo
  2524  02D2  0858               	movf	??_PathTo,w
  2525  02D3  00C8               	movwf	___bmul@multiplicand
  2526  02D4  0843               	movf	_y_int,w
  2527  02D5  120A  118A  267C  120A  118A  	fcall	___bmul
  2528  02DA  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  2529  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  2530  02DC  1303               	bcf	3,6	;RP1=0, select bank0
  2531  02DD  073D               	addwf	_x_int,w
  2532  02DE  00D9               	movwf	??_PathTo+1
  2533  02DF  0859               	movf	??_PathTo+1,w
  2534  02E0  0084               	movwf	4
  2535  02E1  1383               	bcf	3,7	;select IRP bank1
  2536  02E2  0800               	movf	0,w
  2537  02E3  3E01               	addlw	1
  2538  02E4  2AF9               	goto	L11
  2539  02E5                     l2514:	
  2540                           ;main.c: 225: case 3: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 8);
  2541                           
  2542                           ;main.c: 224: break;
  2543                           
  2544  02E5  3005               	movlw	5
  2545  02E6  00D8               	movwf	??_PathTo
  2546  02E7  0858               	movf	??_PathTo,w
  2547  02E8  00C8               	movwf	___bmul@multiplicand
  2548  02E9  0843               	movf	_y_int,w
  2549  02EA  120A  118A  267C  120A  118A  	fcall	___bmul
  2550  02EF  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  2551  02F0  1283               	bcf	3,5	;RP0=0, select bank0
  2552  02F1  1303               	bcf	3,6	;RP1=0, select bank0
  2553  02F2  073D               	addwf	_x_int,w
  2554  02F3  00D9               	movwf	??_PathTo+1
  2555  02F4  0859               	movf	??_PathTo+1,w
  2556  02F5  0084               	movwf	4
  2557  02F6  1383               	bcf	3,7	;select IRP bank1
  2558  02F7  0800               	movf	0,w
  2559  02F8  3E08               	addlw	8
  2560  02F9                     L11:	
  2561  02F9  00DA               	movwf	??_PathTo+2
  2562  02FA  3005               	movlw	5
  2563  02FB  00DB               	movwf	??_PathTo+3
  2564  02FC  085B               	movf	??_PathTo+3,w
  2565  02FD  00C8               	movwf	___bmul@multiplicand
  2566  02FE  0843               	movf	_y_int,w
  2567  02FF  120A  118A  267C  120A  118A  	fcall	___bmul
  2568  0304  3EA0               	addlw	(low (_mazeGrid| 0))& (0+255)
  2569  0305  1283               	bcf	3,5	;RP0=0, select bank0
  2570  0306  1303               	bcf	3,6	;RP1=0, select bank0
  2571  0307  073D               	addwf	_x_int,w
  2572  0308  00DC               	movwf	??_PathTo+4
  2573  0309  085C               	movf	??_PathTo+4,w
  2574  030A  0084               	movwf	4
  2575  030B  085A               	movf	??_PathTo+2,w
  2576  030C  1383               	bcf	3,7	;select IRP bank1
  2577  030D  0080               	movwf	0
  2578                           
  2579                           ;main.c: 227: }
  2580                           
  2581                           ;main.c: 226: break;
  2582  030E  2B1D               	goto	l2520
  2583  030F                     l2518:	
  2584  030F  0831               	movf	_intersection_Orientation,w
  2585                           
  2586                           ; Switch size 1, requested type "space"
  2587                           ; Number of cases is 4, Range of values is 0 to 3
  2588                           ; switch strategies available:
  2589                           ; Name         Instructions Cycles
  2590                           ; simple_byte           13     7 (average)
  2591                           ; direct_byte           20     8 (fixed)
  2592                           ; jumptable            260     6 (fixed)
  2593                           ;	Chosen strategy is simple_byte
  2594  0310  3A00               	xorlw	0	; case 0
  2595  0311  1903               	skipnz
  2596  0312  2AA6               	goto	l2508
  2597  0313  3A01               	xorlw	1	; case 1
  2598  0314  1903               	skipnz
  2599  0315  2ABB               	goto	l2510
  2600  0316  3A03               	xorlw	3	; case 2
  2601  0317  1903               	skipnz
  2602  0318  2AD0               	goto	l2512
  2603  0319  3A01               	xorlw	1	; case 3
  2604  031A  1903               	skipnz
  2605  031B  2AE5               	goto	l2514
  2606  031C  2B1D               	goto	l2520
  2607  031D                     l2520:	
  2608                           
  2609                           ;main.c: 230: x_path = x_origin;
  2610  031D  083E               	movf	_x_origin,w
  2611  031E  00D8               	movwf	??_PathTo
  2612  031F  0858               	movf	??_PathTo,w
  2613  0320  00BF               	movwf	_x_path
  2614                           
  2615                           ;main.c: 231: y_path = y_origin;
  2616  0321  0844               	movf	_y_origin,w
  2617  0322  00D8               	movwf	??_PathTo
  2618  0323  0858               	movf	??_PathTo,w
  2619  0324  00C5               	movwf	_y_path
  2620                           
  2621                           ;main.c: 232: orientation_path = orientation;
  2622  0325  0868               	movf	_orientation,w
  2623  0326  00D8               	movwf	??_PathTo
  2624  0327  0858               	movf	??_PathTo,w
  2625  0328  00B3               	movwf	_orientation_path
  2626                           
  2627                           ;main.c: 233: pathCount = 0;
  2628  0329  01B4               	clrf	_pathCount
  2629                           
  2630                           ;main.c: 234: reset_flag = 1;
  2631  032A  01B8               	clrf	_reset_flag
  2632  032B  0AB8               	incf	_reset_flag,f
  2633                           
  2634                           ;main.c: 236: for (r = 1; r <= 2; r++){
  2635  032C  01B5               	clrf	_r
  2636  032D  0AB5               	incf	_r,f
  2637  032E  3003               	movlw	3
  2638  032F  0235               	subwf	_r,w
  2639  0330  1803               	btfsc	3,0
  2640  0331  2B59               	goto	l2548
  2641  0332                     l2532:	
  2642                           
  2643                           ;main.c: 237: for (c = 0; c <= 15; c++){
  2644  0332  01AE               	clrf	_c
  2645  0333  3010               	movlw	16
  2646  0334  022E               	subwf	_c,w
  2647  0335  1803               	btfsc	3,0
  2648  0336  2B51               	goto	l2544
  2649  0337                     l2538:	
  2650                           
  2651                           ;main.c: 238: path[r][c] = 0;
  2652  0337  0835               	movf	_r,w
  2653  0338  00D8               	movwf	??_PathTo
  2654  0339  3004               	movlw	4
  2655  033A                     u1735:	
  2656  033A  1003               	clrc
  2657  033B  0DD8               	rlf	??_PathTo,f
  2658  033C  3EFF               	addlw	-1
  2659  033D  1D03               	skipz
  2660  033E  2B3A               	goto	u1735
  2661  033F  3090               	movlw	(low (_path| (0+256)))& (0+255)
  2662  0340  0758               	addwf	??_PathTo,w
  2663  0341  00D9               	movwf	??_PathTo+1
  2664  0342  082E               	movf	_c,w
  2665  0343  0759               	addwf	??_PathTo+1,w
  2666  0344  00DA               	movwf	??_PathTo+2
  2667  0345  085A               	movf	??_PathTo+2,w
  2668  0346  0084               	movwf	4
  2669  0347  1783               	bsf	3,7	;select IRP bank3
  2670  0348  0180               	clrf	0
  2671  0349  3001               	movlw	1
  2672  034A  00D8               	movwf	??_PathTo
  2673  034B  0858               	movf	??_PathTo,w
  2674  034C  07AE               	addwf	_c,f
  2675  034D  3010               	movlw	16
  2676  034E  022E               	subwf	_c,w
  2677  034F  1C03               	skipc
  2678  0350  2B37               	goto	l2538
  2679  0351                     l2544:	
  2680  0351  3001               	movlw	1
  2681  0352  00D8               	movwf	??_PathTo
  2682  0353  0858               	movf	??_PathTo,w
  2683  0354  07B5               	addwf	_r,f
  2684  0355  3003               	movlw	3
  2685  0356  0235               	subwf	_r,w
  2686  0357  1C03               	skipc
  2687  0358  2B32               	goto	l2532
  2688  0359                     l2548:	
  2689                           
  2690                           ;main.c: 239: }
  2691                           ;main.c: 240: }
  2692                           ;main.c: 241: }
  2693                           ;main.c: 246: if (reset_flag != 1){
  2694  0359  0338               	decf	_reset_flag,w
  2695  035A  1903               	btfsc	3,2
  2696  035B  2B83               	goto	l207
  2697                           
  2698                           ;main.c: 248: if(left == 0){
  2699  035C  0832               	movf	_left,w
  2700  035D  1D03               	btfss	3,2
  2701  035E  2B63               	goto	l2558
  2702                           
  2703                           ;main.c: 249: x_path--;
  2704  035F  3001               	movlw	1
  2705  0360  02BF               	subwf	_x_path,f
  2706                           
  2707                           ;main.c: 250: orientation_path = 3;
  2708  0361  3003               	movlw	3
  2709  0362  2B7C               	goto	L13
  2710  0363                     l2558:	
  2711                           ;main.c: 252: }
  2712                           
  2713                           ;main.c: 251: pathCount++;
  2714                           
  2715                           
  2716                           ;main.c: 253: else if(up == 0){
  2717  0363  083C               	movf	_up,w
  2718  0364  1D03               	btfss	3,2
  2719  0365  2B6A               	goto	l2566
  2720                           
  2721                           ;main.c: 254: y_path--;
  2722  0366  3001               	movlw	1
  2723  0367  02C5               	subwf	_y_path,f
  2724                           
  2725                           ;main.c: 255: orientation_path = 0;
  2726  0368  01B3               	clrf	_orientation_path
  2727  0369  2B7F               	goto	l2578
  2728  036A                     l2566:	
  2729                           ;main.c: 257: }
  2730                           
  2731                           ;main.c: 256: pathCount++;
  2732                           
  2733                           
  2734                           ;main.c: 258: else if(right == 0){
  2735  036A  0839               	movf	_right,w
  2736  036B  1D03               	btfss	3,2
  2737  036C  2B74               	goto	l2572
  2738                           
  2739                           ;main.c: 259: x_path++;
  2740  036D  3001               	movlw	1
  2741  036E  00D8               	movwf	??_PathTo
  2742  036F  0858               	movf	??_PathTo,w
  2743  0370  07BF               	addwf	_x_path,f
  2744                           
  2745                           ;main.c: 260: orientation_path = 1;
  2746  0371  01B3               	clrf	_orientation_path
  2747  0372  0AB3               	incf	_orientation_path,f
  2748  0373  2B7F               	goto	l2578
  2749  0374                     l2572:	
  2750                           ;main.c: 262: }
  2751                           
  2752                           ;main.c: 261: pathCount++;
  2753                           
  2754                           
  2755                           ;main.c: 263: else if(down == 0){
  2756  0374  082F               	movf	_down,w
  2757  0375  1D03               	btfss	3,2
  2758  0376  2B83               	goto	l207
  2759                           
  2760                           ;main.c: 264: y_path++;
  2761  0377  3001               	movlw	1
  2762  0378  00D8               	movwf	??_PathTo
  2763  0379  0858               	movf	??_PathTo,w
  2764  037A  07C5               	addwf	_y_path,f
  2765                           
  2766                           ;main.c: 265: orientation_path = 2;
  2767  037B  3002               	movlw	2
  2768  037C                     L13:	
  2769  037C  00D8               	movwf	??_PathTo
  2770  037D  0858               	movf	??_PathTo,w
  2771  037E  00B3               	movwf	_orientation_path
  2772  037F                     l2578:	
  2773                           
  2774                           ;main.c: 266: pathCount++;
  2775  037F  3001               	movlw	1
  2776  0380  00D8               	movwf	??_PathTo
  2777  0381  0858               	movf	??_PathTo,w
  2778  0382  07B4               	addwf	_pathCount,f
  2779  0383                     l207:	
  2780  0383  3001               	movlw	1
  2781  0384  07E1               	addwf	PathTo@loop,f
  2782  0385  1803               	skipnc
  2783  0386  0AE2               	incf	PathTo@loop+1,f
  2784  0387  3000               	movlw	0
  2785  0388  07E2               	addwf	PathTo@loop+1,f
  2786  0389  28B6               	goto	L12
  2787  038A                     __end_of_PathTo:	
  2788                           
  2789                           	psect	text7
  2790  044E                     __ptext7:	
  2791 ;; *************** function _lcdWriteToDigitBCD *****************
  2792 ;; Defined at:
  2793 ;;		line 38 in file "LCD.c"
  2794 ;; Parameters:    Size  Location     Type
  2795 ;;  data            2    3[BANK0 ] unsigned int 
  2796 ;; Auto vars:     Size  Location     Type
  2797 ;;  OnesDigit       2   13[BANK0 ] unsigned int 
  2798 ;;  TenThouDigit    2   11[BANK0 ] unsigned int 
  2799 ;;  ThouDigit       2    9[BANK0 ] unsigned int 
  2800 ;;  HunsDigit       2    7[BANK0 ] unsigned int 
  2801 ;;  TensDigit       2    5[BANK0 ] unsigned int 
  2802 ;; Return value:  Size  Location     Type
  2803 ;;                  1    wreg      void 
  2804 ;; Registers used:
  2805 ;;		wreg, status,2, status,0, pclath, cstack
  2806 ;; Tracked objects:
  2807 ;;		On entry : 0/0
  2808 ;;		On exit  : 0/0
  2809 ;;		Unchanged: 0/0
  2810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2811 ;;      Params:         0       2       0       0       0
  2812 ;;      Locals:         0      10       0       0       0
  2813 ;;      Temps:          0       0       0       0       0
  2814 ;;      Totals:         0      12       0       0       0
  2815 ;;Total ram usage:       12 bytes
  2816 ;; Hardware stack levels used:    1
  2817 ;; Hardware stack levels required when called:    2
  2818 ;; This function calls:
  2819 ;;		_lcdWriteData
  2820 ;; This function is called by:
  2821 ;;		_PathTo
  2822 ;;		_main
  2823 ;;		_ADCMain
  2824 ;; This function uses a non-reentrant model
  2825 ;;
  2826                           
  2827                           
  2828                           ;psect for function _lcdWriteToDigitBCD
  2829  044E                     _lcdWriteToDigitBCD:	
  2830                           
  2831                           ;LCD.c: 39: unsigned int OnesDigit, TensDigit, HunsDigit, ThouDigit, TenThouDigit;
  2832                           ;LCD.c: 42: OnesDigit = data;
  2833                           
  2834                           ;incstack = 0
  2835                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  2836  044E  1283               	bcf	3,5	;RP0=0, select bank0
  2837  044F  1303               	bcf	3,6	;RP1=0, select bank0
  2838  0450  084C               	movf	lcdWriteToDigitBCD@data+1,w
  2839  0451  00D6               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2840  0452  084B               	movf	lcdWriteToDigitBCD@data,w
  2841  0453  00D5               	movwf	lcdWriteToDigitBCD@OnesDigit
  2842                           
  2843                           ;LCD.c: 43: TensDigit = 0;
  2844  0454  01CD               	clrf	lcdWriteToDigitBCD@TensDigit
  2845  0455  01CE               	clrf	lcdWriteToDigitBCD@TensDigit+1
  2846                           
  2847                           ;LCD.c: 44: HunsDigit = 0;
  2848  0456  01CF               	clrf	lcdWriteToDigitBCD@HunsDigit
  2849  0457  01D0               	clrf	lcdWriteToDigitBCD@HunsDigit+1
  2850                           
  2851                           ;LCD.c: 45: ThouDigit = 0;
  2852  0458  01D1               	clrf	lcdWriteToDigitBCD@ThouDigit
  2853  0459  01D2               	clrf	lcdWriteToDigitBCD@ThouDigit+1
  2854                           
  2855                           ;LCD.c: 46: TenThouDigit = 0;
  2856  045A  01D3               	clrf	lcdWriteToDigitBCD@TenThouDigit
  2857  045B  01D4               	clrf	lcdWriteToDigitBCD@TenThouDigit+1
  2858  045C                     l2314:	
  2859                           ;LCD.c: 49: while (OnesDigit >= 10000){
  2860                           
  2861  045C  3027               	movlw	39
  2862  045D  0256               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2863  045E  3010               	movlw	16
  2864  045F  1903               	skipnz
  2865  0460  0255               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2866  0461  1C03               	btfss	3,0
  2867  0462  2C80               	goto	l2320
  2868                           
  2869                           ;LCD.c: 50: OnesDigit = OnesDigit - 10000;
  2870  0463  0855               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2871  0464  3EF0               	addlw	240
  2872  0465  00D5               	movwf	lcdWriteToDigitBCD@OnesDigit
  2873  0466  0856               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2874  0467  1803               	skipnc
  2875  0468  3E01               	addlw	1
  2876  0469  3ED8               	addlw	216
  2877  046A  00D6               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2878                           
  2879                           ;LCD.c: 51: TenThouDigit++;
  2880  046B  3001               	movlw	1
  2881  046C  07D3               	addwf	lcdWriteToDigitBCD@TenThouDigit,f
  2882  046D  1803               	skipnc
  2883  046E  0AD4               	incf	lcdWriteToDigitBCD@TenThouDigit+1,f
  2884  046F  3000               	movlw	0
  2885  0470  07D4               	addwf	lcdWriteToDigitBCD@TenThouDigit+1,f
  2886  0471  2C5C               	goto	l2314
  2887  0472                     l2316:	
  2888                           ;LCD.c: 52: }
  2889                           ;LCD.c: 54: while (OnesDigit >= 1000){
  2890                           
  2891                           
  2892                           ;LCD.c: 55: OnesDigit = OnesDigit - 1000;
  2893  0472  0855               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2894  0473  3E18               	addlw	24
  2895  0474  00D5               	movwf	lcdWriteToDigitBCD@OnesDigit
  2896  0475  0856               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2897  0476  1803               	skipnc
  2898  0477  3E01               	addlw	1
  2899  0478  3EFC               	addlw	252
  2900  0479  00D6               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2901                           
  2902                           ;LCD.c: 56: ThouDigit++;
  2903  047A  3001               	movlw	1
  2904  047B  07D1               	addwf	lcdWriteToDigitBCD@ThouDigit,f
  2905  047C  1803               	skipnc
  2906  047D  0AD2               	incf	lcdWriteToDigitBCD@ThouDigit+1,f
  2907  047E  3000               	movlw	0
  2908  047F  07D2               	addwf	lcdWriteToDigitBCD@ThouDigit+1,f
  2909  0480                     l2320:	
  2910  0480  3003               	movlw	3
  2911  0481  0256               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2912  0482  30E8               	movlw	232
  2913  0483  1903               	skipnz
  2914  0484  0255               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2915  0485  1C03               	btfss	3,0
  2916  0486  2C96               	goto	l2326
  2917  0487  2C72               	goto	l2316
  2918  0488                     l2322:	
  2919                           ;LCD.c: 57: }
  2920                           ;LCD.c: 59: while (OnesDigit >= 100){
  2921                           
  2922                           
  2923                           ;LCD.c: 60: OnesDigit = OnesDigit - 100;
  2924  0488  0855               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2925  0489  3E9C               	addlw	156
  2926  048A  00D5               	movwf	lcdWriteToDigitBCD@OnesDigit
  2927  048B  0856               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2928  048C  1803               	skipnc
  2929  048D  3E01               	addlw	1
  2930  048E  3EFF               	addlw	255
  2931  048F  00D6               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2932                           
  2933                           ;LCD.c: 61: HunsDigit++;
  2934  0490  3001               	movlw	1
  2935  0491  07CF               	addwf	lcdWriteToDigitBCD@HunsDigit,f
  2936  0492  1803               	skipnc
  2937  0493  0AD0               	incf	lcdWriteToDigitBCD@HunsDigit+1,f
  2938  0494  3000               	movlw	0
  2939  0495  07D0               	addwf	lcdWriteToDigitBCD@HunsDigit+1,f
  2940  0496                     l2326:	
  2941  0496  3000               	movlw	0
  2942  0497  0256               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2943  0498  3064               	movlw	100
  2944  0499  1903               	skipnz
  2945  049A  0255               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2946  049B  1C03               	btfss	3,0
  2947  049C  2CAC               	goto	l2332
  2948  049D  2C88               	goto	l2322
  2949  049E                     l2328:	
  2950                           ;LCD.c: 62: }
  2951                           ;LCD.c: 64: while (OnesDigit >= 10){
  2952                           
  2953                           
  2954                           ;LCD.c: 65: OnesDigit = OnesDigit - 10;
  2955  049E  0855               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2956  049F  3EF6               	addlw	246
  2957  04A0  00D5               	movwf	lcdWriteToDigitBCD@OnesDigit
  2958  04A1  0856               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2959  04A2  1803               	skipnc
  2960  04A3  3E01               	addlw	1
  2961  04A4  3EFF               	addlw	255
  2962  04A5  00D6               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2963                           
  2964                           ;LCD.c: 66: TensDigit++;
  2965  04A6  3001               	movlw	1
  2966  04A7  07CD               	addwf	lcdWriteToDigitBCD@TensDigit,f
  2967  04A8  1803               	skipnc
  2968  04A9  0ACE               	incf	lcdWriteToDigitBCD@TensDigit+1,f
  2969  04AA  3000               	movlw	0
  2970  04AB  07CE               	addwf	lcdWriteToDigitBCD@TensDigit+1,f
  2971  04AC                     l2332:	
  2972  04AC  3000               	movlw	0
  2973  04AD  0256               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2974  04AE  300A               	movlw	10
  2975  04AF  1903               	skipnz
  2976  04B0  0255               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2977  04B1  1803               	skipnc
  2978  04B2  2C9E               	goto	l2328
  2979                           
  2980                           ;LCD.c: 67: }
  2981                           ;LCD.c: 69: if (TenThouDigit > 0)
  2982  04B3  0853               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  2983  04B4  0454               	iorwf	lcdWriteToDigitBCD@TenThouDigit+1,w
  2984  04B5  1903               	btfsc	3,2
  2985  04B6  2CBE               	goto	l2338
  2986                           
  2987                           ;LCD.c: 70: lcdWriteData((unsigned int)TenThouDigit + 48);
  2988  04B7  0853               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  2989  04B8  3E30               	addlw	48
  2990  04B9  120A  118A  2669  120A  118A  	fcall	_lcdWriteData
  2991  04BE                     l2338:	
  2992                           
  2993                           ;LCD.c: 72: if (ThouDigit > 0)
  2994  04BE  1283               	bcf	3,5	;RP0=0, select bank0
  2995  04BF  1303               	bcf	3,6	;RP1=0, select bank0
  2996  04C0  0851               	movf	lcdWriteToDigitBCD@ThouDigit,w
  2997  04C1  0452               	iorwf	lcdWriteToDigitBCD@ThouDigit+1,w
  2998  04C2  1903               	btfsc	3,2
  2999  04C3  2CCB               	goto	l2342
  3000                           
  3001                           ;LCD.c: 73: lcdWriteData((unsigned int)ThouDigit + 48);
  3002  04C4  0851               	movf	lcdWriteToDigitBCD@ThouDigit,w
  3003  04C5  3E30               	addlw	48
  3004  04C6  120A  118A  2669  120A  118A  	fcall	_lcdWriteData
  3005  04CB                     l2342:	
  3006                           
  3007                           ;LCD.c: 75: if (HunsDigit > 0)
  3008  04CB  1283               	bcf	3,5	;RP0=0, select bank0
  3009  04CC  1303               	bcf	3,6	;RP1=0, select bank0
  3010  04CD  084F               	movf	lcdWriteToDigitBCD@HunsDigit,w
  3011  04CE  0450               	iorwf	lcdWriteToDigitBCD@HunsDigit+1,w
  3012  04CF  1903               	btfsc	3,2
  3013  04D0  2CD8               	goto	l393
  3014                           
  3015                           ;LCD.c: 76: lcdWriteData((unsigned int)HunsDigit + 48);
  3016  04D1  084F               	movf	lcdWriteToDigitBCD@HunsDigit,w
  3017  04D2  3E30               	addlw	48
  3018  04D3  120A  118A  2669  120A  118A  	fcall	_lcdWriteData
  3019  04D8                     l393:	
  3020                           
  3021                           ;LCD.c: 79: lcdWriteData((unsigned int)TensDigit + 48);
  3022  04D8  1283               	bcf	3,5	;RP0=0, select bank0
  3023  04D9  1303               	bcf	3,6	;RP1=0, select bank0
  3024  04DA  084D               	movf	lcdWriteToDigitBCD@TensDigit,w
  3025  04DB  3E30               	addlw	48
  3026  04DC  120A  118A  2669  120A  118A  	fcall	_lcdWriteData
  3027                           
  3028                           ;LCD.c: 81: lcdWriteData((unsigned int)OnesDigit + 48);
  3029  04E1  1283               	bcf	3,5	;RP0=0, select bank0
  3030  04E2  1303               	bcf	3,6	;RP1=0, select bank0
  3031  04E3  0855               	movf	lcdWriteToDigitBCD@OnesDigit,w
  3032  04E4  3E30               	addlw	48
  3033  04E5  120A  118A  2669   	fcall	_lcdWriteData
  3034  04E8  0008               	return
  3035  04E9                     __end_of_lcdWriteToDigitBCD:	
  3036                           
  3037                           	psect	text8
  3038  0669                     __ptext8:	
  3039 ;; *************** function _lcdWriteData *****************
  3040 ;; Defined at:
  3041 ;;		line 16 in file "LCD.c"
  3042 ;; Parameters:    Size  Location     Type
  3043 ;;  databyte        1    wreg     unsigned char 
  3044 ;; Auto vars:     Size  Location     Type
  3045 ;;  databyte        1    2[BANK0 ] unsigned char 
  3046 ;; Return value:  Size  Location     Type
  3047 ;;                  1    wreg      void 
  3048 ;; Registers used:
  3049 ;;		wreg
  3050 ;; Tracked objects:
  3051 ;;		On entry : 0/0
  3052 ;;		On exit  : 0/0
  3053 ;;		Unchanged: 0/0
  3054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3055 ;;      Params:         0       0       0       0       0
  3056 ;;      Locals:         0       1       0       0       0
  3057 ;;      Temps:          0       2       0       0       0
  3058 ;;      Totals:         0       3       0       0       0
  3059 ;;Total ram usage:        3 bytes
  3060 ;; Hardware stack levels used:    1
  3061 ;; Hardware stack levels required when called:    1
  3062 ;; This function calls:
  3063 ;;		Nothing
  3064 ;; This function is called by:
  3065 ;;		_main
  3066 ;;		_lcdWriteString
  3067 ;;		_lcdWriteToDigitBCD
  3068 ;; This function uses a non-reentrant model
  3069 ;;
  3070                           
  3071                           
  3072                           ;psect for function _lcdWriteData
  3073  0669                     _lcdWriteData:	
  3074                           
  3075                           ;incstack = 0
  3076                           ; Regs used in _lcdWriteData: [wreg]
  3077                           ;lcdWriteData@databyte stored from wreg
  3078  0669  1283               	bcf	3,5	;RP0=0, select bank0
  3079  066A  1303               	bcf	3,6	;RP1=0, select bank0
  3080  066B  00CA               	movwf	lcdWriteData@databyte
  3081                           
  3082                           ;LCD.c: 17: RE2 = 0;
  3083  066C  1109               	bcf	9,2	;volatile
  3084                           
  3085                           ;LCD.c: 18: RE1 = 0;
  3086  066D  1089               	bcf	9,1	;volatile
  3087                           
  3088                           ;LCD.c: 19: RE0 = 1;
  3089  066E  1409               	bsf	9,0	;volatile
  3090                           
  3091                           ;LCD.c: 20: PORTD = databyte;
  3092  066F  084A               	movf	lcdWriteData@databyte,w
  3093  0670  0088               	movwf	8	;volatile
  3094                           
  3095                           ;LCD.c: 21: RE2 = 1;
  3096  0671  1509               	bsf	9,2	;volatile
  3097                           
  3098                           ;LCD.c: 22: RE2 = 0;
  3099  0672  1109               	bcf	9,2	;volatile
  3100                           
  3101                           ;LCD.c: 23: _delay((unsigned long)((1)*(20000000/4000.0)));
  3102  0673  3007               	movlw	7
  3103  0674  00C9               	movwf	??_lcdWriteData+1
  3104  0675  307D               	movlw	125
  3105  0676  00C8               	movwf	??_lcdWriteData
  3106  0677                     u1887:	
  3107  0677  0BC8               	decfsz	??_lcdWriteData,f
  3108  0678  2E77               	goto	u1887
  3109  0679  0BC9               	decfsz	??_lcdWriteData+1,f
  3110  067A  2E77               	goto	u1887
  3111  067B  0008               	return
  3112  067C                     __end_of_lcdWriteData:	
  3113                           
  3114                           	psect	text9
  3115  06BB                     __ptext9:	
  3116 ;; *************** function _lcdSetCursor *****************
  3117 ;; Defined at:
  3118 ;;		line 27 in file "LCD.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;  address         1    wreg     unsigned char 
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;  address         1    3[BANK0 ] unsigned char 
  3123 ;; Return value:  Size  Location     Type
  3124 ;;                  1    wreg      void 
  3125 ;; Registers used:
  3126 ;;		wreg, status,2, status,0, pclath, cstack
  3127 ;; Tracked objects:
  3128 ;;		On entry : 0/0
  3129 ;;		On exit  : 0/0
  3130 ;;		Unchanged: 0/0
  3131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3132 ;;      Params:         0       0       0       0       0
  3133 ;;      Locals:         0       1       0       0       0
  3134 ;;      Temps:          0       0       0       0       0
  3135 ;;      Totals:         0       1       0       0       0
  3136 ;;Total ram usage:        1 bytes
  3137 ;; Hardware stack levels used:    1
  3138 ;; Hardware stack levels required when called:    2
  3139 ;; This function calls:
  3140 ;;		_lcdWriteControl
  3141 ;; This function is called by:
  3142 ;;		_PathTo
  3143 ;;		_main
  3144 ;;		_ADCMain
  3145 ;; This function uses a non-reentrant model
  3146 ;;
  3147                           
  3148                           
  3149                           ;psect for function _lcdSetCursor
  3150  06BB                     _lcdSetCursor:	
  3151                           
  3152                           ;incstack = 0
  3153                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  3154                           ;lcdSetCursor@address stored from wreg
  3155  06BB  1283               	bcf	3,5	;RP0=0, select bank0
  3156  06BC  1303               	bcf	3,6	;RP1=0, select bank0
  3157  06BD  00CB               	movwf	lcdSetCursor@address
  3158                           
  3159                           ;LCD.c: 28: address |= 0b10000000;
  3160  06BE  17CB               	bsf	lcdSetCursor@address,7
  3161                           
  3162                           ;LCD.c: 29: lcdWriteControl(address);
  3163  06BF  084B               	movf	lcdSetCursor@address,w
  3164  06C0  120A  118A  2655   	fcall	_lcdWriteControl
  3165  06C3  0008               	return
  3166  06C4                     __end_of_lcdSetCursor:	
  3167                           
  3168                           	psect	text10
  3169  0655                     __ptext10:	
  3170 ;; *************** function _lcdWriteControl *****************
  3171 ;; Defined at:
  3172 ;;		line 5 in file "LCD.c"
  3173 ;; Parameters:    Size  Location     Type
  3174 ;;  databyte        1    wreg     unsigned char 
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;  databyte        1    2[BANK0 ] unsigned char 
  3177 ;; Return value:  Size  Location     Type
  3178 ;;                  1    wreg      void 
  3179 ;; Registers used:
  3180 ;;		wreg
  3181 ;; Tracked objects:
  3182 ;;		On entry : 0/0
  3183 ;;		On exit  : 0/0
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3186 ;;      Params:         0       0       0       0       0
  3187 ;;      Locals:         0       1       0       0       0
  3188 ;;      Temps:          0       2       0       0       0
  3189 ;;      Totals:         0       3       0       0       0
  3190 ;;Total ram usage:        3 bytes
  3191 ;; Hardware stack levels used:    1
  3192 ;; Hardware stack levels required when called:    1
  3193 ;; This function calls:
  3194 ;;		Nothing
  3195 ;; This function is called by:
  3196 ;;		_PathTo
  3197 ;;		_main
  3198 ;;		_lcdSetCursor
  3199 ;;		_setupLCD
  3200 ;; This function uses a non-reentrant model
  3201 ;;
  3202                           
  3203                           
  3204                           ;psect for function _lcdWriteControl
  3205  0655                     _lcdWriteControl:	
  3206                           
  3207                           ;incstack = 0
  3208                           ; Regs used in _lcdWriteControl: [wreg]
  3209                           ;lcdWriteControl@databyte stored from wreg
  3210  0655  1283               	bcf	3,5	;RP0=0, select bank0
  3211  0656  1303               	bcf	3,6	;RP1=0, select bank0
  3212  0657  00CA               	movwf	lcdWriteControl@databyte
  3213                           
  3214                           ;LCD.c: 6: RE2 = 0;
  3215  0658  1109               	bcf	9,2	;volatile
  3216                           
  3217                           ;LCD.c: 7: RE1 = 0;
  3218  0659  1089               	bcf	9,1	;volatile
  3219                           
  3220                           ;LCD.c: 8: RE0 = 0;
  3221  065A  1009               	bcf	9,0	;volatile
  3222                           
  3223                           ;LCD.c: 9: PORTD = databyte;
  3224  065B  084A               	movf	lcdWriteControl@databyte,w
  3225  065C  0088               	movwf	8	;volatile
  3226                           
  3227                           ;LCD.c: 10: RE2 = 1;
  3228  065D  1509               	bsf	9,2	;volatile
  3229                           
  3230                           ;LCD.c: 11: RE2 = 0;
  3231  065E  1109               	bcf	9,2	;volatile
  3232                           
  3233                           ;LCD.c: 12: _delay((unsigned long)((2)*(20000000/4000.0)));
  3234  065F  300D               	movlw	13
  3235  0660  00C9               	movwf	??_lcdWriteControl+1
  3236  0661  30FB               	movlw	251
  3237  0662  00C8               	movwf	??_lcdWriteControl
  3238  0663                     u1897:	
  3239  0663  0BC8               	decfsz	??_lcdWriteControl,f
  3240  0664  2E63               	goto	u1897
  3241  0665  0BC9               	decfsz	??_lcdWriteControl+1,f
  3242  0666  2E63               	goto	u1897
  3243  0667  2E68               	nop2
  3244  0668  0008               	return
  3245  0669                     __end_of_lcdWriteControl:	
  3246                           
  3247                           	psect	text11
  3248  067C                     __ptext11:	
  3249 ;; *************** function ___bmul *****************
  3250 ;; Defined at:
  3251 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
  3252 ;; Parameters:    Size  Location     Type
  3253 ;;  multiplier      1    wreg     unsigned char 
  3254 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3255 ;; Auto vars:     Size  Location     Type
  3256 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3257 ;;  product         1    2[BANK0 ] unsigned char 
  3258 ;; Return value:  Size  Location     Type
  3259 ;;                  1    wreg      unsigned char 
  3260 ;; Registers used:
  3261 ;;		wreg, status,2, status,0
  3262 ;; Tracked objects:
  3263 ;;		On entry : 0/0
  3264 ;;		On exit  : 0/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3267 ;;      Params:         0       1       0       0       0
  3268 ;;      Locals:         0       2       0       0       0
  3269 ;;      Temps:          0       1       0       0       0
  3270 ;;      Totals:         0       4       0       0       0
  3271 ;;Total ram usage:        4 bytes
  3272 ;; Hardware stack levels used:    1
  3273 ;; Hardware stack levels required when called:    1
  3274 ;; This function calls:
  3275 ;;		Nothing
  3276 ;; This function is called by:
  3277 ;;		_PathTo
  3278 ;; This function uses a non-reentrant model
  3279 ;;
  3280                           
  3281                           
  3282                           ;psect for function ___bmul
  3283  067C                     ___bmul:	
  3284                           
  3285                           ;incstack = 0
  3286                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3287                           ;___bmul@multiplier stored from wreg
  3288  067C  1283               	bcf	3,5	;RP0=0, select bank0
  3289  067D  1303               	bcf	3,6	;RP1=0, select bank0
  3290  067E  00CB               	movwf	___bmul@multiplier
  3291  067F  01CA               	clrf	___bmul@product
  3292  0680                     l2348:	
  3293  0680  1C4B               	btfss	___bmul@multiplier,0
  3294  0681  2E86               	goto	l2352
  3295  0682  0848               	movf	___bmul@multiplicand,w
  3296  0683  00C9               	movwf	??___bmul
  3297  0684  0849               	movf	??___bmul,w
  3298  0685  07CA               	addwf	___bmul@product,f
  3299  0686                     l2352:	
  3300  0686  1003               	clrc
  3301  0687  0DC8               	rlf	___bmul@multiplicand,f
  3302  0688  1003               	clrc
  3303  0689  0CCB               	rrf	___bmul@multiplier,f
  3304  068A  084B               	movf	___bmul@multiplier,w
  3305  068B  1D03               	btfss	3,2
  3306  068C  2E80               	goto	l2348
  3307  068D  084A               	movf	___bmul@product,w
  3308  068E  0008               	return
  3309  068F                     __end_of___bmul:	
  3310                           
  3311                           	psect	text12
  3312  060A                     __ptext12:	
  3313 ;; *************** function _isr *****************
  3314 ;; Defined at:
  3315 ;;		line 276 in file "main.c"
  3316 ;; Parameters:    Size  Location     Type
  3317 ;;		None
  3318 ;; Auto vars:     Size  Location     Type
  3319 ;;		None
  3320 ;; Return value:  Size  Location     Type
  3321 ;;                  1    wreg      void 
  3322 ;; Registers used:
  3323 ;;		wreg, status,2, status,0
  3324 ;; Tracked objects:
  3325 ;;		On entry : 0/0
  3326 ;;		On exit  : 0/0
  3327 ;;		Unchanged: 0/0
  3328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3329 ;;      Params:         0       0       0       0       0
  3330 ;;      Locals:         0       0       0       0       0
  3331 ;;      Temps:          5       0       0       0       0
  3332 ;;      Totals:         5       0       0       0       0
  3333 ;;Total ram usage:        5 bytes
  3334 ;; Hardware stack levels used:    1
  3335 ;; This function calls:
  3336 ;;		Nothing
  3337 ;; This function is called by:
  3338 ;;		Interrupt level 1
  3339 ;; This function uses a non-reentrant model
  3340 ;;
  3341                           
  3342                           
  3343                           ;psect for function _isr
  3344  060A                     _isr:	
  3345                           
  3346                           ;main.c: 277: if(TMR0IF){
  3347  060A  1D0B               	btfss	11,2	;volatile
  3348  060B  2E1B               	goto	i1l220
  3349                           
  3350                           ;main.c: 278: TMR0IF = 0;
  3351  060C  110B               	bcf	11,2	;volatile
  3352                           
  3353                           ;main.c: 279: TMR0 = 100;
  3354  060D  3064               	movlw	100
  3355  060E  0081               	movwf	1	;volatile
  3356                           
  3357                           ;main.c: 280: time_count++;
  3358  060F  3001               	movlw	1
  3359  0610  07A8               	addwf	_time_count,f	;volatile
  3360  0611  1803               	skipnc
  3361  0612  0AA9               	incf	_time_count+1,f	;volatile
  3362  0613  3000               	movlw	0
  3363  0614  07A9               	addwf	_time_count+1,f	;volatile
  3364                           
  3365                           ;main.c: 282: if (!RB0 == 1)
  3366  0615  1806               	btfsc	6,0	;volatile
  3367  0616  2E1B               	goto	i1l220
  3368                           
  3369                           ;main.c: 283: PB8Counter++;
  3370  0617  3001               	movlw	1
  3371  0618  00F5               	movwf	??_isr
  3372  0619  0875               	movf	??_isr,w
  3373  061A  07AC               	addwf	_PB8Counter,f
  3374  061B                     i1l220:	
  3375  061B  0879               	movf	??_isr+4,w
  3376  061C  00FF               	movwf	127
  3377  061D  0878               	movf	??_isr+3,w
  3378  061E  008A               	movwf	10
  3379  061F  0877               	movf	??_isr+2,w
  3380  0620  0084               	movwf	4
  3381  0621  0E76               	swapf	(??_isr+1)^(0+-128),w
  3382  0622  0083               	movwf	3
  3383  0623  0EFE               	swapf	126,f
  3384  0624  0E7E               	swapf	126,w
  3385  0625  0009               	retfie
  3386  0626                     __end_of_isr:	
  3387  007E                     btemp	set	126	;btemp
  3388  007E                     wtemp	set	126
  3389  007E                     wtemp0	set	126
  3390  0080                     wtemp1	set	128
  3391  0082                     wtemp2	set	130
  3392  0084                     wtemp3	set	132
  3393  0086                     wtemp4	set	134
  3394  0088                     wtemp5	set	136
  3395  007F                     wtemp6	set	127
  3396  007E                     ttemp	set	126
  3397  007E                     ttemp0	set	126
  3398  0081                     ttemp1	set	129
  3399  0084                     ttemp2	set	132
  3400  0087                     ttemp3	set	135
  3401  007F                     ttemp4	set	127
  3402  007E                     ltemp	set	126
  3403  007E                     ltemp0	set	126
  3404  0082                     ltemp1	set	130
  3405  0086                     ltemp2	set	134
  3406  0080                     ltemp3	set	128
  3407                           
  3408                           	psect	intentry
  3409  0004                     __pintentry:	
  3410                           ;incstack = 0
  3411                           ; Regs used in _isr: [wreg+status,2+status,0]
  3412                           
  3413  0004                     interrupt_function:	
  3414  007E                     saved_w	set	btemp
  3415  0004  00FE               	movwf	btemp
  3416  0005  0E03               	swapf	3,w
  3417  0006  00F6               	movwf	??_isr+1
  3418  0007  0804               	movf	4,w
  3419  0008  00F7               	movwf	??_isr+2
  3420  0009  080A               	movf	10,w
  3421  000A  00F8               	movwf	??_isr+3
  3422  000B  1283               	bcf	3,5	;RP0=0, select bank0
  3423  000C  1303               	bcf	3,6	;RP1=0, select bank0
  3424  000D  087F               	movf	btemp+1,w
  3425  000E  00F9               	movwf	??_isr+4
  3426  000F  120A  118A  2E0A   	ljmp	_isr


Data Sizes:
    Strings     6
    Constant    0
    Data        220
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     31      75
    BANK1            80      0      40
    BANK3            96      0      96
    BANK2            96      0      80

Pointer List with Targets:

    lcdWriteString@s	PTR unsigned char  size(1) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_PathTo
    _setupLCD->_lcdWriteControl
    _lcdWriteString->_lcdWriteData
    _PathTo->_lcdWriteToDigitBCD
    _lcdWriteToDigitBCD->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    3352
                                             27 BANK0      4     4      0
                             _PathTo
                       _lcdSetCursor
                    _lcdWriteControl
                       _lcdWriteData
                     _lcdWriteString
                 _lcdWriteToDigitBCD
                           _ser_init
                           _setupADC
                           _setupLCD
                           _setupSPI
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      31
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdWriteString                                       2     2      0     156
                                              3 BANK0      2     2      0
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (1) _PathTo                                              12    11      1    2085
                                             15 BANK0     12    11      1
                             ___bmul
                       _lcdSetCursor
                    _lcdWriteControl
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (1) _lcdWriteToDigitBCD                                  12    10      2     792
                                              3 BANK0     12    10      2
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (2) _lcdWriteData                                         3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcdSetCursor                                         1     1      0      65
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     906
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PathTo
     ___bmul
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteControl
     _lcdWriteToDigitBCD
       _lcdWriteData
   _lcdSetCursor
     _lcdWriteControl
   _lcdWriteControl
   _lcdWriteData
   _lcdWriteString
     _lcdWriteData
   _lcdWriteToDigitBCD
     _lcdWriteData
   _ser_init
   _setupADC
   _setupLCD
     _lcdWriteControl
   _setupSPI

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      60       9      100.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      50      11       83.3%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      28       7       50.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1F      4B       5       93.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     12D      12        0.0%
ABS                  0      0     12D       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Sep 29 10:55:54 2016

                             _a 0067                               _c 002E                               _r 0035  
                             _x 006A                               _y 0042                               pc 0002  
                ___bmul@product 004A                     __CFG_CP$OFF 0000                              _GO 00FA  
                            _up 003C                              fsr 0004                             l207 0383  
                           l170 019D                             l165 0155                             l167 0158  
                           l168 015B                             l169 015E                             l393 04D8  
                           _GIE 005F                             _RB0 0030                             _RE0 0048  
                           _RE1 0049                             _RE2 004A                    __CFG_CPD$OFF 0000  
                           _isr 060A                             fsr0 0004                             indf 0000  
                  __CFG_FOSC$HS 0000                  ??_lcdWriteData 0048                    __CFG_LVP$OFF 0000  
                          l2320 0480                            l2322 0488                            l2314 045C  
                          l2332 04AC                            l2316 0472                            l2500 0295  
                          l2342 04CB                            l2326 0496                            l2510 02BB  
                          l2430 0190                            l2414 0161                            l2352 0686  
                          l2328 049E                            l2512 02D0                            l2520 031D  
                          l2504 029D                            l2416 016F                            l2338 04BE  
                          l2514 02E5                            l2434 0196                            l2426 018B  
                          l2348 0680                            l2532 0332                            l2508 02A6  
                          l2460 01E5                            l2372 0067                            l2518 030F  
                          l2470 0229                            l2454 01B8                            l2382 009F  
                          l2366 0062                            l2630 05ED                            l2544 0351  
                          l2464 01EA                            l2538 0337                            l2466 01FF  
                          l2474 0253                            l2378 0097                            l2572 0374  
                          l2548 0359                            l2468 0214                            l2476 0261  
                          l2566 036A                            l2558 0363                            l2494 027B  
                          l2670 042D                            l2488 0276                            l2578 037F  
                          l2666 03E4                            l2668 0419                            ?_isr 0075  
                   _squareWalls 0110                            STR_1 06B5                            STR_2 06B8  
                          u1605 01BB                            u1615 01CE                            u1735 033A  
                          u1495 00BF                            u1665 027E                            u1847 03BC  
                          u1857 0436                            u1867 0446                            _PEIE 005E  
                          u1877 0652                            u1887 0677                            u1897 0663  
                          _RCIF 0065                            _TMR0 0001                            _TRMT 04C1  
                  __CFG_WRT$OFF 0000                            _radH 0036                            _radL 0037  
                          _main 038A                            _left 0032                            _down 002F  
                          _path 0190                            btemp 007E                            ltemp 007E  
                          start 0012                            ttemp 007E                            wtemp 007E  
             ___bmul@multiplier 004B                           ??_isr 0075                      PathTo@loop 0061  
                         ?_main 0075                   __CFG_WDTE$OFF 0000                           i1l220 061B  
                         _RCREG 001A                           _RCSTA 0018                           _SPBRG 0099  
                         _PORTA 0005                           _PORTC 0007                           _PORTD 0008  
                         _PORTE 0009                           _TRISA 0085                           _TRISB 0086  
                         _TRISC 0087                           _TRISD 0088                           _TRISE 0089  
                         _SSPIF 0063                           _TXREG 0019                           _TXSTA 0098  
                         _angle 0070      __end_of_lcdWriteToDigitBCD 04E9                           _right 0039  
                         _x_int 003D                           _y_int 0043                           main@n 0066  
                __CFG_BOREN$OFF 0000                           pclath 000A                           ltemp0 007E  
                         ltemp1 0082                           ltemp2 0086                           ltemp3 0080  
                    _LeftSpeedH 002A                      _LeftSpeedL 002B                           ttemp0 007E  
                         ttemp1 0081                           ttemp2 0084                           ttemp3 0087  
                         ttemp4 007F                           status 0003                           wtemp0 007E  
                         wtemp1 0080                           wtemp2 0082                           wtemp3 0084  
                         wtemp4 0086                           wtemp5 0088                           wtemp6 007F  
               __initialization 0015                    __end_of_main 044E        __size_of_lcdWriteControl 0014  
                        ??_main 0063            __end_of_lcdSetCursor 06C4                ??_lcdWriteString 004B  
                        _ADCON0 001F                          _ADCON1 009F                          _ADRESH 001E  
                        _ADRESL 009E                          _TMR0IE 005D                          _TMR0IF 005A  
                        _SSPCON 0014                          _SSPBUF 0013                  __CFG_PWRTE$OFF 0000  
                        _PathTo 005A                          _adcRAW 0024                          ___bmul 067C  
          __end_of_lcdWriteData 067C                 lcdWriteString@s 004C                          _speedH 003A  
                        _speedL 003B                          _x_path 003F                          _y_path 0045  
                        _x_test 0041                          _y_test 0047                __end_of_ser_init 06AF  
              __end_of_setupADC 0655                __end_of_setupLCD 05C2                __end_of_setupSPI 063F  
                        saved_w 007E         __end_of__initialization 0056             ___bmul@multiplicand 0048  
                __pcstackCOMMON 0075                    __pidataBANK0 06CC                    __pidataBANK1 05C2  
                  __pidataBANK2 0549                    __pidataBANK3 04E9                  PathTo@x_target 005F  
                PathTo@y_target 0057               ??_lcdWriteControl 0048                      __pbssBANK0 0020  
             _pathCountShortest 0069             lcdSetCursor@address 004B                         ?_PathTo 0057  
                    __pmaintext 038A                         ?___bmul 0048                      __pintentry 0004  
         __size_of_lcdSetCursor 0009                     _RightSpeedH 0072                     _RightSpeedL 002D  
                       _SSPSTAT 0094                      __stringtab 06AF           __size_of_lcdWriteData 0013  
                  _lcdSetCursor 06BB              _lcdWriteToDigitBCD 044E                       ?_ser_init 0075  
               __size_of_PathTo 0330                       ?_setupADC 0075                       ?_setupLCD 0075  
                     ?_setupSPI 0075                 __size_of___bmul 0013             ?_lcdWriteToDigitBCD 004B  
                       __ptext1 0626                         __ptext2 0599                         __ptext3 063F  
                       __ptext4 06A0                         __ptext5 05EA                         __ptext6 005A  
                       __ptext7 044E                         __ptext8 0669                         __ptext9 06BB  
                  __size_of_isr 001C                         _lowByte 0073                _orientation_path 0033  
                       clrloop0 06C5                    _lcdWriteData 0669            end_of_initialization 0056  
          ??_lcdWriteToDigitBCD 004D                      _reset_flag 0038                      ??_ser_init 0048  
                    ??_setupADC 0048                      ??_setupLCD 004B                      ??_setupSPI 0048  
                    _time_count 0028                  __end_of_PathTo 038A                       PathTo@sum 0060  
                __end_of___bmul 068F                 _lcdWriteControl 0655        _intersection_Orientation 0031  
           start_initialization 0015                     __end_of_isr 0626         __size_of_lcdWriteString 0020  
                      ??_PathTo 0058                        ??___bmul 0049                      init_fetch0 068F  
                   __pdataBANK0 0067                     __pdataBANK1 00A0                     __pdataBANK2 0110  
                   __pdataBANK3 0190                     __pbssCOMMON 0070                       ___latbits 0002  
                 __pcstackBANK0 0048         __end_of_lcdWriteControl 0669               __size_of_ser_init 000F  
             __size_of_setupADC 0016               __size_of_setupLCD 0029               __size_of_setupSPI 0019  
                     __pstrings 06AF                       _pathCount 0034         lcdWriteControl@databyte 004A  
             interrupt_function 0004                       clear_ram0 06C4                   _VelocityRight 0022  
                   __stringbase 06B4            lcdWriteData@databyte 004A     __size_of_lcdWriteToDigitBCD 009B  
                _lcdWriteString 05EA                ?_lcdWriteControl 0075                 _mazeGridDefault 00B4  
            __end_of__stringtab 06B5  lcdWriteToDigitBCD@TenThouDigit 0053                        __ptext10 0655  
                      __ptext11 067C                        __ptext12 060A                        _highByte 0074  
        __end_of_lcdWriteString 060A                        _distance 0026                        _intFound 0030  
                      _mazeGrid 00A0                   __size_of_main 00C4                        _ser_init 06A0  
                      _setupADC 063F                        _setupLCD 0599                        _setupSPI 0626  
   lcdWriteToDigitBCD@HunsDigit 004F                        _x_target 0040                      _PB8Counter 002C  
                      _x_origin 003E                        _y_target 0046                        _y_origin 0044  
                  _VelocityLeft 0020     lcdWriteToDigitBCD@OnesDigit 0055     lcdWriteToDigitBCD@TensDigit 004D  
   lcdWriteToDigitBCD@ThouDigit 0051                        init_ram0 0693                 ?_lcdWriteString 0075  
                      intlevel1 0000                   ?_lcdSetCursor 0075                       stringcode 06AF  
                   _orientation 0068                      _OPTION_REG 0081                   _shortest_path 01C0  
                      stringdir 06AF                        stringtab 06AF                   ?_lcdWriteData 0075  
        lcdWriteToDigitBCD@data 004B                  ??_lcdSetCursor 004B  
