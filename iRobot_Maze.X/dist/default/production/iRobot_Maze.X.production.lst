

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Tue Oct 04 15:48:41 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	intentry,global,class=CODE,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     	;# 
    45  0001                     	;# 
    46  0002                     	;# 
    47  0003                     	;# 
    48  0004                     	;# 
    49  0005                     	;# 
    50  0006                     	;# 
    51  0007                     	;# 
    52  0008                     	;# 
    53  0009                     	;# 
    54  000A                     	;# 
    55  000B                     	;# 
    56  000C                     	;# 
    57  000D                     	;# 
    58  000E                     	;# 
    59  000E                     	;# 
    60  000F                     	;# 
    61  0010                     	;# 
    62  0011                     	;# 
    63  0012                     	;# 
    64  0013                     	;# 
    65  0014                     	;# 
    66  0015                     	;# 
    67  0015                     	;# 
    68  0016                     	;# 
    69  0017                     	;# 
    70  0018                     	;# 
    71  0019                     	;# 
    72  001A                     	;# 
    73  001B                     	;# 
    74  001B                     	;# 
    75  001C                     	;# 
    76  001D                     	;# 
    77  001E                     	;# 
    78  001F                     	;# 
    79  0081                     	;# 
    80  0085                     	;# 
    81  0086                     	;# 
    82  0087                     	;# 
    83  0088                     	;# 
    84  0089                     	;# 
    85  008C                     	;# 
    86  008D                     	;# 
    87  008E                     	;# 
    88  0091                     	;# 
    89  0092                     	;# 
    90  0093                     	;# 
    91  0094                     	;# 
    92  0098                     	;# 
    93  0099                     	;# 
    94  009C                     	;# 
    95  009D                     	;# 
    96  009E                     	;# 
    97  009F                     	;# 
    98  010C                     	;# 
    99  010D                     	;# 
   100  010E                     	;# 
   101  010F                     	;# 
   102  018C                     	;# 
   103  018D                     	;# 
   104  0000                     	;# 
   105  0001                     	;# 
   106  0002                     	;# 
   107  0003                     	;# 
   108  0004                     	;# 
   109  0005                     	;# 
   110  0006                     	;# 
   111  0007                     	;# 
   112  0008                     	;# 
   113  0009                     	;# 
   114  000A                     	;# 
   115  000B                     	;# 
   116  000C                     	;# 
   117  000D                     	;# 
   118  000E                     	;# 
   119  000E                     	;# 
   120  000F                     	;# 
   121  0010                     	;# 
   122  0011                     	;# 
   123  0012                     	;# 
   124  0013                     	;# 
   125  0014                     	;# 
   126  0015                     	;# 
   127  0015                     	;# 
   128  0016                     	;# 
   129  0017                     	;# 
   130  0018                     	;# 
   131  0019                     	;# 
   132  001A                     	;# 
   133  001B                     	;# 
   134  001B                     	;# 
   135  001C                     	;# 
   136  001D                     	;# 
   137  001E                     	;# 
   138  001F                     	;# 
   139  0081                     	;# 
   140  0085                     	;# 
   141  0086                     	;# 
   142  0087                     	;# 
   143  0088                     	;# 
   144  0089                     	;# 
   145  008C                     	;# 
   146  008D                     	;# 
   147  008E                     	;# 
   148  0091                     	;# 
   149  0092                     	;# 
   150  0093                     	;# 
   151  0094                     	;# 
   152  0098                     	;# 
   153  0099                     	;# 
   154  009C                     	;# 
   155  009D                     	;# 
   156  009E                     	;# 
   157  009F                     	;# 
   158  010C                     	;# 
   159  010D                     	;# 
   160  010E                     	;# 
   161  010F                     	;# 
   162  018C                     	;# 
   163  018D                     	;# 
   164  0000                     	;# 
   165  0001                     	;# 
   166  0002                     	;# 
   167  0003                     	;# 
   168  0004                     	;# 
   169  0005                     	;# 
   170  0006                     	;# 
   171  0007                     	;# 
   172  0008                     	;# 
   173  0009                     	;# 
   174  000A                     	;# 
   175  000B                     	;# 
   176  000C                     	;# 
   177  000D                     	;# 
   178  000E                     	;# 
   179  000E                     	;# 
   180  000F                     	;# 
   181  0010                     	;# 
   182  0011                     	;# 
   183  0012                     	;# 
   184  0013                     	;# 
   185  0014                     	;# 
   186  0015                     	;# 
   187  0015                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001B                     	;# 
   195  001C                     	;# 
   196  001D                     	;# 
   197  001E                     	;# 
   198  001F                     	;# 
   199  0081                     	;# 
   200  0085                     	;# 
   201  0086                     	;# 
   202  0087                     	;# 
   203  0088                     	;# 
   204  0089                     	;# 
   205  008C                     	;# 
   206  008D                     	;# 
   207  008E                     	;# 
   208  0091                     	;# 
   209  0092                     	;# 
   210  0093                     	;# 
   211  0094                     	;# 
   212  0098                     	;# 
   213  0099                     	;# 
   214  009C                     	;# 
   215  009D                     	;# 
   216  009E                     	;# 
   217  009F                     	;# 
   218  010C                     	;# 
   219  010D                     	;# 
   220  010E                     	;# 
   221  010F                     	;# 
   222  018C                     	;# 
   223  018D                     	;# 
   224  0000                     	;# 
   225  0001                     	;# 
   226  0002                     	;# 
   227  0003                     	;# 
   228  0004                     	;# 
   229  0005                     	;# 
   230  0006                     	;# 
   231  0007                     	;# 
   232  0008                     	;# 
   233  0009                     	;# 
   234  000A                     	;# 
   235  000B                     	;# 
   236  000C                     	;# 
   237  000D                     	;# 
   238  000E                     	;# 
   239  000E                     	;# 
   240  000F                     	;# 
   241  0010                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0013                     	;# 
   245  0014                     	;# 
   246  0015                     	;# 
   247  0015                     	;# 
   248  0016                     	;# 
   249  0017                     	;# 
   250  0018                     	;# 
   251  0019                     	;# 
   252  001A                     	;# 
   253  001B                     	;# 
   254  001B                     	;# 
   255  001C                     	;# 
   256  001D                     	;# 
   257  001E                     	;# 
   258  001F                     	;# 
   259  0081                     	;# 
   260  0085                     	;# 
   261  0086                     	;# 
   262  0087                     	;# 
   263  0088                     	;# 
   264  0089                     	;# 
   265  008C                     	;# 
   266  008D                     	;# 
   267  008E                     	;# 
   268  0091                     	;# 
   269  0092                     	;# 
   270  0093                     	;# 
   271  0094                     	;# 
   272  0098                     	;# 
   273  0099                     	;# 
   274  009C                     	;# 
   275  009D                     	;# 
   276  009E                     	;# 
   277  009F                     	;# 
   278  010C                     	;# 
   279  010D                     	;# 
   280  010E                     	;# 
   281  010F                     	;# 
   282  018C                     	;# 
   283  018D                     	;# 
   284  0000                     	;# 
   285  0001                     	;# 
   286  0002                     	;# 
   287  0003                     	;# 
   288  0004                     	;# 
   289  0005                     	;# 
   290  0006                     	;# 
   291  0007                     	;# 
   292  0008                     	;# 
   293  0009                     	;# 
   294  000A                     	;# 
   295  000B                     	;# 
   296  000C                     	;# 
   297  000D                     	;# 
   298  000E                     	;# 
   299  000E                     	;# 
   300  000F                     	;# 
   301  0010                     	;# 
   302  0011                     	;# 
   303  0012                     	;# 
   304  0013                     	;# 
   305  0014                     	;# 
   306  0015                     	;# 
   307  0015                     	;# 
   308  0016                     	;# 
   309  0017                     	;# 
   310  0018                     	;# 
   311  0019                     	;# 
   312  001A                     	;# 
   313  001B                     	;# 
   314  001B                     	;# 
   315  001C                     	;# 
   316  001D                     	;# 
   317  001E                     	;# 
   318  001F                     	;# 
   319  0081                     	;# 
   320  0085                     	;# 
   321  0086                     	;# 
   322  0087                     	;# 
   323  0088                     	;# 
   324  0089                     	;# 
   325  008C                     	;# 
   326  008D                     	;# 
   327  008E                     	;# 
   328  0091                     	;# 
   329  0092                     	;# 
   330  0093                     	;# 
   331  0094                     	;# 
   332  0098                     	;# 
   333  0099                     	;# 
   334  009C                     	;# 
   335  009D                     	;# 
   336  009E                     	;# 
   337  009F                     	;# 
   338  010C                     	;# 
   339  010D                     	;# 
   340  010E                     	;# 
   341  010F                     	;# 
   342  018C                     	;# 
   343  018D                     	;# 
   344  0000                     	;# 
   345  0001                     	;# 
   346  0002                     	;# 
   347  0003                     	;# 
   348  0004                     	;# 
   349  0005                     	;# 
   350  0006                     	;# 
   351  0007                     	;# 
   352  0008                     	;# 
   353  0009                     	;# 
   354  000A                     	;# 
   355  000B                     	;# 
   356  000C                     	;# 
   357  000D                     	;# 
   358  000E                     	;# 
   359  000E                     	;# 
   360  000F                     	;# 
   361  0010                     	;# 
   362  0011                     	;# 
   363  0012                     	;# 
   364  0013                     	;# 
   365  0014                     	;# 
   366  0015                     	;# 
   367  0015                     	;# 
   368  0016                     	;# 
   369  0017                     	;# 
   370  0018                     	;# 
   371  0019                     	;# 
   372  001A                     	;# 
   373  001B                     	;# 
   374  001B                     	;# 
   375  001C                     	;# 
   376  001D                     	;# 
   377  001E                     	;# 
   378  001F                     	;# 
   379  0081                     	;# 
   380  0085                     	;# 
   381  0086                     	;# 
   382  0087                     	;# 
   383  0088                     	;# 
   384  0089                     	;# 
   385  008C                     	;# 
   386  008D                     	;# 
   387  008E                     	;# 
   388  0091                     	;# 
   389  0092                     	;# 
   390  0093                     	;# 
   391  0094                     	;# 
   392  0098                     	;# 
   393  0099                     	;# 
   394  009C                     	;# 
   395  009D                     	;# 
   396  009E                     	;# 
   397  009F                     	;# 
   398  010C                     	;# 
   399  010D                     	;# 
   400  010E                     	;# 
   401  010F                     	;# 
   402  018C                     	;# 
   403  018D                     	;# 
   404                           
   405                           	psect	idataBANK0
   406  0F66                     __pidataBANK0:	
   407                           
   408                           ;initializer for _mazeGrid
   409  0F66  340C               	retlw	12
   410  0F67  3407               	retlw	7
   411  0F68  340E               	retlw	14
   412  0F69  340D               	retlw	13
   413  0F6A  3406               	retlw	6
   414  0F6B  3409               	retlw	9
   415  0F6C  3405               	retlw	5
   416  0F6D  3400               	retlw	0
   417  0F6E  3405               	retlw	5
   418  0F6F  3402               	retlw	2
   419  0F70  340C               	retlw	12
   420  0F71  3406               	retlw	6
   421  0F72  340A               	retlw	10
   422  0F73  340E               	retlw	14
   423  0F74  340A               	retlw	10
   424  0F75  340B               	retlw	11
   425  0F76  3409               	retlw	9
   426  0F77  3401               	retlw	1
   427  0F78  3401               	retlw	1
   428  0F79  3403               	retlw	3
   429                           
   430                           ;initializer for _orientation
   431  0F7A  3403               	retlw	3
   432                           
   433                           ;initializer for _pathCountShortest
   434  0F7B  3414               	retlw	20
   435                           
   436                           ;initializer for _x
   437  0F7C  3401               	retlw	1
   438                           
   439                           	psect	idataBANK1
   440  0F3C                     __pidataBANK1:	
   441                           
   442                           ;initializer for _mazeGridDefault
   443  0F3C  340C               	retlw	12
   444  0F3D  3407               	retlw	7
   445  0F3E  340E               	retlw	14
   446  0F3F  340D               	retlw	13
   447  0F40  3406               	retlw	6
   448  0F41  3409               	retlw	9
   449  0F42  3405               	retlw	5
   450  0F43  3400               	retlw	0
   451  0F44  3405               	retlw	5
   452  0F45  3402               	retlw	2
   453  0F46  340C               	retlw	12
   454  0F47  3406               	retlw	6
   455  0F48  340A               	retlw	10
   456  0F49  340E               	retlw	14
   457  0F4A  340A               	retlw	10
   458  0F4B  340B               	retlw	11
   459  0F4C  3409               	retlw	9
   460  0F4D  3401               	retlw	1
   461  0F4E  3401               	retlw	1
   462  0F4F  3403               	retlw	3
   463                           
   464                           	psect	idataBANK3
   465  0751                     __pidataBANK3:	
   466                           
   467                           ;initializer for _gridWalls
   468  0751  3400               	retlw	0
   469  0752  3400               	retlw	0
   470  0753  3400               	retlw	0
   471  0754  3400               	retlw	0
   472  0755  3400               	retlw	0
   473  0756  3400               	retlw	0
   474  0757  3400               	retlw	0
   475  0758  3400               	retlw	0
   476  0759  3401               	retlw	1
   477  075A  3401               	retlw	1
   478  075B  3401               	retlw	1
   479  075C  3401               	retlw	1
   480  075D  3401               	retlw	1
   481  075E  3401               	retlw	1
   482  075F  3401               	retlw	1
   483  0760  3401               	retlw	1
   484  0761  3400               	retlw	0
   485  0762  3400               	retlw	0
   486  0763  3400               	retlw	0
   487  0764  3400               	retlw	0
   488  0765  3401               	retlw	1
   489  0766  3401               	retlw	1
   490  0767  3401               	retlw	1
   491  0768  3401               	retlw	1
   492  0769  3400               	retlw	0
   493  076A  3400               	retlw	0
   494  076B  3400               	retlw	0
   495  076C  3400               	retlw	0
   496  076D  3401               	retlw	1
   497  076E  3401               	retlw	1
   498  076F  3401               	retlw	1
   499  0770  3401               	retlw	1
   500  0771  3400               	retlw	0
   501  0772  3400               	retlw	0
   502  0773  3401               	retlw	1
   503  0774  3401               	retlw	1
   504  0775  3400               	retlw	0
   505  0776  3400               	retlw	0
   506  0777  3401               	retlw	1
   507  0778  3401               	retlw	1
   508  0779  3400               	retlw	0
   509  077A  3400               	retlw	0
   510  077B  3401               	retlw	1
   511  077C  3401               	retlw	1
   512  077D  3400               	retlw	0
   513  077E  3400               	retlw	0
   514  077F  3401               	retlw	1
   515  0780  3401               	retlw	1
   516  0781  3400               	retlw	0
   517  0782  3401               	retlw	1
   518  0783  3400               	retlw	0
   519  0784  3401               	retlw	1
   520  0785  3400               	retlw	0
   521  0786  3401               	retlw	1
   522  0787  3400               	retlw	0
   523  0788  3401               	retlw	1
   524  0789  3400               	retlw	0
   525  078A  3401               	retlw	1
   526  078B  3400               	retlw	0
   527  078C  3401               	retlw	1
   528  078D  3400               	retlw	0
   529  078E  3401               	retlw	1
   530  078F  3400               	retlw	0
   531  0790  3401               	retlw	1
   532  001F                     _ADCON0	set	31
   533  0005                     _PORTA	set	5
   534  0006                     _PORTB	set	6
   535  0007                     _PORTC	set	7
   536  0008                     _PORTD	set	8
   537  0009                     _PORTE	set	9
   538  001A                     _RCREG	set	26
   539  0018                     _RCSTA	set	24
   540  0013                     _SSPBUF	set	19
   541  0014                     _SSPCON	set	20
   542  0001                     _TMR0	set	1
   543  0019                     _TXREG	set	25
   544  001E                     _ADRESH	set	30
   545  005F                     _GIE	set	95
   546  00FA                     _GO	set	250
   547  005E                     _PEIE	set	94
   548  0030                     _RB0	set	48
   549  0031                     _RB1	set	49
   550  0065                     _RCIF	set	101
   551  0048                     _RE0	set	72
   552  0049                     _RE1	set	73
   553  004A                     _RE2	set	74
   554  0063                     _SSPIF	set	99
   555  005D                     _TMR0IE	set	93
   556  005A                     _TMR0IF	set	90
   557  009F                     _ADCON1	set	159
   558  009E                     _ADRESL	set	158
   559  0081                     _OPTION_REG	set	129
   560  0099                     _SPBRG	set	153
   561  0094                     _SSPSTAT	set	148
   562  0085                     _TRISA	set	133
   563  0086                     _TRISB	set	134
   564  0087                     _TRISC	set	135
   565  0088                     _TRISD	set	136
   566  0089                     _TRISE	set	137
   567  0098                     _TXSTA	set	152
   568  04C1                     _TRMT	set	1217
   569                           
   570                           	psect	strings
   571  0800                     __pstrings:	
   572  0800                     stringtab:	
   573  0800                     __stringtab:	
   574  0800                     stringcode:	
   575                           ;	String table - string pointers are 1 byte each
   576                           
   577  0800                     stringdir:	
   578  0800  3008               	movlw	high stringdir
   579  0801  008A               	movwf	10
   580  0802  0804               	movf	4,w
   581  0803  0A84               	incf	4,f
   582  0804  0782               	addwf	2,f
   583  0805                     __stringbase:	
   584  0805  3400               	retlw	0
   585  0806                     __end_of__stringtab:	
   586  0806                     STR_1:	
   587  0806  3457               	retlw	87	;'W'
   588  0807  346F               	retlw	111	;'o'
   589  0808  3472               	retlw	114	;'r'
   590  0809  346B               	retlw	107	;'k'
   591  080A  3469               	retlw	105	;'i'
   592  080B  346E               	retlw	110	;'n'
   593  080C  3467               	retlw	103	;'g'
   594  080D  342E               	retlw	46	;'.'
   595  080E  342E               	retlw	46	;'.'
   596  080F  342E               	retlw	46	;'.'
   597  0810  3400               	retlw	0
   598                           
   599                           ; #config settings
   600  0000                     
   601                           	psect	cinit
   602  0015                     start_initialization:	
   603  0015                     __initialization:	
   604                           
   605                           ; Initialize objects allocated to BANK3
   606  0015  1783               	bsf	3,7	;select IRP bank2
   607  0016  30D0               	movlw	low (__pdataBANK3+64)
   608  0017  00FD               	movwf	btemp+-1
   609  0018  3007               	movlw	high __pidataBANK3
   610  0019  00FE               	movwf	btemp
   611  001A  3051               	movlw	low __pidataBANK3
   612  001B  00FF               	movwf	btemp+1
   613  001C  3090               	movlw	low __pdataBANK3
   614  001D  0084               	movwf	4
   615  001E  120A  158A  26F5  120A  118A  	fcall	init_ram0
   616                           
   617                           ; Initialize objects allocated to BANK1
   618  0023  1383               	bcf	3,7	;select IRP bank0
   619  0024  30D4               	movlw	low (__pdataBANK1+20)
   620  0025  00FD               	movwf	btemp+-1
   621  0026  300F               	movlw	high __pidataBANK1
   622  0027  00FE               	movwf	btemp
   623  0028  303C               	movlw	low __pidataBANK1
   624  0029  00FF               	movwf	btemp+1
   625  002A  30C0               	movlw	low __pdataBANK1
   626  002B  0084               	movwf	4
   627  002C  120A  158A  26F5  120A  118A  	fcall	init_ram0
   628                           
   629                           ; Initialize objects allocated to BANK0
   630  0031  3057               	movlw	low (__pdataBANK0+23)
   631  0032  00FD               	movwf	btemp+-1
   632  0033  300F               	movlw	high __pidataBANK0
   633  0034  00FE               	movwf	btemp
   634  0035  3066               	movlw	low __pidataBANK0
   635  0036  00FF               	movwf	btemp+1
   636  0037  3040               	movlw	low __pdataBANK0
   637  0038  0084               	movwf	4
   638  0039  120A  158A  26F5  120A  118A  	fcall	init_ram0
   639                           
   640                           ; Clear objects allocated to BANK3
   641  003E  1783               	bsf	3,7	;select IRP bank2
   642  003F  30D0               	movlw	low __pbssBANK3
   643  0040  0084               	movwf	4
   644  0041  30F0               	movlw	low (__pbssBANK3+32)
   645  0042  120A  118A  27F8  120A  118A  	fcall	clear_ram0
   646                           
   647                           ; Clear objects allocated to BANK1
   648  0047  1383               	bcf	3,7	;select IRP bank0
   649  0048  30A0               	movlw	low __pbssBANK1
   650  0049  0084               	movwf	4
   651  004A  30C0               	movlw	low (__pbssBANK1+32)
   652  004B  120A  118A  27F8  120A  118A  	fcall	clear_ram0
   653                           
   654                           ; Clear objects allocated to BANK0
   655  0050  3020               	movlw	low __pbssBANK0
   656  0051  0084               	movwf	4
   657  0052  3040               	movlw	low (__pbssBANK0+32)
   658  0053  120A  118A  27F8   	fcall	clear_ram0
   659                           
   660                           ; Clear objects allocated to COMMON
   661  0056  01F6               	clrf	__pbssCOMMON& (0+127)
   662  0057  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   663  0058  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   664  0059  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   665                           
   666                           ; Clear objects allocated to BITCOMMON
   667  005A  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   668  005B                     end_of_initialization:	
   669                           ;End of C runtime variable initialization code
   670                           
   671  005B                     __end_of__initialization:	
   672  005B  0183               	clrf	3
   673  005C  120A  118A  2DB7   	ljmp	_main	;jump to C main() function
   674                           
   675                           	psect	bitbssCOMMON
   676  0380                     __pbitbssCOMMON:	
   677  0380                     _IR_Wall:	
   678  0380                     	ds	1
   679  0381                     _down:	
   680  0381                     	ds	1
   681  0382                     _left:	
   682  0382                     	ds	1
   683  0383                     _reset_flag:	
   684  0383                     	ds	1
   685  0384                     _right:	
   686  0384                     	ds	1
   687  0385                     _up:	
   688  0385                     	ds	1
   689                           
   690                           	psect	bssCOMMON
   691  0076                     __pbssCOMMON:	
   692  0076                     _adcRAW:	
   693  0076                     	ds	2
   694  0078                     _angle:	
   695  0078                     	ds	2
   696                           
   697                           	psect	bssBANK0
   698  0020                     __pbssBANK0:	
   699  0020                     _VelocityLeft:	
   700  0020                     	ds	2
   701  0022                     _VelocityRight:	
   702  0022                     	ds	2
   703  0024                     _distance:	
   704  0024                     	ds	2
   705  0026                     _time_count:	
   706  0026                     	ds	2
   707  0028                     _LeftSpeedH:	
   708  0028                     	ds	1
   709  0029                     _LeftSpeedL:	
   710  0029                     	ds	1
   711  002A                     _PB7Counter:	
   712  002A                     	ds	1
   713  002B                     _PB8Counter:	
   714  002B                     	ds	1
   715  002C                     _RightSpeedH:	
   716  002C                     	ds	1
   717  002D                     _RightSpeedL:	
   718  002D                     	ds	1
   719  002E                     _c:	
   720  002E                     	ds	1
   721  002F                     _intersection_orientation:	
   722  002F                     	ds	1
   723  0030                     _lowByte:	
   724  0030                     	ds	1
   725  0031                     _orientation_path:	
   726  0031                     	ds	1
   727  0032                     _pathCount:	
   728  0032                     	ds	1
   729  0033                     _r:	
   730  0033                     	ds	1
   731  0034                     _radH:	
   732  0034                     	ds	1
   733  0035                     _radL:	
   734  0035                     	ds	1
   735  0036                     _speedH:	
   736  0036                     	ds	1
   737  0037                     _speedL:	
   738  0037                     	ds	1
   739  0038                     _x_int:	
   740  0038                     	ds	1
   741  0039                     _x_path:	
   742  0039                     	ds	1
   743  003A                     _x_target:	
   744  003A                     	ds	1
   745  003B                     _y:	
   746  003B                     	ds	1
   747  003C                     _y_int:	
   748  003C                     	ds	1
   749  003D                     _y_path:	
   750  003D                     	ds	1
   751  003E                     _y_target:	
   752  003E                     	ds	1
   753  003F                     _highByte:	
   754  003F                     	ds	1
   755                           
   756                           	psect	dataBANK0
   757  0040                     __pdataBANK0:	
   758  0040                     _mazeGrid:	
   759  0040                     	ds	20
   760  0054                     _orientation:	
   761  0054                     	ds	1
   762  0055                     _pathCountShortest:	
   763  0055                     	ds	1
   764  0056                     _x:	
   765  0056                     	ds	1
   766                           
   767                           	psect	bssBANK1
   768  00A0                     __pbssBANK1:	
   769  00A0                     _path:	
   770  00A0                     	ds	32
   771                           
   772                           	psect	dataBANK1
   773  00C0                     __pdataBANK1:	
   774  00C0                     _mazeGridDefault:	
   775  00C0                     	ds	20
   776                           
   777                           	psect	bssBANK3
   778  01D0                     __pbssBANK3:	
   779  01D0                     _pathShortest:	
   780  01D0                     	ds	32
   781                           
   782                           	psect	dataBANK3
   783  0190                     __pdataBANK3:	
   784  0190                     _gridWalls:	
   785  0190                     	ds	64
   786                           
   787                           	psect	inittext
   788  0EF1                     init_fetch0:	
   789                           ;	Called with low address in FSR and high address in W
   790                           
   791  0EF1  087E               	movf	126,w
   792  0EF2  008A               	movwf	10
   793  0EF3  087F               	movf	127,w
   794  0EF4  0082               	movwf	2
   795  0EF5                     init_ram0:	
   796                           ;Called with:
   797                           ;	high address of idata address in btemp 
   798                           ;	low address of idata address in btemp+1 
   799                           ;	low address of data in FSR
   800                           ;	high address + 1 of data in btemp-1
   801                           
   802  0EF5  26F1  120A  158A   	fcall	init_fetch0
   803  0EF8  0080               	movwf	0
   804  0EF9  0A84               	incf	4,f
   805  0EFA  0804               	movf	4,w
   806  0EFB  067D               	xorwf	125,w
   807  0EFC  1903               	btfsc	3,2
   808  0EFD  3400               	retlw	0
   809  0EFE  0AFF               	incf	127,f
   810  0EFF  1903               	btfsc	3,2
   811  0F00  0AFE               	incf	126,f
   812  0F01  2EF5               	goto	init_ram0
   813                           
   814                           	psect	clrtext
   815  07F8                     clear_ram0:	
   816                           ;	Called with FSR containing the base address, and
   817                           ;	W with the last address+1
   818                           
   819  07F8  0064               	clrwdt	;clear the watchdog before getting into this loop
   820  07F9                     clrloop0:	
   821  07F9  0180               	clrf	0	;clear RAM location pointed to by FSR
   822  07FA  0A84               	incf	4,f	;increment pointer
   823  07FB  0604               	xorwf	4,w	;XOR with final address
   824  07FC  1903               	btfsc	3,2	;have we reached the end yet?
   825  07FD  3400               	retlw	0	;all done for this memory range, return
   826  07FE  0604               	xorwf	4,w	;XOR again to restore value
   827  07FF  2FF9               	goto	clrloop0	;do the next byte
   828                           
   829                           	psect	cstackCOMMON
   830  0071                     __pcstackCOMMON:	
   831  0071                     ?_lcdSetCursor:	
   832  0071                     ?_lcdWriteString:	
   833                           ; 1 bytes @ 0x0
   834                           
   835  0071                     ?_ser_init:	
   836                           ; 1 bytes @ 0x0
   837                           
   838  0071                     ?_setupSPI:	
   839                           ; 1 bytes @ 0x0
   840                           
   841  0071                     ?_setupLCD:	
   842                           ; 1 bytes @ 0x0
   843                           
   844  0071                     ?_setupADC:	
   845                           ; 1 bytes @ 0x0
   846                           
   847  0071                     ?_spi_transfer:	
   848                           ; 1 bytes @ 0x0
   849                           
   850  0071                     ?_ser_putch:	
   851                           ; 1 bytes @ 0x0
   852                           
   853  0071                     ?_Drive1m:	
   854                           ; 1 bytes @ 0x0
   855                           
   856  0071                     ?_Turn90:	
   857                           ; 1 bytes @ 0x0
   858                           
   859  0071                     ?_TravelPath:	
   860                           ; 1 bytes @ 0x0
   861                           
   862  0071                     ?_isr:	
   863                           ; 1 bytes @ 0x0
   864                           
   865  0071                     ??_isr:	
   866                           ; 1 bytes @ 0x0
   867                           
   868  0071                     ?_main:	
   869                           ; 1 bytes @ 0x0
   870                           
   871  0071                     ?_lcdWriteControl:	
   872                           ; 1 bytes @ 0x0
   873                           
   874  0071                     ?_lcdWriteData:	
   875                           ; 1 bytes @ 0x0
   876                           
   877  0071                     ?_ser_getch:	
   878                           ; 1 bytes @ 0x0
   879                           
   880                           
   881                           ; 1 bytes @ 0x0
   882  0071                     	ds	5
   883                           
   884                           	psect	cstackBANK0
   885  0057                     __pcstackBANK0:	
   886  0057                     ??_ser_init:	
   887  0057                     ??_setupSPI:	
   888                           ; 1 bytes @ 0x0
   889                           
   890  0057                     ??_setupADC:	
   891                           ; 1 bytes @ 0x0
   892                           
   893  0057                     ??_spi_transfer:	
   894                           ; 1 bytes @ 0x0
   895                           
   896  0057                     ??_ser_putch:	
   897                           ; 1 bytes @ 0x0
   898                           
   899  0057                     ??_lcdWriteControl:	
   900                           ; 1 bytes @ 0x0
   901                           
   902  0057                     ??_lcdWriteData:	
   903                           ; 1 bytes @ 0x0
   904                           
   905  0057                     ??_ser_getch:	
   906                           ; 1 bytes @ 0x0
   907                           
   908  0057                     ?___bmul:	
   909                           ; 1 bytes @ 0x0
   910                           
   911  0057                     ser_putch@c:	
   912                           ; 1 bytes @ 0x0
   913                           
   914  0057                     ___bmul@multiplicand:	
   915                           ; 1 bytes @ 0x0
   916                           
   917                           
   918                           ; 1 bytes @ 0x0
   919  0057                     	ds	1
   920  0058                     ?_DriveDirect:	
   921  0058                     ?_Drive:	
   922                           ; 1 bytes @ 0x1
   923                           
   924  0058                     ??___bmul:	
   925                           ; 1 bytes @ 0x1
   926                           
   927  0058                     ser_getch@rxbyte:	
   928                           ; 1 bytes @ 0x1
   929                           
   930  0058                     Drive@speedL:	
   931                           ; 1 bytes @ 0x1
   932                           
   933  0058                     spi_transfer@temp:	
   934                           ; 1 bytes @ 0x1
   935                           
   936  0058                     DriveDirect@VelocityRight:	
   937                           ; 1 bytes @ 0x1
   938                           
   939                           
   940                           ; 2 bytes @ 0x1
   941  0058                     	ds	1
   942  0059                     ?_getSensorData:	
   943  0059                     lcdWriteControl@databyte:	
   944                           ; 2 bytes @ 0x2
   945                           
   946  0059                     lcdWriteData@databyte:	
   947                           ; 1 bytes @ 0x2
   948                           
   949  0059                     Drive@radH:	
   950                           ; 1 bytes @ 0x2
   951                           
   952  0059                     getSensorData@bytes:	
   953                           ; 1 bytes @ 0x2
   954                           
   955  0059                     spi_transfer@data:	
   956                           ; 1 bytes @ 0x2
   957                           
   958  0059                     ___bmul@product:	
   959                           ; 1 bytes @ 0x2
   960                           
   961                           
   962                           ; 1 bytes @ 0x2
   963  0059                     	ds	1
   964  005A                     ??_lcdSetCursor:	
   965  005A                     ??_lcdWriteString:	
   966                           ; 1 bytes @ 0x3
   967                           
   968  005A                     ??_setupLCD:	
   969                           ; 1 bytes @ 0x3
   970                           
   971  005A                     lcdSetCursor@address:	
   972                           ; 1 bytes @ 0x3
   973                           
   974  005A                     Drive@radL:	
   975                           ; 1 bytes @ 0x3
   976                           
   977  005A                     ___bmul@multiplier:	
   978                           ; 1 bytes @ 0x3
   979                           
   980  005A                     DriveDirect@VelocityLeft:	
   981                           ; 1 bytes @ 0x3
   982                           
   983                           
   984                           ; 2 bytes @ 0x3
   985  005A                     	ds	1
   986  005B                     ??_getSensorData:	
   987  005B                     ??_Drive:	
   988                           ; 1 bytes @ 0x4
   989                           
   990  005B                     lcdWriteString@s:	
   991                           ; 1 bytes @ 0x4
   992                           
   993  005B                     Drive@speedH:	
   994                           ; 1 bytes @ 0x4
   995                           
   996                           
   997                           ; 1 bytes @ 0x4
   998  005B                     	ds	1
   999  005C                     ??_DriveDirect:	
  1000  005C                     ?_PathTo:	
  1001                           ; 1 bytes @ 0x5
  1002                           
  1003  005C                     PathTo@y_target:	
  1004                           ; 1 bytes @ 0x5
  1005                           
  1006                           
  1007                           ; 1 bytes @ 0x5
  1008  005C                     	ds	1
  1009  005D                     ??_PathTo:	
  1010  005D                     getSensorData@packetID:	
  1011                           ; 1 bytes @ 0x6
  1012                           
  1013  005D                     DriveDirect@data:	
  1014                           ; 1 bytes @ 0x6
  1015                           
  1016                           
  1017                           ; 2 bytes @ 0x6
  1018  005D                     	ds	1
  1019  005E                     getSensorData@sensor:	
  1020                           
  1021                           ; 2 bytes @ 0x7
  1022  005E                     	ds	1
  1023  005F                     DriveDirect@data_387:	
  1024                           
  1025                           ; 2 bytes @ 0x8
  1026  005F                     	ds	2
  1027  0061                     ??_Drive1m:	
  1028  0061                     ??_Turn90:	
  1029                           ; 1 bytes @ 0xA
  1030                           
  1031                           
  1032                           ; 1 bytes @ 0xA
  1033  0061                     	ds	3
  1034  0064                     PathTo@x_target:	
  1035  0064                     Turn90@direction:	
  1036                           ; 1 bytes @ 0xD
  1037                           
  1038                           
  1039                           ; 1 bytes @ 0xD
  1040  0064                     	ds	1
  1041  0065                     ??_TravelPath:	
  1042  0065                     PathTo@sum:	
  1043                           ; 1 bytes @ 0xE
  1044                           
  1045                           
  1046                           ; 1 bytes @ 0xE
  1047  0065                     	ds	1
  1048  0066                     PathTo@loop:	
  1049                           
  1050                           ; 2 bytes @ 0xF
  1051  0066                     	ds	2
  1052  0068                     TravelPath@n:	
  1053                           
  1054                           ; 1 bytes @ 0x11
  1055  0068                     	ds	1
  1056  0069                     ??_main:	
  1057                           
  1058                           ; 1 bytes @ 0x12
  1059  0069                     	ds	3
  1060  006C                     main@controlByte:	
  1061                           
  1062                           ; 1 bytes @ 0x15
  1063  006C                     	ds	1
  1064                           
  1065                           	psect	maintext
  1066  05B7                     __pmaintext:	
  1067 ;;
  1068 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1069 ;;
  1070 ;; *************** function _main *****************
  1071 ;; Defined at:
  1072 ;;		line 376 in file "main.c"
  1073 ;; Parameters:    Size  Location     Type
  1074 ;;		None
  1075 ;; Auto vars:     Size  Location     Type
  1076 ;;  controlByte     1   21[BANK0 ] unsigned char 
  1077 ;; Return value:  Size  Location     Type
  1078 ;;                  1    wreg      void 
  1079 ;; Registers used:
  1080 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1081 ;; Tracked objects:
  1082 ;;		On entry : B00/0
  1083 ;;		On exit  : 0/0
  1084 ;;		Unchanged: 0/0
  1085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1086 ;;      Params:         0       0       0       0       0
  1087 ;;      Locals:         0       1       0       0       0
  1088 ;;      Temps:          0       3       0       0       0
  1089 ;;      Totals:         0       4       0       0       0
  1090 ;;Total ram usage:        4 bytes
  1091 ;; Hardware stack levels required when called:    5
  1092 ;; This function calls:
  1093 ;;		_PathTo
  1094 ;;		_TravelPath
  1095 ;;		_ser_init
  1096 ;;		_ser_putch
  1097 ;;		_setupADC
  1098 ;;		_setupLCD
  1099 ;;		_setupSPI
  1100 ;;		_spi_transfer
  1101 ;; This function is called by:
  1102 ;;		Startup code after reset
  1103 ;; This function uses a non-reentrant model
  1104 ;;
  1105                           
  1106                           
  1107                           ;psect for function _main
  1108  05B7                     _main:	
  1109                           
  1110                           ;main.c: 378: _delay((unsigned long)((5000)*(20000000/4000.0)));
  1111                           
  1112                           ;incstack = 0
  1113                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1114  05B7  307F               	movlw	127
  1115  05B8  1283               	bcf	3,5	;RP0=0, select bank0
  1116  05B9  1303               	bcf	3,6	;RP1=0, select bank0
  1117  05BA  00EB               	movwf	??_main+2
  1118  05BB  30D4               	movlw	212
  1119  05BC  00EA               	movwf	??_main+1
  1120  05BD  30AE               	movlw	174
  1121  05BE  00E9               	movwf	??_main
  1122  05BF                     u2367:	
  1123  05BF  0BE9               	decfsz	??_main,f
  1124  05C0  2DBF               	goto	u2367
  1125  05C1  0BEA               	decfsz	??_main+1,f
  1126  05C2  2DBF               	goto	u2367
  1127  05C3  0BEB               	decfsz	??_main+2,f
  1128  05C4  2DBF               	goto	u2367
  1129  05C5  2DC6               	nop2
  1130                           
  1131                           ;main.c: 380: ser_init();
  1132  05C6  120A  158A  26D3  120A  118A  	fcall	_ser_init
  1133                           
  1134                           ;main.c: 381: setupSPI();
  1135  05CB  120A  158A  277D  120A  118A  	fcall	_setupSPI
  1136                           
  1137                           ;main.c: 382: setupLCD();
  1138  05D0  120A  118A  27CF  120A  118A  	fcall	_setupLCD
  1139                           
  1140                           ;main.c: 383: setupADC();
  1141  05D5  120A  158A  2750  120A  118A  	fcall	_setupADC
  1142                           
  1143                           ;main.c: 385: TRISB = 0b00000011;
  1144  05DA  3003               	movlw	3
  1145  05DB  1683               	bsf	3,5	;RP0=1, select bank1
  1146  05DC  1303               	bcf	3,6	;RP1=0, select bank1
  1147  05DD  0086               	movwf	6	;volatile
  1148                           
  1149                           ;main.c: 386: PORTB = 0b00000000;
  1150  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  1151  05DF  1303               	bcf	3,6	;RP1=0, select bank0
  1152  05E0  0186               	clrf	6	;volatile
  1153                           
  1154                           ;main.c: 388: unsigned char controlByte = 0b00001101;
  1155  05E1  300D               	movlw	13
  1156  05E2  00E9               	movwf	??_main
  1157  05E3  0869               	movf	??_main,w
  1158  05E4  00EC               	movwf	main@controlByte
  1159                           
  1160                           ;main.c: 389: spi_transfer(controlByte);
  1161  05E5  086C               	movf	main@controlByte,w
  1162  05E6  120A  158A  26E2  120A  118A  	fcall	_spi_transfer
  1163                           
  1164                           ;main.c: 391: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1165  05EB  301A               	movlw	26
  1166  05EC  1283               	bcf	3,5	;RP0=0, select bank0
  1167  05ED  1303               	bcf	3,6	;RP1=0, select bank0
  1168  05EE  00EB               	movwf	??_main+2
  1169  05EF  305E               	movlw	94
  1170  05F0  00EA               	movwf	??_main+1
  1171  05F1  3086               	movlw	134
  1172  05F2  00E9               	movwf	??_main
  1173  05F3                     u2377:	
  1174  05F3  0BE9               	decfsz	??_main,f
  1175  05F4  2DF3               	goto	u2377
  1176  05F5  0BEA               	decfsz	??_main+1,f
  1177  05F6  2DF3               	goto	u2377
  1178  05F7  0BEB               	decfsz	??_main+2,f
  1179  05F8  2DF3               	goto	u2377
  1180  05F9  0000               	nop
  1181                           
  1182                           ;main.c: 392: ser_putch(128);
  1183  05FA  3080               	movlw	128
  1184  05FB  120A  158A  26C7  120A  118A  	fcall	_ser_putch
  1185                           
  1186                           ;main.c: 393: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1187  0600  301A               	movlw	26
  1188  0601  1283               	bcf	3,5	;RP0=0, select bank0
  1189  0602  1303               	bcf	3,6	;RP1=0, select bank0
  1190  0603  00EB               	movwf	??_main+2
  1191  0604  305E               	movlw	94
  1192  0605  00EA               	movwf	??_main+1
  1193  0606  3086               	movlw	134
  1194  0607  00E9               	movwf	??_main
  1195  0608                     u2387:	
  1196  0608  0BE9               	decfsz	??_main,f
  1197  0609  2E08               	goto	u2387
  1198  060A  0BEA               	decfsz	??_main+1,f
  1199  060B  2E08               	goto	u2387
  1200  060C  0BEB               	decfsz	??_main+2,f
  1201  060D  2E08               	goto	u2387
  1202  060E  0000               	nop
  1203                           
  1204                           ;main.c: 394: ser_putch(132);
  1205  060F  3084               	movlw	132
  1206  0610  120A  158A  26C7  120A  118A  	fcall	_ser_putch
  1207                           
  1208                           ;main.c: 395: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1209  0615  301A               	movlw	26
  1210  0616  1283               	bcf	3,5	;RP0=0, select bank0
  1211  0617  1303               	bcf	3,6	;RP1=0, select bank0
  1212  0618  00EB               	movwf	??_main+2
  1213  0619  305E               	movlw	94
  1214  061A  00EA               	movwf	??_main+1
  1215  061B  3086               	movlw	134
  1216  061C  00E9               	movwf	??_main
  1217  061D                     u2397:	
  1218  061D  0BE9               	decfsz	??_main,f
  1219  061E  2E1D               	goto	u2397
  1220  061F  0BEA               	decfsz	??_main+1,f
  1221  0620  2E1D               	goto	u2397
  1222  0621  0BEB               	decfsz	??_main+2,f
  1223  0622  2E1D               	goto	u2397
  1224  0623  0000               	nop
  1225                           
  1226                           ;main.c: 398: x = 1;
  1227  0624  1283               	bcf	3,5	;RP0=0, select bank0
  1228  0625  1303               	bcf	3,6	;RP1=0, select bank0
  1229  0626  01D6               	clrf	_x
  1230  0627  0AD6               	incf	_x,f
  1231                           
  1232                           ;main.c: 399: y = 0;
  1233  0628  01BB               	clrf	_y
  1234                           
  1235                           ;main.c: 400: orientation = 3;
  1236  0629  3003               	movlw	3
  1237  062A  00E9               	movwf	??_main
  1238  062B  0869               	movf	??_main,w
  1239  062C  00D4               	movwf	_orientation
  1240  062D                     l3141:	
  1241                           ;main.c: 403: while(1){
  1242                           
  1243                           
  1244                           ;main.c: 405: if(PB8Counter >= 10 && !RB0 == 0){
  1245  062D  300A               	movlw	10
  1246  062E  022B               	subwf	_PB8Counter,w
  1247  062F  1803               	btfsc	3,0
  1248  0630  1C06               	btfss	6,0	;volatile
  1249  0631  2E2D               	goto	l3141
  1250                           
  1251                           ;main.c: 409: PathTo(2,0);
  1252  0632  01DC               	clrf	PathTo@y_target
  1253  0633  3002               	movlw	2
  1254  0634  120A  118A  205F  120A  118A  	fcall	_PathTo
  1255                           
  1256                           ;main.c: 410: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1257  0639  301A               	movlw	26
  1258  063A  1283               	bcf	3,5	;RP0=0, select bank0
  1259  063B  1303               	bcf	3,6	;RP1=0, select bank0
  1260  063C  00EB               	movwf	??_main+2
  1261  063D  305E               	movlw	94
  1262  063E  00EA               	movwf	??_main+1
  1263  063F  3086               	movlw	134
  1264  0640  00E9               	movwf	??_main
  1265  0641                     u2407:	
  1266  0641  0BE9               	decfsz	??_main,f
  1267  0642  2E41               	goto	u2407
  1268  0643  0BEA               	decfsz	??_main+1,f
  1269  0644  2E41               	goto	u2407
  1270  0645  0BEB               	decfsz	??_main+2,f
  1271  0646  2E41               	goto	u2407
  1272  0647  0000               	nop
  1273                           
  1274                           ;main.c: 411: TravelPath();
  1275  0648  120A  118A  23EA  120A  118A  	fcall	_TravelPath
  1276                           
  1277                           ;main.c: 428: PB8Counter = 0;
  1278  064D  1283               	bcf	3,5	;RP0=0, select bank0
  1279  064E  1303               	bcf	3,6	;RP1=0, select bank0
  1280  064F  01AB               	clrf	_PB8Counter
  1281  0650  2E2D               	goto	l3141
  1282  0651                     __end_of_main:	
  1283                           
  1284                           	psect	text1
  1285  0EE2                     __ptext1:	
  1286 ;; *************** function _spi_transfer *****************
  1287 ;; Defined at:
  1288 ;;		line 22 in file "SPI.c"
  1289 ;; Parameters:    Size  Location     Type
  1290 ;;  data            1    wreg     unsigned char 
  1291 ;; Auto vars:     Size  Location     Type
  1292 ;;  data            1    2[BANK0 ] unsigned char 
  1293 ;;  temp            1    1[BANK0 ] unsigned char 
  1294 ;; Return value:  Size  Location     Type
  1295 ;;                  1    wreg      unsigned char 
  1296 ;; Registers used:
  1297 ;;		wreg, status,2
  1298 ;; Tracked objects:
  1299 ;;		On entry : 0/0
  1300 ;;		On exit  : 0/0
  1301 ;;		Unchanged: 0/0
  1302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1303 ;;      Params:         0       0       0       0       0
  1304 ;;      Locals:         0       2       0       0       0
  1305 ;;      Temps:          0       1       0       0       0
  1306 ;;      Totals:         0       3       0       0       0
  1307 ;;Total ram usage:        3 bytes
  1308 ;; Hardware stack levels used:    1
  1309 ;; Hardware stack levels required when called:    1
  1310 ;; This function calls:
  1311 ;;		Nothing
  1312 ;; This function is called by:
  1313 ;;		_main
  1314 ;; This function uses a non-reentrant model
  1315 ;;
  1316                           
  1317                           
  1318                           ;psect for function _spi_transfer
  1319  0EE2                     _spi_transfer:	
  1320                           
  1321                           ;incstack = 0
  1322                           ; Regs used in _spi_transfer: [wreg+status,2]
  1323                           ;spi_transfer@data stored from wreg
  1324  0EE2  1283               	bcf	3,5	;RP0=0, select bank0
  1325  0EE3  1303               	bcf	3,6	;RP1=0, select bank0
  1326  0EE4  00D9               	movwf	spi_transfer@data
  1327                           
  1328                           ;SPI.c: 23: unsigned char temp = 0;
  1329  0EE5  01D8               	clrf	spi_transfer@temp
  1330                           
  1331                           ;SPI.c: 25: SSPIF = 0;
  1332  0EE6  118C               	bcf	12,3	;volatile
  1333                           
  1334                           ;SPI.c: 26: SSPBUF = data;
  1335  0EE7  0859               	movf	spi_transfer@data,w
  1336  0EE8  0093               	movwf	19	;volatile
  1337  0EE9                     l774:	
  1338                           ;SPI.c: 28: while (SSPIF == 0);
  1339                           
  1340  0EE9  1D8C               	btfss	12,3	;volatile
  1341  0EEA  2EE9               	goto	l774
  1342                           
  1343                           ;SPI.c: 29: temp = SSPBUF;
  1344  0EEB  0813               	movf	19,w	;volatile
  1345  0EEC  00D7               	movwf	??_spi_transfer
  1346  0EED  0857               	movf	??_spi_transfer,w
  1347  0EEE  00D8               	movwf	spi_transfer@temp
  1348                           
  1349                           ;SPI.c: 30: SSPIF = 0;
  1350  0EEF  118C               	bcf	12,3	;volatile
  1351  0EF0  0008               	return
  1352  0EF1                     __end_of_spi_transfer:	
  1353                           ;SPI.c: 32: return temp;
  1354                           ;	Return value of _spi_transfer is never used
  1355                           
  1356                           
  1357                           	psect	text2
  1358  0F7D                     __ptext2:	
  1359 ;; *************** function _setupSPI *****************
  1360 ;; Defined at:
  1361 ;;		line 4 in file "SPI.c"
  1362 ;; Parameters:    Size  Location     Type
  1363 ;;		None
  1364 ;; Auto vars:     Size  Location     Type
  1365 ;;		None
  1366 ;; Return value:  Size  Location     Type
  1367 ;;                  1    wreg      void 
  1368 ;; Registers used:
  1369 ;;		wreg
  1370 ;; Tracked objects:
  1371 ;;		On entry : 0/0
  1372 ;;		On exit  : 0/0
  1373 ;;		Unchanged: 0/0
  1374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1375 ;;      Params:         0       0       0       0       0
  1376 ;;      Locals:         0       0       0       0       0
  1377 ;;      Temps:          0       0       0       0       0
  1378 ;;      Totals:         0       0       0       0       0
  1379 ;;Total ram usage:        0 bytes
  1380 ;; Hardware stack levels used:    1
  1381 ;; Hardware stack levels required when called:    1
  1382 ;; This function calls:
  1383 ;;		Nothing
  1384 ;; This function is called by:
  1385 ;;		_main
  1386 ;; This function uses a non-reentrant model
  1387 ;;
  1388                           
  1389                           
  1390                           ;psect for function _setupSPI
  1391  0F7D                     _setupSPI:	
  1392                           
  1393                           ;SPI.c: 6: TRISB = 0b00000011;
  1394                           
  1395                           ;incstack = 0
  1396                           ; Regs used in _setupSPI: [wreg]
  1397  0F7D  3003               	movlw	3
  1398  0F7E  1683               	bsf	3,5	;RP0=1, select bank1
  1399  0F7F  1303               	bcf	3,6	;RP1=0, select bank1
  1400  0F80  0086               	movwf	6	;volatile
  1401                           
  1402                           ;SPI.c: 8: SSPSTAT = 0b01000000;
  1403  0F81  3040               	movlw	64
  1404  0F82  0094               	movwf	20	;volatile
  1405                           
  1406                           ;SPI.c: 9: SSPCON = 0b00100000;
  1407  0F83  3020               	movlw	32
  1408  0F84  1283               	bcf	3,5	;RP0=0, select bank0
  1409  0F85  1303               	bcf	3,6	;RP1=0, select bank0
  1410  0F86  0094               	movwf	20	;volatile
  1411                           
  1412                           ;SPI.c: 10: TRISC = 0b10000000;
  1413  0F87  3080               	movlw	128
  1414  0F88  1683               	bsf	3,5	;RP0=1, select bank1
  1415  0F89  1303               	bcf	3,6	;RP1=0, select bank1
  1416  0F8A  0087               	movwf	7	;volatile
  1417                           
  1418                           ;SPI.c: 11: PORTC = 0b00000011;
  1419  0F8B  3003               	movlw	3
  1420  0F8C  1283               	bcf	3,5	;RP0=0, select bank0
  1421  0F8D  1303               	bcf	3,6	;RP1=0, select bank0
  1422  0F8E  0087               	movwf	7	;volatile
  1423                           
  1424                           ;SPI.c: 14: OPTION_REG = 0b00000100;
  1425  0F8F  3004               	movlw	4
  1426  0F90  1683               	bsf	3,5	;RP0=1, select bank1
  1427  0F91  1303               	bcf	3,6	;RP1=0, select bank1
  1428  0F92  0081               	movwf	1	;volatile
  1429                           
  1430                           ;SPI.c: 16: TMR0IE = 1;
  1431  0F93  168B               	bsf	11,5	;volatile
  1432                           
  1433                           ;SPI.c: 18: (GIE = 1);
  1434  0F94  178B               	bsf	11,7	;volatile
  1435  0F95  0008               	return
  1436  0F96                     __end_of_setupSPI:	
  1437                           
  1438                           	psect	text3
  1439  07CF                     __ptext3:	
  1440 ;; *************** function _setupLCD *****************
  1441 ;; Defined at:
  1442 ;;		line 86 in file "LCD.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;		None
  1445 ;; Auto vars:     Size  Location     Type
  1446 ;;		None
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  1    wreg      void 
  1449 ;; Registers used:
  1450 ;;		wreg, status,2, status,0, pclath, cstack
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1456 ;;      Params:         0       0       0       0       0
  1457 ;;      Locals:         0       0       0       0       0
  1458 ;;      Temps:          0       0       0       0       0
  1459 ;;      Totals:         0       0       0       0       0
  1460 ;;Total ram usage:        0 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; Hardware stack levels required when called:    2
  1463 ;; This function calls:
  1464 ;;		_lcdWriteControl
  1465 ;; This function is called by:
  1466 ;;		_main
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           
  1471                           ;psect for function _setupLCD
  1472  07CF                     _setupLCD:	
  1473                           
  1474                           ;LCD.c: 88: ADCON1 = 0b00000010;
  1475                           
  1476                           ;incstack = 0
  1477                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  1478  07CF  3002               	movlw	2
  1479  07D0  1683               	bsf	3,5	;RP0=1, select bank1
  1480  07D1  1303               	bcf	3,6	;RP1=0, select bank1
  1481  07D2  009F               	movwf	31	;volatile
  1482                           
  1483                           ;LCD.c: 90: PORTD = 0;
  1484  07D3  1283               	bcf	3,5	;RP0=0, select bank0
  1485  07D4  1303               	bcf	3,6	;RP1=0, select bank0
  1486  07D5  0188               	clrf	8	;volatile
  1487                           
  1488                           ;LCD.c: 91: PORTE = 0;
  1489  07D6  0189               	clrf	9	;volatile
  1490                           
  1491                           ;LCD.c: 93: TRISD = 0b00000000;
  1492  07D7  1683               	bsf	3,5	;RP0=1, select bank1
  1493  07D8  1303               	bcf	3,6	;RP1=0, select bank1
  1494  07D9  0188               	clrf	8	;volatile
  1495                           
  1496                           ;LCD.c: 94: TRISE = 0b00000000;
  1497  07DA  0189               	clrf	9	;volatile
  1498                           
  1499                           ;LCD.c: 97: lcdWriteControl(0b00000001);
  1500  07DB  3001               	movlw	1
  1501  07DC  120A  158A  2728  120A  118A  	fcall	_lcdWriteControl
  1502                           
  1503                           ;LCD.c: 98: lcdWriteControl(0b00111000);
  1504  07E1  3038               	movlw	56
  1505  07E2  120A  158A  2728  120A  118A  	fcall	_lcdWriteControl
  1506                           
  1507                           ;LCD.c: 99: lcdWriteControl(0b00001100);
  1508  07E7  300C               	movlw	12
  1509  07E8  120A  158A  2728  120A  118A  	fcall	_lcdWriteControl
  1510                           
  1511                           ;LCD.c: 100: lcdWriteControl(0b00000110);
  1512  07ED  3006               	movlw	6
  1513  07EE  120A  158A  2728  120A  118A  	fcall	_lcdWriteControl
  1514                           
  1515                           ;LCD.c: 101: lcdWriteControl(0b00000010);
  1516  07F3  3002               	movlw	2
  1517  07F4  120A  158A  2728   	fcall	_lcdWriteControl
  1518  07F7  0008               	return
  1519  07F8                     __end_of_setupLCD:	
  1520                           
  1521                           	psect	text4
  1522  0F50                     __ptext4:	
  1523 ;; *************** function _setupADC *****************
  1524 ;; Defined at:
  1525 ;;		line 5 in file "ADC.c"
  1526 ;; Parameters:    Size  Location     Type
  1527 ;;		None
  1528 ;; Auto vars:     Size  Location     Type
  1529 ;;		None
  1530 ;; Return value:  Size  Location     Type
  1531 ;;                  1    wreg      void 
  1532 ;; Registers used:
  1533 ;;		wreg, status,2
  1534 ;; Tracked objects:
  1535 ;;		On entry : 0/0
  1536 ;;		On exit  : 0/0
  1537 ;;		Unchanged: 0/0
  1538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1539 ;;      Params:         0       0       0       0       0
  1540 ;;      Locals:         0       0       0       0       0
  1541 ;;      Temps:          0       1       0       0       0
  1542 ;;      Totals:         0       1       0       0       0
  1543 ;;Total ram usage:        1 bytes
  1544 ;; Hardware stack levels used:    1
  1545 ;; Hardware stack levels required when called:    1
  1546 ;; This function calls:
  1547 ;;		Nothing
  1548 ;; This function is called by:
  1549 ;;		_main
  1550 ;; This function uses a non-reentrant model
  1551 ;;
  1552                           
  1553                           
  1554                           ;psect for function _setupADC
  1555  0F50                     _setupADC:	
  1556                           
  1557                           ;ADC.c: 6: PORTA = 0;
  1558                           
  1559                           ;incstack = 0
  1560                           ; Regs used in _setupADC: [wreg+status,2]
  1561  0F50  1283               	bcf	3,5	;RP0=0, select bank0
  1562  0F51  1303               	bcf	3,6	;RP1=0, select bank0
  1563  0F52  0185               	clrf	5	;volatile
  1564                           
  1565                           ;ADC.c: 7: TRISA = 0b11111111;
  1566  0F53  30FF               	movlw	255
  1567  0F54  1683               	bsf	3,5	;RP0=1, select bank1
  1568  0F55  1303               	bcf	3,6	;RP1=0, select bank1
  1569  0F56  0085               	movwf	5	;volatile
  1570                           
  1571                           ;ADC.c: 10: ADCON0 = 0b10001001;
  1572  0F57  3089               	movlw	137
  1573  0F58  1283               	bcf	3,5	;RP0=0, select bank0
  1574  0F59  1303               	bcf	3,6	;RP1=0, select bank0
  1575  0F5A  009F               	movwf	31	;volatile
  1576                           
  1577                           ;ADC.c: 11: ADCON1 = 0b00000010;
  1578  0F5B  3002               	movlw	2
  1579  0F5C  1683               	bsf	3,5	;RP0=1, select bank1
  1580  0F5D  1303               	bcf	3,6	;RP1=0, select bank1
  1581  0F5E  009F               	movwf	31	;volatile
  1582                           
  1583                           ;ADC.c: 13: _delay((unsigned long)((50)*(20000000/4000000.0)));
  1584  0F5F  3053               	movlw	83
  1585  0F60  1283               	bcf	3,5	;RP0=0, select bank0
  1586  0F61  1303               	bcf	3,6	;RP1=0, select bank0
  1587  0F62  00D7               	movwf	??_setupADC
  1588  0F63                     u2417:	
  1589  0F63  0BD7               	decfsz	??_setupADC,f
  1590  0F64  2F63               	goto	u2417
  1591  0F65  0008               	return
  1592  0F66                     __end_of_setupADC:	
  1593                           
  1594                           	psect	text5
  1595  0ED3                     __ptext5:	
  1596 ;; *************** function _ser_init *****************
  1597 ;; Defined at:
  1598 ;;		line 5 in file "ser.c"
  1599 ;; Parameters:    Size  Location     Type
  1600 ;;		None
  1601 ;; Auto vars:     Size  Location     Type
  1602 ;;		None
  1603 ;; Return value:  Size  Location     Type
  1604 ;;                  1    wreg      void 
  1605 ;; Registers used:
  1606 ;;		wreg
  1607 ;; Tracked objects:
  1608 ;;		On entry : 0/0
  1609 ;;		On exit  : 0/0
  1610 ;;		Unchanged: 0/0
  1611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1612 ;;      Params:         0       0       0       0       0
  1613 ;;      Locals:         0       0       0       0       0
  1614 ;;      Temps:          0       0       0       0       0
  1615 ;;      Totals:         0       0       0       0       0
  1616 ;;Total ram usage:        0 bytes
  1617 ;; Hardware stack levels used:    1
  1618 ;; Hardware stack levels required when called:    1
  1619 ;; This function calls:
  1620 ;;		Nothing
  1621 ;; This function is called by:
  1622 ;;		_main
  1623 ;; This function uses a non-reentrant model
  1624 ;;
  1625                           
  1626                           
  1627                           ;psect for function _ser_init
  1628  0ED3                     _ser_init:	
  1629                           
  1630                           ;ser.c: 7: TXSTA = 0b00100100;
  1631                           
  1632                           ;incstack = 0
  1633                           ; Regs used in _ser_init: [wreg]
  1634  0ED3  3024               	movlw	36
  1635  0ED4  1683               	bsf	3,5	;RP0=1, select bank1
  1636  0ED5  1303               	bcf	3,6	;RP1=0, select bank1
  1637  0ED6  0098               	movwf	24	;volatile
  1638                           
  1639                           ;ser.c: 8: RCSTA = 0b10011000;
  1640  0ED7  3098               	movlw	152
  1641  0ED8  1283               	bcf	3,5	;RP0=0, select bank0
  1642  0ED9  1303               	bcf	3,6	;RP1=0, select bank0
  1643  0EDA  0098               	movwf	24	;volatile
  1644                           
  1645                           ;ser.c: 24: SPBRG = 20;
  1646  0EDB  3014               	movlw	20
  1647  0EDC  1683               	bsf	3,5	;RP0=1, select bank1
  1648  0EDD  1303               	bcf	3,6	;RP1=0, select bank1
  1649  0EDE  0099               	movwf	25	;volatile
  1650                           
  1651                           ;ser.c: 26: PEIE = 1;
  1652  0EDF  170B               	bsf	11,6	;volatile
  1653                           
  1654                           ;ser.c: 27: (GIE = 1);
  1655  0EE0  178B               	bsf	11,7	;volatile
  1656  0EE1  0008               	return
  1657  0EE2                     __end_of_ser_init:	
  1658                           
  1659                           	psect	text6
  1660  03EA                     __ptext6:	
  1661 ;; *************** function _TravelPath *****************
  1662 ;; Defined at:
  1663 ;;		line 269 in file "main.c"
  1664 ;; Parameters:    Size  Location     Type
  1665 ;;		None
  1666 ;; Auto vars:     Size  Location     Type
  1667 ;;  n               1   17[BANK0 ] unsigned char 
  1668 ;; Return value:  Size  Location     Type
  1669 ;;                  1    wreg      void 
  1670 ;; Registers used:
  1671 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1672 ;; Tracked objects:
  1673 ;;		On entry : 0/0
  1674 ;;		On exit  : 0/0
  1675 ;;		Unchanged: 0/0
  1676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1677 ;;      Params:         0       0       0       0       0
  1678 ;;      Locals:         0       1       0       0       0
  1679 ;;      Temps:          0       3       0       0       0
  1680 ;;      Totals:         0       4       0       0       0
  1681 ;;Total ram usage:        4 bytes
  1682 ;; Hardware stack levels used:    1
  1683 ;; Hardware stack levels required when called:    4
  1684 ;; This function calls:
  1685 ;;		_Drive1m
  1686 ;;		_Turn90
  1687 ;; This function is called by:
  1688 ;;		_main
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           
  1693                           ;psect for function _TravelPath
  1694  03EA                     _TravelPath:	
  1695                           
  1696                           ;main.c: 271: for (char n = 1; n <= (pathCountShortest + 1); n++){
  1697                           
  1698                           ;incstack = 0
  1699                           ; Regs used in _TravelPath: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1700  03EA  1283               	bcf	3,5	;RP0=0, select bank0
  1701  03EB  1303               	bcf	3,6	;RP1=0, select bank0
  1702  03EC  01E8               	clrf	TravelPath@n
  1703  03ED  0AE8               	incf	TravelPath@n,f
  1704  03EE                     l3007:	
  1705  03EE  0855               	movf	_pathCountShortest,w
  1706  03EF  3E01               	addlw	1
  1707  03F0  00E5               	movwf	??_TravelPath
  1708  03F1  3000               	movlw	0
  1709  03F2  1803               	skipnc
  1710  03F3  3001               	movlw	1
  1711  03F4  00E6               	movwf	??_TravelPath+1
  1712  03F5  0866               	movf	??_TravelPath+1,w
  1713  03F6  3A80               	xorlw	128
  1714  03F7  00E7               	movwf	??_TravelPath+2
  1715  03F8  3080               	movlw	128
  1716  03F9  0267               	subwf	??_TravelPath+2,w
  1717  03FA  1D03               	skipz
  1718  03FB  2BFE               	goto	u2255
  1719  03FC  0868               	movf	TravelPath@n,w
  1720  03FD  0265               	subwf	??_TravelPath,w
  1721  03FE                     u2255:	
  1722  03FE  1C03               	btfss	3,0
  1723  03FF  0008               	return
  1724                           
  1725                           ;main.c: 273: _delay((unsigned long)((500)*(20000000/4000.0)));
  1726  0400  300D               	movlw	13
  1727  0401  1283               	bcf	3,5	;RP0=0, select bank0
  1728  0402  1303               	bcf	3,6	;RP1=0, select bank0
  1729  0403  00E7               	movwf	??_TravelPath+2
  1730  0404  30AF               	movlw	175
  1731  0405  00E6               	movwf	??_TravelPath+1
  1732  0406  30C1               	movlw	193
  1733  0407  00E5               	movwf	??_TravelPath
  1734  0408                     u2427:	
  1735  0408  0BE5               	decfsz	??_TravelPath,f
  1736  0409  2C08               	goto	u2427
  1737  040A  0BE6               	decfsz	??_TravelPath+1,f
  1738  040B  2C08               	goto	u2427
  1739  040C  0BE7               	decfsz	??_TravelPath+2,f
  1740  040D  2C08               	goto	u2427
  1741  040E  0000               	nop
  1742                           
  1743                           ;main.c: 275: if (pathShortest[0][n] > x){
  1744  040F  1283               	bcf	3,5	;RP0=0, select bank0
  1745  0410  1303               	bcf	3,6	;RP1=0, select bank0
  1746  0411  0868               	movf	TravelPath@n,w
  1747  0412  3ED0               	addlw	(low (_pathShortest| (0+256)))& (0+255)
  1748  0413  0084               	movwf	4
  1749  0414  1783               	bsf	3,7	;select IRP bank3
  1750  0415  0800               	movf	0,w
  1751  0416  0256               	subwf	_x,w
  1752  0417  1C03               	btfss	3,0
  1753  0418  2C40               	goto	l2941
  1754  0419  2C4E               	goto	l2945
  1755  041A                     l2929:	
  1756                           ;main.c: 278: case 0: Turn90(0);
  1757                           
  1758                           ;main.c: 276: switch (orientation){
  1759                           
  1760  041A  3000               	movlw	0
  1761  041B  120A  118A  2516  120A  118A  	fcall	_Turn90
  1762                           
  1763                           ;main.c: 279: break;
  1764  0420  2D0A               	goto	l3003
  1765  0421                     l2931:	
  1766                           ;main.c: 281: case 2: Turn90(1);
  1767                           
  1768  0421  3001               	movlw	1
  1769  0422  120A  118A  2516  120A  118A  	fcall	_Turn90
  1770                           
  1771                           ;main.c: 282: break;
  1772  0427  2D0A               	goto	l3003
  1773  0428                     l2933:	
  1774                           ;main.c: 284: case 3: Turn90(1);
  1775                           
  1776  0428  3001               	movlw	1
  1777  0429  120A  118A  2516  120A  118A  	fcall	_Turn90
  1778                           
  1779                           ;main.c: 285: _delay((unsigned long)((5)*(20000000/4000.0)));
  1780  042E  3021               	movlw	33
  1781  042F  1283               	bcf	3,5	;RP0=0, select bank0
  1782  0430  1303               	bcf	3,6	;RP1=0, select bank0
  1783  0431  00E6               	movwf	??_TravelPath+1
  1784  0432  3076               	movlw	118
  1785  0433  00E5               	movwf	??_TravelPath
  1786  0434                     u2437:	
  1787  0434  0BE5               	decfsz	??_TravelPath,f
  1788  0435  2C34               	goto	u2437
  1789  0436  0BE6               	decfsz	??_TravelPath+1,f
  1790  0437  2C34               	goto	u2437
  1791  0438  0000               	nop
  1792                           
  1793                           ;main.c: 286: Turn90(1);
  1794  0439  3001               	movlw	1
  1795  043A  120A  118A  2516  120A  118A  	fcall	_Turn90
  1796                           
  1797                           ;main.c: 288: }
  1798                           
  1799                           ;main.c: 287: break;
  1800  043F  2D0A               	goto	l3003
  1801  0440                     l2941:	
  1802  0440  1283               	bcf	3,5	;RP0=0, select bank0
  1803  0441  1303               	bcf	3,6	;RP1=0, select bank0
  1804  0442  0854               	movf	_orientation,w
  1805                           
  1806                           ; Switch size 1, requested type "space"
  1807                           ; Number of cases is 3, Range of values is 0 to 3
  1808                           ; switch strategies available:
  1809                           ; Name         Instructions Cycles
  1810                           ; simple_byte           10     6 (average)
  1811                           ; direct_byte           20     8 (fixed)
  1812                           ; jumptable            260     6 (fixed)
  1813                           ;	Chosen strategy is simple_byte
  1814  0443  3A00               	xorlw	0	; case 0
  1815  0444  1903               	skipnz
  1816  0445  2C1A               	goto	l2929
  1817  0446  3A02               	xorlw	2	; case 2
  1818  0447  1903               	skipnz
  1819  0448  2C21               	goto	l2931
  1820  0449  3A01               	xorlw	1	; case 3
  1821  044A  1903               	skipnz
  1822  044B  2C28               	goto	l2933
  1823  044C  2C4D               	goto	l2943
  1824  044D                     l2943:	
  1825  044D  2D0A               	goto	l3003
  1826  044E                     l2945:	
  1827                           ;main.c: 292: }
  1828                           
  1829                           ;main.c: 290: Drive1m();
  1830                           
  1831                           
  1832                           ;main.c: 295: else if (pathShortest[0][n] < x){
  1833  044E  1283               	bcf	3,5	;RP0=0, select bank0
  1834  044F  1303               	bcf	3,6	;RP1=0, select bank0
  1835  0450  0868               	movf	TravelPath@n,w
  1836  0451  3ED0               	addlw	(low (_pathShortest| (0+256)))& (0+255)
  1837  0452  0084               	movwf	4
  1838  0453  0856               	movf	_x,w
  1839  0454  1783               	bsf	3,7	;select IRP bank3
  1840  0455  0200               	subwf	0,w
  1841  0456  1C03               	btfss	3,0
  1842  0457  2C7F               	goto	l2961
  1843  0458  2C8D               	goto	l2965
  1844  0459                     l2949:	
  1845                           ;main.c: 298: case 0: Turn90(1);
  1846                           
  1847                           ;main.c: 296: switch (orientation){
  1848                           
  1849  0459  3001               	movlw	1
  1850  045A  120A  118A  2516  120A  118A  	fcall	_Turn90
  1851                           
  1852                           ;main.c: 299: break;
  1853  045F  2D0A               	goto	l3003
  1854  0460                     l2951:	
  1855                           ;main.c: 301: case 2: Turn90(0);
  1856                           
  1857  0460  3000               	movlw	0
  1858  0461  120A  118A  2516  120A  118A  	fcall	_Turn90
  1859                           
  1860                           ;main.c: 302: break;
  1861  0466  2D0A               	goto	l3003
  1862  0467                     l2953:	
  1863                           ;main.c: 304: case 1: Turn90(1);
  1864                           
  1865  0467  3001               	movlw	1
  1866  0468  120A  118A  2516  120A  118A  	fcall	_Turn90
  1867                           
  1868                           ;main.c: 305: _delay((unsigned long)((5)*(20000000/4000.0)));
  1869  046D  3021               	movlw	33
  1870  046E  1283               	bcf	3,5	;RP0=0, select bank0
  1871  046F  1303               	bcf	3,6	;RP1=0, select bank0
  1872  0470  00E6               	movwf	??_TravelPath+1
  1873  0471  3076               	movlw	118
  1874  0472  00E5               	movwf	??_TravelPath
  1875  0473                     u2447:	
  1876  0473  0BE5               	decfsz	??_TravelPath,f
  1877  0474  2C73               	goto	u2447
  1878  0475  0BE6               	decfsz	??_TravelPath+1,f
  1879  0476  2C73               	goto	u2447
  1880  0477  0000               	nop
  1881                           
  1882                           ;main.c: 306: Turn90(1);
  1883  0478  3001               	movlw	1
  1884  0479  120A  118A  2516  120A  118A  	fcall	_Turn90
  1885                           
  1886                           ;main.c: 310: }
  1887                           
  1888                           ;main.c: 307: break;
  1889  047E  2D0A               	goto	l3003
  1890  047F                     l2961:	
  1891  047F  1283               	bcf	3,5	;RP0=0, select bank0
  1892  0480  1303               	bcf	3,6	;RP1=0, select bank0
  1893  0481  0854               	movf	_orientation,w
  1894                           
  1895                           ; Switch size 1, requested type "space"
  1896                           ; Number of cases is 3, Range of values is 0 to 2
  1897                           ; switch strategies available:
  1898                           ; Name         Instructions Cycles
  1899                           ; simple_byte           10     6 (average)
  1900                           ; direct_byte           17     8 (fixed)
  1901                           ; jumptable            260     6 (fixed)
  1902                           ;	Chosen strategy is simple_byte
  1903  0482  3A00               	xorlw	0	; case 0
  1904  0483  1903               	skipnz
  1905  0484  2C59               	goto	l2949
  1906  0485  3A01               	xorlw	1	; case 1
  1907  0486  1903               	skipnz
  1908  0487  2C67               	goto	l2953
  1909  0488  3A03               	xorlw	3	; case 2
  1910  0489  1903               	skipnz
  1911  048A  2C60               	goto	l2951
  1912  048B  2C8C               	goto	l2963
  1913  048C                     l2963:	
  1914  048C  2D0A               	goto	l3003
  1915  048D                     l2965:	
  1916                           ;main.c: 314: }
  1917                           
  1918                           ;main.c: 312: Drive1m();
  1919                           
  1920                           
  1921                           ;main.c: 316: else if(pathShortest[1][n] > y){
  1922  048D  1283               	bcf	3,5	;RP0=0, select bank0
  1923  048E  1303               	bcf	3,6	;RP1=0, select bank0
  1924  048F  0868               	movf	TravelPath@n,w
  1925  0490  3EE0               	addlw	(low ((_pathShortest| (0+256)+16)))& (0+255)
  1926  0491  0084               	movwf	4
  1927  0492  1783               	bsf	3,7	;select IRP bank3
  1928  0493  0800               	movf	0,w
  1929  0494  023B               	subwf	_y,w
  1930  0495  1C03               	btfss	3,0
  1931  0496  2CBE               	goto	l2981
  1932  0497  2CCC               	goto	l2985
  1933  0498                     l2969:	
  1934                           ;main.c: 319: case 1: Turn90(0);
  1935                           
  1936                           ;main.c: 317: switch(orientation){
  1937                           
  1938  0498  3000               	movlw	0
  1939  0499  120A  118A  2516  120A  118A  	fcall	_Turn90
  1940                           
  1941                           ;main.c: 320: break;
  1942  049E  2D0A               	goto	l3003
  1943  049F                     l2971:	
  1944                           ;main.c: 322: case 3: Turn90(1);
  1945                           
  1946  049F  3001               	movlw	1
  1947  04A0  120A  118A  2516  120A  118A  	fcall	_Turn90
  1948                           
  1949                           ;main.c: 323: break;
  1950  04A5  2D0A               	goto	l3003
  1951  04A6                     l2973:	
  1952                           ;main.c: 325: case 0: Turn90(1);
  1953                           
  1954  04A6  3001               	movlw	1
  1955  04A7  120A  118A  2516  120A  118A  	fcall	_Turn90
  1956                           
  1957                           ;main.c: 326: _delay((unsigned long)((5)*(20000000/4000.0)));
  1958  04AC  3021               	movlw	33
  1959  04AD  1283               	bcf	3,5	;RP0=0, select bank0
  1960  04AE  1303               	bcf	3,6	;RP1=0, select bank0
  1961  04AF  00E6               	movwf	??_TravelPath+1
  1962  04B0  3076               	movlw	118
  1963  04B1  00E5               	movwf	??_TravelPath
  1964  04B2                     u2457:	
  1965  04B2  0BE5               	decfsz	??_TravelPath,f
  1966  04B3  2CB2               	goto	u2457
  1967  04B4  0BE6               	decfsz	??_TravelPath+1,f
  1968  04B5  2CB2               	goto	u2457
  1969  04B6  0000               	nop
  1970                           
  1971                           ;main.c: 327: Turn90(1);
  1972  04B7  3001               	movlw	1
  1973  04B8  120A  118A  2516  120A  118A  	fcall	_Turn90
  1974                           
  1975                           ;main.c: 329: }
  1976                           
  1977                           ;main.c: 328: break;
  1978  04BD  2D0A               	goto	l3003
  1979  04BE                     l2981:	
  1980  04BE  1283               	bcf	3,5	;RP0=0, select bank0
  1981  04BF  1303               	bcf	3,6	;RP1=0, select bank0
  1982  04C0  0854               	movf	_orientation,w
  1983                           
  1984                           ; Switch size 1, requested type "space"
  1985                           ; Number of cases is 3, Range of values is 0 to 3
  1986                           ; switch strategies available:
  1987                           ; Name         Instructions Cycles
  1988                           ; simple_byte           10     6 (average)
  1989                           ; direct_byte           20     8 (fixed)
  1990                           ; jumptable            260     6 (fixed)
  1991                           ;	Chosen strategy is simple_byte
  1992  04C1  3A00               	xorlw	0	; case 0
  1993  04C2  1903               	skipnz
  1994  04C3  2CA6               	goto	l2973
  1995  04C4  3A01               	xorlw	1	; case 1
  1996  04C5  1903               	skipnz
  1997  04C6  2C98               	goto	l2969
  1998  04C7  3A02               	xorlw	2	; case 3
  1999  04C8  1903               	skipnz
  2000  04C9  2C9F               	goto	l2971
  2001  04CA  2CCB               	goto	l2983
  2002  04CB                     l2983:	
  2003  04CB  2D0A               	goto	l3003
  2004  04CC                     l2985:	
  2005                           ;main.c: 333: }
  2006                           
  2007                           ;main.c: 331: Drive1m();
  2008                           
  2009                           
  2010                           ;main.c: 336: else if (path[1][n] < y){
  2011  04CC  1283               	bcf	3,5	;RP0=0, select bank0
  2012  04CD  1303               	bcf	3,6	;RP1=0, select bank0
  2013  04CE  0868               	movf	TravelPath@n,w
  2014  04CF  3EB0               	addlw	(low ((_path| 0+16)))& (0+255)
  2015  04D0  0084               	movwf	4
  2016  04D1  083B               	movf	_y,w
  2017  04D2  1383               	bcf	3,7	;select IRP bank1
  2018  04D3  0200               	subwf	0,w
  2019  04D4  1C03               	btfss	3,0
  2020  04D5  2CFD               	goto	l3001
  2021  04D6  2D0F               	goto	l3005
  2022  04D7                     l2989:	
  2023                           ;main.c: 339: case 1: Turn90(1);
  2024                           
  2025                           ;main.c: 337: switch (orientation){
  2026                           
  2027  04D7  3001               	movlw	1
  2028  04D8  120A  118A  2516  120A  118A  	fcall	_Turn90
  2029                           
  2030                           ;main.c: 340: break;
  2031  04DD  2D0A               	goto	l3003
  2032  04DE                     l2991:	
  2033                           ;main.c: 342: case 3: Turn90(0);
  2034                           
  2035  04DE  3000               	movlw	0
  2036  04DF  120A  118A  2516  120A  118A  	fcall	_Turn90
  2037                           
  2038                           ;main.c: 343: break;
  2039  04E4  2D0A               	goto	l3003
  2040  04E5                     l2993:	
  2041                           ;main.c: 345: case 2: Turn90(1);
  2042                           
  2043  04E5  3001               	movlw	1
  2044  04E6  120A  118A  2516  120A  118A  	fcall	_Turn90
  2045                           
  2046                           ;main.c: 346: _delay((unsigned long)((5)*(20000000/4000.0)));
  2047  04EB  3021               	movlw	33
  2048  04EC  1283               	bcf	3,5	;RP0=0, select bank0
  2049  04ED  1303               	bcf	3,6	;RP1=0, select bank0
  2050  04EE  00E6               	movwf	??_TravelPath+1
  2051  04EF  3076               	movlw	118
  2052  04F0  00E5               	movwf	??_TravelPath
  2053  04F1                     u2467:	
  2054  04F1  0BE5               	decfsz	??_TravelPath,f
  2055  04F2  2CF1               	goto	u2467
  2056  04F3  0BE6               	decfsz	??_TravelPath+1,f
  2057  04F4  2CF1               	goto	u2467
  2058  04F5  0000               	nop
  2059                           
  2060                           ;main.c: 347: Turn90(1);
  2061  04F6  3001               	movlw	1
  2062  04F7  120A  118A  2516  120A  118A  	fcall	_Turn90
  2063                           
  2064                           ;main.c: 349: }
  2065                           
  2066                           ;main.c: 348: break;
  2067  04FC  2D0A               	goto	l3003
  2068  04FD                     l3001:	
  2069  04FD  1283               	bcf	3,5	;RP0=0, select bank0
  2070  04FE  1303               	bcf	3,6	;RP1=0, select bank0
  2071  04FF  0854               	movf	_orientation,w
  2072                           
  2073                           ; Switch size 1, requested type "space"
  2074                           ; Number of cases is 3, Range of values is 1 to 3
  2075                           ; switch strategies available:
  2076                           ; Name         Instructions Cycles
  2077                           ; simple_byte           10     6 (average)
  2078                           ; direct_byte           20    11 (fixed)
  2079                           ; jumptable            263     9 (fixed)
  2080                           ;	Chosen strategy is simple_byte
  2081  0500  3A01               	xorlw	1	; case 1
  2082  0501  1903               	skipnz
  2083  0502  2CD7               	goto	l2989
  2084  0503  3A03               	xorlw	3	; case 2
  2085  0504  1903               	skipnz
  2086  0505  2CE5               	goto	l2993
  2087  0506  3A01               	xorlw	1	; case 3
  2088  0507  1903               	skipnz
  2089  0508  2CDE               	goto	l2991
  2090  0509  2D0A               	goto	l3003
  2091  050A                     l3003:	
  2092                           
  2093                           ;main.c: 351: Drive1m();
  2094  050A  120A  118A  26DE  120A  118A  	fcall	_Drive1m
  2095  050F                     l3005:	
  2096  050F  3001               	movlw	1
  2097  0510  1283               	bcf	3,5	;RP0=0, select bank0
  2098  0511  1303               	bcf	3,6	;RP1=0, select bank0
  2099  0512  00E5               	movwf	??_TravelPath
  2100  0513  0865               	movf	??_TravelPath,w
  2101  0514  07E8               	addwf	TravelPath@n,f
  2102  0515  2BEE               	goto	l3007
  2103  0516                     __end_of_TravelPath:	
  2104                           
  2105                           	psect	text7
  2106  0516                     __ptext7:	
  2107 ;; *************** function _Turn90 *****************
  2108 ;; Defined at:
  2109 ;;		line 240 in file "main.c"
  2110 ;; Parameters:    Size  Location     Type
  2111 ;;  direction       1    wreg     unsigned char 
  2112 ;; Auto vars:     Size  Location     Type
  2113 ;;  direction       1   13[BANK0 ] unsigned char 
  2114 ;; Return value:  Size  Location     Type
  2115 ;;                  1    wreg      void 
  2116 ;; Registers used:
  2117 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2118 ;; Tracked objects:
  2119 ;;		On entry : 0/0
  2120 ;;		On exit  : 0/0
  2121 ;;		Unchanged: 0/0
  2122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2123 ;;      Params:         0       0       0       0       0
  2124 ;;      Locals:         0       1       0       0       0
  2125 ;;      Temps:          0       3       0       0       0
  2126 ;;      Totals:         0       4       0       0       0
  2127 ;;Total ram usage:        4 bytes
  2128 ;; Hardware stack levels used:    1
  2129 ;; Hardware stack levels required when called:    3
  2130 ;; This function calls:
  2131 ;;		_Drive
  2132 ;;		_DriveDirect
  2133 ;;		_getSensorData
  2134 ;; This function is called by:
  2135 ;;		_TravelPath
  2136 ;; This function uses a non-reentrant model
  2137 ;;
  2138                           
  2139                           
  2140                           ;psect for function _Turn90
  2141  0516                     _Turn90:	
  2142                           
  2143                           ;incstack = 0
  2144                           ; Regs used in _Turn90: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2145                           ;Turn90@direction stored from wreg
  2146  0516  1283               	bcf	3,5	;RP0=0, select bank0
  2147  0517  1303               	bcf	3,6	;RP1=0, select bank0
  2148  0518  00E4               	movwf	Turn90@direction
  2149                           
  2150                           ;main.c: 241: angle = 0;
  2151  0519  01F8               	clrf	_angle
  2152  051A  01F9               	clrf	_angle+1
  2153                           
  2154                           ;main.c: 242: if (direction == 1){
  2155  051B  0364               	decf	Turn90@direction,w
  2156  051C  1D03               	btfss	3,2
  2157  051D  2D57               	goto	l2675
  2158                           
  2159                           ;main.c: 244: if (orientation == 0)
  2160  051E  0854               	movf	_orientation,w
  2161  051F  1D03               	btfss	3,2
  2162  0520  2D26               	goto	l2667
  2163                           
  2164                           ;main.c: 245: orientation = 3;
  2165  0521  3003               	movlw	3
  2166  0522  00E1               	movwf	??_Turn90
  2167  0523  0861               	movf	??_Turn90,w
  2168  0524  00D4               	movwf	_orientation
  2169  0525  2D28               	goto	l2669
  2170  0526                     l2667:	
  2171                           
  2172                           ;main.c: 246: else orientation--;
  2173  0526  3001               	movlw	1
  2174  0527  02D4               	subwf	_orientation,f
  2175  0528                     l2669:	
  2176                           
  2177                           ;main.c: 248: Drive(0,150,0x00,0x01);
  2178  0528  3096               	movlw	150
  2179  0529  00E1               	movwf	??_Turn90
  2180  052A  0861               	movf	??_Turn90,w
  2181  052B  00D8               	movwf	Drive@speedL
  2182  052C  01D9               	clrf	Drive@radH
  2183  052D  01DA               	clrf	Drive@radL
  2184  052E  0ADA               	incf	Drive@radL,f
  2185  052F  3000               	movlw	0
  2186  0530  120A  158A  27D8  120A  118A  	fcall	_Drive
  2187  0535                     l2673:	
  2188                           ;main.c: 249: while (angle < 86){
  2189                           
  2190  0535  0879               	movf	_angle+1,w
  2191  0536  3A80               	xorlw	128
  2192  0537  00FF               	movwf	127
  2193  0538  3080               	movlw	128
  2194  0539  027F               	subwf	127,w
  2195  053A  1D03               	skipz
  2196  053B  2D3E               	goto	u1735
  2197  053C  3056               	movlw	86
  2198  053D  0278               	subwf	_angle,w
  2199  053E                     u1735:	
  2200  053E  1803               	btfsc	3,0
  2201  053F  2D57               	goto	l2675
  2202                           
  2203                           ;main.c: 250: angle = angle + getSensorData(20,2);
  2204  0540  3002               	movlw	2
  2205  0541  1283               	bcf	3,5	;RP0=0, select bank0
  2206  0542  1303               	bcf	3,6	;RP1=0, select bank0
  2207  0543  00E1               	movwf	??_Turn90
  2208  0544  0861               	movf	??_Turn90,w
  2209  0545  00D9               	movwf	getSensorData@bytes
  2210  0546  3014               	movlw	20
  2211  0547  120A  118A  2791  120A  118A  	fcall	_getSensorData
  2212  054C  0878               	movf	_angle,w
  2213  054D  1283               	bcf	3,5	;RP0=0, select bank0
  2214  054E  1303               	bcf	3,6	;RP1=0, select bank0
  2215  054F  0759               	addwf	?_getSensorData,w
  2216  0550  00F8               	movwf	_angle
  2217  0551  0879               	movf	_angle+1,w
  2218  0552  1803               	skipnc
  2219  0553  0A79               	incf	_angle+1,w
  2220  0554  075A               	addwf	?_getSensorData+1,w
  2221  0555  00F9               	movwf	_angle+1
  2222  0556  2D35               	goto	l2673
  2223  0557                     l2675:	
  2224                           
  2225                           ;main.c: 251: }
  2226                           ;main.c: 252: }
  2227                           ;main.c: 254: if (direction == 0){
  2228  0557  1283               	bcf	3,5	;RP0=0, select bank0
  2229  0558  1303               	bcf	3,6	;RP1=0, select bank0
  2230  0559  0864               	movf	Turn90@direction,w
  2231  055A  1D03               	btfss	3,2
  2232  055B  2D9A               	goto	l2689
  2233                           
  2234                           ;main.c: 256: if (orientation == 3)
  2235  055C  3003               	movlw	3
  2236  055D  0654               	xorwf	_orientation,w
  2237  055E  1D03               	btfss	3,2
  2238  055F  2D62               	goto	l2681
  2239                           
  2240                           ;main.c: 257: orientation = 0;
  2241  0560  01D4               	clrf	_orientation
  2242  0561  2D66               	goto	l2683
  2243  0562                     l2681:	
  2244                           
  2245                           ;main.c: 258: else orientation++;
  2246  0562  3001               	movlw	1
  2247  0563  00E1               	movwf	??_Turn90
  2248  0564  0861               	movf	??_Turn90,w
  2249  0565  07D4               	addwf	_orientation,f
  2250  0566                     l2683:	
  2251                           
  2252                           ;main.c: 260: Drive(0,150,0xFF,0xFF);
  2253  0566  3096               	movlw	150
  2254  0567  00E1               	movwf	??_Turn90
  2255  0568  0861               	movf	??_Turn90,w
  2256  0569  00D8               	movwf	Drive@speedL
  2257  056A  30FF               	movlw	255
  2258  056B  00E2               	movwf	??_Turn90+1
  2259  056C  0862               	movf	??_Turn90+1,w
  2260  056D  00D9               	movwf	Drive@radH
  2261  056E  30FF               	movlw	255
  2262  056F  00E3               	movwf	??_Turn90+2
  2263  0570  0863               	movf	??_Turn90+2,w
  2264  0571  00DA               	movwf	Drive@radL
  2265  0572  3000               	movlw	0
  2266  0573  120A  158A  27D8  120A  118A  	fcall	_Drive
  2267  0578                     l2687:	
  2268                           ;main.c: 261: while (angle > -86){
  2269                           
  2270  0578  0879               	movf	_angle+1,w
  2271  0579  3A80               	xorlw	128
  2272  057A  00FF               	movwf	127
  2273  057B  307F               	movlw	127
  2274  057C  027F               	subwf	127,w
  2275  057D  1D03               	skipz
  2276  057E  2D81               	goto	u1765
  2277  057F  30AB               	movlw	171
  2278  0580  0278               	subwf	_angle,w
  2279  0581                     u1765:	
  2280  0581  1C03               	btfss	3,0
  2281  0582  2D9A               	goto	l2689
  2282                           
  2283                           ;main.c: 262: angle = angle + getSensorData(20,2);
  2284  0583  3002               	movlw	2
  2285  0584  1283               	bcf	3,5	;RP0=0, select bank0
  2286  0585  1303               	bcf	3,6	;RP1=0, select bank0
  2287  0586  00E1               	movwf	??_Turn90
  2288  0587  0861               	movf	??_Turn90,w
  2289  0588  00D9               	movwf	getSensorData@bytes
  2290  0589  3014               	movlw	20
  2291  058A  120A  118A  2791  120A  118A  	fcall	_getSensorData
  2292  058F  0878               	movf	_angle,w
  2293  0590  1283               	bcf	3,5	;RP0=0, select bank0
  2294  0591  1303               	bcf	3,6	;RP1=0, select bank0
  2295  0592  0759               	addwf	?_getSensorData,w
  2296  0593  00F8               	movwf	_angle
  2297  0594  0879               	movf	_angle+1,w
  2298  0595  1803               	skipnc
  2299  0596  0A79               	incf	_angle+1,w
  2300  0597  075A               	addwf	?_getSensorData+1,w
  2301  0598  00F9               	movwf	_angle+1
  2302  0599  2D78               	goto	l2687
  2303  059A                     l2689:	
  2304                           
  2305                           ;main.c: 263: }
  2306                           ;main.c: 264: }
  2307                           ;main.c: 265: DriveDirect(0,0);
  2308  059A  3000               	movlw	0
  2309  059B  1283               	bcf	3,5	;RP0=0, select bank0
  2310  059C  1303               	bcf	3,6	;RP1=0, select bank0
  2311  059D  00D8               	movwf	DriveDirect@VelocityRight
  2312  059E  00D9               	movwf	DriveDirect@VelocityRight+1
  2313  059F  3000               	movlw	0
  2314  05A0  00DA               	movwf	DriveDirect@VelocityLeft
  2315  05A1  00DB               	movwf	DriveDirect@VelocityLeft+1
  2316  05A2  120A  118A  2651  120A  118A  	fcall	_DriveDirect
  2317                           
  2318                           ;main.c: 266: _delay((unsigned long)((100)*(20000000/4000.0)));
  2319  05A7  3003               	movlw	3
  2320  05A8  1283               	bcf	3,5	;RP0=0, select bank0
  2321  05A9  1303               	bcf	3,6	;RP1=0, select bank0
  2322  05AA  00E3               	movwf	??_Turn90+2
  2323  05AB  308A               	movlw	138
  2324  05AC  00E2               	movwf	??_Turn90+1
  2325  05AD  3056               	movlw	86
  2326  05AE  00E1               	movwf	??_Turn90
  2327  05AF                     u2477:	
  2328  05AF  0BE1               	decfsz	??_Turn90,f
  2329  05B0  2DAF               	goto	u2477
  2330  05B1  0BE2               	decfsz	??_Turn90+1,f
  2331  05B2  2DAF               	goto	u2477
  2332  05B3  0BE3               	decfsz	??_Turn90+2,f
  2333  05B4  2DAF               	goto	u2477
  2334  05B5  2DB6               	nop2
  2335  05B6  0008               	return
  2336  05B7                     __end_of_Turn90:	
  2337                           
  2338                           	psect	text8
  2339  0FD8                     __ptext8:	
  2340 ;; *************** function _Drive *****************
  2341 ;; Defined at:
  2342 ;;		line 45 in file "ser.c"
  2343 ;; Parameters:    Size  Location     Type
  2344 ;;  speedH          1    wreg     unsigned char 
  2345 ;;  speedL          1    1[BANK0 ] unsigned char 
  2346 ;;  radH            1    2[BANK0 ] unsigned char 
  2347 ;;  radL            1    3[BANK0 ] unsigned char 
  2348 ;; Auto vars:     Size  Location     Type
  2349 ;;  speedH          1    4[BANK0 ] unsigned char 
  2350 ;; Return value:  Size  Location     Type
  2351 ;;                  1    wreg      void 
  2352 ;; Registers used:
  2353 ;;		wreg, status,2, status,0, pclath, cstack
  2354 ;; Tracked objects:
  2355 ;;		On entry : 0/0
  2356 ;;		On exit  : 0/0
  2357 ;;		Unchanged: 0/0
  2358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2359 ;;      Params:         0       3       0       0       0
  2360 ;;      Locals:         0       1       0       0       0
  2361 ;;      Temps:          0       0       0       0       0
  2362 ;;      Totals:         0       4       0       0       0
  2363 ;;Total ram usage:        4 bytes
  2364 ;; Hardware stack levels used:    1
  2365 ;; Hardware stack levels required when called:    2
  2366 ;; This function calls:
  2367 ;;		_ser_putch
  2368 ;; This function is called by:
  2369 ;;		_Turn90
  2370 ;; This function uses a non-reentrant model
  2371 ;;
  2372                           
  2373                           
  2374                           ;psect for function _Drive
  2375  0FD8                     _Drive:	
  2376                           
  2377                           ;incstack = 0
  2378                           ; Regs used in _Drive: [wreg+status,2+status,0+pclath+cstack]
  2379                           ;Drive@speedH stored from wreg
  2380  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  2381  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  2382  0FDA  00DB               	movwf	Drive@speedH
  2383                           
  2384                           ;ser.c: 46: ser_putch(137);
  2385  0FDB  3089               	movlw	137
  2386  0FDC  120A  158A  26C7  120A  158A  	fcall	_ser_putch
  2387                           
  2388                           ;ser.c: 47: ser_putch(speedH);
  2389  0FE1  1283               	bcf	3,5	;RP0=0, select bank0
  2390  0FE2  1303               	bcf	3,6	;RP1=0, select bank0
  2391  0FE3  085B               	movf	Drive@speedH,w
  2392  0FE4  120A  158A  26C7  120A  158A  	fcall	_ser_putch
  2393                           
  2394                           ;ser.c: 48: ser_putch(speedL);
  2395  0FE9  1283               	bcf	3,5	;RP0=0, select bank0
  2396  0FEA  1303               	bcf	3,6	;RP1=0, select bank0
  2397  0FEB  0858               	movf	Drive@speedL,w
  2398  0FEC  120A  158A  26C7  120A  158A  	fcall	_ser_putch
  2399                           
  2400                           ;ser.c: 49: ser_putch(radH);
  2401  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  2402  0FF2  1303               	bcf	3,6	;RP1=0, select bank0
  2403  0FF3  0859               	movf	Drive@radH,w
  2404  0FF4  120A  158A  26C7  120A  158A  	fcall	_ser_putch
  2405                           
  2406                           ;ser.c: 50: ser_putch(radL);
  2407  0FF9  1283               	bcf	3,5	;RP0=0, select bank0
  2408  0FFA  1303               	bcf	3,6	;RP1=0, select bank0
  2409  0FFB  085A               	movf	Drive@radL,w
  2410  0FFC  120A  158A  26C7   	fcall	_ser_putch
  2411  0FFF  0008               	return
  2412  1000                     __end_of_Drive:	
  2413                           
  2414                           	psect	text9
  2415  06DE                     __ptext9:	
  2416 ;; *************** function _Drive1m *****************
  2417 ;; Defined at:
  2418 ;;		line 215 in file "main.c"
  2419 ;; Parameters:    Size  Location     Type
  2420 ;;		None
  2421 ;; Auto vars:     Size  Location     Type
  2422 ;;		None
  2423 ;; Return value:  Size  Location     Type
  2424 ;;                  1    wreg      void 
  2425 ;; Registers used:
  2426 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2427 ;; Tracked objects:
  2428 ;;		On entry : 0/0
  2429 ;;		On exit  : 0/0
  2430 ;;		Unchanged: 0/0
  2431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2432 ;;      Params:         0       0       0       0       0
  2433 ;;      Locals:         0       0       0       0       0
  2434 ;;      Temps:          0       3       0       0       0
  2435 ;;      Totals:         0       3       0       0       0
  2436 ;;Total ram usage:        3 bytes
  2437 ;; Hardware stack levels used:    1
  2438 ;; Hardware stack levels required when called:    3
  2439 ;; This function calls:
  2440 ;;		_DriveDirect
  2441 ;;		_getSensorData
  2442 ;; This function is called by:
  2443 ;;		_TravelPath
  2444 ;; This function uses a non-reentrant model
  2445 ;;
  2446                           
  2447                           
  2448                           ;psect for function _Drive1m
  2449  06DE                     _Drive1m:	
  2450                           
  2451                           ;main.c: 219: switch(orientation){
  2452                           
  2453                           ;incstack = 0
  2454                           ; Regs used in _Drive1m: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2455  06DE  2EF1               	goto	l2645
  2456  06DF                     l2635:	
  2457                           ;main.c: 220: case 0: y--;
  2458                           
  2459  06DF  3001               	movlw	1
  2460  06E0  1283               	bcf	3,5	;RP0=0, select bank0
  2461  06E1  1303               	bcf	3,6	;RP1=0, select bank0
  2462  06E2  02BB               	subwf	_y,f
  2463                           
  2464                           ;main.c: 221: break;
  2465  06E3  2F01               	goto	l2647
  2466  06E4                     l2637:	
  2467                           ;main.c: 222: case 1: x++;
  2468                           
  2469  06E4  3001               	movlw	1
  2470  06E5  00E1               	movwf	??_Drive1m
  2471  06E6  0861               	movf	??_Drive1m,w
  2472  06E7  07D6               	addwf	_x,f
  2473                           
  2474                           ;main.c: 223: break;
  2475  06E8  2F01               	goto	l2647
  2476  06E9                     l2639:	
  2477                           ;main.c: 224: case 2: y++;
  2478                           
  2479  06E9  3001               	movlw	1
  2480  06EA  00E1               	movwf	??_Drive1m
  2481  06EB  0861               	movf	??_Drive1m,w
  2482  06EC  07BB               	addwf	_y,f
  2483                           
  2484                           ;main.c: 225: break;
  2485  06ED  2F01               	goto	l2647
  2486  06EE                     l2641:	
  2487                           ;main.c: 226: case 3: x--;
  2488                           
  2489  06EE  3001               	movlw	1
  2490  06EF  02D6               	subwf	_x,f
  2491                           
  2492                           ;main.c: 228: }
  2493                           
  2494                           ;main.c: 227: break;
  2495  06F0  2F01               	goto	l2647
  2496  06F1                     l2645:	
  2497  06F1  1283               	bcf	3,5	;RP0=0, select bank0
  2498  06F2  1303               	bcf	3,6	;RP1=0, select bank0
  2499  06F3  0854               	movf	_orientation,w
  2500                           
  2501                           ; Switch size 1, requested type "space"
  2502                           ; Number of cases is 4, Range of values is 0 to 3
  2503                           ; switch strategies available:
  2504                           ; Name         Instructions Cycles
  2505                           ; simple_byte           13     7 (average)
  2506                           ; direct_byte           20     8 (fixed)
  2507                           ; jumptable            260     6 (fixed)
  2508                           ;	Chosen strategy is simple_byte
  2509  06F4  3A00               	xorlw	0	; case 0
  2510  06F5  1903               	skipnz
  2511  06F6  2EDF               	goto	l2635
  2512  06F7  3A01               	xorlw	1	; case 1
  2513  06F8  1903               	skipnz
  2514  06F9  2EE4               	goto	l2637
  2515  06FA  3A03               	xorlw	3	; case 2
  2516  06FB  1903               	skipnz
  2517  06FC  2EE9               	goto	l2639
  2518  06FD  3A01               	xorlw	1	; case 3
  2519  06FE  1903               	skipnz
  2520  06FF  2EEE               	goto	l2641
  2521  0700  2F01               	goto	l2647
  2522  0701                     l2647:	
  2523                           
  2524                           ;main.c: 230: distance = 0;
  2525  0701  01A4               	clrf	_distance
  2526  0702  01A5               	clrf	_distance+1
  2527                           
  2528                           ;main.c: 231: DriveDirect(250,250);
  2529  0703  30FA               	movlw	250
  2530  0704  00D8               	movwf	DriveDirect@VelocityRight
  2531  0705  3000               	movlw	0
  2532  0706  00D9               	movwf	DriveDirect@VelocityRight+1
  2533  0707  30FA               	movlw	250
  2534  0708  00DA               	movwf	DriveDirect@VelocityLeft
  2535  0709  3000               	movlw	0
  2536  070A  00DB               	movwf	DriveDirect@VelocityLeft+1
  2537  070B  120A  118A  2651  120A  118A  	fcall	_DriveDirect
  2538  0710                     l2653:	
  2539                           ;main.c: 232: while (distance < 1000){
  2540                           
  2541  0710  1283               	bcf	3,5	;RP0=0, select bank0
  2542  0711  1303               	bcf	3,6	;RP1=0, select bank0
  2543  0712  0825               	movf	_distance+1,w
  2544  0713  3A80               	xorlw	128
  2545  0714  00FF               	movwf	127
  2546  0715  3083               	movlw	131
  2547  0716  027F               	subwf	127,w
  2548  0717  1D03               	skipz
  2549  0718  2F1B               	goto	u1705
  2550  0719  30E8               	movlw	232
  2551  071A  0224               	subwf	_distance,w
  2552  071B                     u1705:	
  2553  071B  1803               	btfsc	3,0
  2554  071C  2F34               	goto	l2655
  2555                           
  2556                           ;main.c: 233: distance = distance + getSensorData(19,2);
  2557  071D  3002               	movlw	2
  2558  071E  1283               	bcf	3,5	;RP0=0, select bank0
  2559  071F  1303               	bcf	3,6	;RP1=0, select bank0
  2560  0720  00E1               	movwf	??_Drive1m
  2561  0721  0861               	movf	??_Drive1m,w
  2562  0722  00D9               	movwf	getSensorData@bytes
  2563  0723  3013               	movlw	19
  2564  0724  120A  118A  2791  120A  118A  	fcall	_getSensorData
  2565  0729  1283               	bcf	3,5	;RP0=0, select bank0
  2566  072A  1303               	bcf	3,6	;RP1=0, select bank0
  2567  072B  0824               	movf	_distance,w
  2568  072C  0759               	addwf	?_getSensorData,w
  2569  072D  00A4               	movwf	_distance
  2570  072E  0825               	movf	_distance+1,w
  2571  072F  1803               	skipnc
  2572  0730  0A25               	incf	_distance+1,w
  2573  0731  075A               	addwf	?_getSensorData+1,w
  2574  0732  00A5               	movwf	_distance+1
  2575  0733  2F10               	goto	l2653
  2576  0734                     l2655:	
  2577                           
  2578                           ;main.c: 234: }
  2579                           ;main.c: 235: DriveDirect(0,0);
  2580  0734  3000               	movlw	0
  2581  0735  1283               	bcf	3,5	;RP0=0, select bank0
  2582  0736  1303               	bcf	3,6	;RP1=0, select bank0
  2583  0737  00D8               	movwf	DriveDirect@VelocityRight
  2584  0738  00D9               	movwf	DriveDirect@VelocityRight+1
  2585  0739  3000               	movlw	0
  2586  073A  00DA               	movwf	DriveDirect@VelocityLeft
  2587  073B  00DB               	movwf	DriveDirect@VelocityLeft+1
  2588  073C  120A  118A  2651  120A  118A  	fcall	_DriveDirect
  2589                           
  2590                           ;main.c: 236: _delay((unsigned long)((100)*(20000000/4000.0)));
  2591  0741  3003               	movlw	3
  2592  0742  1283               	bcf	3,5	;RP0=0, select bank0
  2593  0743  1303               	bcf	3,6	;RP1=0, select bank0
  2594  0744  00E3               	movwf	??_Drive1m+2
  2595  0745  308A               	movlw	138
  2596  0746  00E2               	movwf	??_Drive1m+1
  2597  0747  3056               	movlw	86
  2598  0748  00E1               	movwf	??_Drive1m
  2599  0749                     u2487:	
  2600  0749  0BE1               	decfsz	??_Drive1m,f
  2601  074A  2F49               	goto	u2487
  2602  074B  0BE2               	decfsz	??_Drive1m+1,f
  2603  074C  2F49               	goto	u2487
  2604  074D  0BE3               	decfsz	??_Drive1m+2,f
  2605  074E  2F49               	goto	u2487
  2606  074F  2F50               	nop2
  2607  0750  0008               	return
  2608  0751                     __end_of_Drive1m:	
  2609                           
  2610                           	psect	text10
  2611  0791                     __ptext10:	
  2612 ;; *************** function _getSensorData *****************
  2613 ;; Defined at:
  2614 ;;		line 85 in file "ser.c"
  2615 ;; Parameters:    Size  Location     Type
  2616 ;;  packetID        1    wreg     unsigned char 
  2617 ;;  bytes           1    2[BANK0 ] unsigned char 
  2618 ;; Auto vars:     Size  Location     Type
  2619 ;;  packetID        1    6[BANK0 ] unsigned char 
  2620 ;;  sensor          2    7[BANK0 ] int 
  2621 ;; Return value:  Size  Location     Type
  2622 ;;                  2    2[BANK0 ] int 
  2623 ;; Registers used:
  2624 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2625 ;; Tracked objects:
  2626 ;;		On entry : 0/0
  2627 ;;		On exit  : 0/0
  2628 ;;		Unchanged: 0/0
  2629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2630 ;;      Params:         0       2       0       0       0
  2631 ;;      Locals:         0       3       0       0       0
  2632 ;;      Temps:          0       2       0       0       0
  2633 ;;      Totals:         0       7       0       0       0
  2634 ;;Total ram usage:        7 bytes
  2635 ;; Hardware stack levels used:    1
  2636 ;; Hardware stack levels required when called:    2
  2637 ;; This function calls:
  2638 ;;		_ser_getch
  2639 ;;		_ser_putch
  2640 ;; This function is called by:
  2641 ;;		_Drive1m
  2642 ;;		_Turn90
  2643 ;; This function uses a non-reentrant model
  2644 ;;
  2645                           
  2646                           
  2647                           ;psect for function _getSensorData
  2648  0791                     _getSensorData:	
  2649                           
  2650                           ;incstack = 0
  2651                           ; Regs used in _getSensorData: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2652                           ;getSensorData@packetID stored from wreg
  2653  0791  1283               	bcf	3,5	;RP0=0, select bank0
  2654  0792  1303               	bcf	3,6	;RP1=0, select bank0
  2655  0793  00DD               	movwf	getSensorData@packetID
  2656                           
  2657                           ;ser.c: 86: ser_putch(142);
  2658  0794  308E               	movlw	142
  2659  0795  120A  158A  26C7  120A  118A  	fcall	_ser_putch
  2660                           
  2661                           ;ser.c: 87: ser_putch(packetID);
  2662  079A  1283               	bcf	3,5	;RP0=0, select bank0
  2663  079B  1303               	bcf	3,6	;RP1=0, select bank0
  2664  079C  085D               	movf	getSensorData@packetID,w
  2665  079D  120A  158A  26C7  120A  118A  	fcall	_ser_putch
  2666                           
  2667                           ;ser.c: 89: if (bytes == 2)
  2668  07A2  3002               	movlw	2
  2669  07A3  1283               	bcf	3,5	;RP0=0, select bank0
  2670  07A4  1303               	bcf	3,6	;RP1=0, select bank0
  2671  07A5  0659               	xorwf	getSensorData@bytes,w
  2672  07A6  1D03               	btfss	3,2
  2673  07A7  2FB3               	goto	l2593
  2674                           
  2675                           ;ser.c: 90: highByte = ser_getch();
  2676  07A8  120A  158A  26BD  120A  118A  	fcall	_ser_getch
  2677  07AD  1283               	bcf	3,5	;RP0=0, select bank0
  2678  07AE  1303               	bcf	3,6	;RP1=0, select bank0
  2679  07AF  00DB               	movwf	??_getSensorData
  2680  07B0  085B               	movf	??_getSensorData,w
  2681  07B1  00BF               	movwf	_highByte
  2682  07B2  2FB4               	goto	l2595
  2683  07B3                     l2593:	
  2684                           
  2685                           ;ser.c: 91: else
  2686                           ;ser.c: 92: highByte = 0;
  2687  07B3  01BF               	clrf	_highByte
  2688  07B4                     l2595:	
  2689                           
  2690                           ;ser.c: 94: lowByte = ser_getch();
  2691  07B4  120A  158A  26BD   	fcall	_ser_getch
  2692  07B7  1283               	bcf	3,5	;RP0=0, select bank0
  2693  07B8  1303               	bcf	3,6	;RP1=0, select bank0
  2694  07B9  00DB               	movwf	??_getSensorData
  2695  07BA  085B               	movf	??_getSensorData,w
  2696  07BB  00B0               	movwf	_lowByte
  2697                           
  2698                           ;ser.c: 96: signed int sensor = (256*highByte + lowByte);
  2699  07BC  083F               	movf	_highByte,w
  2700  07BD  00DB               	movwf	??_getSensorData
  2701  07BE  01DC               	clrf	??_getSensorData+1
  2702  07BF  085B               	movf	??_getSensorData,w
  2703  07C0  00DC               	movwf	??_getSensorData+1
  2704  07C1  01DB               	clrf	??_getSensorData
  2705  07C2  0830               	movf	_lowByte,w
  2706  07C3  075B               	addwf	??_getSensorData,w
  2707  07C4  00DE               	movwf	getSensorData@sensor
  2708  07C5  3000               	movlw	0
  2709  07C6  1803               	skipnc
  2710  07C7  3001               	movlw	1
  2711  07C8  075C               	addwf	??_getSensorData+1,w
  2712  07C9  00DF               	movwf	getSensorData@sensor+1
  2713                           
  2714                           ;ser.c: 98: return sensor;
  2715  07CA  085F               	movf	getSensorData@sensor+1,w
  2716  07CB  00DA               	movwf	?_getSensorData+1
  2717  07CC  085E               	movf	getSensorData@sensor,w
  2718  07CD  00D9               	movwf	?_getSensorData
  2719  07CE  0008               	return
  2720  07CF                     __end_of_getSensorData:	
  2721                           
  2722                           	psect	text11
  2723  0EBD                     __ptext11:	
  2724 ;; *************** function _ser_getch *****************
  2725 ;; Defined at:
  2726 ;;		line 35 in file "ser.c"
  2727 ;; Parameters:    Size  Location     Type
  2728 ;;		None
  2729 ;; Auto vars:     Size  Location     Type
  2730 ;;  rxbyte          1    1[BANK0 ] unsigned char 
  2731 ;; Return value:  Size  Location     Type
  2732 ;;                  1    wreg      unsigned char 
  2733 ;; Registers used:
  2734 ;;		wreg
  2735 ;; Tracked objects:
  2736 ;;		On entry : 0/0
  2737 ;;		On exit  : 0/0
  2738 ;;		Unchanged: 0/0
  2739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2740 ;;      Params:         0       0       0       0       0
  2741 ;;      Locals:         0       1       0       0       0
  2742 ;;      Temps:          0       1       0       0       0
  2743 ;;      Totals:         0       2       0       0       0
  2744 ;;Total ram usage:        2 bytes
  2745 ;; Hardware stack levels used:    1
  2746 ;; Hardware stack levels required when called:    1
  2747 ;; This function calls:
  2748 ;;		Nothing
  2749 ;; This function is called by:
  2750 ;;		_getSensorData
  2751 ;; This function uses a non-reentrant model
  2752 ;;
  2753                           
  2754                           
  2755                           ;psect for function _ser_getch
  2756  0EBD                     _ser_getch:	
  2757  0EBD                     l666:	
  2758                           ;ser.c: 36: while(!RCIF);
  2759                           
  2760                           ;incstack = 0
  2761                           ; Regs used in _ser_getch: [wreg]
  2762                           
  2763  0EBD  1283               	bcf	3,5	;RP0=0, select bank0
  2764  0EBE  1303               	bcf	3,6	;RP1=0, select bank0
  2765  0EBF  1E8C               	btfss	12,5	;volatile
  2766  0EC0  2EBD               	goto	l666
  2767                           
  2768                           ;ser.c: 37: unsigned char rxbyte = RCREG;
  2769  0EC1  081A               	movf	26,w	;volatile
  2770  0EC2  00D7               	movwf	??_ser_getch
  2771  0EC3  0857               	movf	??_ser_getch,w
  2772  0EC4  00D8               	movwf	ser_getch@rxbyte
  2773                           
  2774                           ;ser.c: 38: return rxbyte;
  2775  0EC5  0858               	movf	ser_getch@rxbyte,w
  2776  0EC6  0008               	return
  2777  0EC7                     __end_of_ser_getch:	
  2778                           
  2779                           	psect	text12
  2780  0651                     __ptext12:	
  2781 ;; *************** function _DriveDirect *****************
  2782 ;; Defined at:
  2783 ;;		line 54 in file "ser.c"
  2784 ;; Parameters:    Size  Location     Type
  2785 ;;  VelocityRigh    2    1[BANK0 ] int 
  2786 ;;  VelocityLeft    2    3[BANK0 ] int 
  2787 ;; Auto vars:     Size  Location     Type
  2788 ;;  data            2    8[BANK0 ] unsigned int 
  2789 ;;  data            2    6[BANK0 ] unsigned int 
  2790 ;; Return value:  Size  Location     Type
  2791 ;;                  1    wreg      void 
  2792 ;; Registers used:
  2793 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2794 ;; Tracked objects:
  2795 ;;		On entry : 0/0
  2796 ;;		On exit  : 0/0
  2797 ;;		Unchanged: 0/0
  2798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2799 ;;      Params:         0       4       0       0       0
  2800 ;;      Locals:         0       4       0       0       0
  2801 ;;      Temps:          0       1       0       0       0
  2802 ;;      Totals:         0       9       0       0       0
  2803 ;;Total ram usage:        9 bytes
  2804 ;; Hardware stack levels used:    1
  2805 ;; Hardware stack levels required when called:    2
  2806 ;; This function calls:
  2807 ;;		_ser_putch
  2808 ;; This function is called by:
  2809 ;;		_Drive1m
  2810 ;;		_Turn90
  2811 ;; This function uses a non-reentrant model
  2812 ;;
  2813                           
  2814                           
  2815                           ;psect for function _DriveDirect
  2816  0651                     _DriveDirect:	
  2817                           
  2818                           ;ser.c: 55: RightSpeedH = 0;
  2819                           
  2820                           ;incstack = 0
  2821                           ; Regs used in _DriveDirect: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2822  0651  1283               	bcf	3,5	;RP0=0, select bank0
  2823  0652  1303               	bcf	3,6	;RP1=0, select bank0
  2824  0653  01AC               	clrf	_RightSpeedH
  2825                           
  2826                           ;ser.c: 56: LeftSpeedH = 0;
  2827  0654  01A8               	clrf	_LeftSpeedH
  2828                           
  2829                           ;ser.c: 58: if(VelocityRight > 255){
  2830  0655  0859               	movf	DriveDirect@VelocityRight+1,w
  2831  0656  3A80               	xorlw	128
  2832  0657  00FF               	movwf	127
  2833  0658  3081               	movlw	129
  2834  0659  027F               	subwf	127,w
  2835  065A  1D03               	skipz
  2836  065B  2E5E               	goto	u1625
  2837  065C  3000               	movlw	0
  2838  065D  0258               	subwf	DriveDirect@VelocityRight,w
  2839  065E                     u1625:	
  2840  065E  1C03               	skipc
  2841  065F  2E81               	goto	l2559
  2842                           
  2843                           ;ser.c: 59: unsigned int data = VelocityRight;
  2844  0660  1283               	bcf	3,5	;RP0=0, select bank0
  2845  0661  1303               	bcf	3,6	;RP1=0, select bank0
  2846  0662  0859               	movf	DriveDirect@VelocityRight+1,w
  2847  0663  00DE               	movwf	DriveDirect@data+1
  2848  0664  0858               	movf	DriveDirect@VelocityRight,w
  2849  0665  00DD               	movwf	DriveDirect@data
  2850                           
  2851                           ;ser.c: 60: for (RightSpeedH = 0; data > 255; RightSpeedH++){
  2852  0666  01AC               	clrf	_RightSpeedH
  2853  0667  3001               	movlw	1
  2854  0668  025E               	subwf	DriveDirect@data+1,w
  2855  0669  3000               	movlw	0
  2856  066A  1903               	skipnz
  2857  066B  025D               	subwf	DriveDirect@data,w
  2858  066C  1C03               	btfss	3,0
  2859  066D  2E81               	goto	l2559
  2860  066E                     l2555:	
  2861                           
  2862                           ;ser.c: 61: data = data - 256;
  2863  066E  085D               	movf	DriveDirect@data,w
  2864  066F  3E00               	addlw	0
  2865  0670  00DD               	movwf	DriveDirect@data
  2866  0671  085E               	movf	DriveDirect@data+1,w
  2867  0672  1803               	skipnc
  2868  0673  3E01               	addlw	1
  2869  0674  3EFF               	addlw	255
  2870  0675  00DE               	movwf	DriveDirect@data+1
  2871  0676  3001               	movlw	1
  2872  0677  00DC               	movwf	??_DriveDirect
  2873  0678  085C               	movf	??_DriveDirect,w
  2874  0679  07AC               	addwf	_RightSpeedH,f
  2875  067A  3001               	movlw	1
  2876  067B  025E               	subwf	DriveDirect@data+1,w
  2877  067C  3000               	movlw	0
  2878  067D  1903               	skipnz
  2879  067E  025D               	subwf	DriveDirect@data,w
  2880  067F  1803               	skipnc
  2881  0680  2E6E               	goto	l2555
  2882  0681                     l2559:	
  2883                           
  2884                           ;ser.c: 62: }
  2885                           ;ser.c: 63: }
  2886                           ;ser.c: 64: RightSpeedL = VelocityRight;
  2887  0681  1283               	bcf	3,5	;RP0=0, select bank0
  2888  0682  1303               	bcf	3,6	;RP1=0, select bank0
  2889  0683  0858               	movf	DriveDirect@VelocityRight,w
  2890  0684  00DC               	movwf	??_DriveDirect
  2891  0685  085C               	movf	??_DriveDirect,w
  2892  0686  00AD               	movwf	_RightSpeedL
  2893                           
  2894                           ;ser.c: 67: if(VelocityLeft > 255){
  2895  0687  085B               	movf	DriveDirect@VelocityLeft+1,w
  2896  0688  3A80               	xorlw	128
  2897  0689  00FF               	movwf	127
  2898  068A  3081               	movlw	129
  2899  068B  027F               	subwf	127,w
  2900  068C  1D03               	skipz
  2901  068D  2E90               	goto	u1655
  2902  068E  3000               	movlw	0
  2903  068F  025A               	subwf	DriveDirect@VelocityLeft,w
  2904  0690                     u1655:	
  2905  0690  1C03               	skipc
  2906  0691  2EB3               	goto	l2575
  2907                           
  2908                           ;ser.c: 68: unsigned int data = VelocityLeft;
  2909  0692  1283               	bcf	3,5	;RP0=0, select bank0
  2910  0693  1303               	bcf	3,6	;RP1=0, select bank0
  2911  0694  085B               	movf	DriveDirect@VelocityLeft+1,w
  2912  0695  00E0               	movwf	DriveDirect@data_387+1
  2913  0696  085A               	movf	DriveDirect@VelocityLeft,w
  2914  0697  00DF               	movwf	DriveDirect@data_387
  2915                           
  2916                           ;ser.c: 69: for (LeftSpeedH = 0; data > 255; LeftSpeedH++){
  2917  0698  01A8               	clrf	_LeftSpeedH
  2918  0699  3001               	movlw	1
  2919  069A  0260               	subwf	DriveDirect@data_387+1,w
  2920  069B  3000               	movlw	0
  2921  069C  1903               	skipnz
  2922  069D  025F               	subwf	DriveDirect@data_387,w
  2923  069E  1C03               	btfss	3,0
  2924  069F  2EB3               	goto	l2575
  2925  06A0                     l2571:	
  2926                           
  2927                           ;ser.c: 70: data = data - 256;
  2928  06A0  085F               	movf	DriveDirect@data_387,w
  2929  06A1  3E00               	addlw	0
  2930  06A2  00DF               	movwf	DriveDirect@data_387
  2931  06A3  0860               	movf	DriveDirect@data_387+1,w
  2932  06A4  1803               	skipnc
  2933  06A5  3E01               	addlw	1
  2934  06A6  3EFF               	addlw	255
  2935  06A7  00E0               	movwf	DriveDirect@data_387+1
  2936  06A8  3001               	movlw	1
  2937  06A9  00DC               	movwf	??_DriveDirect
  2938  06AA  085C               	movf	??_DriveDirect,w
  2939  06AB  07A8               	addwf	_LeftSpeedH,f
  2940  06AC  3001               	movlw	1
  2941  06AD  0260               	subwf	DriveDirect@data_387+1,w
  2942  06AE  3000               	movlw	0
  2943  06AF  1903               	skipnz
  2944  06B0  025F               	subwf	DriveDirect@data_387,w
  2945  06B1  1803               	skipnc
  2946  06B2  2EA0               	goto	l2571
  2947  06B3                     l2575:	
  2948                           
  2949                           ;ser.c: 71: }
  2950                           ;ser.c: 72: }
  2951                           ;ser.c: 73: LeftSpeedL = VelocityLeft;
  2952  06B3  1283               	bcf	3,5	;RP0=0, select bank0
  2953  06B4  1303               	bcf	3,6	;RP1=0, select bank0
  2954  06B5  085A               	movf	DriveDirect@VelocityLeft,w
  2955  06B6  00DC               	movwf	??_DriveDirect
  2956  06B7  085C               	movf	??_DriveDirect,w
  2957  06B8  00A9               	movwf	_LeftSpeedL
  2958                           
  2959                           ;ser.c: 76: ser_putch(145);
  2960  06B9  3091               	movlw	145
  2961  06BA  120A  158A  26C7  120A  118A  	fcall	_ser_putch
  2962                           
  2963                           ;ser.c: 77: ser_putch(RightSpeedH);
  2964  06BF  1283               	bcf	3,5	;RP0=0, select bank0
  2965  06C0  1303               	bcf	3,6	;RP1=0, select bank0
  2966  06C1  082C               	movf	_RightSpeedH,w
  2967  06C2  120A  158A  26C7  120A  118A  	fcall	_ser_putch
  2968                           
  2969                           ;ser.c: 78: ser_putch(RightSpeedL);
  2970  06C7  1283               	bcf	3,5	;RP0=0, select bank0
  2971  06C8  1303               	bcf	3,6	;RP1=0, select bank0
  2972  06C9  082D               	movf	_RightSpeedL,w
  2973  06CA  120A  158A  26C7  120A  118A  	fcall	_ser_putch
  2974                           
  2975                           ;ser.c: 79: ser_putch(LeftSpeedH);
  2976  06CF  1283               	bcf	3,5	;RP0=0, select bank0
  2977  06D0  1303               	bcf	3,6	;RP1=0, select bank0
  2978  06D1  0828               	movf	_LeftSpeedH,w
  2979  06D2  120A  158A  26C7  120A  118A  	fcall	_ser_putch
  2980                           
  2981                           ;ser.c: 80: ser_putch(LeftSpeedL);
  2982  06D7  1283               	bcf	3,5	;RP0=0, select bank0
  2983  06D8  1303               	bcf	3,6	;RP1=0, select bank0
  2984  06D9  0829               	movf	_LeftSpeedL,w
  2985  06DA  120A  158A  26C7   	fcall	_ser_putch
  2986  06DD  0008               	return
  2987  06DE                     __end_of_DriveDirect:	
  2988                           
  2989                           	psect	text13
  2990  0EC7                     __ptext13:	
  2991 ;; *************** function _ser_putch *****************
  2992 ;; Defined at:
  2993 ;;		line 30 in file "ser.c"
  2994 ;; Parameters:    Size  Location     Type
  2995 ;;  c               1    wreg     unsigned char 
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;  c               1    0[BANK0 ] unsigned char 
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  1    wreg      void 
  3000 ;; Registers used:
  3001 ;;		wreg
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3007 ;;      Params:         0       0       0       0       0
  3008 ;;      Locals:         0       1       0       0       0
  3009 ;;      Temps:          0       0       0       0       0
  3010 ;;      Totals:         0       1       0       0       0
  3011 ;;Total ram usage:        1 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    1
  3014 ;; This function calls:
  3015 ;;		Nothing
  3016 ;; This function is called by:
  3017 ;;		_main
  3018 ;;		_Drive
  3019 ;;		_DriveDirect
  3020 ;;		_getSensorData
  3021 ;; This function uses a non-reentrant model
  3022 ;;
  3023                           
  3024                           
  3025                           ;psect for function _ser_putch
  3026  0EC7                     _ser_putch:	
  3027                           
  3028                           ;incstack = 0
  3029                           ; Regs used in _ser_putch: [wreg]
  3030                           ;ser_putch@c stored from wreg
  3031  0EC7  1283               	bcf	3,5	;RP0=0, select bank0
  3032  0EC8  1303               	bcf	3,6	;RP1=0, select bank0
  3033  0EC9  00D7               	movwf	ser_putch@c
  3034  0ECA                     l660:	
  3035                           ;ser.c: 31: while(!TRMT);
  3036                           
  3037  0ECA  1683               	bsf	3,5	;RP0=1, select bank1
  3038  0ECB  1303               	bcf	3,6	;RP1=0, select bank1
  3039  0ECC  1C98               	btfss	24,1	;volatile
  3040  0ECD  2ECA               	goto	l660
  3041                           
  3042                           ;ser.c: 32: TXREG=c;
  3043  0ECE  1283               	bcf	3,5	;RP0=0, select bank0
  3044  0ECF  1303               	bcf	3,6	;RP1=0, select bank0
  3045  0ED0  0857               	movf	ser_putch@c,w
  3046  0ED1  0099               	movwf	25	;volatile
  3047  0ED2  0008               	return
  3048  0ED3                     __end_of_ser_putch:	
  3049                           
  3050                           	psect	text14
  3051  005F                     __ptext14:	
  3052 ;; *************** function _PathTo *****************
  3053 ;; Defined at:
  3054 ;;		line 16 in file "main.c"
  3055 ;; Parameters:    Size  Location     Type
  3056 ;;  x_target        1    wreg     unsigned char 
  3057 ;;  y_target        1    5[BANK0 ] unsigned char 
  3058 ;; Auto vars:     Size  Location     Type
  3059 ;;  x_target        1   13[BANK0 ] unsigned char 
  3060 ;;  sum             1   14[BANK0 ] unsigned char 
  3061 ;;  loop            2   15[BANK0 ] int 
  3062 ;; Return value:  Size  Location     Type
  3063 ;;                  1    wreg      void 
  3064 ;; Registers used:
  3065 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3066 ;; Tracked objects:
  3067 ;;		On entry : 0/0
  3068 ;;		On exit  : 0/0
  3069 ;;		Unchanged: 0/0
  3070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3071 ;;      Params:         0       1       0       0       0
  3072 ;;      Locals:         0       4       0       0       0
  3073 ;;      Temps:          0       7       0       0       0
  3074 ;;      Totals:         0      12       0       0       0
  3075 ;;Total ram usage:       12 bytes
  3076 ;; Hardware stack levels used:    1
  3077 ;; Hardware stack levels required when called:    3
  3078 ;; This function calls:
  3079 ;;		___bmul
  3080 ;;		_lcdSetCursor
  3081 ;;		_lcdWriteString
  3082 ;; This function is called by:
  3083 ;;		_main
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087                           
  3088                           ;psect for function _PathTo
  3089  005F                     _PathTo:	
  3090                           
  3091                           ;incstack = 0
  3092                           ; Regs used in _PathTo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3093                           ;PathTo@x_target stored from wreg
  3094  005F  1283               	bcf	3,5	;RP0=0, select bank0
  3095  0060  1303               	bcf	3,6	;RP1=0, select bank0
  3096  0061  00E4               	movwf	PathTo@x_target
  3097                           
  3098                           ;main.c: 20: for (r = 0; r <= 3; r++){
  3099  0062  01B3               	clrf	_r
  3100  0063  3004               	movlw	4
  3101  0064  0233               	subwf	_r,w
  3102  0065  1803               	btfsc	3,0
  3103  0066  28A4               	goto	l2729
  3104  0067                     l2713:	
  3105                           
  3106                           ;main.c: 21: for (c = 0; c <= 4; c++){
  3107  0067  01AE               	clrf	_c
  3108  0068  3005               	movlw	5
  3109  0069  022E               	subwf	_c,w
  3110  006A  1803               	btfsc	3,0
  3111  006B  289C               	goto	l2725
  3112  006C                     l2719:	
  3113                           
  3114                           ;main.c: 22: mazeGrid[r][c] = mazeGridDefault[r][c];
  3115  006C  3005               	movlw	5
  3116  006D  00DD               	movwf	??_PathTo
  3117  006E  085D               	movf	??_PathTo,w
  3118  006F  00D7               	movwf	___bmul@multiplicand
  3119  0070  0833               	movf	_r,w
  3120  0071  120A  158A  2702  120A  118A  	fcall	___bmul
  3121  0076  3EC0               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  3122  0077  1283               	bcf	3,5	;RP0=0, select bank0
  3123  0078  1303               	bcf	3,6	;RP1=0, select bank0
  3124  0079  072E               	addwf	_c,w
  3125  007A  00DE               	movwf	??_PathTo+1
  3126  007B  085E               	movf	??_PathTo+1,w
  3127  007C  0084               	movwf	4
  3128  007D  1383               	bcf	3,7	;select IRP bank1
  3129  007E  0800               	movf	0,w
  3130  007F  00DF               	movwf	??_PathTo+2
  3131  0080  3005               	movlw	5
  3132  0081  00E0               	movwf	??_PathTo+3
  3133  0082  0860               	movf	??_PathTo+3,w
  3134  0083  00D7               	movwf	___bmul@multiplicand
  3135  0084  0833               	movf	_r,w
  3136  0085  120A  158A  2702  120A  118A  	fcall	___bmul
  3137  008A  3E40               	addlw	(low (_mazeGrid| 0))& (0+255)
  3138  008B  1283               	bcf	3,5	;RP0=0, select bank0
  3139  008C  1303               	bcf	3,6	;RP1=0, select bank0
  3140  008D  072E               	addwf	_c,w
  3141  008E  00E1               	movwf	??_PathTo+4
  3142  008F  0861               	movf	??_PathTo+4,w
  3143  0090  0084               	movwf	4
  3144  0091  085F               	movf	??_PathTo+2,w
  3145  0092  1383               	bcf	3,7	;select IRP bank0
  3146  0093  0080               	movwf	0
  3147  0094  3001               	movlw	1
  3148  0095  00DD               	movwf	??_PathTo
  3149  0096  085D               	movf	??_PathTo,w
  3150  0097  07AE               	addwf	_c,f
  3151  0098  3005               	movlw	5
  3152  0099  022E               	subwf	_c,w
  3153  009A  1C03               	skipc
  3154  009B  286C               	goto	l2719
  3155  009C                     l2725:	
  3156  009C  3001               	movlw	1
  3157  009D  00DD               	movwf	??_PathTo
  3158  009E  085D               	movf	??_PathTo,w
  3159  009F  07B3               	addwf	_r,f
  3160  00A0  3004               	movlw	4
  3161  00A1  0233               	subwf	_r,w
  3162  00A2  1C03               	skipc
  3163  00A3  2867               	goto	l2713
  3164  00A4                     l2729:	
  3165                           
  3166                           ;main.c: 23: }
  3167                           ;main.c: 24: }
  3168                           ;main.c: 28: x_path = x;
  3169  00A4  0856               	movf	_x,w
  3170  00A5  00DD               	movwf	??_PathTo
  3171  00A6  085D               	movf	??_PathTo,w
  3172  00A7  00B9               	movwf	_x_path
  3173                           
  3174                           ;main.c: 29: y_path = y;
  3175  00A8  083B               	movf	_y,w
  3176  00A9  00DD               	movwf	??_PathTo
  3177  00AA  085D               	movf	??_PathTo,w
  3178  00AB  00BD               	movwf	_y_path
  3179                           
  3180                           ;main.c: 30: orientation_path = orientation;
  3181  00AC  0854               	movf	_orientation,w
  3182  00AD  00DD               	movwf	??_PathTo
  3183  00AE  085D               	movf	??_PathTo,w
  3184  00AF  00B1               	movwf	_orientation_path
  3185                           
  3186                           ;main.c: 31: pathCount = 0;
  3187  00B0  01B2               	clrf	_pathCount
  3188                           
  3189                           ;main.c: 33: if(IR_Wall == 1){
  3190  00B1  1870               	btfsc	_IR_Wall/(0+8),_IR_Wall& (0+7)
  3191  00B2  291D               	goto	l2747
  3192  00B3  292B               	goto	l2749
  3193  00B4                     l2737:	
  3194                           ;main.c: 35: case 0: (mazeGrid[y][x]) = ((mazeGrid[y][x]) + 4);
  3195                           
  3196                           ;main.c: 34: switch (orientation){
  3197                           
  3198  00B4  3005               	movlw	5
  3199  00B5  00DD               	movwf	??_PathTo
  3200  00B6  085D               	movf	??_PathTo,w
  3201  00B7  00D7               	movwf	___bmul@multiplicand
  3202  00B8  083B               	movf	_y,w
  3203  00B9  120A  158A  2702  120A  118A  	fcall	___bmul
  3204  00BE  3E40               	addlw	(low (_mazeGrid| 0))& (0+255)
  3205  00BF  1283               	bcf	3,5	;RP0=0, select bank0
  3206  00C0  1303               	bcf	3,6	;RP1=0, select bank0
  3207  00C1  0756               	addwf	_x,w
  3208  00C2  00DE               	movwf	??_PathTo+1
  3209  00C3  085E               	movf	??_PathTo+1,w
  3210  00C4  0084               	movwf	4
  3211  00C5  1383               	bcf	3,7	;select IRP bank0
  3212  00C6  0800               	movf	0,w
  3213  00C7  3E04               	addlw	4
  3214  00C8  2907               	goto	L13
  3215  00C9                     l2739:	
  3216                           ;main.c: 37: case 1: (mazeGrid[y][x]) = ((mazeGrid[y][x]) + 2);
  3217                           
  3218                           ;main.c: 36: break;
  3219                           
  3220  00C9  3005               	movlw	5
  3221  00CA  00DD               	movwf	??_PathTo
  3222  00CB  085D               	movf	??_PathTo,w
  3223  00CC  00D7               	movwf	___bmul@multiplicand
  3224  00CD  083B               	movf	_y,w
  3225  00CE  120A  158A  2702  120A  118A  	fcall	___bmul
  3226  00D3  3E40               	addlw	(low (_mazeGrid| 0))& (0+255)
  3227  00D4  1283               	bcf	3,5	;RP0=0, select bank0
  3228  00D5  1303               	bcf	3,6	;RP1=0, select bank0
  3229  00D6  0756               	addwf	_x,w
  3230  00D7  00DE               	movwf	??_PathTo+1
  3231  00D8  085E               	movf	??_PathTo+1,w
  3232  00D9  0084               	movwf	4
  3233  00DA  1383               	bcf	3,7	;select IRP bank0
  3234  00DB  0800               	movf	0,w
  3235  00DC  3E02               	addlw	2
  3236  00DD  2907               	goto	L13
  3237  00DE                     l2741:	
  3238                           ;main.c: 39: case 2: (mazeGrid[y][x]) = ((mazeGrid[y][x]) + 1);
  3239                           
  3240                           ;main.c: 38: break;
  3241                           
  3242  00DE  3005               	movlw	5
  3243  00DF  00DD               	movwf	??_PathTo
  3244  00E0  085D               	movf	??_PathTo,w
  3245  00E1  00D7               	movwf	___bmul@multiplicand
  3246  00E2  083B               	movf	_y,w
  3247  00E3  120A  158A  2702  120A  118A  	fcall	___bmul
  3248  00E8  3E40               	addlw	(low (_mazeGrid| 0))& (0+255)
  3249  00E9  1283               	bcf	3,5	;RP0=0, select bank0
  3250  00EA  1303               	bcf	3,6	;RP1=0, select bank0
  3251  00EB  0756               	addwf	_x,w
  3252  00EC  00DE               	movwf	??_PathTo+1
  3253  00ED  085E               	movf	??_PathTo+1,w
  3254  00EE  0084               	movwf	4
  3255  00EF  1383               	bcf	3,7	;select IRP bank0
  3256  00F0  0800               	movf	0,w
  3257  00F1  3E01               	addlw	1
  3258  00F2  2907               	goto	L13
  3259  00F3                     l2743:	
  3260                           ;main.c: 41: case 3: (mazeGrid[y][x]) = ((mazeGrid[y][x]) + 8);
  3261                           
  3262                           ;main.c: 40: break;
  3263                           
  3264  00F3  3005               	movlw	5
  3265  00F4  00DD               	movwf	??_PathTo
  3266  00F5  085D               	movf	??_PathTo,w
  3267  00F6  00D7               	movwf	___bmul@multiplicand
  3268  00F7  083B               	movf	_y,w
  3269  00F8  120A  158A  2702  120A  118A  	fcall	___bmul
  3270  00FD  3E40               	addlw	(low (_mazeGrid| 0))& (0+255)
  3271  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  3272  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  3273  0100  0756               	addwf	_x,w
  3274  0101  00DE               	movwf	??_PathTo+1
  3275  0102  085E               	movf	??_PathTo+1,w
  3276  0103  0084               	movwf	4
  3277  0104  1383               	bcf	3,7	;select IRP bank0
  3278  0105  0800               	movf	0,w
  3279  0106  3E08               	addlw	8
  3280  0107                     L13:	
  3281  0107  00DF               	movwf	??_PathTo+2
  3282  0108  3005               	movlw	5
  3283  0109  00E0               	movwf	??_PathTo+3
  3284  010A  0860               	movf	??_PathTo+3,w
  3285  010B  00D7               	movwf	___bmul@multiplicand
  3286  010C  083B               	movf	_y,w
  3287  010D  120A  158A  2702  120A  118A  	fcall	___bmul
  3288  0112  3E40               	addlw	(low (_mazeGrid| 0))& (0+255)
  3289  0113  1283               	bcf	3,5	;RP0=0, select bank0
  3290  0114  1303               	bcf	3,6	;RP1=0, select bank0
  3291  0115  0756               	addwf	_x,w
  3292  0116  00E1               	movwf	??_PathTo+4
  3293  0117  0861               	movf	??_PathTo+4,w
  3294  0118  0084               	movwf	4
  3295  0119  085F               	movf	??_PathTo+2,w
  3296  011A  1383               	bcf	3,7	;select IRP bank0
  3297  011B  0080               	movwf	0
  3298                           
  3299                           ;main.c: 43: }
  3300                           
  3301                           ;main.c: 42: break;
  3302  011C  292B               	goto	l2749
  3303  011D                     l2747:	
  3304  011D  0854               	movf	_orientation,w
  3305                           
  3306                           ; Switch size 1, requested type "space"
  3307                           ; Number of cases is 4, Range of values is 0 to 3
  3308                           ; switch strategies available:
  3309                           ; Name         Instructions Cycles
  3310                           ; simple_byte           13     7 (average)
  3311                           ; direct_byte           20     8 (fixed)
  3312                           ; jumptable            260     6 (fixed)
  3313                           ;	Chosen strategy is simple_byte
  3314  011E  3A00               	xorlw	0	; case 0
  3315  011F  1903               	skipnz
  3316  0120  28B4               	goto	l2737
  3317  0121  3A01               	xorlw	1	; case 1
  3318  0122  1903               	skipnz
  3319  0123  28C9               	goto	l2739
  3320  0124  3A03               	xorlw	3	; case 2
  3321  0125  1903               	skipnz
  3322  0126  28DE               	goto	l2741
  3323  0127  3A01               	xorlw	1	; case 3
  3324  0128  1903               	skipnz
  3325  0129  28F3               	goto	l2743
  3326  012A  292B               	goto	l2749
  3327  012B                     l2749:	
  3328                           
  3329                           ;main.c: 44: }
  3330                           ;main.c: 46: lcdSetCursor(0b10000000);
  3331  012B  3080               	movlw	128
  3332  012C  120A  158A  26B4  120A  118A  	fcall	_lcdSetCursor
  3333                           
  3334                           ;main.c: 47: lcdWriteString("Working...");
  3335  0131  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3336  0132  120A  158A  2796  120A  118A  	fcall	_lcdWriteString
  3337                           
  3338                           ;main.c: 49: for (int loop = 0; loop <= 1000; loop++){
  3339  0137  1283               	bcf	3,5	;RP0=0, select bank0
  3340  0138  1303               	bcf	3,6	;RP1=0, select bank0
  3341  0139  01E6               	clrf	PathTo@loop
  3342  013A  01E7               	clrf	PathTo@loop+1
  3343  013B                     L16:	
  3344  013B  0867               	movf	PathTo@loop+1,w
  3345  013C  3A80               	xorlw	128
  3346  013D  00FF               	movwf	127
  3347  013E  3083               	movlw	131
  3348  013F  027F               	subwf	127,w
  3349  0140  1D03               	skipz
  3350  0141  2944               	goto	u1845
  3351  0142  30E9               	movlw	233
  3352  0143  0266               	subwf	PathTo@loop,w
  3353  0144                     u1845:	
  3354  0144  1803               	btfsc	3,0
  3355  0145  0008               	return
  3356                           
  3357                           ;main.c: 51: reset_flag = 0;
  3358  0146  11F0               	bcf	_reset_flag/(0+8),_reset_flag& (0+7)
  3359                           
  3360                           ;main.c: 53: path[0][pathCount] = x_path;
  3361  0147  1283               	bcf	3,5	;RP0=0, select bank0
  3362  0148  1303               	bcf	3,6	;RP1=0, select bank0
  3363  0149  0839               	movf	_x_path,w
  3364  014A  00DD               	movwf	??_PathTo
  3365  014B  0832               	movf	_pathCount,w
  3366  014C  3EA0               	addlw	(low (_path| 0))& (0+255)
  3367  014D  0084               	movwf	4
  3368  014E  085D               	movf	??_PathTo,w
  3369  014F  1383               	bcf	3,7	;select IRP bank1
  3370  0150  0080               	movwf	0
  3371                           
  3372                           ;main.c: 54: path[1][pathCount] = y_path;
  3373  0151  083D               	movf	_y_path,w
  3374  0152  00DD               	movwf	??_PathTo
  3375  0153  0832               	movf	_pathCount,w
  3376  0154  3EB0               	addlw	(low ((_path| 0+16)))& (0+255)
  3377  0155  0084               	movwf	4
  3378  0156  085D               	movf	??_PathTo,w
  3379  0157  0080               	movwf	0
  3380                           
  3381                           ;main.c: 59: left = gridWalls[0][(mazeGrid[y_path][x_path])];
  3382  0158  3005               	movlw	5
  3383  0159  00DD               	movwf	??_PathTo
  3384  015A  085D               	movf	??_PathTo,w
  3385  015B  00D7               	movwf	___bmul@multiplicand
  3386  015C  083D               	movf	_y_path,w
  3387  015D  120A  158A  2702  120A  118A  	fcall	___bmul
  3388  0162  3E40               	addlw	(low (_mazeGrid| 0))& (0+255)
  3389  0163  1283               	bcf	3,5	;RP0=0, select bank0
  3390  0164  1303               	bcf	3,6	;RP1=0, select bank0
  3391  0165  0739               	addwf	_x_path,w
  3392  0166  00DE               	movwf	??_PathTo+1
  3393  0167  085E               	movf	??_PathTo+1,w
  3394  0168  0084               	movwf	4
  3395  0169  1383               	bcf	3,7	;select IRP bank0
  3396  016A  0800               	movf	0,w
  3397  016B  3E90               	addlw	(low (_gridWalls| (0+256)))& (0+255)
  3398  016C  0084               	movwf	4
  3399  016D  1170               	bcf	_left/(0+8),_left& (0+7)
  3400  016E  1783               	bsf	3,7	;select IRP bank3
  3401  016F  1800               	btfsc	0,0
  3402  0170  1570               	bsf	_left/(0+8),_left& (0+7)
  3403                           
  3404                           ;main.c: 60: up = gridWalls[1][(mazeGrid[y_path][x_path])];
  3405  0171  3005               	movlw	5
  3406  0172  1283               	bcf	3,5	;RP0=0, select bank0
  3407  0173  1303               	bcf	3,6	;RP1=0, select bank0
  3408  0174  00DD               	movwf	??_PathTo
  3409  0175  085D               	movf	??_PathTo,w
  3410  0176  00D7               	movwf	___bmul@multiplicand
  3411  0177  083D               	movf	_y_path,w
  3412  0178  120A  158A  2702  120A  118A  	fcall	___bmul
  3413  017D  3E40               	addlw	(low (_mazeGrid| 0))& (0+255)
  3414  017E  1283               	bcf	3,5	;RP0=0, select bank0
  3415  017F  1303               	bcf	3,6	;RP1=0, select bank0
  3416  0180  0739               	addwf	_x_path,w
  3417  0181  00DE               	movwf	??_PathTo+1
  3418  0182  085E               	movf	??_PathTo+1,w
  3419  0183  0084               	movwf	4
  3420  0184  1383               	bcf	3,7	;select IRP bank0
  3421  0185  0800               	movf	0,w
  3422  0186  3EA0               	addlw	(low ((_gridWalls| (0+256)+16)))& (0+255)
  3423  0187  0084               	movwf	4
  3424  0188  12F0               	bcf	_up/(0+8),_up& (0+7)
  3425  0189  1783               	bsf	3,7	;select IRP bank3
  3426  018A  1800               	btfsc	0,0
  3427  018B  16F0               	bsf	_up/(0+8),_up& (0+7)
  3428                           
  3429                           ;main.c: 61: right = gridWalls[2][(mazeGrid[y_path][x_path])];
  3430  018C  3005               	movlw	5
  3431  018D  1283               	bcf	3,5	;RP0=0, select bank0
  3432  018E  1303               	bcf	3,6	;RP1=0, select bank0
  3433  018F  00DD               	movwf	??_PathTo
  3434  0190  085D               	movf	??_PathTo,w
  3435  0191  00D7               	movwf	___bmul@multiplicand
  3436  0192  083D               	movf	_y_path,w
  3437  0193  120A  158A  2702  120A  118A  	fcall	___bmul
  3438  0198  3E40               	addlw	(low (_mazeGrid| 0))& (0+255)
  3439  0199  1283               	bcf	3,5	;RP0=0, select bank0
  3440  019A  1303               	bcf	3,6	;RP1=0, select bank0
  3441  019B  0739               	addwf	_x_path,w
  3442  019C  00DE               	movwf	??_PathTo+1
  3443  019D  085E               	movf	??_PathTo+1,w
  3444  019E  0084               	movwf	4
  3445  019F  1383               	bcf	3,7	;select IRP bank0
  3446  01A0  0800               	movf	0,w
  3447  01A1  3EB0               	addlw	(low ((_gridWalls| (0+256)+32)))& (0+255)
  3448  01A2  0084               	movwf	4
  3449  01A3  1270               	bcf	_right/(0+8),_right& (0+7)
  3450  01A4  1783               	bsf	3,7	;select IRP bank3
  3451  01A5  1800               	btfsc	0,0
  3452  01A6  1670               	bsf	_right/(0+8),_right& (0+7)
  3453                           
  3454                           ;main.c: 62: down = gridWalls[3][(mazeGrid[y_path][x_path])];
  3455  01A7  3005               	movlw	5
  3456  01A8  1283               	bcf	3,5	;RP0=0, select bank0
  3457  01A9  1303               	bcf	3,6	;RP1=0, select bank0
  3458  01AA  00DD               	movwf	??_PathTo
  3459  01AB  085D               	movf	??_PathTo,w
  3460  01AC  00D7               	movwf	___bmul@multiplicand
  3461  01AD  083D               	movf	_y_path,w
  3462  01AE  120A  158A  2702  120A  118A  	fcall	___bmul
  3463  01B3  3E40               	addlw	(low (_mazeGrid| 0))& (0+255)
  3464  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  3465  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  3466  01B6  0739               	addwf	_x_path,w
  3467  01B7  00DE               	movwf	??_PathTo+1
  3468  01B8  085E               	movf	??_PathTo+1,w
  3469  01B9  0084               	movwf	4
  3470  01BA  1383               	bcf	3,7	;select IRP bank0
  3471  01BB  0800               	movf	0,w
  3472  01BC  3EC0               	addlw	(low ((_gridWalls| (0+256)+48)))& (0+255)
  3473  01BD  0084               	movwf	4
  3474  01BE  10F0               	bcf	_down/(0+8),_down& (0+7)
  3475  01BF  1783               	bsf	3,7	;select IRP bank3
  3476  01C0  1800               	btfsc	0,0
  3477  01C1  14F0               	bsf	_down/(0+8),_down& (0+7)
  3478                           
  3479                           ;main.c: 66: switch(orientation_path){
  3480  01C2  29CB               	goto	l2771
  3481  01C3                     l141:	
  3482                           ;main.c: 67: case 0: down = 1;
  3483                           
  3484  01C3  14F0               	bsf	_down/(0+8),_down& (0+7)
  3485                           
  3486                           ;main.c: 68: break;
  3487  01C4  29DB               	goto	l2773
  3488  01C5                     l143:	
  3489                           ;main.c: 69: case 1: left = 1;
  3490                           
  3491  01C5  1570               	bsf	_left/(0+8),_left& (0+7)
  3492                           
  3493                           ;main.c: 70: break;
  3494  01C6  29DB               	goto	l2773
  3495  01C7                     l144:	
  3496                           ;main.c: 71: case 2: up = 1;
  3497                           
  3498  01C7  16F0               	bsf	_up/(0+8),_up& (0+7)
  3499                           
  3500                           ;main.c: 72: break;
  3501  01C8  29DB               	goto	l2773
  3502  01C9                     l145:	
  3503                           ;main.c: 73: case 3: right = 1;
  3504                           
  3505  01C9  1670               	bsf	_right/(0+8),_right& (0+7)
  3506                           
  3507                           ;main.c: 75: }
  3508                           
  3509                           ;main.c: 74: break;
  3510  01CA  29DB               	goto	l2773
  3511  01CB                     l2771:	
  3512  01CB  1283               	bcf	3,5	;RP0=0, select bank0
  3513  01CC  1303               	bcf	3,6	;RP1=0, select bank0
  3514  01CD  0831               	movf	_orientation_path,w
  3515                           
  3516                           ; Switch size 1, requested type "space"
  3517                           ; Number of cases is 4, Range of values is 0 to 3
  3518                           ; switch strategies available:
  3519                           ; Name         Instructions Cycles
  3520                           ; simple_byte           13     7 (average)
  3521                           ; direct_byte           20     8 (fixed)
  3522                           ; jumptable            260     6 (fixed)
  3523                           ;	Chosen strategy is simple_byte
  3524  01CE  3A00               	xorlw	0	; case 0
  3525  01CF  1903               	skipnz
  3526  01D0  29C3               	goto	l141
  3527  01D1  3A01               	xorlw	1	; case 1
  3528  01D2  1903               	skipnz
  3529  01D3  29C5               	goto	l143
  3530  01D4  3A03               	xorlw	3	; case 2
  3531  01D5  1903               	skipnz
  3532  01D6  29C7               	goto	l144
  3533  01D7  3A01               	xorlw	1	; case 3
  3534  01D8  1903               	skipnz
  3535  01D9  29C9               	goto	l145
  3536  01DA  29DB               	goto	l2773
  3537  01DB                     l2773:	
  3538                           
  3539                           ;main.c: 79: char sum = (left + up + down + right);
  3540  01DB  3000               	movlw	0
  3541  01DC  1970               	btfsc	_left/(0+8),_left& (0+7)
  3542  01DD  3001               	movlw	1
  3543  01DE  1AF0               	btfsc	_up/(0+8),_up& (0+7)
  3544  01DF  3E01               	addlw	1
  3545  01E0  18F0               	btfsc	_down/(0+8),_down& (0+7)
  3546  01E1  3E01               	addlw	1
  3547  01E2  1A70               	btfsc	_right/(0+8),_right& (0+7)
  3548  01E3  3E01               	addlw	1
  3549  01E4  00DD               	movwf	??_PathTo
  3550  01E5  085D               	movf	??_PathTo,w
  3551  01E6  00E5               	movwf	PathTo@sum
  3552                           
  3553                           ;main.c: 80: if(sum <= 2){
  3554  01E7  3003               	movlw	3
  3555  01E8  0265               	subwf	PathTo@sum,w
  3556  01E9  1803               	skipnc
  3557  01EA  2A06               	goto	l146
  3558                           
  3559                           ;main.c: 81: x_int = x_path;
  3560  01EB  0839               	movf	_x_path,w
  3561  01EC  00DD               	movwf	??_PathTo
  3562  01ED  085D               	movf	??_PathTo,w
  3563  01EE  00B8               	movwf	_x_int
  3564                           
  3565                           ;main.c: 82: y_int = y_path;
  3566  01EF  083D               	movf	_y_path,w
  3567  01F0  00DD               	movwf	??_PathTo
  3568  01F1  085D               	movf	??_PathTo,w
  3569  01F2  00BC               	movwf	_y_int
  3570                           
  3571                           ;main.c: 88: if (left == 0)
  3572  01F3  1970               	btfsc	_left/(0+8),_left& (0+7)
  3573  01F4  29F7               	goto	l147
  3574                           
  3575                           ;main.c: 89: intersection_orientation = 3;
  3576  01F5  3003               	movlw	3
  3577  01F6  2A03               	goto	L4
  3578  01F7                     l147:	
  3579                           
  3580                           ;main.c: 90: else if (up == 0)
  3581  01F7  1AF0               	btfsc	_up/(0+8),_up& (0+7)
  3582  01F8  29FB               	goto	l149
  3583                           
  3584                           ;main.c: 91: intersection_orientation = 0;
  3585  01F9  01AF               	clrf	_intersection_orientation
  3586  01FA  2A06               	goto	l146
  3587  01FB                     l149:	
  3588                           
  3589                           ;main.c: 92: else if (right == 0)
  3590  01FB  1A70               	btfsc	_right/(0+8),_right& (0+7)
  3591  01FC  2A00               	goto	l151
  3592                           
  3593                           ;main.c: 93: intersection_orientation = 1;
  3594  01FD  01AF               	clrf	_intersection_orientation
  3595  01FE  0AAF               	incf	_intersection_orientation,f
  3596  01FF  2A06               	goto	l146
  3597  0200                     l151:	
  3598                           
  3599                           ;main.c: 94: else if (down == 0)
  3600  0200  18F0               	btfsc	_down/(0+8),_down& (0+7)
  3601  0201  2A06               	goto	l146
  3602                           
  3603                           ;main.c: 95: intersection_orientation = 2;
  3604  0202  3002               	movlw	2
  3605  0203                     L4:	
  3606  0203  00DD               	movwf	??_PathTo
  3607  0204  085D               	movf	??_PathTo,w
  3608  0205  00AF               	movwf	_intersection_orientation
  3609  0206                     l146:	
  3610                           
  3611                           ;main.c: 96: }
  3612                           ;main.c: 103: if ((x_path == x_target) && (y_path == y_target)){
  3613  0206  0839               	movf	_x_path,w
  3614  0207  0664               	xorwf	PathTo@x_target,w
  3615  0208  1D03               	skipz
  3616  0209  2B04               	goto	l2853
  3617  020A  083D               	movf	_y_path,w
  3618  020B  065C               	xorwf	PathTo@y_target,w
  3619  020C  1D03               	skipz
  3620  020D  2B04               	goto	l2853
  3621                           
  3622                           ;main.c: 108: if(pathCount < pathCountShortest){
  3623  020E  0855               	movf	_pathCountShortest,w
  3624  020F  0232               	subwf	_pathCount,w
  3625  0210  1803               	skipnc
  3626  0211  2ABC               	goto	l2825
  3627                           
  3628                           ;main.c: 109: pathCountShortest = pathCount;
  3629  0212  0832               	movf	_pathCount,w
  3630  0213  00DD               	movwf	??_PathTo
  3631  0214  085D               	movf	??_PathTo,w
  3632  0215  00D5               	movwf	_pathCountShortest
  3633                           
  3634                           ;main.c: 110: for (r = 0; r <= 1; r++){
  3635  0216  01B3               	clrf	_r
  3636  0217                     L12:	
  3637  0217  3002               	movlw	2
  3638  0218  0233               	subwf	_r,w
  3639  0219  1803               	btfsc	3,0
  3640  021A  2ABC               	goto	l2825
  3641                           
  3642                           ;main.c: 111: for (c = 0; c <= 15; c++){
  3643  021B  01AE               	clrf	_c
  3644  021C  3010               	movlw	16
  3645  021D  022E               	subwf	_c,w
  3646  021E  1803               	btfsc	3,0
  3647  021F  2A4E               	goto	l2811
  3648  0220                     l2805:	
  3649                           
  3650                           ;main.c: 112: pathShortest[r][c] = path[r][c];
  3651  0220  0833               	movf	_r,w
  3652  0221  00DD               	movwf	??_PathTo
  3653  0222  3004               	movlw	4
  3654  0223                     u1995:	
  3655  0223  1003               	clrc
  3656  0224  0DDD               	rlf	??_PathTo,f
  3657  0225  3EFF               	addlw	-1
  3658  0226  1D03               	skipz
  3659  0227  2A23               	goto	u1995
  3660  0228  30A0               	movlw	(low (_path| 0))& (0+255)
  3661  0229  075D               	addwf	??_PathTo,w
  3662  022A  00DE               	movwf	??_PathTo+1
  3663  022B  082E               	movf	_c,w
  3664  022C  075E               	addwf	??_PathTo+1,w
  3665  022D  00DF               	movwf	??_PathTo+2
  3666  022E  085F               	movf	??_PathTo+2,w
  3667  022F  0084               	movwf	4
  3668  0230  1383               	bcf	3,7	;select IRP bank1
  3669  0231  0800               	movf	0,w
  3670  0232  00E0               	movwf	??_PathTo+3
  3671  0233  0833               	movf	_r,w
  3672  0234  00E1               	movwf	??_PathTo+4
  3673  0235  3004               	movlw	4
  3674  0236                     u2005:	
  3675  0236  1003               	clrc
  3676  0237  0DE1               	rlf	??_PathTo+4,f
  3677  0238  3EFF               	addlw	-1
  3678  0239  1D03               	skipz
  3679  023A  2A36               	goto	u2005
  3680  023B  30D0               	movlw	(low (_pathShortest| (0+256)))& (0+255)
  3681  023C  0761               	addwf	??_PathTo+4,w
  3682  023D  00E2               	movwf	??_PathTo+5
  3683  023E  082E               	movf	_c,w
  3684  023F  0762               	addwf	??_PathTo+5,w
  3685  0240  00E3               	movwf	??_PathTo+6
  3686  0241  0863               	movf	??_PathTo+6,w
  3687  0242  0084               	movwf	4
  3688  0243  0860               	movf	??_PathTo+3,w
  3689  0244  1783               	bsf	3,7	;select IRP bank3
  3690  0245  0080               	movwf	0
  3691  0246  3001               	movlw	1
  3692  0247  00DD               	movwf	??_PathTo
  3693  0248  085D               	movf	??_PathTo,w
  3694  0249  07AE               	addwf	_c,f
  3695  024A  3010               	movlw	16
  3696  024B  022E               	subwf	_c,w
  3697  024C  1C03               	skipc
  3698  024D  2A20               	goto	l2805
  3699  024E                     l2811:	
  3700  024E  3001               	movlw	1
  3701  024F  00DD               	movwf	??_PathTo
  3702  0250  085D               	movf	??_PathTo,w
  3703  0251  07B3               	addwf	_r,f
  3704  0252  2A17               	goto	L12
  3705  0253                     l2815:	
  3706                           ;main.c: 122: case 0: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 4);
  3707                           
  3708                           ;main.c: 113: }
  3709                           ;main.c: 114: }
  3710                           ;main.c: 115: }
  3711                           ;main.c: 121: switch(intersection_orientation){
  3712                           
  3713  0253  3005               	movlw	5
  3714  0254  00DD               	movwf	??_PathTo
  3715  0255  085D               	movf	??_PathTo,w
  3716  0256  00D7               	movwf	___bmul@multiplicand
  3717  0257  083C               	movf	_y_int,w
  3718  0258  120A  158A  2702  120A  118A  	fcall	___bmul
  3719  025D  3E40               	addlw	(low (_mazeGrid| 0))& (0+255)
  3720  025E  1283               	bcf	3,5	;RP0=0, select bank0
  3721  025F  1303               	bcf	3,6	;RP1=0, select bank0
  3722  0260  0738               	addwf	_x_int,w
  3723  0261  00DE               	movwf	??_PathTo+1
  3724  0262  085E               	movf	??_PathTo+1,w
  3725  0263  0084               	movwf	4
  3726  0264  1383               	bcf	3,7	;select IRP bank0
  3727  0265  0800               	movf	0,w
  3728  0266  3E04               	addlw	4
  3729  0267  2AA6               	goto	L14
  3730  0268                     l2817:	
  3731                           ;main.c: 124: case 1: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 2);
  3732                           
  3733                           ;main.c: 123: break;
  3734                           
  3735  0268  3005               	movlw	5
  3736  0269  00DD               	movwf	??_PathTo
  3737  026A  085D               	movf	??_PathTo,w
  3738  026B  00D7               	movwf	___bmul@multiplicand
  3739  026C  083C               	movf	_y_int,w
  3740  026D  120A  158A  2702  120A  118A  	fcall	___bmul
  3741  0272  3E40               	addlw	(low (_mazeGrid| 0))& (0+255)
  3742  0273  1283               	bcf	3,5	;RP0=0, select bank0
  3743  0274  1303               	bcf	3,6	;RP1=0, select bank0
  3744  0275  0738               	addwf	_x_int,w
  3745  0276  00DE               	movwf	??_PathTo+1
  3746  0277  085E               	movf	??_PathTo+1,w
  3747  0278  0084               	movwf	4
  3748  0279  1383               	bcf	3,7	;select IRP bank0
  3749  027A  0800               	movf	0,w
  3750  027B  3E02               	addlw	2
  3751  027C  2AA6               	goto	L14
  3752  027D                     l2819:	
  3753                           ;main.c: 126: case 2: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 1);
  3754                           
  3755                           ;main.c: 125: break;
  3756                           
  3757  027D  3005               	movlw	5
  3758  027E  00DD               	movwf	??_PathTo
  3759  027F  085D               	movf	??_PathTo,w
  3760  0280  00D7               	movwf	___bmul@multiplicand
  3761  0281  083C               	movf	_y_int,w
  3762  0282  120A  158A  2702  120A  118A  	fcall	___bmul
  3763  0287  3E40               	addlw	(low (_mazeGrid| 0))& (0+255)
  3764  0288  1283               	bcf	3,5	;RP0=0, select bank0
  3765  0289  1303               	bcf	3,6	;RP1=0, select bank0
  3766  028A  0738               	addwf	_x_int,w
  3767  028B  00DE               	movwf	??_PathTo+1
  3768  028C  085E               	movf	??_PathTo+1,w
  3769  028D  0084               	movwf	4
  3770  028E  1383               	bcf	3,7	;select IRP bank0
  3771  028F  0800               	movf	0,w
  3772  0290  3E01               	addlw	1
  3773  0291  2AA6               	goto	L14
  3774  0292                     l2821:	
  3775                           ;main.c: 128: case 3: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 8);
  3776                           
  3777                           ;main.c: 127: break;
  3778                           
  3779  0292  3005               	movlw	5
  3780  0293  00DD               	movwf	??_PathTo
  3781  0294  085D               	movf	??_PathTo,w
  3782  0295  00D7               	movwf	___bmul@multiplicand
  3783  0296  083C               	movf	_y_int,w
  3784  0297  120A  158A  2702  120A  118A  	fcall	___bmul
  3785  029C  3E40               	addlw	(low (_mazeGrid| 0))& (0+255)
  3786  029D  1283               	bcf	3,5	;RP0=0, select bank0
  3787  029E  1303               	bcf	3,6	;RP1=0, select bank0
  3788  029F  0738               	addwf	_x_int,w
  3789  02A0  00DE               	movwf	??_PathTo+1
  3790  02A1  085E               	movf	??_PathTo+1,w
  3791  02A2  0084               	movwf	4
  3792  02A3  1383               	bcf	3,7	;select IRP bank0
  3793  02A4  0800               	movf	0,w
  3794  02A5  3E08               	addlw	8
  3795  02A6                     L14:	
  3796  02A6  00DF               	movwf	??_PathTo+2
  3797  02A7  3005               	movlw	5
  3798  02A8  00E0               	movwf	??_PathTo+3
  3799  02A9  0860               	movf	??_PathTo+3,w
  3800  02AA  00D7               	movwf	___bmul@multiplicand
  3801  02AB  083C               	movf	_y_int,w
  3802  02AC  120A  158A  2702  120A  118A  	fcall	___bmul
  3803  02B1  3E40               	addlw	(low (_mazeGrid| 0))& (0+255)
  3804  02B2  1283               	bcf	3,5	;RP0=0, select bank0
  3805  02B3  1303               	bcf	3,6	;RP1=0, select bank0
  3806  02B4  0738               	addwf	_x_int,w
  3807  02B5  00E1               	movwf	??_PathTo+4
  3808  02B6  0861               	movf	??_PathTo+4,w
  3809  02B7  0084               	movwf	4
  3810  02B8  085F               	movf	??_PathTo+2,w
  3811  02B9  1383               	bcf	3,7	;select IRP bank0
  3812  02BA  0080               	movwf	0
  3813                           
  3814                           ;main.c: 130: }
  3815                           
  3816                           ;main.c: 129: break;
  3817  02BB  2ACA               	goto	l2827
  3818  02BC                     l2825:	
  3819  02BC  082F               	movf	_intersection_orientation,w
  3820                           
  3821                           ; Switch size 1, requested type "space"
  3822                           ; Number of cases is 4, Range of values is 0 to 3
  3823                           ; switch strategies available:
  3824                           ; Name         Instructions Cycles
  3825                           ; simple_byte           13     7 (average)
  3826                           ; direct_byte           20     8 (fixed)
  3827                           ; jumptable            260     6 (fixed)
  3828                           ;	Chosen strategy is simple_byte
  3829  02BD  3A00               	xorlw	0	; case 0
  3830  02BE  1903               	skipnz
  3831  02BF  2A53               	goto	l2815
  3832  02C0  3A01               	xorlw	1	; case 1
  3833  02C1  1903               	skipnz
  3834  02C2  2A68               	goto	l2817
  3835  02C3  3A03               	xorlw	3	; case 2
  3836  02C4  1903               	skipnz
  3837  02C5  2A7D               	goto	l2819
  3838  02C6  3A01               	xorlw	1	; case 3
  3839  02C7  1903               	skipnz
  3840  02C8  2A92               	goto	l2821
  3841  02C9  2ACA               	goto	l2827
  3842  02CA                     l2827:	
  3843                           
  3844                           ;main.c: 133: x_path = x;
  3845  02CA  0856               	movf	_x,w
  3846  02CB  00DD               	movwf	??_PathTo
  3847  02CC  085D               	movf	??_PathTo,w
  3848  02CD  00B9               	movwf	_x_path
  3849                           
  3850                           ;main.c: 134: y_path = y;
  3851  02CE  083B               	movf	_y,w
  3852  02CF  00DD               	movwf	??_PathTo
  3853  02D0  085D               	movf	??_PathTo,w
  3854  02D1  00BD               	movwf	_y_path
  3855                           
  3856                           ;main.c: 135: orientation_path = orientation;
  3857  02D2  0854               	movf	_orientation,w
  3858  02D3  00DD               	movwf	??_PathTo
  3859  02D4  085D               	movf	??_PathTo,w
  3860  02D5  00B1               	movwf	_orientation_path
  3861                           
  3862                           ;main.c: 136: pathCount = 0;
  3863  02D6  01B2               	clrf	_pathCount
  3864                           
  3865                           ;main.c: 137: reset_flag = 1;
  3866  02D7  15F0               	bsf	_reset_flag/(0+8),_reset_flag& (0+7)
  3867                           
  3868                           ;main.c: 140: for (r = 0; r <= 1; r++){
  3869  02D8  01B3               	clrf	_r
  3870  02D9  3002               	movlw	2
  3871  02DA  0233               	subwf	_r,w
  3872  02DB  1803               	btfsc	3,0
  3873  02DC  2B04               	goto	l2853
  3874  02DD                     l2837:	
  3875                           
  3876                           ;main.c: 141: for (c = 0; c <= 15; c++){
  3877  02DD  01AE               	clrf	_c
  3878  02DE  3010               	movlw	16
  3879  02DF  022E               	subwf	_c,w
  3880  02E0  1803               	btfsc	3,0
  3881  02E1  2AFC               	goto	l2849
  3882  02E2                     l2843:	
  3883                           
  3884                           ;main.c: 142: path[r][c] = 0;
  3885  02E2  0833               	movf	_r,w
  3886  02E3  00DD               	movwf	??_PathTo
  3887  02E4  3004               	movlw	4
  3888  02E5                     u2055:	
  3889  02E5  1003               	clrc
  3890  02E6  0DDD               	rlf	??_PathTo,f
  3891  02E7  3EFF               	addlw	-1
  3892  02E8  1D03               	skipz
  3893  02E9  2AE5               	goto	u2055
  3894  02EA  30A0               	movlw	(low (_path| 0))& (0+255)
  3895  02EB  075D               	addwf	??_PathTo,w
  3896  02EC  00DE               	movwf	??_PathTo+1
  3897  02ED  082E               	movf	_c,w
  3898  02EE  075E               	addwf	??_PathTo+1,w
  3899  02EF  00DF               	movwf	??_PathTo+2
  3900  02F0  085F               	movf	??_PathTo+2,w
  3901  02F1  0084               	movwf	4
  3902  02F2  1383               	bcf	3,7	;select IRP bank1
  3903  02F3  0180               	clrf	0
  3904  02F4  3001               	movlw	1
  3905  02F5  00DD               	movwf	??_PathTo
  3906  02F6  085D               	movf	??_PathTo,w
  3907  02F7  07AE               	addwf	_c,f
  3908  02F8  3010               	movlw	16
  3909  02F9  022E               	subwf	_c,w
  3910  02FA  1C03               	skipc
  3911  02FB  2AE2               	goto	l2843
  3912  02FC                     l2849:	
  3913  02FC  3001               	movlw	1
  3914  02FD  00DD               	movwf	??_PathTo
  3915  02FE  085D               	movf	??_PathTo,w
  3916  02FF  07B3               	addwf	_r,f
  3917  0300  3002               	movlw	2
  3918  0301  0233               	subwf	_r,w
  3919  0302  1C03               	skipc
  3920  0303  2ADD               	goto	l2837
  3921  0304                     l2853:	
  3922                           
  3923                           ;main.c: 143: }
  3924                           ;main.c: 144: }
  3925                           ;main.c: 145: }
  3926                           ;main.c: 151: if((sum == 4) || (pathCount >= 15)){
  3927  0304  3004               	movlw	4
  3928  0305  0665               	xorwf	PathTo@sum,w
  3929  0306  1903               	btfsc	3,2
  3930  0307  2B76               	goto	l2867
  3931  0308  300F               	movlw	15
  3932  0309  0232               	subwf	_pathCount,w
  3933  030A  1803               	btfsc	3,0
  3934  030B  2B76               	goto	l2867
  3935  030C  2BBE               	goto	l170
  3936  030D                     l2857:	
  3937                           ;main.c: 155: case 0: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 4);
  3938                           
  3939                           ;main.c: 154: switch(intersection_orientation){
  3940                           
  3941  030D  3005               	movlw	5
  3942  030E  00DD               	movwf	??_PathTo
  3943  030F  085D               	movf	??_PathTo,w
  3944  0310  00D7               	movwf	___bmul@multiplicand
  3945  0311  083C               	movf	_y_int,w
  3946  0312  120A  158A  2702  120A  118A  	fcall	___bmul
  3947  0317  3E40               	addlw	(low (_mazeGrid| 0))& (0+255)
  3948  0318  1283               	bcf	3,5	;RP0=0, select bank0
  3949  0319  1303               	bcf	3,6	;RP1=0, select bank0
  3950  031A  0738               	addwf	_x_int,w
  3951  031B  00DE               	movwf	??_PathTo+1
  3952  031C  085E               	movf	??_PathTo+1,w
  3953  031D  0084               	movwf	4
  3954  031E  1383               	bcf	3,7	;select IRP bank0
  3955  031F  0800               	movf	0,w
  3956  0320  3E04               	addlw	4
  3957  0321  2B60               	goto	L15
  3958  0322                     l2859:	
  3959                           ;main.c: 157: case 1: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 2);
  3960                           
  3961                           ;main.c: 156: break;
  3962                           
  3963  0322  3005               	movlw	5
  3964  0323  00DD               	movwf	??_PathTo
  3965  0324  085D               	movf	??_PathTo,w
  3966  0325  00D7               	movwf	___bmul@multiplicand
  3967  0326  083C               	movf	_y_int,w
  3968  0327  120A  158A  2702  120A  118A  	fcall	___bmul
  3969  032C  3E40               	addlw	(low (_mazeGrid| 0))& (0+255)
  3970  032D  1283               	bcf	3,5	;RP0=0, select bank0
  3971  032E  1303               	bcf	3,6	;RP1=0, select bank0
  3972  032F  0738               	addwf	_x_int,w
  3973  0330  00DE               	movwf	??_PathTo+1
  3974  0331  085E               	movf	??_PathTo+1,w
  3975  0332  0084               	movwf	4
  3976  0333  1383               	bcf	3,7	;select IRP bank0
  3977  0334  0800               	movf	0,w
  3978  0335  3E02               	addlw	2
  3979  0336  2B60               	goto	L15
  3980  0337                     l2861:	
  3981                           ;main.c: 159: case 2: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 1);
  3982                           
  3983                           ;main.c: 158: break;
  3984                           
  3985  0337  3005               	movlw	5
  3986  0338  00DD               	movwf	??_PathTo
  3987  0339  085D               	movf	??_PathTo,w
  3988  033A  00D7               	movwf	___bmul@multiplicand
  3989  033B  083C               	movf	_y_int,w
  3990  033C  120A  158A  2702  120A  118A  	fcall	___bmul
  3991  0341  3E40               	addlw	(low (_mazeGrid| 0))& (0+255)
  3992  0342  1283               	bcf	3,5	;RP0=0, select bank0
  3993  0343  1303               	bcf	3,6	;RP1=0, select bank0
  3994  0344  0738               	addwf	_x_int,w
  3995  0345  00DE               	movwf	??_PathTo+1
  3996  0346  085E               	movf	??_PathTo+1,w
  3997  0347  0084               	movwf	4
  3998  0348  1383               	bcf	3,7	;select IRP bank0
  3999  0349  0800               	movf	0,w
  4000  034A  3E01               	addlw	1
  4001  034B  2B60               	goto	L15
  4002  034C                     l2863:	
  4003                           ;main.c: 161: case 3: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 8);
  4004                           
  4005                           ;main.c: 160: break;
  4006                           
  4007  034C  3005               	movlw	5
  4008  034D  00DD               	movwf	??_PathTo
  4009  034E  085D               	movf	??_PathTo,w
  4010  034F  00D7               	movwf	___bmul@multiplicand
  4011  0350  083C               	movf	_y_int,w
  4012  0351  120A  158A  2702  120A  118A  	fcall	___bmul
  4013  0356  3E40               	addlw	(low (_mazeGrid| 0))& (0+255)
  4014  0357  1283               	bcf	3,5	;RP0=0, select bank0
  4015  0358  1303               	bcf	3,6	;RP1=0, select bank0
  4016  0359  0738               	addwf	_x_int,w
  4017  035A  00DE               	movwf	??_PathTo+1
  4018  035B  085E               	movf	??_PathTo+1,w
  4019  035C  0084               	movwf	4
  4020  035D  1383               	bcf	3,7	;select IRP bank0
  4021  035E  0800               	movf	0,w
  4022  035F  3E08               	addlw	8
  4023  0360                     L15:	
  4024  0360  00DF               	movwf	??_PathTo+2
  4025  0361  3005               	movlw	5
  4026  0362  00E0               	movwf	??_PathTo+3
  4027  0363  0860               	movf	??_PathTo+3,w
  4028  0364  00D7               	movwf	___bmul@multiplicand
  4029  0365  083C               	movf	_y_int,w
  4030  0366  120A  158A  2702  120A  118A  	fcall	___bmul
  4031  036B  3E40               	addlw	(low (_mazeGrid| 0))& (0+255)
  4032  036C  1283               	bcf	3,5	;RP0=0, select bank0
  4033  036D  1303               	bcf	3,6	;RP1=0, select bank0
  4034  036E  0738               	addwf	_x_int,w
  4035  036F  00E1               	movwf	??_PathTo+4
  4036  0370  0861               	movf	??_PathTo+4,w
  4037  0371  0084               	movwf	4
  4038  0372  085F               	movf	??_PathTo+2,w
  4039  0373  1383               	bcf	3,7	;select IRP bank0
  4040  0374  0080               	movwf	0
  4041                           
  4042                           ;main.c: 163: }
  4043                           
  4044                           ;main.c: 162: break;
  4045  0375  2B84               	goto	l2869
  4046  0376                     l2867:	
  4047  0376  082F               	movf	_intersection_orientation,w
  4048                           
  4049                           ; Switch size 1, requested type "space"
  4050                           ; Number of cases is 4, Range of values is 0 to 3
  4051                           ; switch strategies available:
  4052                           ; Name         Instructions Cycles
  4053                           ; simple_byte           13     7 (average)
  4054                           ; direct_byte           20     8 (fixed)
  4055                           ; jumptable            260     6 (fixed)
  4056                           ;	Chosen strategy is simple_byte
  4057  0377  3A00               	xorlw	0	; case 0
  4058  0378  1903               	skipnz
  4059  0379  2B0D               	goto	l2857
  4060  037A  3A01               	xorlw	1	; case 1
  4061  037B  1903               	skipnz
  4062  037C  2B22               	goto	l2859
  4063  037D  3A03               	xorlw	3	; case 2
  4064  037E  1903               	skipnz
  4065  037F  2B37               	goto	l2861
  4066  0380  3A01               	xorlw	1	; case 3
  4067  0381  1903               	skipnz
  4068  0382  2B4C               	goto	l2863
  4069  0383  2B84               	goto	l2869
  4070  0384                     l2869:	
  4071                           
  4072                           ;main.c: 166: x_path = x;
  4073  0384  0856               	movf	_x,w
  4074  0385  00DD               	movwf	??_PathTo
  4075  0386  085D               	movf	??_PathTo,w
  4076  0387  00B9               	movwf	_x_path
  4077                           
  4078                           ;main.c: 167: y_path = y;
  4079  0388  083B               	movf	_y,w
  4080  0389  00DD               	movwf	??_PathTo
  4081  038A  085D               	movf	??_PathTo,w
  4082  038B  00BD               	movwf	_y_path
  4083                           
  4084                           ;main.c: 168: orientation_path = orientation;
  4085  038C  0854               	movf	_orientation,w
  4086  038D  00DD               	movwf	??_PathTo
  4087  038E  085D               	movf	??_PathTo,w
  4088  038F  00B1               	movwf	_orientation_path
  4089                           
  4090                           ;main.c: 169: pathCount = 0;
  4091  0390  01B2               	clrf	_pathCount
  4092                           
  4093                           ;main.c: 170: reset_flag = 1;
  4094  0391  15F0               	bsf	_reset_flag/(0+8),_reset_flag& (0+7)
  4095                           
  4096                           ;main.c: 172: for (r = 0; r <= 1; r++){
  4097  0392  01B3               	clrf	_r
  4098  0393  3002               	movlw	2
  4099  0394  0233               	subwf	_r,w
  4100  0395  1803               	btfsc	3,0
  4101  0396  2BBE               	goto	l170
  4102  0397                     l2879:	
  4103                           
  4104                           ;main.c: 173: for (c = 0; c <= 15; c++){
  4105  0397  01AE               	clrf	_c
  4106  0398  3010               	movlw	16
  4107  0399  022E               	subwf	_c,w
  4108  039A  1803               	btfsc	3,0
  4109  039B  2BB6               	goto	l2891
  4110  039C                     l2885:	
  4111                           
  4112                           ;main.c: 174: path[r][c] = 0;
  4113  039C  0833               	movf	_r,w
  4114  039D  00DD               	movwf	??_PathTo
  4115  039E  3004               	movlw	4
  4116  039F                     u2125:	
  4117  039F  1003               	clrc
  4118  03A0  0DDD               	rlf	??_PathTo,f
  4119  03A1  3EFF               	addlw	-1
  4120  03A2  1D03               	skipz
  4121  03A3  2B9F               	goto	u2125
  4122  03A4  30A0               	movlw	(low (_path| 0))& (0+255)
  4123  03A5  075D               	addwf	??_PathTo,w
  4124  03A6  00DE               	movwf	??_PathTo+1
  4125  03A7  082E               	movf	_c,w
  4126  03A8  075E               	addwf	??_PathTo+1,w
  4127  03A9  00DF               	movwf	??_PathTo+2
  4128  03AA  085F               	movf	??_PathTo+2,w
  4129  03AB  0084               	movwf	4
  4130  03AC  1383               	bcf	3,7	;select IRP bank1
  4131  03AD  0180               	clrf	0
  4132  03AE  3001               	movlw	1
  4133  03AF  00DD               	movwf	??_PathTo
  4134  03B0  085D               	movf	??_PathTo,w
  4135  03B1  07AE               	addwf	_c,f
  4136  03B2  3010               	movlw	16
  4137  03B3  022E               	subwf	_c,w
  4138  03B4  1C03               	skipc
  4139  03B5  2B9C               	goto	l2885
  4140  03B6                     l2891:	
  4141  03B6  3001               	movlw	1
  4142  03B7  00DD               	movwf	??_PathTo
  4143  03B8  085D               	movf	??_PathTo,w
  4144  03B9  07B3               	addwf	_r,f
  4145  03BA  3002               	movlw	2
  4146  03BB  0233               	subwf	_r,w
  4147  03BC  1C03               	skipc
  4148  03BD  2B97               	goto	l2879
  4149  03BE                     l170:	
  4150                           
  4151                           ;main.c: 175: }
  4152                           ;main.c: 176: }
  4153                           ;main.c: 177: }
  4154                           ;main.c: 186: if (reset_flag != 1){
  4155  03BE  19F0               	btfsc	_reset_flag/(0+8),_reset_flag& (0+7)
  4156  03BF  2BE3               	goto	l183
  4157                           
  4158                           ;main.c: 189: if(left == 0){
  4159  03C0  1970               	btfsc	_left/(0+8),_left& (0+7)
  4160  03C1  2BC6               	goto	l184
  4161                           
  4162                           ;main.c: 190: x_path--;
  4163  03C2  3001               	movlw	1
  4164  03C3  02B9               	subwf	_x_path,f
  4165                           
  4166                           ;main.c: 191: orientation_path = 3;
  4167  03C4  3003               	movlw	3
  4168  03C5  2BDC               	goto	L17
  4169  03C6                     l184:	
  4170                           ;main.c: 193: }
  4171                           
  4172                           ;main.c: 192: pathCount++;
  4173                           
  4174                           
  4175                           ;main.c: 194: else if(up == 0){
  4176  03C6  1AF0               	btfsc	_up/(0+8),_up& (0+7)
  4177  03C7  2BCC               	goto	l186
  4178                           
  4179                           ;main.c: 195: y_path--;
  4180  03C8  3001               	movlw	1
  4181  03C9  02BD               	subwf	_y_path,f
  4182                           
  4183                           ;main.c: 196: orientation_path = 0;
  4184  03CA  01B1               	clrf	_orientation_path
  4185  03CB  2BDF               	goto	l2917
  4186  03CC                     l186:	
  4187                           ;main.c: 198: }
  4188                           
  4189                           ;main.c: 197: pathCount++;
  4190                           
  4191                           
  4192                           ;main.c: 199: else if(right == 0){
  4193  03CC  1A70               	btfsc	_right/(0+8),_right& (0+7)
  4194  03CD  2BD5               	goto	l188
  4195                           
  4196                           ;main.c: 200: x_path++;
  4197  03CE  3001               	movlw	1
  4198  03CF  00DD               	movwf	??_PathTo
  4199  03D0  085D               	movf	??_PathTo,w
  4200  03D1  07B9               	addwf	_x_path,f
  4201                           
  4202                           ;main.c: 201: orientation_path = 1;
  4203  03D2  01B1               	clrf	_orientation_path
  4204  03D3  0AB1               	incf	_orientation_path,f
  4205  03D4  2BDF               	goto	l2917
  4206  03D5                     l188:	
  4207                           ;main.c: 203: }
  4208                           
  4209                           ;main.c: 202: pathCount++;
  4210                           
  4211                           
  4212                           ;main.c: 204: else if(down == 0){
  4213  03D5  18F0               	btfsc	_down/(0+8),_down& (0+7)
  4214  03D6  2BE3               	goto	l183
  4215                           
  4216                           ;main.c: 205: y_path++;
  4217  03D7  3001               	movlw	1
  4218  03D8  00DD               	movwf	??_PathTo
  4219  03D9  085D               	movf	??_PathTo,w
  4220  03DA  07BD               	addwf	_y_path,f
  4221                           
  4222                           ;main.c: 206: orientation_path = 2;
  4223  03DB  3002               	movlw	2
  4224  03DC                     L17:	
  4225  03DC  00DD               	movwf	??_PathTo
  4226  03DD  085D               	movf	??_PathTo,w
  4227  03DE  00B1               	movwf	_orientation_path
  4228  03DF                     l2917:	
  4229                           
  4230                           ;main.c: 207: pathCount++;
  4231  03DF  3001               	movlw	1
  4232  03E0  00DD               	movwf	??_PathTo
  4233  03E1  085D               	movf	??_PathTo,w
  4234  03E2  07B2               	addwf	_pathCount,f
  4235  03E3                     l183:	
  4236  03E3  3001               	movlw	1
  4237  03E4  07E6               	addwf	PathTo@loop,f
  4238  03E5  1803               	skipnc
  4239  03E6  0AE7               	incf	PathTo@loop+1,f
  4240  03E7  3000               	movlw	0
  4241  03E8  07E7               	addwf	PathTo@loop+1,f
  4242  03E9  293B               	goto	L16
  4243  03EA                     __end_of_PathTo:	
  4244                           
  4245                           	psect	text15
  4246  0F96                     __ptext15:	
  4247 ;; *************** function _lcdWriteString *****************
  4248 ;; Defined at:
  4249 ;;		line 32 in file "LCD.c"
  4250 ;; Parameters:    Size  Location     Type
  4251 ;;  s               1    wreg     PTR unsigned char 
  4252 ;;		 -> STR_1(11), 
  4253 ;; Auto vars:     Size  Location     Type
  4254 ;;  s               1    4[BANK0 ] PTR unsigned char 
  4255 ;;		 -> STR_1(11), 
  4256 ;; Return value:  Size  Location     Type
  4257 ;;                  1    wreg      void 
  4258 ;; Registers used:
  4259 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4260 ;; Tracked objects:
  4261 ;;		On entry : 0/0
  4262 ;;		On exit  : 0/0
  4263 ;;		Unchanged: 0/0
  4264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4265 ;;      Params:         0       0       0       0       0
  4266 ;;      Locals:         0       1       0       0       0
  4267 ;;      Temps:          0       1       0       0       0
  4268 ;;      Totals:         0       2       0       0       0
  4269 ;;Total ram usage:        2 bytes
  4270 ;; Hardware stack levels used:    1
  4271 ;; Hardware stack levels required when called:    2
  4272 ;; This function calls:
  4273 ;;		_lcdWriteData
  4274 ;; This function is called by:
  4275 ;;		_PathTo
  4276 ;; This function uses a non-reentrant model
  4277 ;;
  4278                           
  4279                           
  4280                           ;psect for function _lcdWriteString
  4281  0F96                     _lcdWriteString:	
  4282                           
  4283                           ;incstack = 0
  4284                           ; Regs used in _lcdWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4285                           ;lcdWriteString@s stored from wreg
  4286  0F96  1283               	bcf	3,5	;RP0=0, select bank0
  4287  0F97  1303               	bcf	3,6	;RP1=0, select bank0
  4288  0F98  00DB               	movwf	lcdWriteString@s
  4289  0F99                     l2631:	
  4290                           ;LCD.c: 34: while(*s) lcdWriteData(*s++);
  4291                           
  4292  0F99  085B               	movf	lcdWriteString@s,w
  4293  0F9A  0084               	movwf	4
  4294  0F9B  120A  158A  2000  120A  158A  	fcall	stringdir
  4295  0FA0  3A00               	xorlw	0
  4296  0FA1  1903               	btfsc	3,2
  4297  0FA2  0008               	return
  4298  0FA3  085B               	movf	lcdWriteString@s,w
  4299  0FA4  0084               	movwf	4
  4300  0FA5  120A  158A  2000  120A  158A  	fcall	stringdir
  4301  0FAA  120A  158A  2715  120A  158A  	fcall	_lcdWriteData
  4302  0FAF  3001               	movlw	1
  4303  0FB0  1283               	bcf	3,5	;RP0=0, select bank0
  4304  0FB1  1303               	bcf	3,6	;RP1=0, select bank0
  4305  0FB2  00DA               	movwf	??_lcdWriteString
  4306  0FB3  085A               	movf	??_lcdWriteString,w
  4307  0FB4  07DB               	addwf	lcdWriteString@s,f
  4308  0FB5  2F99               	goto	l2631
  4309  0FB6                     __end_of_lcdWriteString:	
  4310                           
  4311                           	psect	text16
  4312  0F15                     __ptext16:	
  4313 ;; *************** function _lcdWriteData *****************
  4314 ;; Defined at:
  4315 ;;		line 16 in file "LCD.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;  databyte        1    wreg     unsigned char 
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;  databyte        1    2[BANK0 ] unsigned char 
  4320 ;; Return value:  Size  Location     Type
  4321 ;;                  1    wreg      void 
  4322 ;; Registers used:
  4323 ;;		wreg
  4324 ;; Tracked objects:
  4325 ;;		On entry : 0/0
  4326 ;;		On exit  : 0/0
  4327 ;;		Unchanged: 0/0
  4328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4329 ;;      Params:         0       0       0       0       0
  4330 ;;      Locals:         0       1       0       0       0
  4331 ;;      Temps:          0       2       0       0       0
  4332 ;;      Totals:         0       3       0       0       0
  4333 ;;Total ram usage:        3 bytes
  4334 ;; Hardware stack levels used:    1
  4335 ;; Hardware stack levels required when called:    1
  4336 ;; This function calls:
  4337 ;;		Nothing
  4338 ;; This function is called by:
  4339 ;;		_lcdWriteString
  4340 ;;		_lcdWriteToDigitBCD
  4341 ;; This function uses a non-reentrant model
  4342 ;;
  4343                           
  4344                           
  4345                           ;psect for function _lcdWriteData
  4346  0F15                     _lcdWriteData:	
  4347                           
  4348                           ;incstack = 0
  4349                           ; Regs used in _lcdWriteData: [wreg]
  4350                           ;lcdWriteData@databyte stored from wreg
  4351  0F15  1283               	bcf	3,5	;RP0=0, select bank0
  4352  0F16  1303               	bcf	3,6	;RP1=0, select bank0
  4353  0F17  00D9               	movwf	lcdWriteData@databyte
  4354                           
  4355                           ;LCD.c: 17: RE2 = 0;
  4356  0F18  1109               	bcf	9,2	;volatile
  4357                           
  4358                           ;LCD.c: 18: RE1 = 0;
  4359  0F19  1089               	bcf	9,1	;volatile
  4360                           
  4361                           ;LCD.c: 19: RE0 = 1;
  4362  0F1A  1409               	bsf	9,0	;volatile
  4363                           
  4364                           ;LCD.c: 20: PORTD = databyte;
  4365  0F1B  0859               	movf	lcdWriteData@databyte,w
  4366  0F1C  0088               	movwf	8	;volatile
  4367                           
  4368                           ;LCD.c: 21: RE2 = 1;
  4369  0F1D  1509               	bsf	9,2	;volatile
  4370                           
  4371                           ;LCD.c: 22: RE2 = 0;
  4372  0F1E  1109               	bcf	9,2	;volatile
  4373                           
  4374                           ;LCD.c: 23: _delay((unsigned long)((1)*(20000000/4000.0)));
  4375  0F1F  3007               	movlw	7
  4376  0F20  00D8               	movwf	??_lcdWriteData+1
  4377  0F21  307D               	movlw	125
  4378  0F22  00D7               	movwf	??_lcdWriteData
  4379  0F23                     u2497:	
  4380  0F23  0BD7               	decfsz	??_lcdWriteData,f
  4381  0F24  2F23               	goto	u2497
  4382  0F25  0BD8               	decfsz	??_lcdWriteData+1,f
  4383  0F26  2F23               	goto	u2497
  4384  0F27  0008               	return
  4385  0F28                     __end_of_lcdWriteData:	
  4386                           
  4387                           	psect	text17
  4388  0EB4                     __ptext17:	
  4389 ;; *************** function _lcdSetCursor *****************
  4390 ;; Defined at:
  4391 ;;		line 27 in file "LCD.c"
  4392 ;; Parameters:    Size  Location     Type
  4393 ;;  address         1    wreg     unsigned char 
  4394 ;; Auto vars:     Size  Location     Type
  4395 ;;  address         1    3[BANK0 ] unsigned char 
  4396 ;; Return value:  Size  Location     Type
  4397 ;;                  1    wreg      void 
  4398 ;; Registers used:
  4399 ;;		wreg, status,2, status,0, pclath, cstack
  4400 ;; Tracked objects:
  4401 ;;		On entry : 0/0
  4402 ;;		On exit  : 0/0
  4403 ;;		Unchanged: 0/0
  4404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4405 ;;      Params:         0       0       0       0       0
  4406 ;;      Locals:         0       1       0       0       0
  4407 ;;      Temps:          0       0       0       0       0
  4408 ;;      Totals:         0       1       0       0       0
  4409 ;;Total ram usage:        1 bytes
  4410 ;; Hardware stack levels used:    1
  4411 ;; Hardware stack levels required when called:    2
  4412 ;; This function calls:
  4413 ;;		_lcdWriteControl
  4414 ;; This function is called by:
  4415 ;;		_PathTo
  4416 ;;		_ADCMain
  4417 ;; This function uses a non-reentrant model
  4418 ;;
  4419                           
  4420                           
  4421                           ;psect for function _lcdSetCursor
  4422  0EB4                     _lcdSetCursor:	
  4423                           
  4424                           ;incstack = 0
  4425                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  4426                           ;lcdSetCursor@address stored from wreg
  4427  0EB4  1283               	bcf	3,5	;RP0=0, select bank0
  4428  0EB5  1303               	bcf	3,6	;RP1=0, select bank0
  4429  0EB6  00DA               	movwf	lcdSetCursor@address
  4430                           
  4431                           ;LCD.c: 28: address |= 0b10000000;
  4432  0EB7  17DA               	bsf	lcdSetCursor@address,7
  4433                           
  4434                           ;LCD.c: 29: lcdWriteControl(address);
  4435  0EB8  085A               	movf	lcdSetCursor@address,w
  4436  0EB9  120A  158A  2728   	fcall	_lcdWriteControl
  4437  0EBC  0008               	return
  4438  0EBD                     __end_of_lcdSetCursor:	
  4439                           
  4440                           	psect	text18
  4441  0F28                     __ptext18:	
  4442 ;; *************** function _lcdWriteControl *****************
  4443 ;; Defined at:
  4444 ;;		line 5 in file "LCD.c"
  4445 ;; Parameters:    Size  Location     Type
  4446 ;;  databyte        1    wreg     unsigned char 
  4447 ;; Auto vars:     Size  Location     Type
  4448 ;;  databyte        1    2[BANK0 ] unsigned char 
  4449 ;; Return value:  Size  Location     Type
  4450 ;;                  1    wreg      void 
  4451 ;; Registers used:
  4452 ;;		wreg
  4453 ;; Tracked objects:
  4454 ;;		On entry : 0/0
  4455 ;;		On exit  : 0/0
  4456 ;;		Unchanged: 0/0
  4457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4458 ;;      Params:         0       0       0       0       0
  4459 ;;      Locals:         0       1       0       0       0
  4460 ;;      Temps:          0       2       0       0       0
  4461 ;;      Totals:         0       3       0       0       0
  4462 ;;Total ram usage:        3 bytes
  4463 ;; Hardware stack levels used:    1
  4464 ;; Hardware stack levels required when called:    1
  4465 ;; This function calls:
  4466 ;;		Nothing
  4467 ;; This function is called by:
  4468 ;;		_lcdSetCursor
  4469 ;;		_setupLCD
  4470 ;; This function uses a non-reentrant model
  4471 ;;
  4472                           
  4473                           
  4474                           ;psect for function _lcdWriteControl
  4475  0F28                     _lcdWriteControl:	
  4476                           
  4477                           ;incstack = 0
  4478                           ; Regs used in _lcdWriteControl: [wreg]
  4479                           ;lcdWriteControl@databyte stored from wreg
  4480  0F28  1283               	bcf	3,5	;RP0=0, select bank0
  4481  0F29  1303               	bcf	3,6	;RP1=0, select bank0
  4482  0F2A  00D9               	movwf	lcdWriteControl@databyte
  4483                           
  4484                           ;LCD.c: 6: RE2 = 0;
  4485  0F2B  1109               	bcf	9,2	;volatile
  4486                           
  4487                           ;LCD.c: 7: RE1 = 0;
  4488  0F2C  1089               	bcf	9,1	;volatile
  4489                           
  4490                           ;LCD.c: 8: RE0 = 0;
  4491  0F2D  1009               	bcf	9,0	;volatile
  4492                           
  4493                           ;LCD.c: 9: PORTD = databyte;
  4494  0F2E  0859               	movf	lcdWriteControl@databyte,w
  4495  0F2F  0088               	movwf	8	;volatile
  4496                           
  4497                           ;LCD.c: 10: RE2 = 1;
  4498  0F30  1509               	bsf	9,2	;volatile
  4499                           
  4500                           ;LCD.c: 11: RE2 = 0;
  4501  0F31  1109               	bcf	9,2	;volatile
  4502                           
  4503                           ;LCD.c: 12: _delay((unsigned long)((2)*(20000000/4000.0)));
  4504  0F32  300D               	movlw	13
  4505  0F33  00D8               	movwf	??_lcdWriteControl+1
  4506  0F34  30FB               	movlw	251
  4507  0F35  00D7               	movwf	??_lcdWriteControl
  4508  0F36                     u2507:	
  4509  0F36  0BD7               	decfsz	??_lcdWriteControl,f
  4510  0F37  2F36               	goto	u2507
  4511  0F38  0BD8               	decfsz	??_lcdWriteControl+1,f
  4512  0F39  2F36               	goto	u2507
  4513  0F3A  2F3B               	nop2
  4514  0F3B  0008               	return
  4515  0F3C                     __end_of_lcdWriteControl:	
  4516                           
  4517                           	psect	text19
  4518  0F02                     __ptext19:	
  4519 ;; *************** function ___bmul *****************
  4520 ;; Defined at:
  4521 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
  4522 ;; Parameters:    Size  Location     Type
  4523 ;;  multiplier      1    wreg     unsigned char 
  4524 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  4525 ;; Auto vars:     Size  Location     Type
  4526 ;;  multiplier      1    3[BANK0 ] unsigned char 
  4527 ;;  product         1    2[BANK0 ] unsigned char 
  4528 ;; Return value:  Size  Location     Type
  4529 ;;                  1    wreg      unsigned char 
  4530 ;; Registers used:
  4531 ;;		wreg, status,2, status,0
  4532 ;; Tracked objects:
  4533 ;;		On entry : 0/0
  4534 ;;		On exit  : 0/0
  4535 ;;		Unchanged: 0/0
  4536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4537 ;;      Params:         0       1       0       0       0
  4538 ;;      Locals:         0       2       0       0       0
  4539 ;;      Temps:          0       1       0       0       0
  4540 ;;      Totals:         0       4       0       0       0
  4541 ;;Total ram usage:        4 bytes
  4542 ;; Hardware stack levels used:    1
  4543 ;; Hardware stack levels required when called:    1
  4544 ;; This function calls:
  4545 ;;		Nothing
  4546 ;; This function is called by:
  4547 ;;		_PathTo
  4548 ;; This function uses a non-reentrant model
  4549 ;;
  4550                           
  4551                           
  4552                           ;psect for function ___bmul
  4553  0F02                     ___bmul:	
  4554                           
  4555                           ;incstack = 0
  4556                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4557                           ;___bmul@multiplier stored from wreg
  4558  0F02  1283               	bcf	3,5	;RP0=0, select bank0
  4559  0F03  1303               	bcf	3,6	;RP1=0, select bank0
  4560  0F04  00DA               	movwf	___bmul@multiplier
  4561  0F05  01D9               	clrf	___bmul@product
  4562  0F06                     l2695:	
  4563  0F06  1C5A               	btfss	___bmul@multiplier,0
  4564  0F07  2F0C               	goto	l2699
  4565  0F08  0857               	movf	___bmul@multiplicand,w
  4566  0F09  00D8               	movwf	??___bmul
  4567  0F0A  0858               	movf	??___bmul,w
  4568  0F0B  07D9               	addwf	___bmul@product,f
  4569  0F0C                     l2699:	
  4570  0F0C  1003               	clrc
  4571  0F0D  0DD7               	rlf	___bmul@multiplicand,f
  4572  0F0E  1003               	clrc
  4573  0F0F  0CDA               	rrf	___bmul@multiplier,f
  4574  0F10  085A               	movf	___bmul@multiplier,w
  4575  0F11  1D03               	btfss	3,2
  4576  0F12  2F06               	goto	l2695
  4577  0F13  0859               	movf	___bmul@product,w
  4578  0F14  0008               	return
  4579  0F15                     __end_of___bmul:	
  4580                           
  4581                           	psect	text20
  4582  0FB6                     __ptext20:	
  4583 ;; *************** function _isr *****************
  4584 ;; Defined at:
  4585 ;;		line 361 in file "main.c"
  4586 ;; Parameters:    Size  Location     Type
  4587 ;;		None
  4588 ;; Auto vars:     Size  Location     Type
  4589 ;;		None
  4590 ;; Return value:  Size  Location     Type
  4591 ;;                  1    wreg      void 
  4592 ;; Registers used:
  4593 ;;		wreg, status,2, status,0
  4594 ;; Tracked objects:
  4595 ;;		On entry : 0/0
  4596 ;;		On exit  : 0/0
  4597 ;;		Unchanged: 0/0
  4598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4599 ;;      Params:         0       0       0       0       0
  4600 ;;      Locals:         0       0       0       0       0
  4601 ;;      Temps:          5       0       0       0       0
  4602 ;;      Totals:         5       0       0       0       0
  4603 ;;Total ram usage:        5 bytes
  4604 ;; Hardware stack levels used:    1
  4605 ;; This function calls:
  4606 ;;		Nothing
  4607 ;; This function is called by:
  4608 ;;		Interrupt level 1
  4609 ;; This function uses a non-reentrant model
  4610 ;;
  4611                           
  4612                           
  4613                           ;psect for function _isr
  4614  0FB6                     _isr:	
  4615                           
  4616                           ;main.c: 362: if(TMR0IF){
  4617  0FB6  1D0B               	btfss	11,2	;volatile
  4618  0FB7  2FCD               	goto	i1l257
  4619                           
  4620                           ;main.c: 363: TMR0IF = 0;
  4621  0FB8  110B               	bcf	11,2	;volatile
  4622                           
  4623                           ;main.c: 364: TMR0 = 100;
  4624  0FB9  3064               	movlw	100
  4625  0FBA  0081               	movwf	1	;volatile
  4626                           
  4627                           ;main.c: 365: time_count++;
  4628  0FBB  3001               	movlw	1
  4629  0FBC  07A6               	addwf	_time_count,f	;volatile
  4630  0FBD  1803               	skipnc
  4631  0FBE  0AA7               	incf	_time_count+1,f	;volatile
  4632  0FBF  3000               	movlw	0
  4633  0FC0  07A7               	addwf	_time_count+1,f	;volatile
  4634                           
  4635                           ;main.c: 367: if(!RB0)
  4636  0FC1  1806               	btfsc	6,0	;volatile
  4637  0FC2  2FC7               	goto	i1l2477
  4638                           
  4639                           ;main.c: 368: PB8Counter++;
  4640  0FC3  3001               	movlw	1
  4641  0FC4  00F1               	movwf	??_isr
  4642  0FC5  0871               	movf	??_isr,w
  4643  0FC6  07AB               	addwf	_PB8Counter,f
  4644  0FC7                     i1l2477:	
  4645                           
  4646                           ;main.c: 369: if(!RB1)
  4647  0FC7  1886               	btfsc	6,1	;volatile
  4648  0FC8  2FCD               	goto	i1l257
  4649                           
  4650                           ;main.c: 370: PB7Counter++;
  4651  0FC9  3001               	movlw	1
  4652  0FCA  00F1               	movwf	??_isr
  4653  0FCB  0871               	movf	??_isr,w
  4654  0FCC  07AA               	addwf	_PB7Counter,f
  4655  0FCD                     i1l257:	
  4656  0FCD  0875               	movf	??_isr+4,w
  4657  0FCE  00FF               	movwf	127
  4658  0FCF  0874               	movf	??_isr+3,w
  4659  0FD0  008A               	movwf	10
  4660  0FD1  0873               	movf	??_isr+2,w
  4661  0FD2  0084               	movwf	4
  4662  0FD3  0E72               	swapf	(??_isr+1)^(0+-128),w
  4663  0FD4  0083               	movwf	3
  4664  0FD5  0EFE               	swapf	126,f
  4665  0FD6  0E7E               	swapf	126,w
  4666  0FD7  0009               	retfie
  4667  0FD8                     __end_of_isr:	
  4668  007E                     btemp	set	126	;btemp
  4669  007E                     wtemp	set	126
  4670  007E                     wtemp0	set	126
  4671  0080                     wtemp1	set	128
  4672  0082                     wtemp2	set	130
  4673  0084                     wtemp3	set	132
  4674  0086                     wtemp4	set	134
  4675  0088                     wtemp5	set	136
  4676  007F                     wtemp6	set	127
  4677  007E                     ttemp	set	126
  4678  007E                     ttemp0	set	126
  4679  0081                     ttemp1	set	129
  4680  0084                     ttemp2	set	132
  4681  0087                     ttemp3	set	135
  4682  007F                     ttemp4	set	127
  4683  007E                     ltemp	set	126
  4684  007E                     ltemp0	set	126
  4685  0082                     ltemp1	set	130
  4686  0086                     ltemp2	set	134
  4687  0080                     ltemp3	set	128
  4688                           
  4689                           	psect	intentry
  4690  0004                     __pintentry:	
  4691                           ;incstack = 0
  4692                           ; Regs used in _isr: [wreg+status,2+status,0]
  4693                           
  4694  0004                     interrupt_function:	
  4695  007E                     saved_w	set	btemp
  4696  0004  00FE               	movwf	btemp
  4697  0005  0E03               	swapf	3,w
  4698  0006  00F2               	movwf	??_isr+1
  4699  0007  0804               	movf	4,w
  4700  0008  00F3               	movwf	??_isr+2
  4701  0009  080A               	movf	10,w
  4702  000A  00F4               	movwf	??_isr+3
  4703  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4704  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4705  000D  087F               	movf	btemp+1,w
  4706  000E  00F5               	movwf	??_isr+4
  4707  000F  120A  158A  2FB6   	ljmp	_isr


Data Sizes:
    Strings     11
    Constant    0
    Data        107
    BSS         100
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     22      77
    BANK1            80      0      52
    BANK3            96      0      96
    BANK2            96      0       0

Pointer List with Targets:

    lcdWriteString@s	PTR unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_TravelPath
    _setupLCD->_lcdWriteControl
    _TravelPath->_Turn90
    _Turn90->_DriveDirect
    _Drive->_ser_putch
    _Drive1m->_DriveDirect
    _getSensorData->_ser_getch
    _DriveDirect->_ser_putch
    _PathTo->_lcdWriteString
    _lcdWriteString->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    4867
                                             18 BANK0      4     4      0
                             _PathTo
                         _TravelPath
                           _ser_init
                          _ser_putch
                           _setupADC
                           _setupLCD
                           _setupSPI
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _spi_transfer                                         3     3      0      44
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      31
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TravelPath                                           4     4      0    3090
                                             14 BANK0      4     4      0
                            _Drive1m
                             _Turn90
 ---------------------------------------------------------------------------------
 (2) _Turn90                                               4     4      0    1768
                                             10 BANK0      4     4      0
                              _Drive
                        _DriveDirect
                      _getSensorData
 ---------------------------------------------------------------------------------
 (3) _Drive                                                4     1      3     545
                                              1 BANK0      4     1      3
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _Drive1m                                              3     3      0    1161
                                             10 BANK0      3     3      0
                        _DriveDirect
                      _getSensorData
 ---------------------------------------------------------------------------------
 (3) _getSensorData                                        7     5      2     356
                                              2 BANK0      7     5      2
                          _ser_getch
                          _ser_putch
 ---------------------------------------------------------------------------------
 (4) _ser_getch                                            2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _DriveDirect                                          9     5      4     805
                                              1 BANK0      9     5      4
                          _ser_putch
 ---------------------------------------------------------------------------------
 (1) _ser_putch                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PathTo                                              12    11      1    1637
                                              5 BANK0     12    11      1
                             ___bmul
                       _lcdSetCursor
                     _lcdWriteString
 ---------------------------------------------------------------------------------
 (2) _lcdWriteString                                       2     2      0     126
                                              3 BANK0      2     2      0
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (3) _lcdWriteData                                         3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _lcdSetCursor                                         1     1      0      65
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1    1186
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PathTo
     ___bmul
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteString
       _lcdWriteData
   _TravelPath
     _Drive1m
       _DriveDirect
         _ser_putch
       _getSensorData
         _ser_getch
         _ser_putch
     _Turn90
       _Drive
         _ser_putch
       _DriveDirect
         _ser_putch
       _getSensorData
         _ser_getch
         _ser_putch
   _ser_init
   _ser_putch
   _setupADC
   _setupLCD
     _lcdWriteControl
   _setupSPI
   _spi_transfer

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      60       9      100.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      34       7       65.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     16      4D       5       96.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      EB      12        0.0%
ABS                  0      0      EB       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Tue Oct 04 15:48:41 2016

                       _c 002E                         _r 0033                         _x 0056  
         ??_getSensorData 005B                         _y 003B                         pc 0002  
          ___bmul@product 0059               __CFG_CP$OFF 0000                        _GO 00FA  
                      _up 0385                        fsr 0004               Drive@speedH 005B  
             Drive@speedL 0058                       l141 01C3                       l151 0200  
                     l143 01C5                       l144 01C7                       l145 01C9  
                     l170 03BE                       l146 0206                       l147 01F7  
                     l149 01FB                       l183 03E3                       l184 03C6  
                     l186 03CC                       l188 03D5                       l660 0ECA  
                     l666 0EBD                       l774 0EE9                       _GIE 005F  
                     _RB0 0030                       _RB1 0031             ??_DriveDirect 005C  
                     _RE0 0048                       _RE1 0049                       _RE2 004A  
            __CFG_CPD$OFF 0000                       _isr 0FB6                       fsr0 0004  
                     indf 0000              __CFG_FOSC$HS 0000            ??_lcdWriteData 0057  
            __CFG_LVP$OFF 0000                      l3001 04FD                      l3003 050A  
                    l3005 050F                      l3007 03EE                      l3141 062D  
                    l2631 0F99                      l2713 0067                      l2641 06EE  
                    l2811 024E                      l2571 06A0                      l2555 066E  
                    l2635 06DF                      l2821 0292                      l2805 0220  
                    l2741 00DE                      l2725 009C                      l2653 0710  
                    l2637 06E4                      l2645 06F1                      l2815 0253  
                    l2743 00F3                      l2719 006C                      l2575 06B3  
                    l2559 0681                      l2655 0734                      l2639 06E9  
                    l2647 0701                      l2817 0268                      l2825 02BC  
                    l2737 00B4                      l2729 00A4                      l2593 07B3  
                    l2681 0562                      l2673 0535                      l2843 02E2  
                    l2819 027D                      l2827 02CA                      l2771 01CB  
                    l2739 00C9                      l2747 011D                      l2595 07B4  
                    l2683 0566                      l2667 0526                      l2675 0557  
                    l2931 0421                      l2917 03DF                      l2861 0337  
                    l2837 02DD                      l2853 0304                      l2773 01DB  
                    l2749 012B                      l2669 0528                      l2933 0428  
                    l2941 0440                      l2695 0F06                      l2863 034C  
                    l2687 0578                      l2951 0460                      l2943 044D  
                    l2857 030D                      l2849 02FC                      l2689 059A  
                    l2953 0467                      l2961 047F                      l2929 041A  
                    l2945 044E                      l2699 0F0C                      l2891 03B6  
                    l2859 0322                      l2867 0376                      l2971 049F  
                    l2963 048C                      l2885 039C                      l2869 0384  
                    l2973 04A6                      l2981 04BE                      l2949 0459  
                    l2965 048D                      l2879 0397                      l2991 04DE  
                    l2983 04CB                      l2993 04E5                      l2969 0498  
                    l2985 04CC                      l2989 04D7                      ?_isr 0071  
                    STR_1 0806                      u2005 0236                      u2125 039F  
                    u2055 02E5                      u2255 03FE                      u2407 0641  
                    u1625 065E                      u1705 071B                      u2417 0F63  
                    u2507 0F36                      u2427 0408                      u2437 0434  
                    u1655 0690                      u1735 053E                      u2447 0473  
                    u2367 05BF                      u2457 04B2                      u2377 05F3  
                    u2467 04F1                      u2387 0608                      u1845 0144  
                    u2477 05AF                      u1765 0581                      u2397 061D  
                    u2487 0749                      u2497 0F23                      _PEIE 005E  
                    u1995 0223                      _RCIF 0065                      _TMR0 0001  
                    _TRMT 04C1              __CFG_WRT$OFF 0000                      _radH 0034  
                    _radL 0035                      _main 05B7                      _left 0382  
                    _down 0381                      _path 00A0                      btemp 007E  
                    ltemp 007E                      start 0012                      ttemp 007E  
                    wtemp 007E         ___bmul@multiplier 005A           __end_of_Drive1m 0751  
                   ??_isr 0071                PathTo@loop 0066                     ?_main 0071  
           __CFG_WDTE$OFF 0000                     i1l257 0FCD                     _RCREG 001A  
                   _RCSTA 0018                     _SPBRG 0099                     _PORTA 0005  
                   _PORTB 0006                     _PORTC 0007                     _PORTD 0008  
                   _PORTE 0009                     _TRISA 0085                     _TRISB 0086  
                   _TRISC 0087                     _TRISD 0088                     _TRISE 0089  
                   _SSPIF 0063                     _TXREG 0019                     _TXSTA 0098  
_intersection_orientation 002F                     _Drive 0FD8                     _angle 0078  
     __end_of_DriveDirect 06DE                     _right 0384                     _x_int 0038  
                   _y_int 003C            __pbitbssCOMMON 0380            __CFG_BOREN$OFF 0000  
                   pclath 000A                     ltemp0 007E                     ltemp1 0082  
                   ltemp2 0086                     ltemp3 0080                _LeftSpeedH 0028  
              _LeftSpeedL 0029                     ttemp0 007E                     ttemp1 0081  
                   ttemp2 0084                     ttemp3 0087                     ttemp4 007F  
                   status 0003                     wtemp0 007E                     wtemp1 0080  
                   wtemp2 0082                     wtemp3 0084                     wtemp4 0086  
                   wtemp5 0088                     wtemp6 007F           __initialization 0015  
            __end_of_main 0651  __size_of_lcdWriteControl 0014                    ??_main 0069  
    __end_of_lcdSetCursor 0EBD          ??_lcdWriteString 005A                    ?_Drive 0058  
                  _ADCON0 001F                    _ADCON1 009F                    _ADRESH 001E  
                  _ADRESL 009E                    i1l2477 0FC7                    _TMR0IE 005D  
                  _TMR0IF 005A                    _SSPCON 0014                    _SSPBUF 0013  
               ??_Drive1m 0061            __CFG_PWRTE$OFF 0000                    _PathTo 005F  
                  _adcRAW 0076                    _Turn90 0516                    ___bmul 0F02  
    __end_of_lcdWriteData 0F28           lcdWriteString@s 005B                    _speedH 0036  
                  _speedL 0037                    _x_path 0039                    _y_path 003D  
             _DriveDirect 0651          __end_of_ser_init 0EE2          __end_of_setupADC 0F66  
        __end_of_setupLCD 07F8          __end_of_setupSPI 0F96                    saved_w 007E  
         Turn90@direction 0064                _TravelPath 03EA   __end_of__initialization 005B  
     ___bmul@multiplicand 0057             __end_of_Drive 1000            __pcstackCOMMON 0071  
            __pidataBANK0 0F66              __pidataBANK1 0F3C              __pidataBANK3 0751  
          PathTo@x_target 0064            PathTo@y_target 005C           DriveDirect@data 005D  
                 ??_Drive 005B         ??_lcdWriteControl 0057                __pbssBANK0 0020  
              __pbssBANK1 00A0                __pbssBANK3 01D0         _pathCountShortest 0055  
     lcdSetCursor@address 005A                   ?_PathTo 005C                __pmaintext 05B7  
                 ?_Turn90 0071                   ?___bmul 0057                __pintentry 0004  
   __size_of_lcdSetCursor 0009     __end_of_getSensorData 07CF        __size_of_ser_getch 000A  
      __size_of_ser_putch 000C               ?_TravelPath 0071               _RightSpeedH 002C  
             _RightSpeedL 002D                   _IR_Wall 0380                   _SSPSTAT 0094  
              __stringtab 0800                   _Drive1m 06DE   DriveDirect@VelocityLeft 005A  
   __size_of_lcdWriteData 0013              _lcdSetCursor 0EB4                 ?_ser_init 0071  
         __size_of_PathTo 038B                 ?_setupADC 0071                 ?_setupLCD 0071  
               ?_setupSPI 0071           __size_of_Turn90 00A1           __size_of___bmul 0013  
                 __ptext1 0EE2                   __ptext2 0F7D                   __ptext3 07CF  
                 __ptext4 0F50                   __ptext5 0ED3                   __ptext6 03EA  
                 __ptext7 0516                   __ptext8 0FD8                   __ptext9 06DE  
            __size_of_isr 0022                   _lowByte 0030          _orientation_path 0031  
                 clrloop0 07F9              _lcdWriteData 0F15      end_of_initialization 005B  
       __end_of_ser_getch 0EC7         __end_of_ser_putch 0ED3                _reset_flag 0383  
              ??_ser_init 0057                ??_setupADC 0057                ??_setupLCD 005A  
              ??_setupSPI 0057       __size_of_TravelPath 012C                _time_count 0026  
            ?_DriveDirect 0058                 Drive@radH 0059                 Drive@radL 005A  
             TravelPath@n 0068             ?_spi_transfer 0071           ser_getch@rxbyte 0058  
          __end_of_PathTo 03EA                 PathTo@sum 0065            __end_of_Turn90 05B7  
          __end_of___bmul 0F15       DriveDirect@data_387 005F           _lcdWriteControl 0F28  
     start_initialization 0015               __end_of_isr 0FD8            ??_spi_transfer 0057  
 __size_of_lcdWriteString 0020                  ??_PathTo 005D                  ??_Turn90 0061  
                ??___bmul 0058                init_fetch0 0EF1               __pdataBANK0 0040  
             __pdataBANK1 00C0               __pdataBANK3 0190               __pbssCOMMON 0076  
               ___latbits 0002             __pcstackBANK0 0057              ??_TravelPath 0065  
                ?_Drive1m 0071   __end_of_lcdWriteControl 0F3C         __size_of_ser_init 000F  
       __size_of_setupADC 0016         __size_of_setupLCD 0029        __end_of_TravelPath 0516  
       __size_of_setupSPI 0019                 __pstrings 0800              _pathShortest 01D0  
               _gridWalls 0190            __size_of_Drive 0028      __size_of_DriveDirect 008D  
         main@controlByte 006C                 _pathCount 0032   lcdWriteControl@databyte 0059  
       interrupt_function 0004    __size_of_getSensorData 003E                ser_putch@c 0057  
   getSensorData@packetID 005D                 clear_ram0 07F8                 _ser_getch 0EBD  
               _ser_putch 0EC7             _VelocityRight 0022      __end_of_spi_transfer 0EF1  
             __stringbase 0805          spi_transfer@data 0059          spi_transfer@temp 0058  
    lcdWriteData@databyte 0059            _lcdWriteString 0F96  DriveDirect@VelocityRight 0058  
        __size_of_Drive1m 0073                ?_ser_getch 0071          ?_lcdWriteControl 0071  
         _mazeGridDefault 00C0                ?_ser_putch 0071             _getSensorData 0791  
      __end_of__stringtab 0806                  __ptext10 0791                  __ptext11 0EBD  
                __ptext20 0FB6                  __ptext12 0651                  __ptext13 0EC7  
                __ptext14 005F                  __ptext15 0F96                  __ptext16 0F15  
                __ptext17 0EB4                  __ptext18 0F28                  __ptext19 0F02  
                _highByte 003F    __end_of_lcdWriteString 0FB6                  _distance 0024  
                _mazeGrid 0040             __size_of_main 009A                  _ser_init 0ED3  
                _setupADC 0F50                  _setupLCD 07CF                  _setupSPI 0F7D  
              _PB7Counter 002A                  _x_target 003A                _PB8Counter 002B  
                _y_target 003E              _VelocityLeft 0020            ?_getSensorData 0059  
                init_ram0 0EF5           ?_lcdWriteString 0071                  intlevel1 0000  
           ?_lcdSetCursor 0071                 stringcode 0800               ??_ser_getch 0057  
             ??_ser_putch 0057       getSensorData@sensor 005E     __size_of_spi_transfer 000F  
             _orientation 0054                _OPTION_REG 0081                  stringdir 0800  
                stringtab 0800        getSensorData@bytes 0059             ?_lcdWriteData 0071  
            _spi_transfer 0EE2            ??_lcdSetCursor 005A  
