

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Thu Sep 29 11:40:33 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	intentry,global,class=CODE,delta=2
    35                           	dabs	1,0x7E,2
    36  0000                     	;# 
    37  0001                     	;# 
    38  0002                     	;# 
    39  0003                     	;# 
    40  0004                     	;# 
    41  0005                     	;# 
    42  0006                     	;# 
    43  0007                     	;# 
    44  0008                     	;# 
    45  0009                     	;# 
    46  000A                     	;# 
    47  000B                     	;# 
    48  000C                     	;# 
    49  000D                     	;# 
    50  000E                     	;# 
    51  000E                     	;# 
    52  000F                     	;# 
    53  0010                     	;# 
    54  0011                     	;# 
    55  0012                     	;# 
    56  0013                     	;# 
    57  0014                     	;# 
    58  0015                     	;# 
    59  0015                     	;# 
    60  0016                     	;# 
    61  0017                     	;# 
    62  0018                     	;# 
    63  0019                     	;# 
    64  001A                     	;# 
    65  001B                     	;# 
    66  001B                     	;# 
    67  001C                     	;# 
    68  001D                     	;# 
    69  001E                     	;# 
    70  001F                     	;# 
    71  0081                     	;# 
    72  0085                     	;# 
    73  0086                     	;# 
    74  0087                     	;# 
    75  0088                     	;# 
    76  0089                     	;# 
    77  008C                     	;# 
    78  008D                     	;# 
    79  008E                     	;# 
    80  0091                     	;# 
    81  0092                     	;# 
    82  0093                     	;# 
    83  0094                     	;# 
    84  0098                     	;# 
    85  0099                     	;# 
    86  009C                     	;# 
    87  009D                     	;# 
    88  009E                     	;# 
    89  009F                     	;# 
    90  010C                     	;# 
    91  010D                     	;# 
    92  010E                     	;# 
    93  010F                     	;# 
    94  018C                     	;# 
    95  018D                     	;# 
    96  0000                     	;# 
    97  0001                     	;# 
    98  0002                     	;# 
    99  0003                     	;# 
   100  0004                     	;# 
   101  0005                     	;# 
   102  0006                     	;# 
   103  0007                     	;# 
   104  0008                     	;# 
   105  0009                     	;# 
   106  000A                     	;# 
   107  000B                     	;# 
   108  000C                     	;# 
   109  000D                     	;# 
   110  000E                     	;# 
   111  000E                     	;# 
   112  000F                     	;# 
   113  0010                     	;# 
   114  0011                     	;# 
   115  0012                     	;# 
   116  0013                     	;# 
   117  0014                     	;# 
   118  0015                     	;# 
   119  0015                     	;# 
   120  0016                     	;# 
   121  0017                     	;# 
   122  0018                     	;# 
   123  0019                     	;# 
   124  001A                     	;# 
   125  001B                     	;# 
   126  001B                     	;# 
   127  001C                     	;# 
   128  001D                     	;# 
   129  001E                     	;# 
   130  001F                     	;# 
   131  0081                     	;# 
   132  0085                     	;# 
   133  0086                     	;# 
   134  0087                     	;# 
   135  0088                     	;# 
   136  0089                     	;# 
   137  008C                     	;# 
   138  008D                     	;# 
   139  008E                     	;# 
   140  0091                     	;# 
   141  0092                     	;# 
   142  0093                     	;# 
   143  0094                     	;# 
   144  0098                     	;# 
   145  0099                     	;# 
   146  009C                     	;# 
   147  009D                     	;# 
   148  009E                     	;# 
   149  009F                     	;# 
   150  010C                     	;# 
   151  010D                     	;# 
   152  010E                     	;# 
   153  010F                     	;# 
   154  018C                     	;# 
   155  018D                     	;# 
   156  0000                     	;# 
   157  0001                     	;# 
   158  0002                     	;# 
   159  0003                     	;# 
   160  0004                     	;# 
   161  0005                     	;# 
   162  0006                     	;# 
   163  0007                     	;# 
   164  0008                     	;# 
   165  0009                     	;# 
   166  000A                     	;# 
   167  000B                     	;# 
   168  000C                     	;# 
   169  000D                     	;# 
   170  000E                     	;# 
   171  000E                     	;# 
   172  000F                     	;# 
   173  0010                     	;# 
   174  0011                     	;# 
   175  0012                     	;# 
   176  0013                     	;# 
   177  0014                     	;# 
   178  0015                     	;# 
   179  0015                     	;# 
   180  0016                     	;# 
   181  0017                     	;# 
   182  0018                     	;# 
   183  0019                     	;# 
   184  001A                     	;# 
   185  001B                     	;# 
   186  001B                     	;# 
   187  001C                     	;# 
   188  001D                     	;# 
   189  001E                     	;# 
   190  001F                     	;# 
   191  0081                     	;# 
   192  0085                     	;# 
   193  0086                     	;# 
   194  0087                     	;# 
   195  0088                     	;# 
   196  0089                     	;# 
   197  008C                     	;# 
   198  008D                     	;# 
   199  008E                     	;# 
   200  0091                     	;# 
   201  0092                     	;# 
   202  0093                     	;# 
   203  0094                     	;# 
   204  0098                     	;# 
   205  0099                     	;# 
   206  009C                     	;# 
   207  009D                     	;# 
   208  009E                     	;# 
   209  009F                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  010F                     	;# 
   214  018C                     	;# 
   215  018D                     	;# 
   216  0000                     	;# 
   217  0001                     	;# 
   218  0002                     	;# 
   219  0003                     	;# 
   220  0004                     	;# 
   221  0005                     	;# 
   222  0006                     	;# 
   223  0007                     	;# 
   224  0008                     	;# 
   225  0009                     	;# 
   226  000A                     	;# 
   227  000B                     	;# 
   228  000C                     	;# 
   229  000D                     	;# 
   230  000E                     	;# 
   231  000E                     	;# 
   232  000F                     	;# 
   233  0010                     	;# 
   234  0011                     	;# 
   235  0012                     	;# 
   236  0013                     	;# 
   237  0014                     	;# 
   238  0015                     	;# 
   239  0015                     	;# 
   240  0016                     	;# 
   241  0017                     	;# 
   242  0018                     	;# 
   243  0019                     	;# 
   244  001A                     	;# 
   245  001B                     	;# 
   246  001B                     	;# 
   247  001C                     	;# 
   248  001D                     	;# 
   249  001E                     	;# 
   250  001F                     	;# 
   251  0081                     	;# 
   252  0085                     	;# 
   253  0086                     	;# 
   254  0087                     	;# 
   255  0088                     	;# 
   256  0089                     	;# 
   257  008C                     	;# 
   258  008D                     	;# 
   259  008E                     	;# 
   260  0091                     	;# 
   261  0092                     	;# 
   262  0093                     	;# 
   263  0094                     	;# 
   264  0098                     	;# 
   265  0099                     	;# 
   266  009C                     	;# 
   267  009D                     	;# 
   268  009E                     	;# 
   269  009F                     	;# 
   270  010C                     	;# 
   271  010D                     	;# 
   272  010E                     	;# 
   273  010F                     	;# 
   274  018C                     	;# 
   275  018D                     	;# 
   276  0000                     	;# 
   277  0001                     	;# 
   278  0002                     	;# 
   279  0003                     	;# 
   280  0004                     	;# 
   281  0005                     	;# 
   282  0006                     	;# 
   283  0007                     	;# 
   284  0008                     	;# 
   285  0009                     	;# 
   286  000A                     	;# 
   287  000B                     	;# 
   288  000C                     	;# 
   289  000D                     	;# 
   290  000E                     	;# 
   291  000E                     	;# 
   292  000F                     	;# 
   293  0010                     	;# 
   294  0011                     	;# 
   295  0012                     	;# 
   296  0013                     	;# 
   297  0014                     	;# 
   298  0015                     	;# 
   299  0015                     	;# 
   300  0016                     	;# 
   301  0017                     	;# 
   302  0018                     	;# 
   303  0019                     	;# 
   304  001A                     	;# 
   305  001B                     	;# 
   306  001B                     	;# 
   307  001C                     	;# 
   308  001D                     	;# 
   309  001E                     	;# 
   310  001F                     	;# 
   311  0081                     	;# 
   312  0085                     	;# 
   313  0086                     	;# 
   314  0087                     	;# 
   315  0088                     	;# 
   316  0089                     	;# 
   317  008C                     	;# 
   318  008D                     	;# 
   319  008E                     	;# 
   320  0091                     	;# 
   321  0092                     	;# 
   322  0093                     	;# 
   323  0094                     	;# 
   324  0098                     	;# 
   325  0099                     	;# 
   326  009C                     	;# 
   327  009D                     	;# 
   328  009E                     	;# 
   329  009F                     	;# 
   330  010C                     	;# 
   331  010D                     	;# 
   332  010E                     	;# 
   333  010F                     	;# 
   334  018C                     	;# 
   335  018D                     	;# 
   336  0000                     	;# 
   337  0001                     	;# 
   338  0002                     	;# 
   339  0003                     	;# 
   340  0004                     	;# 
   341  0005                     	;# 
   342  0006                     	;# 
   343  0007                     	;# 
   344  0008                     	;# 
   345  0009                     	;# 
   346  000A                     	;# 
   347  000B                     	;# 
   348  000C                     	;# 
   349  000D                     	;# 
   350  000E                     	;# 
   351  000E                     	;# 
   352  000F                     	;# 
   353  0010                     	;# 
   354  0011                     	;# 
   355  0012                     	;# 
   356  0013                     	;# 
   357  0014                     	;# 
   358  0015                     	;# 
   359  0015                     	;# 
   360  0016                     	;# 
   361  0017                     	;# 
   362  0018                     	;# 
   363  0019                     	;# 
   364  001A                     	;# 
   365  001B                     	;# 
   366  001B                     	;# 
   367  001C                     	;# 
   368  001D                     	;# 
   369  001E                     	;# 
   370  001F                     	;# 
   371  0081                     	;# 
   372  0085                     	;# 
   373  0086                     	;# 
   374  0087                     	;# 
   375  0088                     	;# 
   376  0089                     	;# 
   377  008C                     	;# 
   378  008D                     	;# 
   379  008E                     	;# 
   380  0091                     	;# 
   381  0092                     	;# 
   382  0093                     	;# 
   383  0094                     	;# 
   384  0098                     	;# 
   385  0099                     	;# 
   386  009C                     	;# 
   387  009D                     	;# 
   388  009E                     	;# 
   389  009F                     	;# 
   390  010C                     	;# 
   391  010D                     	;# 
   392  010E                     	;# 
   393  010F                     	;# 
   394  018C                     	;# 
   395  018D                     	;# 
   396                           
   397                           	psect	idataBANK0
   398  0585                     __pidataBANK0:	
   399                           
   400                           ;initializer for _mazeGrid
   401  0585  340C               	retlw	12
   402  0586  3407               	retlw	7
   403  0587  340E               	retlw	14
   404  0588  340D               	retlw	13
   405  0589  3406               	retlw	6
   406  058A  3409               	retlw	9
   407  058B  3405               	retlw	5
   408  058C  3400               	retlw	0
   409  058D  3405               	retlw	5
   410  058E  3402               	retlw	2
   411  058F  340C               	retlw	12
   412  0590  3406               	retlw	6
   413  0591  340A               	retlw	10
   414  0592  340E               	retlw	14
   415  0593  340A               	retlw	10
   416  0594  340B               	retlw	11
   417  0595  3409               	retlw	9
   418  0596  3401               	retlw	1
   419  0597  3401               	retlw	1
   420  0598  3403               	retlw	3
   421                           
   422                           ;initializer for _orientation
   423  0599  3403               	retlw	3
   424                           
   425                           ;initializer for _pathCountShortest
   426  059A  3414               	retlw	20
   427                           
   428                           ;initializer for _x
   429  059B  3401               	retlw	1
   430                           
   431                           	psect	idataBANK1
   432  05C9                     __pidataBANK1:	
   433                           
   434                           ;initializer for _mazeGridDefault
   435  05C9  340C               	retlw	12
   436  05CA  3407               	retlw	7
   437  05CB  340E               	retlw	14
   438  05CC  340D               	retlw	13
   439  05CD  3406               	retlw	6
   440  05CE  3409               	retlw	9
   441  05CF  3405               	retlw	5
   442  05D0  3400               	retlw	0
   443  05D1  3405               	retlw	5
   444  05D2  3402               	retlw	2
   445  05D3  340C               	retlw	12
   446  05D4  3406               	retlw	6
   447  05D5  340A               	retlw	10
   448  05D6  340E               	retlw	14
   449  05D7  340A               	retlw	10
   450  05D8  340B               	retlw	11
   451  05D9  3409               	retlw	9
   452  05DA  3401               	retlw	1
   453  05DB  3401               	retlw	1
   454  05DC  3403               	retlw	3
   455                           
   456                           	psect	idataBANK2
   457  04D3                     __pidataBANK2:	
   458                           
   459                           ;initializer for _squareWalls
   460  04D3  3400               	retlw	0
   461  04D4  3401               	retlw	1
   462  04D5  3402               	retlw	2
   463  04D6  3403               	retlw	3
   464  04D7  3404               	retlw	4
   465  04D8  3405               	retlw	5
   466  04D9  3406               	retlw	6
   467  04DA  3407               	retlw	7
   468  04DB  3408               	retlw	8
   469  04DC  3409               	retlw	9
   470  04DD  340A               	retlw	10
   471  04DE  340B               	retlw	11
   472  04DF  340C               	retlw	12
   473  04E0  340D               	retlw	13
   474  04E1  340E               	retlw	14
   475  04E2  340F               	retlw	15
   476  04E3  3400               	retlw	0
   477  04E4  3400               	retlw	0
   478  04E5  3400               	retlw	0
   479  04E6  3400               	retlw	0
   480  04E7  3400               	retlw	0
   481  04E8  3400               	retlw	0
   482  04E9  3400               	retlw	0
   483  04EA  3400               	retlw	0
   484  04EB  3401               	retlw	1
   485  04EC  3401               	retlw	1
   486  04ED  3401               	retlw	1
   487  04EE  3401               	retlw	1
   488  04EF  3401               	retlw	1
   489  04F0  3401               	retlw	1
   490  04F1  3401               	retlw	1
   491  04F2  3401               	retlw	1
   492  04F3  3400               	retlw	0
   493  04F4  3400               	retlw	0
   494  04F5  3400               	retlw	0
   495  04F6  3400               	retlw	0
   496  04F7  3401               	retlw	1
   497  04F8  3401               	retlw	1
   498  04F9  3401               	retlw	1
   499  04FA  3401               	retlw	1
   500  04FB  3400               	retlw	0
   501  04FC  3400               	retlw	0
   502  04FD  3400               	retlw	0
   503  04FE  3400               	retlw	0
   504  04FF  3401               	retlw	1
   505  0500  3401               	retlw	1
   506  0501  3401               	retlw	1
   507  0502  3401               	retlw	1
   508  0503  3400               	retlw	0
   509  0504  3400               	retlw	0
   510  0505  3401               	retlw	1
   511  0506  3401               	retlw	1
   512  0507  3400               	retlw	0
   513  0508  3400               	retlw	0
   514  0509  3401               	retlw	1
   515  050A  3401               	retlw	1
   516  050B  3400               	retlw	0
   517  050C  3400               	retlw	0
   518  050D  3401               	retlw	1
   519  050E  3401               	retlw	1
   520  050F  3400               	retlw	0
   521  0510  3400               	retlw	0
   522  0511  3401               	retlw	1
   523  0512  3401               	retlw	1
   524  0513  3400               	retlw	0
   525  0514  3401               	retlw	1
   526  0515  3400               	retlw	0
   527  0516  3401               	retlw	1
   528  0517  3400               	retlw	0
   529  0518  3401               	retlw	1
   530  0519  3400               	retlw	0
   531  051A  3401               	retlw	1
   532  051B  3400               	retlw	0
   533  051C  3401               	retlw	1
   534  051D  3400               	retlw	0
   535  051E  3401               	retlw	1
   536  051F  3400               	retlw	0
   537  0520  3401               	retlw	1
   538  0521  3400               	retlw	0
   539  0522  3401               	retlw	1
   540  001F                     _ADCON0	set	31
   541  0005                     _PORTA	set	5
   542  0007                     _PORTC	set	7
   543  0008                     _PORTD	set	8
   544  0009                     _PORTE	set	9
   545  001A                     _RCREG	set	26
   546  0018                     _RCSTA	set	24
   547  0013                     _SSPBUF	set	19
   548  0014                     _SSPCON	set	20
   549  0001                     _TMR0	set	1
   550  0019                     _TXREG	set	25
   551  001E                     _ADRESH	set	30
   552  005F                     _GIE	set	95
   553  00FA                     _GO	set	250
   554  005E                     _PEIE	set	94
   555  0030                     _RB0	set	48
   556  0065                     _RCIF	set	101
   557  0048                     _RE0	set	72
   558  0049                     _RE1	set	73
   559  004A                     _RE2	set	74
   560  0063                     _SSPIF	set	99
   561  005D                     _TMR0IE	set	93
   562  005A                     _TMR0IF	set	90
   563  009F                     _ADCON1	set	159
   564  009E                     _ADRESL	set	158
   565  0081                     _OPTION_REG	set	129
   566  0099                     _SPBRG	set	153
   567  0094                     _SSPSTAT	set	148
   568  0085                     _TRISA	set	133
   569  0086                     _TRISB	set	134
   570  0087                     _TRISC	set	135
   571  0088                     _TRISD	set	136
   572  0089                     _TRISE	set	137
   573  0098                     _TXSTA	set	152
   574  04C1                     _TRMT	set	1217
   575                           
   576                           	psect	strings
   577  059C                     __pstrings:	
   578  059C                     stringtab:	
   579  059C                     __stringtab:	
   580  059C                     stringcode:	
   581                           ;	String table - string pointers are 1 byte each
   582                           
   583  059C                     stringdir:	
   584  059C  3005               	movlw	high stringdir
   585  059D  008A               	movwf	10
   586  059E  0804               	movf	4,w
   587  059F  0A84               	incf	4,f
   588  05A0  0782               	addwf	2,f
   589  05A1                     __stringbase:	
   590  05A1  3400               	retlw	0
   591  05A2                     __end_of__stringtab:	
   592  05A2                     STR_1:	
   593  05A2  3457               	retlw	87	;'W'
   594  05A3  346F               	retlw	111	;'o'
   595  05A4  3472               	retlw	114	;'r'
   596  05A5  346B               	retlw	107	;'k'
   597  05A6  3469               	retlw	105	;'i'
   598  05A7  346E               	retlw	110	;'n'
   599  05A8  3467               	retlw	103	;'g'
   600  05A9  342E               	retlw	46	;'.'
   601  05AA  342E               	retlw	46	;'.'
   602  05AB  342E               	retlw	46	;'.'
   603  05AC  3400               	retlw	0
   604  05AD                     STR_2:	
   605  05AD  3458               	retlw	88	;'X'
   606  05AE  343A               	retlw	58	;':'
   607  05AF  3400               	retlw	0
   608  05B0                     STR_3:	
   609  05B0  3459               	retlw	89	;'Y'
   610  05B1  343A               	retlw	58	;':'
   611  05B2  3400               	retlw	0
   612                           
   613                           ; #config settings
   614  0000                     
   615                           	psect	cinit
   616  0015                     start_initialization:	
   617  0015                     __initialization:	
   618                           
   619                           ; Initialize objects allocated to BANK2
   620  0015  1783               	bsf	3,7	;select IRP bank2
   621  0016  3060               	movlw	low (__pdataBANK2+80)
   622  0017  00FD               	movwf	btemp+-1
   623  0018  3004               	movlw	high __pidataBANK2
   624  0019  00FE               	movwf	btemp
   625  001A  30D3               	movlw	low __pidataBANK2
   626  001B  00FF               	movwf	btemp+1
   627  001C  3010               	movlw	low __pdataBANK2
   628  001D  0084               	movwf	4
   629  001E  120A  118A  262F  120A  118A  	fcall	init_ram0
   630                           
   631                           ; Initialize objects allocated to BANK1
   632  0023  1383               	bcf	3,7	;select IRP bank0
   633  0024  30D4               	movlw	low (__pdataBANK1+20)
   634  0025  00FD               	movwf	btemp+-1
   635  0026  3005               	movlw	high __pidataBANK1
   636  0027  00FE               	movwf	btemp
   637  0028  30C9               	movlw	low __pidataBANK1
   638  0029  00FF               	movwf	btemp+1
   639  002A  30C0               	movlw	low __pdataBANK1
   640  002B  0084               	movwf	4
   641  002C  120A  118A  262F  120A  118A  	fcall	init_ram0
   642                           
   643                           ; Initialize objects allocated to BANK0
   644  0031  3059               	movlw	low (__pdataBANK0+23)
   645  0032  00FD               	movwf	btemp+-1
   646  0033  3005               	movlw	high __pidataBANK0
   647  0034  00FE               	movwf	btemp
   648  0035  3085               	movlw	low __pidataBANK0
   649  0036  00FF               	movwf	btemp+1
   650  0037  3042               	movlw	low __pdataBANK0
   651  0038  0084               	movwf	4
   652  0039  120A  118A  262F  120A  118A  	fcall	init_ram0
   653                           
   654                           ; Clear objects allocated to BANK3
   655  003E  1783               	bsf	3,7	;select IRP bank2
   656  003F  3090               	movlw	low __pbssBANK3
   657  0040  0084               	movwf	4
   658  0041  30B0               	movlw	low (__pbssBANK3+32)
   659  0042  120A  118A  2654  120A  118A  	fcall	clear_ram0
   660                           
   661                           ; Clear objects allocated to BANK1
   662  0047  1383               	bcf	3,7	;select IRP bank0
   663  0048  30A0               	movlw	low __pbssBANK1
   664  0049  0084               	movwf	4
   665  004A  30C0               	movlw	low (__pbssBANK1+32)
   666  004B  120A  118A  2654  120A  118A  	fcall	clear_ram0
   667                           
   668                           ; Clear objects allocated to BANK0
   669  0050  3020               	movlw	low __pbssBANK0
   670  0051  0084               	movwf	4
   671  0052  3042               	movlw	low (__pbssBANK0+34)
   672  0053  120A  118A  2654   	fcall	clear_ram0
   673                           
   674                           ; Clear objects allocated to COMMON
   675  0056  01F7               	clrf	__pbssCOMMON& (0+127)
   676  0057  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   677  0058  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   678                           
   679                           ; Clear objects allocated to BITCOMMON
   680  0059  01F6               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   681  005A                     end_of_initialization:	
   682                           ;End of C runtime variable initialization code
   683                           
   684  005A                     __end_of__initialization:	
   685  005A  0183               	clrf	3
   686  005B  120A  118A  2B77   	ljmp	_main	;jump to C main() function
   687                           
   688                           	psect	bitbssCOMMON
   689  03B0                     __pbitbssCOMMON:	
   690  03B0                     _down:	
   691  03B0                     	ds	1
   692  03B1                     _left:	
   693  03B1                     	ds	1
   694  03B2                     _reset_flag:	
   695  03B2                     	ds	1
   696  03B3                     _right:	
   697  03B3                     	ds	1
   698  03B4                     _up:	
   699  03B4                     	ds	1
   700                           
   701                           	psect	bssCOMMON
   702  0077                     __pbssCOMMON:	
   703  0077                     _r:	
   704  0077                     	ds	1
   705  0078                     _x_int:	
   706  0078                     	ds	1
   707  0079                     _y_int:	
   708  0079                     	ds	1
   709                           
   710                           	psect	bssBANK0
   711  0020                     __pbssBANK0:	
   712  0020                     _VelocityLeft:	
   713  0020                     	ds	2
   714  0022                     _VelocityRight:	
   715  0022                     	ds	2
   716  0024                     _adcRAW:	
   717  0024                     	ds	2
   718  0026                     _angle:	
   719  0026                     	ds	2
   720  0028                     _distance:	
   721  0028                     	ds	2
   722  002A                     _time_count:	
   723  002A                     	ds	2
   724  002C                     _LeftSpeedH:	
   725  002C                     	ds	1
   726  002D                     _LeftSpeedL:	
   727  002D                     	ds	1
   728  002E                     _PB8Counter:	
   729  002E                     	ds	1
   730  002F                     _RightSpeedH:	
   731  002F                     	ds	1
   732  0030                     _RightSpeedL:	
   733  0030                     	ds	1
   734  0031                     _c:	
   735  0031                     	ds	1
   736  0032                     _intersection_Orientation:	
   737  0032                     	ds	1
   738  0033                     _lowByte:	
   739  0033                     	ds	1
   740  0034                     _orientation_path:	
   741  0034                     	ds	1
   742  0035                     _pathCount:	
   743  0035                     	ds	1
   744  0036                     _radH:	
   745  0036                     	ds	1
   746  0037                     _radL:	
   747  0037                     	ds	1
   748  0038                     _speedH:	
   749  0038                     	ds	1
   750  0039                     _speedL:	
   751  0039                     	ds	1
   752  003A                     _x_origin:	
   753  003A                     	ds	1
   754  003B                     _x_path:	
   755  003B                     	ds	1
   756  003C                     _x_target:	
   757  003C                     	ds	1
   758  003D                     _y:	
   759  003D                     	ds	1
   760  003E                     _y_origin:	
   761  003E                     	ds	1
   762  003F                     _y_path:	
   763  003F                     	ds	1
   764  0040                     _y_target:	
   765  0040                     	ds	1
   766  0041                     _highByte:	
   767  0041                     	ds	1
   768                           
   769                           	psect	dataBANK0
   770  0042                     __pdataBANK0:	
   771  0042                     _mazeGrid:	
   772  0042                     	ds	20
   773  0056                     _orientation:	
   774  0056                     	ds	1
   775  0057                     _pathCountShortest:	
   776  0057                     	ds	1
   777  0058                     _x:	
   778  0058                     	ds	1
   779                           
   780                           	psect	bssBANK1
   781  00A0                     __pbssBANK1:	
   782  00A0                     _path:	
   783  00A0                     	ds	32
   784                           
   785                           	psect	dataBANK1
   786  00C0                     __pdataBANK1:	
   787  00C0                     _mazeGridDefault:	
   788  00C0                     	ds	20
   789                           
   790                           	psect	bssBANK3
   791  0190                     __pbssBANK3:	
   792  0190                     _shortest_path:	
   793  0190                     	ds	32
   794                           
   795                           	psect	dataBANK2
   796  0110                     __pdataBANK2:	
   797  0110                     _squareWalls:	
   798  0110                     	ds	80
   799                           
   800                           	psect	inittext
   801  062B                     init_fetch0:	
   802                           ;	Called with low address in FSR and high address in W
   803                           
   804  062B  087E               	movf	126,w
   805  062C  008A               	movwf	10
   806  062D  087F               	movf	127,w
   807  062E  0082               	movwf	2
   808  062F                     init_ram0:	
   809                           ;Called with:
   810                           ;	high address of idata address in btemp 
   811                           ;	low address of idata address in btemp+1 
   812                           ;	low address of data in FSR
   813                           ;	high address + 1 of data in btemp-1
   814                           
   815  062F  262B  120A  118A   	fcall	init_fetch0
   816  0632  0080               	movwf	0
   817  0633  0A84               	incf	4,f
   818  0634  0804               	movf	4,w
   819  0635  067D               	xorwf	125,w
   820  0636  1903               	btfsc	3,2
   821  0637  3400               	retlw	0
   822  0638  0AFF               	incf	127,f
   823  0639  1903               	btfsc	3,2
   824  063A  0AFE               	incf	126,f
   825  063B  2E2F               	goto	init_ram0
   826                           
   827                           	psect	clrtext
   828  0654                     clear_ram0:	
   829                           ;	Called with FSR containing the base address, and
   830                           ;	W with the last address+1
   831                           
   832  0654  0064               	clrwdt	;clear the watchdog before getting into this loop
   833  0655                     clrloop0:	
   834  0655  0180               	clrf	0	;clear RAM location pointed to by FSR
   835  0656  0A84               	incf	4,f	;increment pointer
   836  0657  0604               	xorwf	4,w	;XOR with final address
   837  0658  1903               	btfsc	3,2	;have we reached the end yet?
   838  0659  3400               	retlw	0	;all done for this memory range, return
   839  065A  0604               	xorwf	4,w	;XOR again to restore value
   840  065B  2E55               	goto	clrloop0	;do the next byte
   841                           
   842                           	psect	cstackCOMMON
   843  0070                     __pcstackCOMMON:	
   844  0070                     ?_lcdSetCursor:	
   845  0070                     ?_lcdWriteString:	
   846                           ; 1 bytes @ 0x0
   847                           
   848  0070                     ?_ser_init:	
   849                           ; 1 bytes @ 0x0
   850                           
   851  0070                     ?_setupSPI:	
   852                           ; 1 bytes @ 0x0
   853                           
   854  0070                     ?_setupLCD:	
   855                           ; 1 bytes @ 0x0
   856                           
   857  0070                     ?_setupADC:	
   858                           ; 1 bytes @ 0x0
   859                           
   860  0070                     ?_lcdWriteControl:	
   861                           ; 1 bytes @ 0x0
   862                           
   863  0070                     ?_lcdWriteData:	
   864                           ; 1 bytes @ 0x0
   865                           
   866  0070                     ?_isr:	
   867                           ; 1 bytes @ 0x0
   868                           
   869  0070                     ??_isr:	
   870                           ; 1 bytes @ 0x0
   871                           
   872  0070                     ?_main:	
   873                           ; 1 bytes @ 0x0
   874                           
   875                           
   876                           ; 1 bytes @ 0x0
   877  0070                     	ds	4
   878  0074                     ??_ser_init:	
   879  0074                     ??_setupSPI:	
   880                           ; 1 bytes @ 0x4
   881                           
   882  0074                     ??_setupADC:	
   883                           ; 1 bytes @ 0x4
   884                           
   885  0074                     ??_lcdWriteControl:	
   886                           ; 1 bytes @ 0x4
   887                           
   888  0074                     ??_lcdWriteData:	
   889                           ; 1 bytes @ 0x4
   890                           
   891  0074                     ?___bmul:	
   892                           ; 1 bytes @ 0x4
   893                           
   894  0074                     ___bmul@multiplicand:	
   895                           ; 1 bytes @ 0x4
   896                           
   897                           
   898                           ; 1 bytes @ 0x4
   899  0074                     	ds	1
   900  0075                     ??___bmul:	
   901                           
   902                           ; 1 bytes @ 0x5
   903  0075                     	ds	1
   904  0076                     ??_lcdSetCursor:	
   905  0076                     ??_setupLCD:	
   906                           ; 1 bytes @ 0x6
   907                           
   908  0076                     ??_lcdWriteToDigitBCD:	
   909                           ; 1 bytes @ 0x6
   910                           
   911                           
   912                           	psect	cstackBANK0
   913  0059                     __pcstackBANK0:	
   914                           ; 1 bytes @ 0x6
   915                           
   916  0059                     lcdWriteControl@databyte:	
   917  0059                     lcdWriteData@databyte:	
   918                           ; 1 bytes @ 0x0
   919                           
   920  0059                     ___bmul@product:	
   921                           ; 1 bytes @ 0x0
   922                           
   923                           
   924                           ; 1 bytes @ 0x0
   925  0059                     	ds	1
   926  005A                     ??_lcdWriteString:	
   927  005A                     ?_lcdWriteToDigitBCD:	
   928                           ; 1 bytes @ 0x1
   929                           
   930  005A                     lcdSetCursor@address:	
   931                           ; 1 bytes @ 0x1
   932                           
   933  005A                     ___bmul@multiplier:	
   934                           ; 1 bytes @ 0x1
   935                           
   936  005A                     lcdWriteToDigitBCD@data:	
   937                           ; 1 bytes @ 0x1
   938                           
   939                           
   940                           ; 2 bytes @ 0x1
   941  005A                     	ds	1
   942  005B                     lcdWriteString@s:	
   943                           
   944                           ; 1 bytes @ 0x2
   945  005B                     	ds	1
   946  005C                     ?_PathTo:	
   947  005C                     PathTo@y_target:	
   948                           ; 1 bytes @ 0x3
   949                           
   950  005C                     lcdWriteToDigitBCD@TensDigit:	
   951                           ; 1 bytes @ 0x3
   952                           
   953                           
   954                           ; 2 bytes @ 0x3
   955  005C                     	ds	1
   956  005D                     ??_PathTo:	
   957                           
   958                           ; 1 bytes @ 0x4
   959  005D                     	ds	1
   960  005E                     lcdWriteToDigitBCD@HunsDigit:	
   961                           
   962                           ; 2 bytes @ 0x5
   963  005E                     	ds	2
   964  0060                     lcdWriteToDigitBCD@ThouDigit:	
   965                           
   966                           ; 2 bytes @ 0x7
   967  0060                     	ds	2
   968  0062                     lcdWriteToDigitBCD@TenThouDigit:	
   969                           
   970                           ; 2 bytes @ 0x9
   971  0062                     	ds	2
   972  0064                     PathTo@x_target:	
   973  0064                     lcdWriteToDigitBCD@OnesDigit:	
   974                           ; 1 bytes @ 0xB
   975                           
   976                           
   977                           ; 2 bytes @ 0xB
   978  0064                     	ds	1
   979  0065                     PathTo@sum:	
   980                           
   981                           ; 1 bytes @ 0xC
   982  0065                     	ds	1
   983  0066                     PathTo@loop:	
   984                           
   985                           ; 2 bytes @ 0xD
   986  0066                     	ds	2
   987  0068                     ??_main:	
   988                           
   989                           ; 1 bytes @ 0xF
   990  0068                     	ds	3
   991  006B                     main@n:	
   992                           
   993                           ; 1 bytes @ 0x12
   994  006B                     	ds	1
   995                           
   996                           	psect	maintext
   997  0377                     __pmaintext:	
   998 ;;
   999 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1000 ;;
  1001 ;; *************** function _main *****************
  1002 ;; Defined at:
  1003 ;;		line 253 in file "main.c"
  1004 ;; Parameters:    Size  Location     Type
  1005 ;;		None
  1006 ;; Auto vars:     Size  Location     Type
  1007 ;;  n               1   18[BANK0 ] unsigned char 
  1008 ;; Return value:  Size  Location     Type
  1009 ;;                  1    wreg      void 
  1010 ;; Registers used:
  1011 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1012 ;; Tracked objects:
  1013 ;;		On entry : B00/0
  1014 ;;		On exit  : 0/0
  1015 ;;		Unchanged: 0/0
  1016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1017 ;;      Params:         0       0       0       0       0
  1018 ;;      Locals:         0       1       0       0       0
  1019 ;;      Temps:          0       3       0       0       0
  1020 ;;      Totals:         0       4       0       0       0
  1021 ;;Total ram usage:        4 bytes
  1022 ;; Hardware stack levels required when called:    4
  1023 ;; This function calls:
  1024 ;;		_PathTo
  1025 ;;		_lcdSetCursor
  1026 ;;		_lcdWriteControl
  1027 ;;		_lcdWriteData
  1028 ;;		_lcdWriteString
  1029 ;;		_lcdWriteToDigitBCD
  1030 ;;		_ser_init
  1031 ;;		_setupADC
  1032 ;;		_setupLCD
  1033 ;;		_setupSPI
  1034 ;; This function is called by:
  1035 ;;		Startup code after reset
  1036 ;; This function uses a non-reentrant model
  1037 ;;
  1038                           
  1039                           
  1040                           ;psect for function _main
  1041  0377                     _main:	
  1042                           
  1043                           ;main.c: 255: ser_init();
  1044                           
  1045                           ;incstack = 0
  1046                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1047  0377  120A  118A  263C  120A  118A  	fcall	_ser_init
  1048                           
  1049                           ;main.c: 256: setupSPI();
  1050  037C  120A  118A  256C  120A  118A  	fcall	_setupSPI
  1051                           
  1052                           ;main.c: 257: setupLCD();
  1053  0381  120A  118A  2523  120A  118A  	fcall	_setupLCD
  1054                           
  1055                           ;main.c: 258: setupADC();
  1056  0386  120A  118A  25DD  120A  118A  	fcall	_setupADC
  1057                           
  1058                           ;main.c: 259: TRISB = 0b00000000;
  1059  038B  1683               	bsf	3,5	;RP0=1, select bank1
  1060  038C  1303               	bcf	3,6	;RP1=0, select bank1
  1061  038D  0186               	clrf	6	;volatile
  1062                           
  1063                           ;main.c: 260: RB0 = 0;
  1064  038E  1283               	bcf	3,5	;RP0=0, select bank0
  1065  038F  1303               	bcf	3,6	;RP1=0, select bank0
  1066  0390  1006               	bcf	6,0	;volatile
  1067                           
  1068                           ;main.c: 262: x = 0;
  1069  0391  01D8               	clrf	_x
  1070                           
  1071                           ;main.c: 263: y = 3;
  1072  0392  3003               	movlw	3
  1073  0393  00E8               	movwf	??_main
  1074  0394  0868               	movf	??_main,w
  1075  0395  00BD               	movwf	_y
  1076                           
  1077                           ;main.c: 264: orientation = 0;
  1078  0396  01D6               	clrf	_orientation
  1079                           
  1080                           ;main.c: 271: PathTo(2,0);
  1081  0397  01DC               	clrf	PathTo@y_target
  1082  0398  3002               	movlw	2
  1083  0399  120A  118A  205E  120A  118A  	fcall	_PathTo
  1084                           
  1085                           ;main.c: 272: _delay((unsigned long)((3000)*(20000000/4000.0)));
  1086  039E  304D               	movlw	77
  1087  039F  1283               	bcf	3,5	;RP0=0, select bank0
  1088  03A0  1303               	bcf	3,6	;RP1=0, select bank0
  1089  03A1  00EA               	movwf	??_main+2
  1090  03A2  3019               	movlw	25
  1091  03A3  00E9               	movwf	??_main+1
  1092  03A4  309A               	movlw	154
  1093  03A5  00E8               	movwf	??_main
  1094  03A6                     u1947:	
  1095  03A6  0BE8               	decfsz	??_main,f
  1096  03A7  2BA6               	goto	u1947
  1097  03A8  0BE9               	decfsz	??_main+1,f
  1098  03A9  2BA6               	goto	u1947
  1099  03AA  0BEA               	decfsz	??_main+2,f
  1100  03AB  2BA6               	goto	u1947
  1101  03AC  2BAD               	nop2
  1102                           
  1103                           ;main.c: 274: lcdWriteControl(0b00000001);
  1104  03AD  3001               	movlw	1
  1105  03AE  120A  118A  25F1  120A  118A  	fcall	_lcdWriteControl
  1106                           
  1107                           ;main.c: 275: lcdSetCursor(0b10000000);
  1108  03B3  3080               	movlw	128
  1109  03B4  120A  118A  264B  120A  118A  	fcall	_lcdSetCursor
  1110                           
  1111                           ;main.c: 276: lcdWriteString("X:");
  1112  03B9  300C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1113  03BA  120A  118A  254C  120A  118A  	fcall	_lcdWriteString
  1114                           
  1115                           ;main.c: 277: lcdSetCursor(0b11000000);
  1116  03BF  30C0               	movlw	192
  1117  03C0  120A  118A  264B  120A  118A  	fcall	_lcdSetCursor
  1118                           
  1119                           ;main.c: 278: lcdWriteString("Y:");
  1120  03C5  300F               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1121  03C6  120A  118A  254C  120A  118A  	fcall	_lcdWriteString
  1122                           
  1123                           ;main.c: 280: for (char n = 0; n <= pathCountShortest; n++){
  1124  03CB  1283               	bcf	3,5	;RP0=0, select bank0
  1125  03CC  1303               	bcf	3,6	;RP1=0, select bank0
  1126  03CD  01EB               	clrf	main@n
  1127  03CE                     l2601:	
  1128  03CE  086B               	movf	main@n,w
  1129  03CF  0257               	subwf	_pathCountShortest,w
  1130  03D0  1C03               	btfss	3,0
  1131  03D1  2C03               	goto	l2603
  1132                           
  1133                           ;main.c: 281: lcdSetCursor(0b10000000 + n + 2);
  1134  03D2  086B               	movf	main@n,w
  1135  03D3  3E82               	addlw	130
  1136  03D4  120A  118A  264B  120A  118A  	fcall	_lcdSetCursor
  1137                           
  1138                           ;main.c: 282: lcdWriteData(shortest_path[0][n] + 48);
  1139  03D9  1283               	bcf	3,5	;RP0=0, select bank0
  1140  03DA  1303               	bcf	3,6	;RP1=0, select bank0
  1141  03DB  086B               	movf	main@n,w
  1142  03DC  3E90               	addlw	(low (_shortest_path| (0+256)))& (0+255)
  1143  03DD  0084               	movwf	4
  1144  03DE  1783               	bsf	3,7	;select IRP bank3
  1145  03DF  0800               	movf	0,w
  1146  03E0  3E30               	addlw	48
  1147  03E1  120A  118A  2605  120A  118A  	fcall	_lcdWriteData
  1148                           
  1149                           ;main.c: 283: lcdSetCursor(0b11000000 + n + 2);
  1150  03E6  1283               	bcf	3,5	;RP0=0, select bank0
  1151  03E7  1303               	bcf	3,6	;RP1=0, select bank0
  1152  03E8  086B               	movf	main@n,w
  1153  03E9  3EC2               	addlw	194
  1154  03EA  120A  118A  264B  120A  118A  	fcall	_lcdSetCursor
  1155                           
  1156                           ;main.c: 284: lcdWriteData(shortest_path[1][n] + 48);
  1157  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  1158  03F0  1303               	bcf	3,6	;RP1=0, select bank0
  1159  03F1  086B               	movf	main@n,w
  1160  03F2  3EA0               	addlw	(low ((_shortest_path| (0+256)+16)))& (0+255)
  1161  03F3  0084               	movwf	4
  1162  03F4  1783               	bsf	3,7	;select IRP bank3
  1163  03F5  0800               	movf	0,w
  1164  03F6  3E30               	addlw	48
  1165  03F7  120A  118A  2605  120A  118A  	fcall	_lcdWriteData
  1166  03FC  3001               	movlw	1
  1167  03FD  1283               	bcf	3,5	;RP0=0, select bank0
  1168  03FE  1303               	bcf	3,6	;RP1=0, select bank0
  1169  03FF  00E8               	movwf	??_main
  1170  0400  0868               	movf	??_main,w
  1171  0401  07EB               	addwf	main@n,f
  1172  0402  2BCE               	goto	l2601
  1173  0403                     l2603:	
  1174                           
  1175                           ;main.c: 285: }
  1176                           ;main.c: 286: lcdSetCursor(0b10001110);
  1177  0403  308E               	movlw	142
  1178  0404  120A  118A  264B  120A  118A  	fcall	_lcdSetCursor
  1179                           
  1180                           ;main.c: 287: lcdWriteToDigitBCD(pathCountShortest);
  1181  0409  1283               	bcf	3,5	;RP0=0, select bank0
  1182  040A  1303               	bcf	3,6	;RP1=0, select bank0
  1183  040B  0857               	movf	_pathCountShortest,w
  1184  040C  00E8               	movwf	??_main
  1185  040D  01E9               	clrf	??_main+1
  1186  040E  0868               	movf	??_main,w
  1187  040F  00DA               	movwf	lcdWriteToDigitBCD@data
  1188  0410  0869               	movf	??_main+1,w
  1189  0411  00DB               	movwf	lcdWriteToDigitBCD@data+1
  1190  0412  120A  118A  2438  120A  118A  	fcall	_lcdWriteToDigitBCD
  1191  0417                     l2605:	
  1192                           ;main.c: 289: while(1){
  1193                           
  1194                           
  1195                           ;main.c: 290: RB0 = 1;
  1196  0417  1283               	bcf	3,5	;RP0=0, select bank0
  1197  0418  1303               	bcf	3,6	;RP1=0, select bank0
  1198  0419  1406               	bsf	6,0	;volatile
  1199                           
  1200                           ;main.c: 291: _delay((unsigned long)((500)*(20000000/4000.0)));
  1201  041A  300D               	movlw	13
  1202  041B  00EA               	movwf	??_main+2
  1203  041C  30AF               	movlw	175
  1204  041D  00E9               	movwf	??_main+1
  1205  041E  30C1               	movlw	193
  1206  041F  00E8               	movwf	??_main
  1207  0420                     u1957:	
  1208  0420  0BE8               	decfsz	??_main,f
  1209  0421  2C20               	goto	u1957
  1210  0422  0BE9               	decfsz	??_main+1,f
  1211  0423  2C20               	goto	u1957
  1212  0424  0BEA               	decfsz	??_main+2,f
  1213  0425  2C20               	goto	u1957
  1214  0426  0000               	nop
  1215                           
  1216                           ;main.c: 292: RB0 = 0;
  1217  0427  1283               	bcf	3,5	;RP0=0, select bank0
  1218  0428  1303               	bcf	3,6	;RP1=0, select bank0
  1219  0429  1006               	bcf	6,0	;volatile
  1220                           
  1221                           ;main.c: 293: _delay((unsigned long)((500)*(20000000/4000.0)));
  1222  042A  300D               	movlw	13
  1223  042B  00EA               	movwf	??_main+2
  1224  042C  30AF               	movlw	175
  1225  042D  00E9               	movwf	??_main+1
  1226  042E  30C1               	movlw	193
  1227  042F  00E8               	movwf	??_main
  1228  0430                     u1967:	
  1229  0430  0BE8               	decfsz	??_main,f
  1230  0431  2C30               	goto	u1967
  1231  0432  0BE9               	decfsz	??_main+1,f
  1232  0433  2C30               	goto	u1967
  1233  0434  0BEA               	decfsz	??_main+2,f
  1234  0435  2C30               	goto	u1967
  1235  0436  0000               	nop
  1236  0437  2C17               	goto	l2605
  1237  0438                     __end_of_main:	
  1238                           
  1239                           	psect	text1
  1240  056C                     __ptext1:	
  1241 ;; *************** function _setupSPI *****************
  1242 ;; Defined at:
  1243 ;;		line 4 in file "SPI.c"
  1244 ;; Parameters:    Size  Location     Type
  1245 ;;		None
  1246 ;; Auto vars:     Size  Location     Type
  1247 ;;		None
  1248 ;; Return value:  Size  Location     Type
  1249 ;;                  1    wreg      void 
  1250 ;; Registers used:
  1251 ;;		wreg
  1252 ;; Tracked objects:
  1253 ;;		On entry : 0/0
  1254 ;;		On exit  : 0/0
  1255 ;;		Unchanged: 0/0
  1256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1257 ;;      Params:         0       0       0       0       0
  1258 ;;      Locals:         0       0       0       0       0
  1259 ;;      Temps:          0       0       0       0       0
  1260 ;;      Totals:         0       0       0       0       0
  1261 ;;Total ram usage:        0 bytes
  1262 ;; Hardware stack levels used:    1
  1263 ;; Hardware stack levels required when called:    1
  1264 ;; This function calls:
  1265 ;;		Nothing
  1266 ;; This function is called by:
  1267 ;;		_main
  1268 ;; This function uses a non-reentrant model
  1269 ;;
  1270                           
  1271                           
  1272                           ;psect for function _setupSPI
  1273  056C                     _setupSPI:	
  1274                           
  1275                           ;SPI.c: 6: TRISB = 0b00000011;
  1276                           
  1277                           ;incstack = 0
  1278                           ; Regs used in _setupSPI: [wreg]
  1279  056C  3003               	movlw	3
  1280  056D  1683               	bsf	3,5	;RP0=1, select bank1
  1281  056E  1303               	bcf	3,6	;RP1=0, select bank1
  1282  056F  0086               	movwf	6	;volatile
  1283                           
  1284                           ;SPI.c: 8: SSPSTAT = 0b01000000;
  1285  0570  3040               	movlw	64
  1286  0571  0094               	movwf	20	;volatile
  1287                           
  1288                           ;SPI.c: 9: SSPCON = 0b00100000;
  1289  0572  3020               	movlw	32
  1290  0573  1283               	bcf	3,5	;RP0=0, select bank0
  1291  0574  1303               	bcf	3,6	;RP1=0, select bank0
  1292  0575  0094               	movwf	20	;volatile
  1293                           
  1294                           ;SPI.c: 10: TRISC = 0b10000000;
  1295  0576  3080               	movlw	128
  1296  0577  1683               	bsf	3,5	;RP0=1, select bank1
  1297  0578  1303               	bcf	3,6	;RP1=0, select bank1
  1298  0579  0087               	movwf	7	;volatile
  1299                           
  1300                           ;SPI.c: 11: PORTC = 0b00000011;
  1301  057A  3003               	movlw	3
  1302  057B  1283               	bcf	3,5	;RP0=0, select bank0
  1303  057C  1303               	bcf	3,6	;RP1=0, select bank0
  1304  057D  0087               	movwf	7	;volatile
  1305                           
  1306                           ;SPI.c: 14: OPTION_REG = 0b00000100;
  1307  057E  3004               	movlw	4
  1308  057F  1683               	bsf	3,5	;RP0=1, select bank1
  1309  0580  1303               	bcf	3,6	;RP1=0, select bank1
  1310  0581  0081               	movwf	1	;volatile
  1311                           
  1312                           ;SPI.c: 16: TMR0IE = 1;
  1313  0582  168B               	bsf	11,5	;volatile
  1314                           
  1315                           ;SPI.c: 18: (GIE = 1);
  1316  0583  178B               	bsf	11,7	;volatile
  1317  0584  0008               	return
  1318  0585                     __end_of_setupSPI:	
  1319                           
  1320                           	psect	text2
  1321  0523                     __ptext2:	
  1322 ;; *************** function _setupLCD *****************
  1323 ;; Defined at:
  1324 ;;		line 86 in file "LCD.c"
  1325 ;; Parameters:    Size  Location     Type
  1326 ;;		None
  1327 ;; Auto vars:     Size  Location     Type
  1328 ;;		None
  1329 ;; Return value:  Size  Location     Type
  1330 ;;                  1    wreg      void 
  1331 ;; Registers used:
  1332 ;;		wreg, status,2, status,0, pclath, cstack
  1333 ;; Tracked objects:
  1334 ;;		On entry : 0/0
  1335 ;;		On exit  : 0/0
  1336 ;;		Unchanged: 0/0
  1337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1338 ;;      Params:         0       0       0       0       0
  1339 ;;      Locals:         0       0       0       0       0
  1340 ;;      Temps:          0       0       0       0       0
  1341 ;;      Totals:         0       0       0       0       0
  1342 ;;Total ram usage:        0 bytes
  1343 ;; Hardware stack levels used:    1
  1344 ;; Hardware stack levels required when called:    2
  1345 ;; This function calls:
  1346 ;;		_lcdWriteControl
  1347 ;; This function is called by:
  1348 ;;		_main
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351                           
  1352                           
  1353                           ;psect for function _setupLCD
  1354  0523                     _setupLCD:	
  1355                           
  1356                           ;LCD.c: 88: ADCON1 = 0b00000010;
  1357                           
  1358                           ;incstack = 0
  1359                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  1360  0523  3002               	movlw	2
  1361  0524  1683               	bsf	3,5	;RP0=1, select bank1
  1362  0525  1303               	bcf	3,6	;RP1=0, select bank1
  1363  0526  009F               	movwf	31	;volatile
  1364                           
  1365                           ;LCD.c: 90: PORTD = 0;
  1366  0527  1283               	bcf	3,5	;RP0=0, select bank0
  1367  0528  1303               	bcf	3,6	;RP1=0, select bank0
  1368  0529  0188               	clrf	8	;volatile
  1369                           
  1370                           ;LCD.c: 91: PORTE = 0;
  1371  052A  0189               	clrf	9	;volatile
  1372                           
  1373                           ;LCD.c: 93: TRISD = 0b00000000;
  1374  052B  1683               	bsf	3,5	;RP0=1, select bank1
  1375  052C  1303               	bcf	3,6	;RP1=0, select bank1
  1376  052D  0188               	clrf	8	;volatile
  1377                           
  1378                           ;LCD.c: 94: TRISE = 0b00000000;
  1379  052E  0189               	clrf	9	;volatile
  1380                           
  1381                           ;LCD.c: 97: lcdWriteControl(0b00000001);
  1382  052F  3001               	movlw	1
  1383  0530  120A  118A  25F1  120A  118A  	fcall	_lcdWriteControl
  1384                           
  1385                           ;LCD.c: 98: lcdWriteControl(0b00111000);
  1386  0535  3038               	movlw	56
  1387  0536  120A  118A  25F1  120A  118A  	fcall	_lcdWriteControl
  1388                           
  1389                           ;LCD.c: 99: lcdWriteControl(0b00001100);
  1390  053B  300C               	movlw	12
  1391  053C  120A  118A  25F1  120A  118A  	fcall	_lcdWriteControl
  1392                           
  1393                           ;LCD.c: 100: lcdWriteControl(0b00000110);
  1394  0541  3006               	movlw	6
  1395  0542  120A  118A  25F1  120A  118A  	fcall	_lcdWriteControl
  1396                           
  1397                           ;LCD.c: 101: lcdWriteControl(0b00000010);
  1398  0547  3002               	movlw	2
  1399  0548  120A  118A  25F1   	fcall	_lcdWriteControl
  1400  054B  0008               	return
  1401  054C                     __end_of_setupLCD:	
  1402                           
  1403                           	psect	text3
  1404  05DD                     __ptext3:	
  1405 ;; *************** function _setupADC *****************
  1406 ;; Defined at:
  1407 ;;		line 5 in file "ADC.c"
  1408 ;; Parameters:    Size  Location     Type
  1409 ;;		None
  1410 ;; Auto vars:     Size  Location     Type
  1411 ;;		None
  1412 ;; Return value:  Size  Location     Type
  1413 ;;                  1    wreg      void 
  1414 ;; Registers used:
  1415 ;;		wreg, status,2
  1416 ;; Tracked objects:
  1417 ;;		On entry : 0/0
  1418 ;;		On exit  : 0/0
  1419 ;;		Unchanged: 0/0
  1420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1421 ;;      Params:         0       0       0       0       0
  1422 ;;      Locals:         0       0       0       0       0
  1423 ;;      Temps:          1       0       0       0       0
  1424 ;;      Totals:         1       0       0       0       0
  1425 ;;Total ram usage:        1 bytes
  1426 ;; Hardware stack levels used:    1
  1427 ;; Hardware stack levels required when called:    1
  1428 ;; This function calls:
  1429 ;;		Nothing
  1430 ;; This function is called by:
  1431 ;;		_main
  1432 ;; This function uses a non-reentrant model
  1433 ;;
  1434                           
  1435                           
  1436                           ;psect for function _setupADC
  1437  05DD                     _setupADC:	
  1438                           
  1439                           ;ADC.c: 6: PORTA = 0;
  1440                           
  1441                           ;incstack = 0
  1442                           ; Regs used in _setupADC: [wreg+status,2]
  1443  05DD  1283               	bcf	3,5	;RP0=0, select bank0
  1444  05DE  1303               	bcf	3,6	;RP1=0, select bank0
  1445  05DF  0185               	clrf	5	;volatile
  1446                           
  1447                           ;ADC.c: 7: TRISA = 0b11111111;
  1448  05E0  30FF               	movlw	255
  1449  05E1  1683               	bsf	3,5	;RP0=1, select bank1
  1450  05E2  1303               	bcf	3,6	;RP1=0, select bank1
  1451  05E3  0085               	movwf	5	;volatile
  1452                           
  1453                           ;ADC.c: 10: ADCON0 = 0b10001001;
  1454  05E4  3089               	movlw	137
  1455  05E5  1283               	bcf	3,5	;RP0=0, select bank0
  1456  05E6  1303               	bcf	3,6	;RP1=0, select bank0
  1457  05E7  009F               	movwf	31	;volatile
  1458                           
  1459                           ;ADC.c: 11: ADCON1 = 0b00000010;
  1460  05E8  3002               	movlw	2
  1461  05E9  1683               	bsf	3,5	;RP0=1, select bank1
  1462  05EA  1303               	bcf	3,6	;RP1=0, select bank1
  1463  05EB  009F               	movwf	31	;volatile
  1464                           
  1465                           ;ADC.c: 13: _delay((unsigned long)((50)*(20000000/4000000.0)));
  1466  05EC  3053               	movlw	83
  1467  05ED  00F4               	movwf	??_setupADC
  1468  05EE                     u1977:	
  1469  05EE  0BF4               	decfsz	??_setupADC,f
  1470  05EF  2DEE               	goto	u1977
  1471  05F0  0008               	return
  1472  05F1                     __end_of_setupADC:	
  1473                           
  1474                           	psect	text4
  1475  063C                     __ptext4:	
  1476 ;; *************** function _ser_init *****************
  1477 ;; Defined at:
  1478 ;;		line 5 in file "ser.c"
  1479 ;; Parameters:    Size  Location     Type
  1480 ;;		None
  1481 ;; Auto vars:     Size  Location     Type
  1482 ;;		None
  1483 ;; Return value:  Size  Location     Type
  1484 ;;                  1    wreg      void 
  1485 ;; Registers used:
  1486 ;;		wreg
  1487 ;; Tracked objects:
  1488 ;;		On entry : 0/0
  1489 ;;		On exit  : 0/0
  1490 ;;		Unchanged: 0/0
  1491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1492 ;;      Params:         0       0       0       0       0
  1493 ;;      Locals:         0       0       0       0       0
  1494 ;;      Temps:          0       0       0       0       0
  1495 ;;      Totals:         0       0       0       0       0
  1496 ;;Total ram usage:        0 bytes
  1497 ;; Hardware stack levels used:    1
  1498 ;; Hardware stack levels required when called:    1
  1499 ;; This function calls:
  1500 ;;		Nothing
  1501 ;; This function is called by:
  1502 ;;		_main
  1503 ;; This function uses a non-reentrant model
  1504 ;;
  1505                           
  1506                           
  1507                           ;psect for function _ser_init
  1508  063C                     _ser_init:	
  1509                           
  1510                           ;ser.c: 7: TXSTA = 0b00100100;
  1511                           
  1512                           ;incstack = 0
  1513                           ; Regs used in _ser_init: [wreg]
  1514  063C  3024               	movlw	36
  1515  063D  1683               	bsf	3,5	;RP0=1, select bank1
  1516  063E  1303               	bcf	3,6	;RP1=0, select bank1
  1517  063F  0098               	movwf	24	;volatile
  1518                           
  1519                           ;ser.c: 8: RCSTA = 0b10011000;
  1520  0640  3098               	movlw	152
  1521  0641  1283               	bcf	3,5	;RP0=0, select bank0
  1522  0642  1303               	bcf	3,6	;RP1=0, select bank0
  1523  0643  0098               	movwf	24	;volatile
  1524                           
  1525                           ;ser.c: 24: SPBRG = 20;
  1526  0644  3014               	movlw	20
  1527  0645  1683               	bsf	3,5	;RP0=1, select bank1
  1528  0646  1303               	bcf	3,6	;RP1=0, select bank1
  1529  0647  0099               	movwf	25	;volatile
  1530                           
  1531                           ;ser.c: 26: PEIE = 1;
  1532  0648  170B               	bsf	11,6	;volatile
  1533                           
  1534                           ;ser.c: 27: (GIE = 1);
  1535  0649  178B               	bsf	11,7	;volatile
  1536  064A  0008               	return
  1537  064B                     __end_of_ser_init:	
  1538                           
  1539                           	psect	text5
  1540  0438                     __ptext5:	
  1541 ;; *************** function _lcdWriteToDigitBCD *****************
  1542 ;; Defined at:
  1543 ;;		line 38 in file "LCD.c"
  1544 ;; Parameters:    Size  Location     Type
  1545 ;;  data            2    1[BANK0 ] unsigned int 
  1546 ;; Auto vars:     Size  Location     Type
  1547 ;;  OnesDigit       2   11[BANK0 ] unsigned int 
  1548 ;;  TenThouDigit    2    9[BANK0 ] unsigned int 
  1549 ;;  ThouDigit       2    7[BANK0 ] unsigned int 
  1550 ;;  HunsDigit       2    5[BANK0 ] unsigned int 
  1551 ;;  TensDigit       2    3[BANK0 ] unsigned int 
  1552 ;; Return value:  Size  Location     Type
  1553 ;;                  1    wreg      void 
  1554 ;; Registers used:
  1555 ;;		wreg, status,2, status,0, pclath, cstack
  1556 ;; Tracked objects:
  1557 ;;		On entry : 0/0
  1558 ;;		On exit  : 0/0
  1559 ;;		Unchanged: 0/0
  1560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1561 ;;      Params:         0       2       0       0       0
  1562 ;;      Locals:         0      10       0       0       0
  1563 ;;      Temps:          0       0       0       0       0
  1564 ;;      Totals:         0      12       0       0       0
  1565 ;;Total ram usage:       12 bytes
  1566 ;; Hardware stack levels used:    1
  1567 ;; Hardware stack levels required when called:    2
  1568 ;; This function calls:
  1569 ;;		_lcdWriteData
  1570 ;; This function is called by:
  1571 ;;		_main
  1572 ;;		_ADCMain
  1573 ;; This function uses a non-reentrant model
  1574 ;;
  1575                           
  1576                           
  1577                           ;psect for function _lcdWriteToDigitBCD
  1578  0438                     _lcdWriteToDigitBCD:	
  1579                           
  1580                           ;LCD.c: 39: unsigned int OnesDigit, TensDigit, HunsDigit, ThouDigit, TenThouDigit;
  1581                           ;LCD.c: 42: OnesDigit = data;
  1582                           
  1583                           ;incstack = 0
  1584                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  1585  0438  1283               	bcf	3,5	;RP0=0, select bank0
  1586  0439  1303               	bcf	3,6	;RP1=0, select bank0
  1587  043A  085B               	movf	lcdWriteToDigitBCD@data+1,w
  1588  043B  00E5               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1589  043C  085A               	movf	lcdWriteToDigitBCD@data,w
  1590  043D  00E4               	movwf	lcdWriteToDigitBCD@OnesDigit
  1591                           
  1592                           ;LCD.c: 43: TensDigit = 0;
  1593  043E  01DC               	clrf	lcdWriteToDigitBCD@TensDigit
  1594  043F  01DD               	clrf	lcdWriteToDigitBCD@TensDigit+1
  1595                           
  1596                           ;LCD.c: 44: HunsDigit = 0;
  1597  0440  01DE               	clrf	lcdWriteToDigitBCD@HunsDigit
  1598  0441  01DF               	clrf	lcdWriteToDigitBCD@HunsDigit+1
  1599                           
  1600                           ;LCD.c: 45: ThouDigit = 0;
  1601  0442  01E0               	clrf	lcdWriteToDigitBCD@ThouDigit
  1602  0443  01E1               	clrf	lcdWriteToDigitBCD@ThouDigit+1
  1603                           
  1604                           ;LCD.c: 46: TenThouDigit = 0;
  1605  0444  01E2               	clrf	lcdWriteToDigitBCD@TenThouDigit
  1606  0445  01E3               	clrf	lcdWriteToDigitBCD@TenThouDigit+1
  1607  0446                     l2533:	
  1608                           ;LCD.c: 49: while (OnesDigit >= 10000){
  1609                           
  1610  0446  3027               	movlw	39
  1611  0447  0265               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1612  0448  3010               	movlw	16
  1613  0449  1903               	skipnz
  1614  044A  0264               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1615  044B  1C03               	btfss	3,0
  1616  044C  2C6A               	goto	l2539
  1617                           
  1618                           ;LCD.c: 50: OnesDigit = OnesDigit - 10000;
  1619  044D  0864               	movf	lcdWriteToDigitBCD@OnesDigit,w
  1620  044E  3EF0               	addlw	240
  1621  044F  00E4               	movwf	lcdWriteToDigitBCD@OnesDigit
  1622  0450  0865               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1623  0451  1803               	skipnc
  1624  0452  3E01               	addlw	1
  1625  0453  3ED8               	addlw	216
  1626  0454  00E5               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1627                           
  1628                           ;LCD.c: 51: TenThouDigit++;
  1629  0455  3001               	movlw	1
  1630  0456  07E2               	addwf	lcdWriteToDigitBCD@TenThouDigit,f
  1631  0457  1803               	skipnc
  1632  0458  0AE3               	incf	lcdWriteToDigitBCD@TenThouDigit+1,f
  1633  0459  3000               	movlw	0
  1634  045A  07E3               	addwf	lcdWriteToDigitBCD@TenThouDigit+1,f
  1635  045B  2C46               	goto	l2533
  1636  045C                     l2535:	
  1637                           ;LCD.c: 52: }
  1638                           ;LCD.c: 54: while (OnesDigit >= 1000){
  1639                           
  1640                           
  1641                           ;LCD.c: 55: OnesDigit = OnesDigit - 1000;
  1642  045C  0864               	movf	lcdWriteToDigitBCD@OnesDigit,w
  1643  045D  3E18               	addlw	24
  1644  045E  00E4               	movwf	lcdWriteToDigitBCD@OnesDigit
  1645  045F  0865               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1646  0460  1803               	skipnc
  1647  0461  3E01               	addlw	1
  1648  0462  3EFC               	addlw	252
  1649  0463  00E5               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1650                           
  1651                           ;LCD.c: 56: ThouDigit++;
  1652  0464  3001               	movlw	1
  1653  0465  07E0               	addwf	lcdWriteToDigitBCD@ThouDigit,f
  1654  0466  1803               	skipnc
  1655  0467  0AE1               	incf	lcdWriteToDigitBCD@ThouDigit+1,f
  1656  0468  3000               	movlw	0
  1657  0469  07E1               	addwf	lcdWriteToDigitBCD@ThouDigit+1,f
  1658  046A                     l2539:	
  1659  046A  3003               	movlw	3
  1660  046B  0265               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1661  046C  30E8               	movlw	232
  1662  046D  1903               	skipnz
  1663  046E  0264               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1664  046F  1C03               	btfss	3,0
  1665  0470  2C80               	goto	l2545
  1666  0471  2C5C               	goto	l2535
  1667  0472                     l2541:	
  1668                           ;LCD.c: 57: }
  1669                           ;LCD.c: 59: while (OnesDigit >= 100){
  1670                           
  1671                           
  1672                           ;LCD.c: 60: OnesDigit = OnesDigit - 100;
  1673  0472  0864               	movf	lcdWriteToDigitBCD@OnesDigit,w
  1674  0473  3E9C               	addlw	156
  1675  0474  00E4               	movwf	lcdWriteToDigitBCD@OnesDigit
  1676  0475  0865               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1677  0476  1803               	skipnc
  1678  0477  3E01               	addlw	1
  1679  0478  3EFF               	addlw	255
  1680  0479  00E5               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1681                           
  1682                           ;LCD.c: 61: HunsDigit++;
  1683  047A  3001               	movlw	1
  1684  047B  07DE               	addwf	lcdWriteToDigitBCD@HunsDigit,f
  1685  047C  1803               	skipnc
  1686  047D  0ADF               	incf	lcdWriteToDigitBCD@HunsDigit+1,f
  1687  047E  3000               	movlw	0
  1688  047F  07DF               	addwf	lcdWriteToDigitBCD@HunsDigit+1,f
  1689  0480                     l2545:	
  1690  0480  3000               	movlw	0
  1691  0481  0265               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1692  0482  3064               	movlw	100
  1693  0483  1903               	skipnz
  1694  0484  0264               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1695  0485  1C03               	btfss	3,0
  1696  0486  2C96               	goto	l2551
  1697  0487  2C72               	goto	l2541
  1698  0488                     l2547:	
  1699                           ;LCD.c: 62: }
  1700                           ;LCD.c: 64: while (OnesDigit >= 10){
  1701                           
  1702                           
  1703                           ;LCD.c: 65: OnesDigit = OnesDigit - 10;
  1704  0488  0864               	movf	lcdWriteToDigitBCD@OnesDigit,w
  1705  0489  3EF6               	addlw	246
  1706  048A  00E4               	movwf	lcdWriteToDigitBCD@OnesDigit
  1707  048B  0865               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1708  048C  1803               	skipnc
  1709  048D  3E01               	addlw	1
  1710  048E  3EFF               	addlw	255
  1711  048F  00E5               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1712                           
  1713                           ;LCD.c: 66: TensDigit++;
  1714  0490  3001               	movlw	1
  1715  0491  07DC               	addwf	lcdWriteToDigitBCD@TensDigit,f
  1716  0492  1803               	skipnc
  1717  0493  0ADD               	incf	lcdWriteToDigitBCD@TensDigit+1,f
  1718  0494  3000               	movlw	0
  1719  0495  07DD               	addwf	lcdWriteToDigitBCD@TensDigit+1,f
  1720  0496                     l2551:	
  1721  0496  3000               	movlw	0
  1722  0497  0265               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1723  0498  300A               	movlw	10
  1724  0499  1903               	skipnz
  1725  049A  0264               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1726  049B  1803               	skipnc
  1727  049C  2C88               	goto	l2547
  1728                           
  1729                           ;LCD.c: 67: }
  1730                           ;LCD.c: 69: if (TenThouDigit > 0)
  1731  049D  0862               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  1732  049E  0463               	iorwf	lcdWriteToDigitBCD@TenThouDigit+1,w
  1733  049F  1903               	btfsc	3,2
  1734  04A0  2CA8               	goto	l2557
  1735                           
  1736                           ;LCD.c: 70: lcdWriteData((unsigned int)TenThouDigit + 48);
  1737  04A1  0862               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  1738  04A2  3E30               	addlw	48
  1739  04A3  120A  118A  2605  120A  118A  	fcall	_lcdWriteData
  1740  04A8                     l2557:	
  1741                           
  1742                           ;LCD.c: 72: if (ThouDigit > 0)
  1743  04A8  1283               	bcf	3,5	;RP0=0, select bank0
  1744  04A9  1303               	bcf	3,6	;RP1=0, select bank0
  1745  04AA  0860               	movf	lcdWriteToDigitBCD@ThouDigit,w
  1746  04AB  0461               	iorwf	lcdWriteToDigitBCD@ThouDigit+1,w
  1747  04AC  1903               	btfsc	3,2
  1748  04AD  2CB5               	goto	l2561
  1749                           
  1750                           ;LCD.c: 73: lcdWriteData((unsigned int)ThouDigit + 48);
  1751  04AE  0860               	movf	lcdWriteToDigitBCD@ThouDigit,w
  1752  04AF  3E30               	addlw	48
  1753  04B0  120A  118A  2605  120A  118A  	fcall	_lcdWriteData
  1754  04B5                     l2561:	
  1755                           
  1756                           ;LCD.c: 75: if (HunsDigit > 0)
  1757  04B5  1283               	bcf	3,5	;RP0=0, select bank0
  1758  04B6  1303               	bcf	3,6	;RP1=0, select bank0
  1759  04B7  085E               	movf	lcdWriteToDigitBCD@HunsDigit,w
  1760  04B8  045F               	iorwf	lcdWriteToDigitBCD@HunsDigit+1,w
  1761  04B9  1903               	btfsc	3,2
  1762  04BA  2CC2               	goto	l400
  1763                           
  1764                           ;LCD.c: 76: lcdWriteData((unsigned int)HunsDigit + 48);
  1765  04BB  085E               	movf	lcdWriteToDigitBCD@HunsDigit,w
  1766  04BC  3E30               	addlw	48
  1767  04BD  120A  118A  2605  120A  118A  	fcall	_lcdWriteData
  1768  04C2                     l400:	
  1769                           
  1770                           ;LCD.c: 79: lcdWriteData((unsigned int)TensDigit + 48);
  1771  04C2  1283               	bcf	3,5	;RP0=0, select bank0
  1772  04C3  1303               	bcf	3,6	;RP1=0, select bank0
  1773  04C4  085C               	movf	lcdWriteToDigitBCD@TensDigit,w
  1774  04C5  3E30               	addlw	48
  1775  04C6  120A  118A  2605  120A  118A  	fcall	_lcdWriteData
  1776                           
  1777                           ;LCD.c: 81: lcdWriteData((unsigned int)OnesDigit + 48);
  1778  04CB  1283               	bcf	3,5	;RP0=0, select bank0
  1779  04CC  1303               	bcf	3,6	;RP1=0, select bank0
  1780  04CD  0864               	movf	lcdWriteToDigitBCD@OnesDigit,w
  1781  04CE  3E30               	addlw	48
  1782  04CF  120A  118A  2605   	fcall	_lcdWriteData
  1783  04D2  0008               	return
  1784  04D3                     __end_of_lcdWriteToDigitBCD:	
  1785                           
  1786                           	psect	text6
  1787  005E                     __ptext6:	
  1788 ;; *************** function _PathTo *****************
  1789 ;; Defined at:
  1790 ;;		line 65 in file "main.c"
  1791 ;; Parameters:    Size  Location     Type
  1792 ;;  x_target        1    wreg     unsigned char 
  1793 ;;  y_target        1    3[BANK0 ] unsigned char 
  1794 ;; Auto vars:     Size  Location     Type
  1795 ;;  x_target        1   11[BANK0 ] unsigned char 
  1796 ;;  sum             1   12[BANK0 ] unsigned char 
  1797 ;;  loop            2   13[BANK0 ] int 
  1798 ;; Return value:  Size  Location     Type
  1799 ;;                  1    wreg      void 
  1800 ;; Registers used:
  1801 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1802 ;; Tracked objects:
  1803 ;;		On entry : 0/0
  1804 ;;		On exit  : 0/0
  1805 ;;		Unchanged: 0/0
  1806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1807 ;;      Params:         0       1       0       0       0
  1808 ;;      Locals:         0       4       0       0       0
  1809 ;;      Temps:          0       7       0       0       0
  1810 ;;      Totals:         0      12       0       0       0
  1811 ;;Total ram usage:       12 bytes
  1812 ;; Hardware stack levels used:    1
  1813 ;; Hardware stack levels required when called:    3
  1814 ;; This function calls:
  1815 ;;		___bmul
  1816 ;;		_lcdSetCursor
  1817 ;;		_lcdWriteString
  1818 ;; This function is called by:
  1819 ;;		_main
  1820 ;; This function uses a non-reentrant model
  1821 ;;
  1822                           
  1823                           
  1824                           ;psect for function _PathTo
  1825  005E                     _PathTo:	
  1826                           
  1827                           ;incstack = 0
  1828                           ; Regs used in _PathTo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1829                           ;PathTo@x_target stored from wreg
  1830  005E  1283               	bcf	3,5	;RP0=0, select bank0
  1831  005F  1303               	bcf	3,6	;RP1=0, select bank0
  1832  0060  00E4               	movwf	PathTo@x_target
  1833                           
  1834                           ;main.c: 69: for (r = 0; r <= 3; r++){
  1835  0061  01F7               	clrf	_r
  1836  0062  3004               	movlw	4
  1837  0063  0277               	subwf	_r,w
  1838  0064  1803               	btfsc	3,0
  1839  0065  28A3               	goto	l2323
  1840  0066                     l2307:	
  1841                           
  1842                           ;main.c: 70: for (c = 0; c <= 4; c++){
  1843  0066  01B1               	clrf	_c
  1844  0067  3005               	movlw	5
  1845  0068  0231               	subwf	_c,w
  1846  0069  1803               	btfsc	3,0
  1847  006A  289B               	goto	l2319
  1848  006B                     l2313:	
  1849                           
  1850                           ;main.c: 71: mazeGrid[r][c] = mazeGridDefault[r][c];
  1851  006B  3005               	movlw	5
  1852  006C  00DD               	movwf	??_PathTo
  1853  006D  085D               	movf	??_PathTo,w
  1854  006E  00F4               	movwf	___bmul@multiplicand
  1855  006F  0877               	movf	_r,w
  1856  0070  120A  118A  2618  120A  118A  	fcall	___bmul
  1857  0075  3EC0               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  1858  0076  1283               	bcf	3,5	;RP0=0, select bank0
  1859  0077  1303               	bcf	3,6	;RP1=0, select bank0
  1860  0078  0731               	addwf	_c,w
  1861  0079  00DE               	movwf	??_PathTo+1
  1862  007A  085E               	movf	??_PathTo+1,w
  1863  007B  0084               	movwf	4
  1864  007C  1383               	bcf	3,7	;select IRP bank1
  1865  007D  0800               	movf	0,w
  1866  007E  00DF               	movwf	??_PathTo+2
  1867  007F  3005               	movlw	5
  1868  0080  00E0               	movwf	??_PathTo+3
  1869  0081  0860               	movf	??_PathTo+3,w
  1870  0082  00F4               	movwf	___bmul@multiplicand
  1871  0083  0877               	movf	_r,w
  1872  0084  120A  118A  2618  120A  118A  	fcall	___bmul
  1873  0089  3E42               	addlw	(low (_mazeGrid| 0))& (0+255)
  1874  008A  1283               	bcf	3,5	;RP0=0, select bank0
  1875  008B  1303               	bcf	3,6	;RP1=0, select bank0
  1876  008C  0731               	addwf	_c,w
  1877  008D  00E1               	movwf	??_PathTo+4
  1878  008E  0861               	movf	??_PathTo+4,w
  1879  008F  0084               	movwf	4
  1880  0090  085F               	movf	??_PathTo+2,w
  1881  0091  1383               	bcf	3,7	;select IRP bank0
  1882  0092  0080               	movwf	0
  1883  0093  3001               	movlw	1
  1884  0094  00DD               	movwf	??_PathTo
  1885  0095  085D               	movf	??_PathTo,w
  1886  0096  07B1               	addwf	_c,f
  1887  0097  3005               	movlw	5
  1888  0098  0231               	subwf	_c,w
  1889  0099  1C03               	skipc
  1890  009A  286B               	goto	l2313
  1891  009B                     l2319:	
  1892  009B  3001               	movlw	1
  1893  009C  00DD               	movwf	??_PathTo
  1894  009D  085D               	movf	??_PathTo,w
  1895  009E  07F7               	addwf	_r,f
  1896  009F  3004               	movlw	4
  1897  00A0  0277               	subwf	_r,w
  1898  00A1  1C03               	skipc
  1899  00A2  2866               	goto	l2307
  1900  00A3                     l2323:	
  1901                           
  1902                           ;main.c: 72: }
  1903                           ;main.c: 73: }
  1904                           ;main.c: 75: x_origin = x;
  1905  00A3  0858               	movf	_x,w
  1906  00A4  00DD               	movwf	??_PathTo
  1907  00A5  085D               	movf	??_PathTo,w
  1908  00A6  00BA               	movwf	_x_origin
  1909                           
  1910                           ;main.c: 76: y_origin = y;
  1911  00A7  083D               	movf	_y,w
  1912  00A8  00DD               	movwf	??_PathTo
  1913  00A9  085D               	movf	??_PathTo,w
  1914  00AA  00BE               	movwf	_y_origin
  1915                           
  1916                           ;main.c: 77: x_path = x;
  1917  00AB  0858               	movf	_x,w
  1918  00AC  00DD               	movwf	??_PathTo
  1919  00AD  085D               	movf	??_PathTo,w
  1920  00AE  00BB               	movwf	_x_path
  1921                           
  1922                           ;main.c: 78: y_path = y;
  1923  00AF  083D               	movf	_y,w
  1924  00B0  00DD               	movwf	??_PathTo
  1925  00B1  085D               	movf	??_PathTo,w
  1926  00B2  00BF               	movwf	_y_path
  1927                           
  1928                           ;main.c: 79: orientation_path = orientation;
  1929  00B3  0856               	movf	_orientation,w
  1930  00B4  00DD               	movwf	??_PathTo
  1931  00B5  085D               	movf	??_PathTo,w
  1932  00B6  00B4               	movwf	_orientation_path
  1933                           
  1934                           ;main.c: 80: pathCount = 0;
  1935  00B7  01B5               	clrf	_pathCount
  1936                           
  1937                           ;main.c: 82: lcdSetCursor(0b10000000);
  1938  00B8  3080               	movlw	128
  1939  00B9  120A  118A  264B  120A  118A  	fcall	_lcdSetCursor
  1940                           
  1941                           ;main.c: 83: lcdWriteString("Working...");
  1942  00BE  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1943  00BF  120A  118A  254C  120A  118A  	fcall	_lcdWriteString
  1944                           
  1945                           ;main.c: 85: for (int loop = 0; loop <= 1000; loop++){
  1946  00C4  1283               	bcf	3,5	;RP0=0, select bank0
  1947  00C5  1303               	bcf	3,6	;RP1=0, select bank0
  1948  00C6  01E6               	clrf	PathTo@loop
  1949  00C7  01E7               	clrf	PathTo@loop+1
  1950  00C8                     L12:	
  1951  00C8  0867               	movf	PathTo@loop+1,w
  1952  00C9  3A80               	xorlw	128
  1953  00CA  00FF               	movwf	127
  1954  00CB  3083               	movlw	131
  1955  00CC  027F               	subwf	127,w
  1956  00CD  1D03               	skipz
  1957  00CE  28D1               	goto	u1495
  1958  00CF  30E9               	movlw	233
  1959  00D0  0266               	subwf	PathTo@loop,w
  1960  00D1                     u1495:	
  1961  00D1  1803               	btfsc	3,0
  1962  00D2  0008               	return
  1963                           
  1964                           ;main.c: 87: reset_flag = 0;
  1965  00D3  1176               	bcf	_reset_flag/(0+8),_reset_flag& (0+7)
  1966                           
  1967                           ;main.c: 89: path[0][pathCount] = x_path;
  1968  00D4  1283               	bcf	3,5	;RP0=0, select bank0
  1969  00D5  1303               	bcf	3,6	;RP1=0, select bank0
  1970  00D6  083B               	movf	_x_path,w
  1971  00D7  00DD               	movwf	??_PathTo
  1972  00D8  0835               	movf	_pathCount,w
  1973  00D9  3EA0               	addlw	(low (_path| 0))& (0+255)
  1974  00DA  0084               	movwf	4
  1975  00DB  085D               	movf	??_PathTo,w
  1976  00DC  1383               	bcf	3,7	;select IRP bank1
  1977  00DD  0080               	movwf	0
  1978                           
  1979                           ;main.c: 90: path[1][pathCount] = y_path;
  1980  00DE  083F               	movf	_y_path,w
  1981  00DF  00DD               	movwf	??_PathTo
  1982  00E0  0835               	movf	_pathCount,w
  1983  00E1  3EB0               	addlw	(low ((_path| 0+16)))& (0+255)
  1984  00E2  0084               	movwf	4
  1985  00E3  085D               	movf	??_PathTo,w
  1986  00E4  0080               	movwf	0
  1987                           
  1988                           ;main.c: 94: left = squareWalls[1][(mazeGrid[y_path][x_path])];
  1989  00E5  3005               	movlw	5
  1990  00E6  00DD               	movwf	??_PathTo
  1991  00E7  085D               	movf	??_PathTo,w
  1992  00E8  00F4               	movwf	___bmul@multiplicand
  1993  00E9  083F               	movf	_y_path,w
  1994  00EA  120A  118A  2618  120A  118A  	fcall	___bmul
  1995  00EF  3E42               	addlw	(low (_mazeGrid| 0))& (0+255)
  1996  00F0  1283               	bcf	3,5	;RP0=0, select bank0
  1997  00F1  1303               	bcf	3,6	;RP1=0, select bank0
  1998  00F2  073B               	addwf	_x_path,w
  1999  00F3  00DE               	movwf	??_PathTo+1
  2000  00F4  085E               	movf	??_PathTo+1,w
  2001  00F5  0084               	movwf	4
  2002  00F6  1383               	bcf	3,7	;select IRP bank0
  2003  00F7  0800               	movf	0,w
  2004  00F8  3E20               	addlw	(low ((_squareWalls| (0+256)+16)))& (0+255)
  2005  00F9  0084               	movwf	4
  2006  00FA  10F6               	bcf	_left/(0+8),_left& (0+7)
  2007  00FB  1783               	bsf	3,7	;select IRP bank2
  2008  00FC  1800               	btfsc	0,0
  2009  00FD  14F6               	bsf	_left/(0+8),_left& (0+7)
  2010                           
  2011                           ;main.c: 95: up = squareWalls[2][(mazeGrid[y_path][x_path])];
  2012  00FE  3005               	movlw	5
  2013  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  2014  0100  1303               	bcf	3,6	;RP1=0, select bank0
  2015  0101  00DD               	movwf	??_PathTo
  2016  0102  085D               	movf	??_PathTo,w
  2017  0103  00F4               	movwf	___bmul@multiplicand
  2018  0104  083F               	movf	_y_path,w
  2019  0105  120A  118A  2618  120A  118A  	fcall	___bmul
  2020  010A  3E42               	addlw	(low (_mazeGrid| 0))& (0+255)
  2021  010B  1283               	bcf	3,5	;RP0=0, select bank0
  2022  010C  1303               	bcf	3,6	;RP1=0, select bank0
  2023  010D  073B               	addwf	_x_path,w
  2024  010E  00DE               	movwf	??_PathTo+1
  2025  010F  085E               	movf	??_PathTo+1,w
  2026  0110  0084               	movwf	4
  2027  0111  1383               	bcf	3,7	;select IRP bank0
  2028  0112  0800               	movf	0,w
  2029  0113  3E30               	addlw	(low ((_squareWalls| (0+256)+32)))& (0+255)
  2030  0114  0084               	movwf	4
  2031  0115  1276               	bcf	_up/(0+8),_up& (0+7)
  2032  0116  1783               	bsf	3,7	;select IRP bank2
  2033  0117  1800               	btfsc	0,0
  2034  0118  1676               	bsf	_up/(0+8),_up& (0+7)
  2035                           
  2036                           ;main.c: 96: right = squareWalls[3][(mazeGrid[y_path][x_path])];
  2037  0119  3005               	movlw	5
  2038  011A  1283               	bcf	3,5	;RP0=0, select bank0
  2039  011B  1303               	bcf	3,6	;RP1=0, select bank0
  2040  011C  00DD               	movwf	??_PathTo
  2041  011D  085D               	movf	??_PathTo,w
  2042  011E  00F4               	movwf	___bmul@multiplicand
  2043  011F  083F               	movf	_y_path,w
  2044  0120  120A  118A  2618  120A  118A  	fcall	___bmul
  2045  0125  3E42               	addlw	(low (_mazeGrid| 0))& (0+255)
  2046  0126  1283               	bcf	3,5	;RP0=0, select bank0
  2047  0127  1303               	bcf	3,6	;RP1=0, select bank0
  2048  0128  073B               	addwf	_x_path,w
  2049  0129  00DE               	movwf	??_PathTo+1
  2050  012A  085E               	movf	??_PathTo+1,w
  2051  012B  0084               	movwf	4
  2052  012C  1383               	bcf	3,7	;select IRP bank0
  2053  012D  0800               	movf	0,w
  2054  012E  3E40               	addlw	(low ((_squareWalls| (0+256)+48)))& (0+255)
  2055  012F  0084               	movwf	4
  2056  0130  11F6               	bcf	_right/(0+8),_right& (0+7)
  2057  0131  1783               	bsf	3,7	;select IRP bank2
  2058  0132  1800               	btfsc	0,0
  2059  0133  15F6               	bsf	_right/(0+8),_right& (0+7)
  2060                           
  2061                           ;main.c: 97: down = squareWalls[4][(mazeGrid[y_path][x_path])];
  2062  0134  3005               	movlw	5
  2063  0135  1283               	bcf	3,5	;RP0=0, select bank0
  2064  0136  1303               	bcf	3,6	;RP1=0, select bank0
  2065  0137  00DD               	movwf	??_PathTo
  2066  0138  085D               	movf	??_PathTo,w
  2067  0139  00F4               	movwf	___bmul@multiplicand
  2068  013A  083F               	movf	_y_path,w
  2069  013B  120A  118A  2618  120A  118A  	fcall	___bmul
  2070  0140  3E42               	addlw	(low (_mazeGrid| 0))& (0+255)
  2071  0141  1283               	bcf	3,5	;RP0=0, select bank0
  2072  0142  1303               	bcf	3,6	;RP1=0, select bank0
  2073  0143  073B               	addwf	_x_path,w
  2074  0144  00DE               	movwf	??_PathTo+1
  2075  0145  085E               	movf	??_PathTo+1,w
  2076  0146  0084               	movwf	4
  2077  0147  1383               	bcf	3,7	;select IRP bank0
  2078  0148  0800               	movf	0,w
  2079  0149  3E50               	addlw	(low ((_squareWalls| (0+256)+64)))& (0+255)
  2080  014A  0084               	movwf	4
  2081  014B  1076               	bcf	_down/(0+8),_down& (0+7)
  2082  014C  1783               	bsf	3,7	;select IRP bank2
  2083  014D  1800               	btfsc	0,0
  2084  014E  1476               	bsf	_down/(0+8),_down& (0+7)
  2085                           
  2086                           ;main.c: 100: switch(orientation_path){
  2087  014F  2958               	goto	l2349
  2088  0150                     l157:	
  2089                           ;main.c: 101: case 0: down = 1;
  2090                           
  2091  0150  1476               	bsf	_down/(0+8),_down& (0+7)
  2092                           
  2093                           ;main.c: 102: break;
  2094  0151  2968               	goto	l2351
  2095  0152                     l159:	
  2096                           ;main.c: 103: case 1: left = 1;
  2097                           
  2098  0152  14F6               	bsf	_left/(0+8),_left& (0+7)
  2099                           
  2100                           ;main.c: 104: break;
  2101  0153  2968               	goto	l2351
  2102  0154                     l160:	
  2103                           ;main.c: 105: case 2: up = 1;
  2104                           
  2105  0154  1676               	bsf	_up/(0+8),_up& (0+7)
  2106                           
  2107                           ;main.c: 106: break;
  2108  0155  2968               	goto	l2351
  2109  0156                     l161:	
  2110                           ;main.c: 107: case 3: right = 1;
  2111                           
  2112  0156  15F6               	bsf	_right/(0+8),_right& (0+7)
  2113                           
  2114                           ;main.c: 109: }
  2115                           
  2116                           ;main.c: 108: break;
  2117  0157  2968               	goto	l2351
  2118  0158                     l2349:	
  2119  0158  1283               	bcf	3,5	;RP0=0, select bank0
  2120  0159  1303               	bcf	3,6	;RP1=0, select bank0
  2121  015A  0834               	movf	_orientation_path,w
  2122                           
  2123                           ; Switch size 1, requested type "space"
  2124                           ; Number of cases is 4, Range of values is 0 to 3
  2125                           ; switch strategies available:
  2126                           ; Name         Instructions Cycles
  2127                           ; simple_byte           13     7 (average)
  2128                           ; direct_byte           20     8 (fixed)
  2129                           ; jumptable            260     6 (fixed)
  2130                           ;	Chosen strategy is simple_byte
  2131  015B  3A00               	xorlw	0	; case 0
  2132  015C  1903               	skipnz
  2133  015D  2950               	goto	l157
  2134  015E  3A01               	xorlw	1	; case 1
  2135  015F  1903               	skipnz
  2136  0160  2952               	goto	l159
  2137  0161  3A03               	xorlw	3	; case 2
  2138  0162  1903               	skipnz
  2139  0163  2954               	goto	l160
  2140  0164  3A01               	xorlw	1	; case 3
  2141  0165  1903               	skipnz
  2142  0166  2956               	goto	l161
  2143  0167  2968               	goto	l2351
  2144  0168                     l2351:	
  2145                           
  2146                           ;main.c: 112: char sum = (left + up + down + right);
  2147  0168  3000               	movlw	0
  2148  0169  18F6               	btfsc	_left/(0+8),_left& (0+7)
  2149  016A  3001               	movlw	1
  2150  016B  1A76               	btfsc	_up/(0+8),_up& (0+7)
  2151  016C  3E01               	addlw	1
  2152  016D  1876               	btfsc	_down/(0+8),_down& (0+7)
  2153  016E  3E01               	addlw	1
  2154  016F  19F6               	btfsc	_right/(0+8),_right& (0+7)
  2155  0170  3E01               	addlw	1
  2156  0171  00DD               	movwf	??_PathTo
  2157  0172  085D               	movf	??_PathTo,w
  2158  0173  00E5               	movwf	PathTo@sum
  2159                           
  2160                           ;main.c: 113: if(sum <= 2){
  2161  0174  3003               	movlw	3
  2162  0175  0265               	subwf	PathTo@sum,w
  2163  0176  1803               	skipnc
  2164  0177  2993               	goto	l162
  2165                           
  2166                           ;main.c: 114: x_int = x_path;
  2167  0178  083B               	movf	_x_path,w
  2168  0179  00DD               	movwf	??_PathTo
  2169  017A  085D               	movf	??_PathTo,w
  2170  017B  00F8               	movwf	_x_int
  2171                           
  2172                           ;main.c: 115: y_int = y_path;
  2173  017C  083F               	movf	_y_path,w
  2174  017D  00DD               	movwf	??_PathTo
  2175  017E  085D               	movf	??_PathTo,w
  2176  017F  00F9               	movwf	_y_int
  2177                           
  2178                           ;main.c: 117: if (left == 0)
  2179  0180  18F6               	btfsc	_left/(0+8),_left& (0+7)
  2180  0181  2984               	goto	l163
  2181                           
  2182                           ;main.c: 118: intersection_Orientation = 3;
  2183  0182  3003               	movlw	3
  2184  0183  2990               	goto	L1
  2185  0184                     l163:	
  2186                           
  2187                           ;main.c: 119: else if (up == 0)
  2188  0184  1A76               	btfsc	_up/(0+8),_up& (0+7)
  2189  0185  2988               	goto	l165
  2190                           
  2191                           ;main.c: 120: intersection_Orientation = 0;
  2192  0186  01B2               	clrf	_intersection_Orientation
  2193  0187  2993               	goto	l162
  2194  0188                     l165:	
  2195                           
  2196                           ;main.c: 121: else if (right == 0)
  2197  0188  19F6               	btfsc	_right/(0+8),_right& (0+7)
  2198  0189  298D               	goto	l167
  2199                           
  2200                           ;main.c: 122: intersection_Orientation = 1;
  2201  018A  01B2               	clrf	_intersection_Orientation
  2202  018B  0AB2               	incf	_intersection_Orientation,f
  2203  018C  2993               	goto	l162
  2204  018D                     l167:	
  2205                           
  2206                           ;main.c: 123: else if (down == 0)
  2207  018D  1876               	btfsc	_down/(0+8),_down& (0+7)
  2208  018E  2993               	goto	l162
  2209                           
  2210                           ;main.c: 124: intersection_Orientation = 2;
  2211  018F  3002               	movlw	2
  2212  0190                     L1:	
  2213  0190  00DD               	movwf	??_PathTo
  2214  0191  085D               	movf	??_PathTo,w
  2215  0192  00B2               	movwf	_intersection_Orientation
  2216  0193                     l162:	
  2217                           
  2218                           ;main.c: 125: }
  2219                           ;main.c: 132: if ((x_path == x_target) && (y_path == y_target)){
  2220  0193  083B               	movf	_x_path,w
  2221  0194  0664               	xorwf	PathTo@x_target,w
  2222  0195  1D03               	skipz
  2223  0196  2A91               	goto	l2431
  2224  0197  083F               	movf	_y_path,w
  2225  0198  065C               	xorwf	PathTo@y_target,w
  2226  0199  1D03               	skipz
  2227  019A  2A91               	goto	l2431
  2228                           
  2229                           ;main.c: 134: if(pathCount < pathCountShortest){
  2230  019B  0857               	movf	_pathCountShortest,w
  2231  019C  0235               	subwf	_pathCount,w
  2232  019D  1803               	skipnc
  2233  019E  2A49               	goto	l2403
  2234                           
  2235                           ;main.c: 135: pathCountShortest = pathCount;
  2236  019F  0835               	movf	_pathCount,w
  2237  01A0  00DD               	movwf	??_PathTo
  2238  01A1  085D               	movf	??_PathTo,w
  2239  01A2  00D7               	movwf	_pathCountShortest
  2240                           
  2241                           ;main.c: 136: for (r = 0; r <= 1; r++){
  2242  01A3  01F7               	clrf	_r
  2243  01A4                     L9:	
  2244  01A4  3002               	movlw	2
  2245  01A5  0277               	subwf	_r,w
  2246  01A6  1803               	btfsc	3,0
  2247  01A7  2A49               	goto	l2403
  2248                           
  2249                           ;main.c: 137: for (c = 0; c <= 15; c++){
  2250  01A8  01B1               	clrf	_c
  2251  01A9  3010               	movlw	16
  2252  01AA  0231               	subwf	_c,w
  2253  01AB  1803               	btfsc	3,0
  2254  01AC  29DB               	goto	l2389
  2255  01AD                     l2383:	
  2256                           
  2257                           ;main.c: 138: shortest_path[r][c] = path[r][c];
  2258  01AD  0877               	movf	_r,w
  2259  01AE  00DD               	movwf	??_PathTo
  2260  01AF  3004               	movlw	4
  2261  01B0                     u1645:	
  2262  01B0  1003               	clrc
  2263  01B1  0DDD               	rlf	??_PathTo,f
  2264  01B2  3EFF               	addlw	-1
  2265  01B3  1D03               	skipz
  2266  01B4  29B0               	goto	u1645
  2267  01B5  30A0               	movlw	(low (_path| 0))& (0+255)
  2268  01B6  075D               	addwf	??_PathTo,w
  2269  01B7  00DE               	movwf	??_PathTo+1
  2270  01B8  0831               	movf	_c,w
  2271  01B9  075E               	addwf	??_PathTo+1,w
  2272  01BA  00DF               	movwf	??_PathTo+2
  2273  01BB  085F               	movf	??_PathTo+2,w
  2274  01BC  0084               	movwf	4
  2275  01BD  1383               	bcf	3,7	;select IRP bank1
  2276  01BE  0800               	movf	0,w
  2277  01BF  00E0               	movwf	??_PathTo+3
  2278  01C0  0877               	movf	_r,w
  2279  01C1  00E1               	movwf	??_PathTo+4
  2280  01C2  3004               	movlw	4
  2281  01C3                     u1655:	
  2282  01C3  1003               	clrc
  2283  01C4  0DE1               	rlf	??_PathTo+4,f
  2284  01C5  3EFF               	addlw	-1
  2285  01C6  1D03               	skipz
  2286  01C7  29C3               	goto	u1655
  2287  01C8  3090               	movlw	(low (_shortest_path| (0+256)))& (0+255)
  2288  01C9  0761               	addwf	??_PathTo+4,w
  2289  01CA  00E2               	movwf	??_PathTo+5
  2290  01CB  0831               	movf	_c,w
  2291  01CC  0762               	addwf	??_PathTo+5,w
  2292  01CD  00E3               	movwf	??_PathTo+6
  2293  01CE  0863               	movf	??_PathTo+6,w
  2294  01CF  0084               	movwf	4
  2295  01D0  0860               	movf	??_PathTo+3,w
  2296  01D1  1783               	bsf	3,7	;select IRP bank3
  2297  01D2  0080               	movwf	0
  2298  01D3  3001               	movlw	1
  2299  01D4  00DD               	movwf	??_PathTo
  2300  01D5  085D               	movf	??_PathTo,w
  2301  01D6  07B1               	addwf	_c,f
  2302  01D7  3010               	movlw	16
  2303  01D8  0231               	subwf	_c,w
  2304  01D9  1C03               	skipc
  2305  01DA  29AD               	goto	l2383
  2306  01DB                     l2389:	
  2307  01DB  3001               	movlw	1
  2308  01DC  00DD               	movwf	??_PathTo
  2309  01DD  085D               	movf	??_PathTo,w
  2310  01DE  07F7               	addwf	_r,f
  2311  01DF  29A4               	goto	L9
  2312  01E0                     l2393:	
  2313                           ;main.c: 146: case 0: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 4);
  2314                           
  2315                           ;main.c: 139: }
  2316                           ;main.c: 140: }
  2317                           ;main.c: 141: }
  2318                           ;main.c: 145: switch(intersection_Orientation){
  2319                           
  2320  01E0  3005               	movlw	5
  2321  01E1  00DD               	movwf	??_PathTo
  2322  01E2  085D               	movf	??_PathTo,w
  2323  01E3  00F4               	movwf	___bmul@multiplicand
  2324  01E4  0879               	movf	_y_int,w
  2325  01E5  120A  118A  2618  120A  118A  	fcall	___bmul
  2326  01EA  3E42               	addlw	(low (_mazeGrid| 0))& (0+255)
  2327  01EB  0778               	addwf	_x_int,w
  2328  01EC  1283               	bcf	3,5	;RP0=0, select bank0
  2329  01ED  1303               	bcf	3,6	;RP1=0, select bank0
  2330  01EE  00DE               	movwf	??_PathTo+1
  2331  01EF  085E               	movf	??_PathTo+1,w
  2332  01F0  0084               	movwf	4
  2333  01F1  1383               	bcf	3,7	;select IRP bank0
  2334  01F2  0800               	movf	0,w
  2335  01F3  3E04               	addlw	4
  2336  01F4  2A33               	goto	L10
  2337  01F5                     l2395:	
  2338                           ;main.c: 148: case 1: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 2);
  2339                           
  2340                           ;main.c: 147: break;
  2341                           
  2342  01F5  3005               	movlw	5
  2343  01F6  00DD               	movwf	??_PathTo
  2344  01F7  085D               	movf	??_PathTo,w
  2345  01F8  00F4               	movwf	___bmul@multiplicand
  2346  01F9  0879               	movf	_y_int,w
  2347  01FA  120A  118A  2618  120A  118A  	fcall	___bmul
  2348  01FF  3E42               	addlw	(low (_mazeGrid| 0))& (0+255)
  2349  0200  0778               	addwf	_x_int,w
  2350  0201  1283               	bcf	3,5	;RP0=0, select bank0
  2351  0202  1303               	bcf	3,6	;RP1=0, select bank0
  2352  0203  00DE               	movwf	??_PathTo+1
  2353  0204  085E               	movf	??_PathTo+1,w
  2354  0205  0084               	movwf	4
  2355  0206  1383               	bcf	3,7	;select IRP bank0
  2356  0207  0800               	movf	0,w
  2357  0208  3E02               	addlw	2
  2358  0209  2A33               	goto	L10
  2359  020A                     l2397:	
  2360                           ;main.c: 150: case 2: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 1);
  2361                           
  2362                           ;main.c: 149: break;
  2363                           
  2364  020A  3005               	movlw	5
  2365  020B  00DD               	movwf	??_PathTo
  2366  020C  085D               	movf	??_PathTo,w
  2367  020D  00F4               	movwf	___bmul@multiplicand
  2368  020E  0879               	movf	_y_int,w
  2369  020F  120A  118A  2618  120A  118A  	fcall	___bmul
  2370  0214  3E42               	addlw	(low (_mazeGrid| 0))& (0+255)
  2371  0215  0778               	addwf	_x_int,w
  2372  0216  1283               	bcf	3,5	;RP0=0, select bank0
  2373  0217  1303               	bcf	3,6	;RP1=0, select bank0
  2374  0218  00DE               	movwf	??_PathTo+1
  2375  0219  085E               	movf	??_PathTo+1,w
  2376  021A  0084               	movwf	4
  2377  021B  1383               	bcf	3,7	;select IRP bank0
  2378  021C  0800               	movf	0,w
  2379  021D  3E01               	addlw	1
  2380  021E  2A33               	goto	L10
  2381  021F                     l2399:	
  2382                           ;main.c: 152: case 3: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 8);
  2383                           
  2384                           ;main.c: 151: break;
  2385                           
  2386  021F  3005               	movlw	5
  2387  0220  00DD               	movwf	??_PathTo
  2388  0221  085D               	movf	??_PathTo,w
  2389  0222  00F4               	movwf	___bmul@multiplicand
  2390  0223  0879               	movf	_y_int,w
  2391  0224  120A  118A  2618  120A  118A  	fcall	___bmul
  2392  0229  3E42               	addlw	(low (_mazeGrid| 0))& (0+255)
  2393  022A  0778               	addwf	_x_int,w
  2394  022B  1283               	bcf	3,5	;RP0=0, select bank0
  2395  022C  1303               	bcf	3,6	;RP1=0, select bank0
  2396  022D  00DE               	movwf	??_PathTo+1
  2397  022E  085E               	movf	??_PathTo+1,w
  2398  022F  0084               	movwf	4
  2399  0230  1383               	bcf	3,7	;select IRP bank0
  2400  0231  0800               	movf	0,w
  2401  0232  3E08               	addlw	8
  2402  0233                     L10:	
  2403  0233  00DF               	movwf	??_PathTo+2
  2404  0234  3005               	movlw	5
  2405  0235  00E0               	movwf	??_PathTo+3
  2406  0236  0860               	movf	??_PathTo+3,w
  2407  0237  00F4               	movwf	___bmul@multiplicand
  2408  0238  0879               	movf	_y_int,w
  2409  0239  120A  118A  2618  120A  118A  	fcall	___bmul
  2410  023E  3E42               	addlw	(low (_mazeGrid| 0))& (0+255)
  2411  023F  0778               	addwf	_x_int,w
  2412  0240  1283               	bcf	3,5	;RP0=0, select bank0
  2413  0241  1303               	bcf	3,6	;RP1=0, select bank0
  2414  0242  00E1               	movwf	??_PathTo+4
  2415  0243  0861               	movf	??_PathTo+4,w
  2416  0244  0084               	movwf	4
  2417  0245  085F               	movf	??_PathTo+2,w
  2418  0246  1383               	bcf	3,7	;select IRP bank0
  2419  0247  0080               	movwf	0
  2420                           
  2421                           ;main.c: 154: }
  2422                           
  2423                           ;main.c: 153: break;
  2424  0248  2A57               	goto	l2405
  2425  0249                     l2403:	
  2426  0249  0832               	movf	_intersection_Orientation,w
  2427                           
  2428                           ; Switch size 1, requested type "space"
  2429                           ; Number of cases is 4, Range of values is 0 to 3
  2430                           ; switch strategies available:
  2431                           ; Name         Instructions Cycles
  2432                           ; simple_byte           13     7 (average)
  2433                           ; direct_byte           20     8 (fixed)
  2434                           ; jumptable            260     6 (fixed)
  2435                           ;	Chosen strategy is simple_byte
  2436  024A  3A00               	xorlw	0	; case 0
  2437  024B  1903               	skipnz
  2438  024C  29E0               	goto	l2393
  2439  024D  3A01               	xorlw	1	; case 1
  2440  024E  1903               	skipnz
  2441  024F  29F5               	goto	l2395
  2442  0250  3A03               	xorlw	3	; case 2
  2443  0251  1903               	skipnz
  2444  0252  2A0A               	goto	l2397
  2445  0253  3A01               	xorlw	1	; case 3
  2446  0254  1903               	skipnz
  2447  0255  2A1F               	goto	l2399
  2448  0256  2A57               	goto	l2405
  2449  0257                     l2405:	
  2450                           
  2451                           ;main.c: 157: x_path = x_origin;
  2452  0257  083A               	movf	_x_origin,w
  2453  0258  00DD               	movwf	??_PathTo
  2454  0259  085D               	movf	??_PathTo,w
  2455  025A  00BB               	movwf	_x_path
  2456                           
  2457                           ;main.c: 158: y_path = y_origin;
  2458  025B  083E               	movf	_y_origin,w
  2459  025C  00DD               	movwf	??_PathTo
  2460  025D  085D               	movf	??_PathTo,w
  2461  025E  00BF               	movwf	_y_path
  2462                           
  2463                           ;main.c: 159: orientation_path = orientation;
  2464  025F  0856               	movf	_orientation,w
  2465  0260  00DD               	movwf	??_PathTo
  2466  0261  085D               	movf	??_PathTo,w
  2467  0262  00B4               	movwf	_orientation_path
  2468                           
  2469                           ;main.c: 160: pathCount = 0;
  2470  0263  01B5               	clrf	_pathCount
  2471                           
  2472                           ;main.c: 161: reset_flag = 1;
  2473  0264  1576               	bsf	_reset_flag/(0+8),_reset_flag& (0+7)
  2474                           
  2475                           ;main.c: 163: for (r = 0; r <= 1; r++){
  2476  0265  01F7               	clrf	_r
  2477  0266  3002               	movlw	2
  2478  0267  0277               	subwf	_r,w
  2479  0268  1803               	btfsc	3,0
  2480  0269  2A91               	goto	l2431
  2481  026A                     l2415:	
  2482                           
  2483                           ;main.c: 164: for (c = 0; c <= 15; c++){
  2484  026A  01B1               	clrf	_c
  2485  026B  3010               	movlw	16
  2486  026C  0231               	subwf	_c,w
  2487  026D  1803               	btfsc	3,0
  2488  026E  2A89               	goto	l2427
  2489  026F                     l2421:	
  2490                           
  2491                           ;main.c: 165: path[r][c] = 0;
  2492  026F  0877               	movf	_r,w
  2493  0270  00DD               	movwf	??_PathTo
  2494  0271  3004               	movlw	4
  2495  0272                     u1705:	
  2496  0272  1003               	clrc
  2497  0273  0DDD               	rlf	??_PathTo,f
  2498  0274  3EFF               	addlw	-1
  2499  0275  1D03               	skipz
  2500  0276  2A72               	goto	u1705
  2501  0277  30A0               	movlw	(low (_path| 0))& (0+255)
  2502  0278  075D               	addwf	??_PathTo,w
  2503  0279  00DE               	movwf	??_PathTo+1
  2504  027A  0831               	movf	_c,w
  2505  027B  075E               	addwf	??_PathTo+1,w
  2506  027C  00DF               	movwf	??_PathTo+2
  2507  027D  085F               	movf	??_PathTo+2,w
  2508  027E  0084               	movwf	4
  2509  027F  1383               	bcf	3,7	;select IRP bank1
  2510  0280  0180               	clrf	0
  2511  0281  3001               	movlw	1
  2512  0282  00DD               	movwf	??_PathTo
  2513  0283  085D               	movf	??_PathTo,w
  2514  0284  07B1               	addwf	_c,f
  2515  0285  3010               	movlw	16
  2516  0286  0231               	subwf	_c,w
  2517  0287  1C03               	skipc
  2518  0288  2A6F               	goto	l2421
  2519  0289                     l2427:	
  2520  0289  3001               	movlw	1
  2521  028A  00DD               	movwf	??_PathTo
  2522  028B  085D               	movf	??_PathTo,w
  2523  028C  07F7               	addwf	_r,f
  2524  028D  3002               	movlw	2
  2525  028E  0277               	subwf	_r,w
  2526  028F  1C03               	skipc
  2527  0290  2A6A               	goto	l2415
  2528  0291                     l2431:	
  2529                           
  2530                           ;main.c: 166: }
  2531                           ;main.c: 167: }
  2532                           ;main.c: 168: }
  2533                           ;main.c: 174: if((sum == 4) || (pathCount >= 15)){
  2534  0291  3004               	movlw	4
  2535  0292  0665               	xorwf	PathTo@sum,w
  2536  0293  1903               	btfsc	3,2
  2537  0294  2B03               	goto	l2445
  2538  0295  300F               	movlw	15
  2539  0296  0235               	subwf	_pathCount,w
  2540  0297  1803               	btfsc	3,0
  2541  0298  2B03               	goto	l2445
  2542  0299  2B4B               	goto	l186
  2543  029A                     l2435:	
  2544                           ;main.c: 178: case 0: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 4);
  2545                           
  2546                           ;main.c: 177: switch(intersection_Orientation){
  2547                           
  2548  029A  3005               	movlw	5
  2549  029B  00DD               	movwf	??_PathTo
  2550  029C  085D               	movf	??_PathTo,w
  2551  029D  00F4               	movwf	___bmul@multiplicand
  2552  029E  0879               	movf	_y_int,w
  2553  029F  120A  118A  2618  120A  118A  	fcall	___bmul
  2554  02A4  3E42               	addlw	(low (_mazeGrid| 0))& (0+255)
  2555  02A5  0778               	addwf	_x_int,w
  2556  02A6  1283               	bcf	3,5	;RP0=0, select bank0
  2557  02A7  1303               	bcf	3,6	;RP1=0, select bank0
  2558  02A8  00DE               	movwf	??_PathTo+1
  2559  02A9  085E               	movf	??_PathTo+1,w
  2560  02AA  0084               	movwf	4
  2561  02AB  1383               	bcf	3,7	;select IRP bank0
  2562  02AC  0800               	movf	0,w
  2563  02AD  3E04               	addlw	4
  2564  02AE  2AED               	goto	L11
  2565  02AF                     l2437:	
  2566                           ;main.c: 180: case 1: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 2);
  2567                           
  2568                           ;main.c: 179: break;
  2569                           
  2570  02AF  3005               	movlw	5
  2571  02B0  00DD               	movwf	??_PathTo
  2572  02B1  085D               	movf	??_PathTo,w
  2573  02B2  00F4               	movwf	___bmul@multiplicand
  2574  02B3  0879               	movf	_y_int,w
  2575  02B4  120A  118A  2618  120A  118A  	fcall	___bmul
  2576  02B9  3E42               	addlw	(low (_mazeGrid| 0))& (0+255)
  2577  02BA  0778               	addwf	_x_int,w
  2578  02BB  1283               	bcf	3,5	;RP0=0, select bank0
  2579  02BC  1303               	bcf	3,6	;RP1=0, select bank0
  2580  02BD  00DE               	movwf	??_PathTo+1
  2581  02BE  085E               	movf	??_PathTo+1,w
  2582  02BF  0084               	movwf	4
  2583  02C0  1383               	bcf	3,7	;select IRP bank0
  2584  02C1  0800               	movf	0,w
  2585  02C2  3E02               	addlw	2
  2586  02C3  2AED               	goto	L11
  2587  02C4                     l2439:	
  2588                           ;main.c: 182: case 2: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 1);
  2589                           
  2590                           ;main.c: 181: break;
  2591                           
  2592  02C4  3005               	movlw	5
  2593  02C5  00DD               	movwf	??_PathTo
  2594  02C6  085D               	movf	??_PathTo,w
  2595  02C7  00F4               	movwf	___bmul@multiplicand
  2596  02C8  0879               	movf	_y_int,w
  2597  02C9  120A  118A  2618  120A  118A  	fcall	___bmul
  2598  02CE  3E42               	addlw	(low (_mazeGrid| 0))& (0+255)
  2599  02CF  0778               	addwf	_x_int,w
  2600  02D0  1283               	bcf	3,5	;RP0=0, select bank0
  2601  02D1  1303               	bcf	3,6	;RP1=0, select bank0
  2602  02D2  00DE               	movwf	??_PathTo+1
  2603  02D3  085E               	movf	??_PathTo+1,w
  2604  02D4  0084               	movwf	4
  2605  02D5  1383               	bcf	3,7	;select IRP bank0
  2606  02D6  0800               	movf	0,w
  2607  02D7  3E01               	addlw	1
  2608  02D8  2AED               	goto	L11
  2609  02D9                     l2441:	
  2610                           ;main.c: 184: case 3: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 8);
  2611                           
  2612                           ;main.c: 183: break;
  2613                           
  2614  02D9  3005               	movlw	5
  2615  02DA  00DD               	movwf	??_PathTo
  2616  02DB  085D               	movf	??_PathTo,w
  2617  02DC  00F4               	movwf	___bmul@multiplicand
  2618  02DD  0879               	movf	_y_int,w
  2619  02DE  120A  118A  2618  120A  118A  	fcall	___bmul
  2620  02E3  3E42               	addlw	(low (_mazeGrid| 0))& (0+255)
  2621  02E4  0778               	addwf	_x_int,w
  2622  02E5  1283               	bcf	3,5	;RP0=0, select bank0
  2623  02E6  1303               	bcf	3,6	;RP1=0, select bank0
  2624  02E7  00DE               	movwf	??_PathTo+1
  2625  02E8  085E               	movf	??_PathTo+1,w
  2626  02E9  0084               	movwf	4
  2627  02EA  1383               	bcf	3,7	;select IRP bank0
  2628  02EB  0800               	movf	0,w
  2629  02EC  3E08               	addlw	8
  2630  02ED                     L11:	
  2631  02ED  00DF               	movwf	??_PathTo+2
  2632  02EE  3005               	movlw	5
  2633  02EF  00E0               	movwf	??_PathTo+3
  2634  02F0  0860               	movf	??_PathTo+3,w
  2635  02F1  00F4               	movwf	___bmul@multiplicand
  2636  02F2  0879               	movf	_y_int,w
  2637  02F3  120A  118A  2618  120A  118A  	fcall	___bmul
  2638  02F8  3E42               	addlw	(low (_mazeGrid| 0))& (0+255)
  2639  02F9  0778               	addwf	_x_int,w
  2640  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  2641  02FB  1303               	bcf	3,6	;RP1=0, select bank0
  2642  02FC  00E1               	movwf	??_PathTo+4
  2643  02FD  0861               	movf	??_PathTo+4,w
  2644  02FE  0084               	movwf	4
  2645  02FF  085F               	movf	??_PathTo+2,w
  2646  0300  1383               	bcf	3,7	;select IRP bank0
  2647  0301  0080               	movwf	0
  2648                           
  2649                           ;main.c: 186: }
  2650                           
  2651                           ;main.c: 185: break;
  2652  0302  2B11               	goto	l2447
  2653  0303                     l2445:	
  2654  0303  0832               	movf	_intersection_Orientation,w
  2655                           
  2656                           ; Switch size 1, requested type "space"
  2657                           ; Number of cases is 4, Range of values is 0 to 3
  2658                           ; switch strategies available:
  2659                           ; Name         Instructions Cycles
  2660                           ; simple_byte           13     7 (average)
  2661                           ; direct_byte           20     8 (fixed)
  2662                           ; jumptable            260     6 (fixed)
  2663                           ;	Chosen strategy is simple_byte
  2664  0304  3A00               	xorlw	0	; case 0
  2665  0305  1903               	skipnz
  2666  0306  2A9A               	goto	l2435
  2667  0307  3A01               	xorlw	1	; case 1
  2668  0308  1903               	skipnz
  2669  0309  2AAF               	goto	l2437
  2670  030A  3A03               	xorlw	3	; case 2
  2671  030B  1903               	skipnz
  2672  030C  2AC4               	goto	l2439
  2673  030D  3A01               	xorlw	1	; case 3
  2674  030E  1903               	skipnz
  2675  030F  2AD9               	goto	l2441
  2676  0310  2B11               	goto	l2447
  2677  0311                     l2447:	
  2678                           
  2679                           ;main.c: 189: x_path = x_origin;
  2680  0311  083A               	movf	_x_origin,w
  2681  0312  00DD               	movwf	??_PathTo
  2682  0313  085D               	movf	??_PathTo,w
  2683  0314  00BB               	movwf	_x_path
  2684                           
  2685                           ;main.c: 190: y_path = y_origin;
  2686  0315  083E               	movf	_y_origin,w
  2687  0316  00DD               	movwf	??_PathTo
  2688  0317  085D               	movf	??_PathTo,w
  2689  0318  00BF               	movwf	_y_path
  2690                           
  2691                           ;main.c: 191: orientation_path = orientation;
  2692  0319  0856               	movf	_orientation,w
  2693  031A  00DD               	movwf	??_PathTo
  2694  031B  085D               	movf	??_PathTo,w
  2695  031C  00B4               	movwf	_orientation_path
  2696                           
  2697                           ;main.c: 192: pathCount = 0;
  2698  031D  01B5               	clrf	_pathCount
  2699                           
  2700                           ;main.c: 193: reset_flag = 1;
  2701  031E  1576               	bsf	_reset_flag/(0+8),_reset_flag& (0+7)
  2702                           
  2703                           ;main.c: 195: for (r = 0; r <= 1; r++){
  2704  031F  01F7               	clrf	_r
  2705  0320  3002               	movlw	2
  2706  0321  0277               	subwf	_r,w
  2707  0322  1803               	btfsc	3,0
  2708  0323  2B4B               	goto	l186
  2709  0324                     l2457:	
  2710                           
  2711                           ;main.c: 196: for (c = 0; c <= 15; c++){
  2712  0324  01B1               	clrf	_c
  2713  0325  3010               	movlw	16
  2714  0326  0231               	subwf	_c,w
  2715  0327  1803               	btfsc	3,0
  2716  0328  2B43               	goto	l2469
  2717  0329                     l2463:	
  2718                           
  2719                           ;main.c: 197: path[r][c] = 0;
  2720  0329  0877               	movf	_r,w
  2721  032A  00DD               	movwf	??_PathTo
  2722  032B  3004               	movlw	4
  2723  032C                     u1775:	
  2724  032C  1003               	clrc
  2725  032D  0DDD               	rlf	??_PathTo,f
  2726  032E  3EFF               	addlw	-1
  2727  032F  1D03               	skipz
  2728  0330  2B2C               	goto	u1775
  2729  0331  30A0               	movlw	(low (_path| 0))& (0+255)
  2730  0332  075D               	addwf	??_PathTo,w
  2731  0333  00DE               	movwf	??_PathTo+1
  2732  0334  0831               	movf	_c,w
  2733  0335  075E               	addwf	??_PathTo+1,w
  2734  0336  00DF               	movwf	??_PathTo+2
  2735  0337  085F               	movf	??_PathTo+2,w
  2736  0338  0084               	movwf	4
  2737  0339  1383               	bcf	3,7	;select IRP bank1
  2738  033A  0180               	clrf	0
  2739  033B  3001               	movlw	1
  2740  033C  00DD               	movwf	??_PathTo
  2741  033D  085D               	movf	??_PathTo,w
  2742  033E  07B1               	addwf	_c,f
  2743  033F  3010               	movlw	16
  2744  0340  0231               	subwf	_c,w
  2745  0341  1C03               	skipc
  2746  0342  2B29               	goto	l2463
  2747  0343                     l2469:	
  2748  0343  3001               	movlw	1
  2749  0344  00DD               	movwf	??_PathTo
  2750  0345  085D               	movf	??_PathTo,w
  2751  0346  07F7               	addwf	_r,f
  2752  0347  3002               	movlw	2
  2753  0348  0277               	subwf	_r,w
  2754  0349  1C03               	skipc
  2755  034A  2B24               	goto	l2457
  2756  034B                     l186:	
  2757                           
  2758                           ;main.c: 198: }
  2759                           ;main.c: 199: }
  2760                           ;main.c: 200: }
  2761                           ;main.c: 208: if (reset_flag != 1){
  2762  034B  1976               	btfsc	_reset_flag/(0+8),_reset_flag& (0+7)
  2763  034C  2B70               	goto	l199
  2764                           
  2765                           ;main.c: 210: if(left == 0){
  2766  034D  18F6               	btfsc	_left/(0+8),_left& (0+7)
  2767  034E  2B53               	goto	l200
  2768                           
  2769                           ;main.c: 211: x_path--;
  2770  034F  3001               	movlw	1
  2771  0350  02BB               	subwf	_x_path,f
  2772                           
  2773                           ;main.c: 212: orientation_path = 3;
  2774  0351  3003               	movlw	3
  2775  0352  2B69               	goto	L13
  2776  0353                     l200:	
  2777                           ;main.c: 214: }
  2778                           
  2779                           ;main.c: 213: pathCount++;
  2780                           
  2781                           
  2782                           ;main.c: 215: else if(up == 0){
  2783  0353  1A76               	btfsc	_up/(0+8),_up& (0+7)
  2784  0354  2B59               	goto	l202
  2785                           
  2786                           ;main.c: 216: y_path--;
  2787  0355  3001               	movlw	1
  2788  0356  02BF               	subwf	_y_path,f
  2789                           
  2790                           ;main.c: 217: orientation_path = 0;
  2791  0357  01B4               	clrf	_orientation_path
  2792  0358  2B6C               	goto	l2495
  2793  0359                     l202:	
  2794                           ;main.c: 219: }
  2795                           
  2796                           ;main.c: 218: pathCount++;
  2797                           
  2798                           
  2799                           ;main.c: 220: else if(right == 0){
  2800  0359  19F6               	btfsc	_right/(0+8),_right& (0+7)
  2801  035A  2B62               	goto	l204
  2802                           
  2803                           ;main.c: 221: x_path++;
  2804  035B  3001               	movlw	1
  2805  035C  00DD               	movwf	??_PathTo
  2806  035D  085D               	movf	??_PathTo,w
  2807  035E  07BB               	addwf	_x_path,f
  2808                           
  2809                           ;main.c: 222: orientation_path = 1;
  2810  035F  01B4               	clrf	_orientation_path
  2811  0360  0AB4               	incf	_orientation_path,f
  2812  0361  2B6C               	goto	l2495
  2813  0362                     l204:	
  2814                           ;main.c: 224: }
  2815                           
  2816                           ;main.c: 223: pathCount++;
  2817                           
  2818                           
  2819                           ;main.c: 225: else if(down == 0){
  2820  0362  1876               	btfsc	_down/(0+8),_down& (0+7)
  2821  0363  2B70               	goto	l199
  2822                           
  2823                           ;main.c: 226: y_path++;
  2824  0364  3001               	movlw	1
  2825  0365  00DD               	movwf	??_PathTo
  2826  0366  085D               	movf	??_PathTo,w
  2827  0367  07BF               	addwf	_y_path,f
  2828                           
  2829                           ;main.c: 227: orientation_path = 2;
  2830  0368  3002               	movlw	2
  2831  0369                     L13:	
  2832  0369  00DD               	movwf	??_PathTo
  2833  036A  085D               	movf	??_PathTo,w
  2834  036B  00B4               	movwf	_orientation_path
  2835  036C                     l2495:	
  2836                           
  2837                           ;main.c: 228: pathCount++;
  2838  036C  3001               	movlw	1
  2839  036D  00DD               	movwf	??_PathTo
  2840  036E  085D               	movf	??_PathTo,w
  2841  036F  07B5               	addwf	_pathCount,f
  2842  0370                     l199:	
  2843  0370  3001               	movlw	1
  2844  0371  07E6               	addwf	PathTo@loop,f
  2845  0372  1803               	skipnc
  2846  0373  0AE7               	incf	PathTo@loop+1,f
  2847  0374  3000               	movlw	0
  2848  0375  07E7               	addwf	PathTo@loop+1,f
  2849  0376  28C8               	goto	L12
  2850  0377                     __end_of_PathTo:	
  2851                           
  2852                           	psect	text7
  2853  054C                     __ptext7:	
  2854 ;; *************** function _lcdWriteString *****************
  2855 ;; Defined at:
  2856 ;;		line 32 in file "LCD.c"
  2857 ;; Parameters:    Size  Location     Type
  2858 ;;  s               1    wreg     PTR unsigned char 
  2859 ;;		 -> STR_3(3), STR_2(3), STR_1(11), 
  2860 ;; Auto vars:     Size  Location     Type
  2861 ;;  s               1    2[BANK0 ] PTR unsigned char 
  2862 ;;		 -> STR_3(3), STR_2(3), STR_1(11), 
  2863 ;; Return value:  Size  Location     Type
  2864 ;;                  1    wreg      void 
  2865 ;; Registers used:
  2866 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2867 ;; Tracked objects:
  2868 ;;		On entry : 0/0
  2869 ;;		On exit  : 0/0
  2870 ;;		Unchanged: 0/0
  2871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2872 ;;      Params:         0       0       0       0       0
  2873 ;;      Locals:         0       1       0       0       0
  2874 ;;      Temps:          0       1       0       0       0
  2875 ;;      Totals:         0       2       0       0       0
  2876 ;;Total ram usage:        2 bytes
  2877 ;; Hardware stack levels used:    1
  2878 ;; Hardware stack levels required when called:    2
  2879 ;; This function calls:
  2880 ;;		_lcdWriteData
  2881 ;; This function is called by:
  2882 ;;		_PathTo
  2883 ;;		_main
  2884 ;; This function uses a non-reentrant model
  2885 ;;
  2886                           
  2887                           
  2888                           ;psect for function _lcdWriteString
  2889  054C                     _lcdWriteString:	
  2890                           
  2891                           ;incstack = 0
  2892                           ; Regs used in _lcdWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2893                           ;lcdWriteString@s stored from wreg
  2894  054C  1283               	bcf	3,5	;RP0=0, select bank0
  2895  054D  1303               	bcf	3,6	;RP1=0, select bank0
  2896  054E  00DB               	movwf	lcdWriteString@s
  2897  054F                     l2285:	
  2898                           ;LCD.c: 34: while(*s) lcdWriteData(*s++);
  2899                           
  2900  054F  085B               	movf	lcdWriteString@s,w
  2901  0550  0084               	movwf	4
  2902  0551  120A  118A  259C  120A  118A  	fcall	stringdir
  2903  0556  3A00               	xorlw	0
  2904  0557  1903               	btfsc	3,2
  2905  0558  0008               	return
  2906  0559  085B               	movf	lcdWriteString@s,w
  2907  055A  0084               	movwf	4
  2908  055B  120A  118A  259C  120A  118A  	fcall	stringdir
  2909  0560  120A  118A  2605  120A  118A  	fcall	_lcdWriteData
  2910  0565  3001               	movlw	1
  2911  0566  1283               	bcf	3,5	;RP0=0, select bank0
  2912  0567  1303               	bcf	3,6	;RP1=0, select bank0
  2913  0568  00DA               	movwf	??_lcdWriteString
  2914  0569  085A               	movf	??_lcdWriteString,w
  2915  056A  07DB               	addwf	lcdWriteString@s,f
  2916  056B  2D4F               	goto	l2285
  2917  056C                     __end_of_lcdWriteString:	
  2918                           
  2919                           	psect	text8
  2920  0605                     __ptext8:	
  2921 ;; *************** function _lcdWriteData *****************
  2922 ;; Defined at:
  2923 ;;		line 16 in file "LCD.c"
  2924 ;; Parameters:    Size  Location     Type
  2925 ;;  databyte        1    wreg     unsigned char 
  2926 ;; Auto vars:     Size  Location     Type
  2927 ;;  databyte        1    0[BANK0 ] unsigned char 
  2928 ;; Return value:  Size  Location     Type
  2929 ;;                  1    wreg      void 
  2930 ;; Registers used:
  2931 ;;		wreg
  2932 ;; Tracked objects:
  2933 ;;		On entry : 0/0
  2934 ;;		On exit  : 0/0
  2935 ;;		Unchanged: 0/0
  2936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2937 ;;      Params:         0       0       0       0       0
  2938 ;;      Locals:         0       1       0       0       0
  2939 ;;      Temps:          2       0       0       0       0
  2940 ;;      Totals:         2       1       0       0       0
  2941 ;;Total ram usage:        3 bytes
  2942 ;; Hardware stack levels used:    1
  2943 ;; Hardware stack levels required when called:    1
  2944 ;; This function calls:
  2945 ;;		Nothing
  2946 ;; This function is called by:
  2947 ;;		_main
  2948 ;;		_lcdWriteString
  2949 ;;		_lcdWriteToDigitBCD
  2950 ;; This function uses a non-reentrant model
  2951 ;;
  2952                           
  2953                           
  2954                           ;psect for function _lcdWriteData
  2955  0605                     _lcdWriteData:	
  2956                           
  2957                           ;incstack = 0
  2958                           ; Regs used in _lcdWriteData: [wreg]
  2959                           ;lcdWriteData@databyte stored from wreg
  2960  0605  1283               	bcf	3,5	;RP0=0, select bank0
  2961  0606  1303               	bcf	3,6	;RP1=0, select bank0
  2962  0607  00D9               	movwf	lcdWriteData@databyte
  2963                           
  2964                           ;LCD.c: 17: RE2 = 0;
  2965  0608  1109               	bcf	9,2	;volatile
  2966                           
  2967                           ;LCD.c: 18: RE1 = 0;
  2968  0609  1089               	bcf	9,1	;volatile
  2969                           
  2970                           ;LCD.c: 19: RE0 = 1;
  2971  060A  1409               	bsf	9,0	;volatile
  2972                           
  2973                           ;LCD.c: 20: PORTD = databyte;
  2974  060B  0859               	movf	lcdWriteData@databyte,w
  2975  060C  0088               	movwf	8	;volatile
  2976                           
  2977                           ;LCD.c: 21: RE2 = 1;
  2978  060D  1509               	bsf	9,2	;volatile
  2979                           
  2980                           ;LCD.c: 22: RE2 = 0;
  2981  060E  1109               	bcf	9,2	;volatile
  2982                           
  2983                           ;LCD.c: 23: _delay((unsigned long)((1)*(20000000/4000.0)));
  2984  060F  3007               	movlw	7
  2985  0610  00F5               	movwf	??_lcdWriteData+1
  2986  0611  307D               	movlw	125
  2987  0612  00F4               	movwf	??_lcdWriteData
  2988  0613                     u1987:	
  2989  0613  0BF4               	decfsz	??_lcdWriteData,f
  2990  0614  2E13               	goto	u1987
  2991  0615  0BF5               	decfsz	??_lcdWriteData+1,f
  2992  0616  2E13               	goto	u1987
  2993  0617  0008               	return
  2994  0618                     __end_of_lcdWriteData:	
  2995                           
  2996                           	psect	text9
  2997  064B                     __ptext9:	
  2998 ;; *************** function _lcdSetCursor *****************
  2999 ;; Defined at:
  3000 ;;		line 27 in file "LCD.c"
  3001 ;; Parameters:    Size  Location     Type
  3002 ;;  address         1    wreg     unsigned char 
  3003 ;; Auto vars:     Size  Location     Type
  3004 ;;  address         1    1[BANK0 ] unsigned char 
  3005 ;; Return value:  Size  Location     Type
  3006 ;;                  1    wreg      void 
  3007 ;; Registers used:
  3008 ;;		wreg, status,2, status,0, pclath, cstack
  3009 ;; Tracked objects:
  3010 ;;		On entry : 0/0
  3011 ;;		On exit  : 0/0
  3012 ;;		Unchanged: 0/0
  3013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3014 ;;      Params:         0       0       0       0       0
  3015 ;;      Locals:         0       1       0       0       0
  3016 ;;      Temps:          0       0       0       0       0
  3017 ;;      Totals:         0       1       0       0       0
  3018 ;;Total ram usage:        1 bytes
  3019 ;; Hardware stack levels used:    1
  3020 ;; Hardware stack levels required when called:    2
  3021 ;; This function calls:
  3022 ;;		_lcdWriteControl
  3023 ;; This function is called by:
  3024 ;;		_PathTo
  3025 ;;		_main
  3026 ;;		_ADCMain
  3027 ;; This function uses a non-reentrant model
  3028 ;;
  3029                           
  3030                           
  3031                           ;psect for function _lcdSetCursor
  3032  064B                     _lcdSetCursor:	
  3033                           
  3034                           ;incstack = 0
  3035                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  3036                           ;lcdSetCursor@address stored from wreg
  3037  064B  1283               	bcf	3,5	;RP0=0, select bank0
  3038  064C  1303               	bcf	3,6	;RP1=0, select bank0
  3039  064D  00DA               	movwf	lcdSetCursor@address
  3040                           
  3041                           ;LCD.c: 28: address |= 0b10000000;
  3042  064E  17DA               	bsf	lcdSetCursor@address,7
  3043                           
  3044                           ;LCD.c: 29: lcdWriteControl(address);
  3045  064F  085A               	movf	lcdSetCursor@address,w
  3046  0650  120A  118A  25F1   	fcall	_lcdWriteControl
  3047  0653  0008               	return
  3048  0654                     __end_of_lcdSetCursor:	
  3049                           
  3050                           	psect	text10
  3051  05F1                     __ptext10:	
  3052 ;; *************** function _lcdWriteControl *****************
  3053 ;; Defined at:
  3054 ;;		line 5 in file "LCD.c"
  3055 ;; Parameters:    Size  Location     Type
  3056 ;;  databyte        1    wreg     unsigned char 
  3057 ;; Auto vars:     Size  Location     Type
  3058 ;;  databyte        1    0[BANK0 ] unsigned char 
  3059 ;; Return value:  Size  Location     Type
  3060 ;;                  1    wreg      void 
  3061 ;; Registers used:
  3062 ;;		wreg
  3063 ;; Tracked objects:
  3064 ;;		On entry : 0/0
  3065 ;;		On exit  : 0/0
  3066 ;;		Unchanged: 0/0
  3067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3068 ;;      Params:         0       0       0       0       0
  3069 ;;      Locals:         0       1       0       0       0
  3070 ;;      Temps:          2       0       0       0       0
  3071 ;;      Totals:         2       1       0       0       0
  3072 ;;Total ram usage:        3 bytes
  3073 ;; Hardware stack levels used:    1
  3074 ;; Hardware stack levels required when called:    1
  3075 ;; This function calls:
  3076 ;;		Nothing
  3077 ;; This function is called by:
  3078 ;;		_main
  3079 ;;		_lcdSetCursor
  3080 ;;		_setupLCD
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084                           
  3085                           ;psect for function _lcdWriteControl
  3086  05F1                     _lcdWriteControl:	
  3087                           
  3088                           ;incstack = 0
  3089                           ; Regs used in _lcdWriteControl: [wreg]
  3090                           ;lcdWriteControl@databyte stored from wreg
  3091  05F1  1283               	bcf	3,5	;RP0=0, select bank0
  3092  05F2  1303               	bcf	3,6	;RP1=0, select bank0
  3093  05F3  00D9               	movwf	lcdWriteControl@databyte
  3094                           
  3095                           ;LCD.c: 6: RE2 = 0;
  3096  05F4  1109               	bcf	9,2	;volatile
  3097                           
  3098                           ;LCD.c: 7: RE1 = 0;
  3099  05F5  1089               	bcf	9,1	;volatile
  3100                           
  3101                           ;LCD.c: 8: RE0 = 0;
  3102  05F6  1009               	bcf	9,0	;volatile
  3103                           
  3104                           ;LCD.c: 9: PORTD = databyte;
  3105  05F7  0859               	movf	lcdWriteControl@databyte,w
  3106  05F8  0088               	movwf	8	;volatile
  3107                           
  3108                           ;LCD.c: 10: RE2 = 1;
  3109  05F9  1509               	bsf	9,2	;volatile
  3110                           
  3111                           ;LCD.c: 11: RE2 = 0;
  3112  05FA  1109               	bcf	9,2	;volatile
  3113                           
  3114                           ;LCD.c: 12: _delay((unsigned long)((2)*(20000000/4000.0)));
  3115  05FB  300D               	movlw	13
  3116  05FC  00F5               	movwf	??_lcdWriteControl+1
  3117  05FD  30FB               	movlw	251
  3118  05FE  00F4               	movwf	??_lcdWriteControl
  3119  05FF                     u1997:	
  3120  05FF  0BF4               	decfsz	??_lcdWriteControl,f
  3121  0600  2DFF               	goto	u1997
  3122  0601  0BF5               	decfsz	??_lcdWriteControl+1,f
  3123  0602  2DFF               	goto	u1997
  3124  0603  2E04               	nop2
  3125  0604  0008               	return
  3126  0605                     __end_of_lcdWriteControl:	
  3127                           
  3128                           	psect	text11
  3129  0618                     __ptext11:	
  3130 ;; *************** function ___bmul *****************
  3131 ;; Defined at:
  3132 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
  3133 ;; Parameters:    Size  Location     Type
  3134 ;;  multiplier      1    wreg     unsigned char 
  3135 ;;  multiplicand    1    4[COMMON] unsigned char 
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;  multiplier      1    1[BANK0 ] unsigned char 
  3138 ;;  product         1    0[BANK0 ] unsigned char 
  3139 ;; Return value:  Size  Location     Type
  3140 ;;                  1    wreg      unsigned char 
  3141 ;; Registers used:
  3142 ;;		wreg, status,2, status,0
  3143 ;; Tracked objects:
  3144 ;;		On entry : 0/0
  3145 ;;		On exit  : 0/0
  3146 ;;		Unchanged: 0/0
  3147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3148 ;;      Params:         1       0       0       0       0
  3149 ;;      Locals:         0       2       0       0       0
  3150 ;;      Temps:          1       0       0       0       0
  3151 ;;      Totals:         2       2       0       0       0
  3152 ;;Total ram usage:        4 bytes
  3153 ;; Hardware stack levels used:    1
  3154 ;; Hardware stack levels required when called:    1
  3155 ;; This function calls:
  3156 ;;		Nothing
  3157 ;; This function is called by:
  3158 ;;		_PathTo
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162                           
  3163                           ;psect for function ___bmul
  3164  0618                     ___bmul:	
  3165                           
  3166                           ;incstack = 0
  3167                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3168                           ;___bmul@multiplier stored from wreg
  3169  0618  1283               	bcf	3,5	;RP0=0, select bank0
  3170  0619  1303               	bcf	3,6	;RP1=0, select bank0
  3171  061A  00DA               	movwf	___bmul@multiplier
  3172  061B  01D9               	clrf	___bmul@product
  3173  061C                     l2289:	
  3174  061C  1C5A               	btfss	___bmul@multiplier,0
  3175  061D  2E22               	goto	l2293
  3176  061E  0874               	movf	___bmul@multiplicand,w
  3177  061F  00F5               	movwf	??___bmul
  3178  0620  0875               	movf	??___bmul,w
  3179  0621  07D9               	addwf	___bmul@product,f
  3180  0622                     l2293:	
  3181  0622  1003               	clrc
  3182  0623  0DF4               	rlf	___bmul@multiplicand,f
  3183  0624  1003               	clrc
  3184  0625  0CDA               	rrf	___bmul@multiplier,f
  3185  0626  085A               	movf	___bmul@multiplier,w
  3186  0627  1D03               	btfss	3,2
  3187  0628  2E1C               	goto	l2289
  3188  0629  0859               	movf	___bmul@product,w
  3189  062A  0008               	return
  3190  062B                     __end_of___bmul:	
  3191                           
  3192                           	psect	text12
  3193  05B3                     __ptext12:	
  3194 ;; *************** function _isr *****************
  3195 ;; Defined at:
  3196 ;;		line 238 in file "main.c"
  3197 ;; Parameters:    Size  Location     Type
  3198 ;;		None
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;		None
  3201 ;; Return value:  Size  Location     Type
  3202 ;;                  1    wreg      void 
  3203 ;; Registers used:
  3204 ;;		wreg
  3205 ;; Tracked objects:
  3206 ;;		On entry : 0/0
  3207 ;;		On exit  : 0/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3210 ;;      Params:         0       0       0       0       0
  3211 ;;      Locals:         0       0       0       0       0
  3212 ;;      Temps:          4       0       0       0       0
  3213 ;;      Totals:         4       0       0       0       0
  3214 ;;Total ram usage:        4 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; This function calls:
  3217 ;;		Nothing
  3218 ;; This function is called by:
  3219 ;;		Interrupt level 1
  3220 ;; This function uses a non-reentrant model
  3221 ;;
  3222                           
  3223                           
  3224                           ;psect for function _isr
  3225  05B3                     _isr:	
  3226                           
  3227                           ;main.c: 239: if(TMR0IF){
  3228  05B3  1D0B               	btfss	11,2	;volatile
  3229  05B4  2DBE               	goto	i1l211
  3230                           
  3231                           ;main.c: 240: TMR0IF = 0;
  3232  05B5  110B               	bcf	11,2	;volatile
  3233                           
  3234                           ;main.c: 241: TMR0 = 100;
  3235  05B6  3064               	movlw	100
  3236  05B7  0081               	movwf	1	;volatile
  3237                           
  3238                           ;main.c: 242: time_count++;
  3239  05B8  3001               	movlw	1
  3240  05B9  07AA               	addwf	_time_count,f	;volatile
  3241  05BA  1803               	skipnc
  3242  05BB  0AAB               	incf	_time_count+1,f	;volatile
  3243  05BC  3000               	movlw	0
  3244  05BD  07AB               	addwf	_time_count+1,f	;volatile
  3245  05BE                     i1l211:	
  3246  05BE  0873               	movf	??_isr+3,w
  3247  05BF  00FF               	movwf	127
  3248  05C0  0872               	movf	??_isr+2,w
  3249  05C1  008A               	movwf	10
  3250  05C2  0871               	movf	??_isr+1,w
  3251  05C3  0084               	movwf	4
  3252  05C4  0E70               	swapf	??_isr^(0+-128),w
  3253  05C5  0083               	movwf	3
  3254  05C6  0EFE               	swapf	126,f
  3255  05C7  0E7E               	swapf	126,w
  3256  05C8  0009               	retfie
  3257  05C9                     __end_of_isr:	
  3258  007E                     btemp	set	126	;btemp
  3259  007E                     wtemp	set	126
  3260  007E                     wtemp0	set	126
  3261  0080                     wtemp1	set	128
  3262  0082                     wtemp2	set	130
  3263  0084                     wtemp3	set	132
  3264  0086                     wtemp4	set	134
  3265  0088                     wtemp5	set	136
  3266  007F                     wtemp6	set	127
  3267  007E                     ttemp	set	126
  3268  007E                     ttemp0	set	126
  3269  0081                     ttemp1	set	129
  3270  0084                     ttemp2	set	132
  3271  0087                     ttemp3	set	135
  3272  007F                     ttemp4	set	127
  3273  007E                     ltemp	set	126
  3274  007E                     ltemp0	set	126
  3275  0082                     ltemp1	set	130
  3276  0086                     ltemp2	set	134
  3277  0080                     ltemp3	set	128
  3278                           
  3279                           	psect	intentry
  3280  0004                     __pintentry:	
  3281                           ;incstack = 0
  3282                           ; Regs used in _isr: [wreg]
  3283                           
  3284  0004                     interrupt_function:	
  3285  007E                     saved_w	set	btemp
  3286  0004  00FE               	movwf	btemp
  3287  0005  0E03               	swapf	3,w
  3288  0006  00F0               	movwf	??_isr
  3289  0007  0804               	movf	4,w
  3290  0008  00F1               	movwf	??_isr+1
  3291  0009  080A               	movf	10,w
  3292  000A  00F2               	movwf	??_isr+2
  3293  000B  1283               	bcf	3,5	;RP0=0, select bank0
  3294  000C  1303               	bcf	3,6	;RP1=0, select bank0
  3295  000D  087F               	movf	btemp+1,w
  3296  000E  00F3               	movwf	??_isr+3
  3297  000F  120A  118A  2DB3   	ljmp	_isr


Data Sizes:
    Strings     17
    Constant    0
    Data        123
    BSS         101
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     19      76
    BANK1            80      0      52
    BANK3            96      0      32
    BANK2            96      0      80

Pointer List with Targets:

    lcdWriteString@s	PTR unsigned char  size(1) Largest target is 11
		 -> STR_3(CODE[3]), STR_2(CODE[3]), STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    _main->_lcdWriteControl
    _main->_lcdWriteData
    _setupLCD->_lcdWriteControl
    _lcdWriteToDigitBCD->_lcdWriteData
    _PathTo->___bmul
    _lcdWriteString->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_PathTo
    _setupLCD->_lcdWriteControl
    _lcdWriteToDigitBCD->_lcdWriteData
    _PathTo->_lcdWriteString
    _lcdWriteString->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    2649
                                             15 BANK0      4     4      0
                             _PathTo
                       _lcdSetCursor
                    _lcdWriteControl
                       _lcdWriteData
                     _lcdWriteString
                 _lcdWriteToDigitBCD
                           _ser_init
                           _setupADC
                           _setupLCD
                           _setupSPI
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      31
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdWriteToDigitBCD                                  12    10      2     727
                                              1 BANK0     12    10      2
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (1) _PathTo                                              12    11      1    1417
                                              3 BANK0     12    11      1
                             ___bmul
                       _lcdSetCursor
                     _lcdWriteString
 ---------------------------------------------------------------------------------
 (1) _lcdWriteString                                       2     2      0     186
                                              1 BANK0      2     2      0
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (2) _lcdWriteData                                         3     3      0      31
                                              4 COMMON     2     2      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcdSetCursor                                         1     1      0      65
                                              1 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      31
                                              4 COMMON     2     2      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     906
                                              4 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PathTo
     ___bmul
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteString
       _lcdWriteData
   _lcdSetCursor
     _lcdWriteControl
   _lcdWriteControl
   _lcdWriteData
   _lcdWriteString
     _lcdWriteData
   _lcdWriteToDigitBCD
     _lcdWriteData
   _ser_init
   _setupADC
   _setupLCD
     _lcdWriteControl
   _setupSPI

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      20       9       33.3%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      50      11       83.3%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      34       7       65.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     13      4C       5       95.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      FA      12        0.0%
ABS                  0      0      FA       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Sep 29 11:40:33 2016

                             _c 0031                               _r 0077                               _x 0058  
                             _y 003D                               pc 0002                  ___bmul@product 0059  
                   __CFG_CP$OFF 0000                              _GO 00FA                              _up 03B4  
                            fsr 0004                             l200 0353                             l202 0359  
                           l204 0362                             l160 0154                             l400 04C2  
                           l161 0156                             l162 0193                             l163 0184  
                           l165 0188                             l157 0150                             l167 018D  
                           l159 0152                             l186 034B                             l199 0370  
                           _GIE 005F                             _RB0 0030                             _RE0 0048  
                           _RE1 0049                             _RE2 004A                    __CFG_CPD$OFF 0000  
                           _isr 05B3                             fsr0 0004                             indf 0000  
                  __CFG_FOSC$HS 0000                  ??_lcdWriteData 0074                    __CFG_LVP$OFF 0000  
                          l2313 006B                            l2403 0249                            l2323 00A3  
                          l2307 0066                            l2421 026F                            l2405 0257  
                          l2415 026A                            l2431 0291                            l2351 0168  
                          l2319 009B                            l2441 02D9                            l2601 03CE  
                          l2435 029A                            l2427 0289                            l2603 0403  
                          l2293 0622                            l2285 054F                            l2437 02AF  
                          l2445 0303                            l2349 0158                            l2541 0472  
                          l2533 0446                            l2605 0417                            l2463 0329  
                          l2439 02C4                            l2447 0311                            l2383 01AD  
                          l2551 0496                            l2535 045C                            l2289 061C  
                          l2457 0324                            l2393 01E0                            l2561 04B5  
                          l2545 0480                            l2395 01F5                            l2547 0488  
                          l2539 046A                            l2469 0343                            l2397 020A  
                          l2389 01DB                            l2557 04A8                            l2495 036C  
                          l2399 021F                            ?_isr 0070                     _squareWalls 0110  
                          STR_1 05A2                            STR_2 05AD                            STR_3 05B0  
                          u1705 0272                            u1645 01B0                            u1655 01C3  
                          u1495 00D1                            u1775 032C                            u1947 03A6  
                          _PEIE 005E                            u1957 0420                            u1967 0430  
                          u1977 05EE                            u1987 0613                            _RCIF 0065  
                          u1997 05FF                            _TMR0 0001                            _TRMT 04C1  
                  __CFG_WRT$OFF 0000                            _radH 0036                            _radL 0037  
                          _main 0377                            _left 03B1                            _down 03B0  
                          _path 00A0                            btemp 007E                            ltemp 007E  
                          start 0012                            ttemp 007E                            wtemp 007E  
             ___bmul@multiplier 005A                           ??_isr 0070                      PathTo@loop 0066  
                         ?_main 0070                   __CFG_WDTE$OFF 0000                           i1l211 05BE  
                         _RCREG 001A                           _RCSTA 0018                           _SPBRG 0099  
                         _PORTA 0005                           _PORTC 0007                           _PORTD 0008  
                         _PORTE 0009                           _TRISA 0085                           _TRISB 0086  
                         _TRISC 0087                           _TRISD 0088                           _TRISE 0089  
                         _SSPIF 0063                           _TXREG 0019                           _TXSTA 0098  
                         _angle 0026      __end_of_lcdWriteToDigitBCD 04D3                           _right 03B3  
                         _x_int 0078                           _y_int 0079                           main@n 006B  
                __pbitbssCOMMON 03B0                  __CFG_BOREN$OFF 0000                           pclath 000A  
                         ltemp0 007E                           ltemp1 0082                           ltemp2 0086  
                         ltemp3 0080                      _LeftSpeedH 002C                      _LeftSpeedL 002D  
                         ttemp0 007E                           ttemp1 0081                           ttemp2 0084  
                         ttemp3 0087                           ttemp4 007F                           status 0003  
                         wtemp0 007E                           wtemp1 0080                           wtemp2 0082  
                         wtemp3 0084                           wtemp4 0086                           wtemp5 0088  
                         wtemp6 007F                 __initialization 0015                    __end_of_main 0438  
      __size_of_lcdWriteControl 0014                          ??_main 0068            __end_of_lcdSetCursor 0654  
              ??_lcdWriteString 005A                          _ADCON0 001F                          _ADCON1 009F  
                        _ADRESH 001E                          _ADRESL 009E                          _TMR0IE 005D  
                        _TMR0IF 005A                          _SSPCON 0014                          _SSPBUF 0013  
                __CFG_PWRTE$OFF 0000                          _PathTo 005E                          _adcRAW 0024  
                        ___bmul 0618            __end_of_lcdWriteData 0618                 lcdWriteString@s 005B  
                        _speedH 0038                          _speedL 0039                          _x_path 003B  
                        _y_path 003F                __end_of_ser_init 064B                __end_of_setupADC 05F1  
              __end_of_setupLCD 054C                __end_of_setupSPI 0585                          saved_w 007E  
       __end_of__initialization 005A             ___bmul@multiplicand 0074                  __pcstackCOMMON 0070  
                  __pidataBANK0 0585                    __pidataBANK1 05C9                    __pidataBANK2 04D3  
                PathTo@x_target 0064                  PathTo@y_target 005C               ??_lcdWriteControl 0074  
                    __pbssBANK0 0020                      __pbssBANK1 00A0                      __pbssBANK3 0190  
             _pathCountShortest 0057             lcdSetCursor@address 005A                         ?_PathTo 005C  
                    __pmaintext 0377                         ?___bmul 0074                      __pintentry 0004  
         __size_of_lcdSetCursor 0009                     _RightSpeedH 002F                     _RightSpeedL 0030  
                       _SSPSTAT 0094                      __stringtab 059C           __size_of_lcdWriteData 0013  
                  _lcdSetCursor 064B              _lcdWriteToDigitBCD 0438                       ?_ser_init 0070  
               __size_of_PathTo 0319                       ?_setupADC 0070                       ?_setupLCD 0070  
                     ?_setupSPI 0070                 __size_of___bmul 0013             ?_lcdWriteToDigitBCD 005A  
                       __ptext1 056C                         __ptext2 0523                         __ptext3 05DD  
                       __ptext4 063C                         __ptext5 0438                         __ptext6 005E  
                       __ptext7 054C                         __ptext8 0605                         __ptext9 064B  
                  __size_of_isr 0016                         _lowByte 0033                _orientation_path 0034  
                       clrloop0 0655                    _lcdWriteData 0605            end_of_initialization 005A  
          ??_lcdWriteToDigitBCD 0076                      _reset_flag 03B2                      ??_ser_init 0074  
                    ??_setupADC 0074                      ??_setupLCD 0076                      ??_setupSPI 0074  
                    _time_count 002A                  __end_of_PathTo 0377                       PathTo@sum 0065  
                __end_of___bmul 062B                 _lcdWriteControl 05F1        _intersection_Orientation 0032  
           start_initialization 0015                     __end_of_isr 05C9         __size_of_lcdWriteString 0020  
                      ??_PathTo 005D                        ??___bmul 0075                      init_fetch0 062B  
                   __pdataBANK0 0042                     __pdataBANK1 00C0                     __pdataBANK2 0110  
                   __pbssCOMMON 0077                       ___latbits 0002                   __pcstackBANK0 0059  
       __end_of_lcdWriteControl 0605               __size_of_ser_init 000F               __size_of_setupADC 0014  
             __size_of_setupLCD 0029               __size_of_setupSPI 0019                       __pstrings 059C  
                     _pathCount 0035         lcdWriteControl@databyte 0059               interrupt_function 0004  
                     clear_ram0 0654                   _VelocityRight 0022                     __stringbase 05A1  
          lcdWriteData@databyte 0059     __size_of_lcdWriteToDigitBCD 009B                  _lcdWriteString 054C  
              ?_lcdWriteControl 0070                 _mazeGridDefault 00C0              __end_of__stringtab 05A2  
lcdWriteToDigitBCD@TenThouDigit 0062                        __ptext10 05F1                        __ptext11 0618  
                      __ptext12 05B3                        _highByte 0041          __end_of_lcdWriteString 056C  
                      _distance 0028                        _mazeGrid 0042                   __size_of_main 00C1  
                      _ser_init 063C                        _setupADC 05DD                        _setupLCD 0523  
                      _setupSPI 056C     lcdWriteToDigitBCD@HunsDigit 005E                        _x_target 003C  
                    _PB8Counter 002E                        _x_origin 003A                        _y_target 0040  
                      _y_origin 003E                    _VelocityLeft 0020     lcdWriteToDigitBCD@OnesDigit 0064  
   lcdWriteToDigitBCD@TensDigit 005C     lcdWriteToDigitBCD@ThouDigit 0060                        init_ram0 062F  
               ?_lcdWriteString 0070                        intlevel1 0000                   ?_lcdSetCursor 0070  
                     stringcode 059C                     _orientation 0056                      _OPTION_REG 0081  
                 _shortest_path 0190                        stringdir 059C                        stringtab 059C  
                 ?_lcdWriteData 0070          lcdWriteToDigitBCD@data 005A                  ??_lcdSetCursor 0076  
